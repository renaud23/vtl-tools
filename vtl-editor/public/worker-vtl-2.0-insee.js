/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/antlr4/BufferedTokenStream.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/BufferedTokenStream.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// This implementation of {@link TokenStream} loads tokens from a\n// {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n// access to any previous token by index.\n//\n// <p>\n// This token stream ignores the value of {@link Token//getChannel}. If your\n// parser requires the token stream filter tokens to only those on a particular\n// channel, such as {@link Token//DEFAULT_CHANNEL} or\n// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n// {@link CommonTokenStream}.</p>\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/Lexer.js\").Lexer;\n\nvar Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval; // this is just to keep meaningful parameter types to Parser\n\n\nfunction TokenStream() {\n  return this;\n}\n\nfunction BufferedTokenStream(tokenSource) {\n  TokenStream.call(this); // The {@link TokenSource} from which tokens for this stream are fetched.\n\n  this.tokenSource = tokenSource; // A collection of all tokens fetched from the token source. The list is\n  // considered a complete view of the input once {@link //fetchedEOF} is set\n  // to {@code true}.\n\n  this.tokens = []; // The index into {@link //tokens} of the current token (next token to\n  // {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n  // be\n  // {@link //LT LT(1)}.\n  //\n  // <p>This field is set to -1 when the stream is first constructed or when\n  // {@link //setTokenSource} is called, indicating that the first token has\n  // not yet been fetched from the token source. For additional information,\n  // see the documentation of {@link IntStream} for a description of\n  // Initializing Methods.</p>\n\n  this.index = -1; // Indicates whether the {@link Token//EOF} token has been fetched from\n  // {@link //tokenSource} and added to {@link //tokens}. This field improves\n  // performance for the following cases:\n  //\n  // <ul>\n  // <li>{@link //consume}: The lookahead check in {@link //consume} to\n  // prevent\n  // consuming the EOF symbol is optimized by checking the values of\n  // {@link //fetchedEOF} and {@link //p} instead of calling {@link\n  // //LA}.</li>\n  // <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n  // into\n  // {@link //tokens} is trivial with this field.</li>\n  // <ul>\n\n  this.fetchedEOF = false;\n  return this;\n}\n\nBufferedTokenStream.prototype = Object.create(TokenStream.prototype);\nBufferedTokenStream.prototype.constructor = BufferedTokenStream;\n\nBufferedTokenStream.prototype.mark = function () {\n  return 0;\n};\n\nBufferedTokenStream.prototype.release = function (marker) {// no resources to release\n};\n\nBufferedTokenStream.prototype.reset = function () {\n  this.seek(0);\n};\n\nBufferedTokenStream.prototype.seek = function (index) {\n  this.lazyInit();\n  this.index = this.adjustSeekIndex(index);\n};\n\nBufferedTokenStream.prototype.get = function (index) {\n  this.lazyInit();\n  return this.tokens[index];\n};\n\nBufferedTokenStream.prototype.consume = function () {\n  var skipEofCheck = false;\n\n  if (this.index >= 0) {\n    if (this.fetchedEOF) {\n      // the last token in tokens is EOF. skip check if p indexes any\n      // fetched token except the last.\n      skipEofCheck = this.index < this.tokens.length - 1;\n    } else {\n      // no EOF token in tokens. skip check if p indexes a fetched token.\n      skipEofCheck = this.index < this.tokens.length;\n    }\n  } else {\n    // not yet initialized\n    skipEofCheck = false;\n  }\n\n  if (!skipEofCheck && this.LA(1) === Token.EOF) {\n    throw \"cannot consume EOF\";\n  }\n\n  if (this.sync(this.index + 1)) {\n    this.index = this.adjustSeekIndex(this.index + 1);\n  }\n}; // Make sure index {@code i} in tokens has a token.\n//\n// @return {@code true} if a token is located at index {@code i}, otherwise\n// {@code false}.\n// @see //get(int i)\n// /\n\n\nBufferedTokenStream.prototype.sync = function (i) {\n  var n = i - this.tokens.length + 1; // how many more elements we need?\n\n  if (n > 0) {\n    var fetched = this.fetch(n);\n    return fetched >= n;\n  }\n\n  return true;\n}; // Add {@code n} elements to buffer.\n//\n// @return The actual number of elements added to the buffer.\n// /\n\n\nBufferedTokenStream.prototype.fetch = function (n) {\n  if (this.fetchedEOF) {\n    return 0;\n  }\n\n  for (var i = 0; i < n; i++) {\n    var t = this.tokenSource.nextToken();\n    t.tokenIndex = this.tokens.length;\n    this.tokens.push(t);\n\n    if (t.type === Token.EOF) {\n      this.fetchedEOF = true;\n      return i + 1;\n    }\n  }\n\n  return n;\n}; // Get all tokens from start..stop inclusively///\n\n\nBufferedTokenStream.prototype.getTokens = function (start, stop, types) {\n  if (types === undefined) {\n    types = null;\n  }\n\n  if (start < 0 || stop < 0) {\n    return null;\n  }\n\n  this.lazyInit();\n  var subset = [];\n\n  if (stop >= this.tokens.length) {\n    stop = this.tokens.length - 1;\n  }\n\n  for (var i = start; i < stop; i++) {\n    var t = this.tokens[i];\n\n    if (t.type === Token.EOF) {\n      break;\n    }\n\n    if (types === null || types.contains(t.type)) {\n      subset.push(t);\n    }\n  }\n\n  return subset;\n};\n\nBufferedTokenStream.prototype.LA = function (i) {\n  return this.LT(i).type;\n};\n\nBufferedTokenStream.prototype.LB = function (k) {\n  if (this.index - k < 0) {\n    return null;\n  }\n\n  return this.tokens[this.index - k];\n};\n\nBufferedTokenStream.prototype.LT = function (k) {\n  this.lazyInit();\n\n  if (k === 0) {\n    return null;\n  }\n\n  if (k < 0) {\n    return this.LB(-k);\n  }\n\n  var i = this.index + k - 1;\n  this.sync(i);\n\n  if (i >= this.tokens.length) {\n    // return EOF token\n    // EOF must be last token\n    return this.tokens[this.tokens.length - 1];\n  }\n\n  return this.tokens[i];\n}; // Allowed derived classes to modify the behavior of operations which change\n// the current stream position by adjusting the target token index of a seek\n// operation. The default implementation simply returns {@code i}. If an\n// exception is thrown in this method, the current stream index should not be\n// changed.\n//\n// <p>For example, {@link CommonTokenStream} overrides this method to ensure\n// that\n// the seek target is always an on-channel token.</p>\n//\n// @param i The target token index.\n// @return The adjusted target token index.\n\n\nBufferedTokenStream.prototype.adjustSeekIndex = function (i) {\n  return i;\n};\n\nBufferedTokenStream.prototype.lazyInit = function () {\n  if (this.index === -1) {\n    this.setup();\n  }\n};\n\nBufferedTokenStream.prototype.setup = function () {\n  this.sync(0);\n  this.index = this.adjustSeekIndex(0);\n}; // Reset this token stream by setting its token source.///\n\n\nBufferedTokenStream.prototype.setTokenSource = function (tokenSource) {\n  this.tokenSource = tokenSource;\n  this.tokens = [];\n  this.index = -1;\n  this.fetchedEOF = false;\n}; // Given a starting index, return the index of the next token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and EOF.\n// /\n\n\nBufferedTokenStream.prototype.nextTokenOnChannel = function (i, channel) {\n  this.sync(i);\n\n  if (i >= this.tokens.length) {\n    return -1;\n  }\n\n  var token = this.tokens[i];\n\n  while (token.channel !== this.channel) {\n    if (token.type === Token.EOF) {\n      return -1;\n    }\n\n    i += 1;\n    this.sync(i);\n    token = this.tokens[i];\n  }\n\n  return i;\n}; // Given a starting index, return the index of the previous token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and 0.\n\n\nBufferedTokenStream.prototype.previousTokenOnChannel = function (i, channel) {\n  while (i >= 0 && this.tokens[i].channel !== channel) {\n    i -= 1;\n  }\n\n  return i;\n}; // Collect all tokens on specified channel to the right of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n// EOF. If channel is -1, find any non default channel token.\n\n\nBufferedTokenStream.prototype.getHiddenTokensToRight = function (tokenIndex, channel) {\n  if (channel === undefined) {\n    channel = -1;\n  }\n\n  this.lazyInit();\n\n  if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n    throw \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n  }\n\n  var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n  var from_ = tokenIndex + 1; // if none onchannel to right, nextOnChannel=-1 so set to = last token\n\n  var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n  return this.filterForChannel(from_, to, channel);\n}; // Collect all tokens on specified channel to the left of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n// If channel is -1, find any non default channel token.\n\n\nBufferedTokenStream.prototype.getHiddenTokensToLeft = function (tokenIndex, channel) {\n  if (channel === undefined) {\n    channel = -1;\n  }\n\n  this.lazyInit();\n\n  if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n    throw \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n  }\n\n  var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\n  if (prevOnChannel === tokenIndex - 1) {\n    return null;\n  } // if none on channel to left, prevOnChannel=-1 then from=0\n\n\n  var from_ = prevOnChannel + 1;\n  var to = tokenIndex - 1;\n  return this.filterForChannel(from_, to, channel);\n};\n\nBufferedTokenStream.prototype.filterForChannel = function (left, right, channel) {\n  var hidden = [];\n\n  for (var i = left; i < right + 1; i++) {\n    var t = this.tokens[i];\n\n    if (channel === -1) {\n      if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n        hidden.push(t);\n      }\n    } else if (t.channel === channel) {\n      hidden.push(t);\n    }\n  }\n\n  if (hidden.length === 0) {\n    return null;\n  }\n\n  return hidden;\n};\n\nBufferedTokenStream.prototype.getSourceName = function () {\n  return this.tokenSource.getSourceName();\n}; // Get the text of all tokens in this buffer.///\n\n\nBufferedTokenStream.prototype.getText = function (interval) {\n  this.lazyInit();\n  this.fill();\n\n  if (interval === undefined || interval === null) {\n    interval = new Interval(0, this.tokens.length - 1);\n  }\n\n  var start = interval.start;\n\n  if (start instanceof Token) {\n    start = start.tokenIndex;\n  }\n\n  var stop = interval.stop;\n\n  if (stop instanceof Token) {\n    stop = stop.tokenIndex;\n  }\n\n  if (start === null || stop === null || start < 0 || stop < 0) {\n    return \"\";\n  }\n\n  if (stop >= this.tokens.length) {\n    stop = this.tokens.length - 1;\n  }\n\n  var s = \"\";\n\n  for (var i = start; i < stop + 1; i++) {\n    var t = this.tokens[i];\n\n    if (t.type === Token.EOF) {\n      break;\n    }\n\n    s = s + t.text;\n  }\n\n  return s;\n}; // Get all tokens from lexer until EOF///\n\n\nBufferedTokenStream.prototype.fill = function () {\n  this.lazyInit();\n\n  while (this.fetch(1000) === 1000) {\n    continue;\n  }\n};\n\nexports.BufferedTokenStream = BufferedTokenStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/BufferedTokenStream.js\n");

/***/ }),

/***/ "./node_modules/antlr4/CharStreams.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/CharStreams.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nvar InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/InputStream.js\").InputStream;\n\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\") : null; // Utility functions to create InputStreams from various sources.\n//\n// All returned InputStreams support the full range of Unicode\n// up to U+10FFFF (the default behavior of InputStream only supports\n// code points up to U+FFFF).\n\nvar CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function fromString(str) {\n    return new InputStream(str, true);\n  },\n  // Asynchronously creates an InputStream from a blob given the\n  // encoding of the bytes in that blob (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes onLoad(result) on success, onError(error) on\n  // failure.\n  fromBlob: function fromBlob(blob, encoding, onLoad, onError) {\n    var reader = FileReader();\n\n    reader.onload = function (e) {\n      var is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n  // Creates an InputStream from a Buffer given the\n  // encoding of the bytes in that buffer (defaults to 'utf8' if\n  // encoding is null).\n  fromBuffer: function fromBuffer(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n  // Asynchronously creates an InputStream from a file on disk given\n  // the encoding of the bytes in that file (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes callback(error, result) on completion.\n  fromPath: function fromPath(path, encoding, callback) {\n    fs.readFile(path, encoding, function (err, data) {\n      var is = null;\n\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n\n      callback(err, is);\n    });\n  },\n  // Synchronously creates an InputStream given a path to a file\n  // on disk and the encoding of the bytes in that file (defaults to\n  // 'utf8' if encoding is null).\n  fromPathSync: function fromPathSync(path, encoding) {\n    var data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\nexports.CharStreams = CharStreams;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L0NoYXJTdHJlYW1zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9DaGFyU3RyZWFtcy5qcz8wMTU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vL1xuXG52YXIgSW5wdXRTdHJlYW0gPSByZXF1aXJlKCcuL0lucHV0U3RyZWFtJykuSW5wdXRTdHJlYW07XG5cbnZhciBpc05vZGVKcyA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzID09PSAndW5kZWZpbmVkJztcbnZhciBmcyA9IGlzTm9kZUpzID8gcmVxdWlyZShcImZzXCIpIDogbnVsbDtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbnMgdG8gY3JlYXRlIElucHV0U3RyZWFtcyBmcm9tIHZhcmlvdXMgc291cmNlcy5cbi8vXG4vLyBBbGwgcmV0dXJuZWQgSW5wdXRTdHJlYW1zIHN1cHBvcnQgdGhlIGZ1bGwgcmFuZ2Ugb2YgVW5pY29kZVxuLy8gdXAgdG8gVSsxMEZGRkYgKHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIElucHV0U3RyZWFtIG9ubHkgc3VwcG9ydHNcbi8vIGNvZGUgcG9pbnRzIHVwIHRvIFUrRkZGRikuXG52YXIgQ2hhclN0cmVhbXMgPSB7XG4gIC8vIENyZWF0ZXMgYW4gSW5wdXRTdHJlYW0gZnJvbSBhIHN0cmluZy5cbiAgZnJvbVN0cmluZzogZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dFN0cmVhbShzdHIsIHRydWUpO1xuICB9LFxuXG4gIC8vIEFzeW5jaHJvbm91c2x5IGNyZWF0ZXMgYW4gSW5wdXRTdHJlYW0gZnJvbSBhIGJsb2IgZ2l2ZW4gdGhlXG4gIC8vIGVuY29kaW5nIG9mIHRoZSBieXRlcyBpbiB0aGF0IGJsb2IgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAvLyBlbmNvZGluZyBpcyBudWxsKS5cbiAgLy9cbiAgLy8gSW52b2tlcyBvbkxvYWQocmVzdWx0KSBvbiBzdWNjZXNzLCBvbkVycm9yKGVycm9yKSBvblxuICAvLyBmYWlsdXJlLlxuICBmcm9tQmxvYjogZnVuY3Rpb24oYmxvYiwgZW5jb2RpbmcsIG9uTG9hZCwgb25FcnJvcikge1xuICAgIHZhciByZWFkZXIgPSBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBpcyA9IG5ldyBJbnB1dFN0cmVhbShlLnRhcmdldC5yZXN1bHQsIHRydWUpO1xuICAgICAgb25Mb2FkKGlzKTtcbiAgICB9O1xuICAgIHJlYWRlci5vbmVycm9yID0gb25FcnJvcjtcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iLCBlbmNvZGluZyk7XG4gIH0sXG5cbiAgLy8gQ3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBmcm9tIGEgQnVmZmVyIGdpdmVuIHRoZVxuICAvLyBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBidWZmZXIgKGRlZmF1bHRzIHRvICd1dGY4JyBpZlxuICAvLyBlbmNvZGluZyBpcyBudWxsKS5cbiAgZnJvbUJ1ZmZlcjogZnVuY3Rpb24oYnVmZmVyLCBlbmNvZGluZykge1xuICAgIHJldHVybiBuZXcgSW5wdXRTdHJlYW0oYnVmZmVyLnRvU3RyaW5nKGVuY29kaW5nKSwgdHJ1ZSk7XG4gIH0sXG5cbiAgLy8gQXN5bmNocm9ub3VzbHkgY3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBmcm9tIGEgZmlsZSBvbiBkaXNrIGdpdmVuXG4gIC8vIHRoZSBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBmaWxlIChkZWZhdWx0cyB0byAndXRmOCcgaWZcbiAgLy8gZW5jb2RpbmcgaXMgbnVsbCkuXG4gIC8vXG4gIC8vIEludm9rZXMgY2FsbGJhY2soZXJyb3IsIHJlc3VsdCkgb24gY29tcGxldGlvbi5cbiAgZnJvbVBhdGg6IGZ1bmN0aW9uKHBhdGgsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIGZzLnJlYWRGaWxlKHBhdGgsIGVuY29kaW5nLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIHZhciBpcyA9IG51bGw7XG4gICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICBpcyA9IG5ldyBJbnB1dFN0cmVhbShkYXRhLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGVyciwgaXMpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8vIFN5bmNocm9ub3VzbHkgY3JlYXRlcyBhbiBJbnB1dFN0cmVhbSBnaXZlbiBhIHBhdGggdG8gYSBmaWxlXG4gIC8vIG9uIGRpc2sgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgYnl0ZXMgaW4gdGhhdCBmaWxlIChkZWZhdWx0cyB0b1xuICAvLyAndXRmOCcgaWYgZW5jb2RpbmcgaXMgbnVsbCkuXG4gIGZyb21QYXRoU3luYzogZnVuY3Rpb24ocGF0aCwgZW5jb2RpbmcpIHtcbiAgICB2YXIgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLCBlbmNvZGluZyk7XG4gICAgcmV0dXJuIG5ldyBJbnB1dFN0cmVhbShkYXRhLCB0cnVlKTtcbiAgfVxufTtcblxuZXhwb3J0cy5DaGFyU3RyZWFtcyA9IENoYXJTdHJlYW1zO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWxEQTtBQXFEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/CharStreams.js\n");

/***/ }),

/***/ "./node_modules/antlr4/CommonTokenFactory.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenFactory.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This default implementation of {@link TokenFactory} creates\n// {@link CommonToken} objects.\n//\nvar CommonToken = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").CommonToken;\n\nfunction TokenFactory() {\n  return this;\n}\n\nfunction CommonTokenFactory(copyText) {\n  TokenFactory.call(this); // Indicates whether {@link CommonToken//setText} should be called after\n  // constructing tokens to explicitly set the text. This is useful for cases\n  // where the input stream might not be able to provide arbitrary substrings\n  // of text from the input after the lexer creates a token (e.g. the\n  // implementation of {@link CharStream//getText} in\n  // {@link UnbufferedCharStream} throws an\n  // {@link UnsupportedOperationException}). Explicitly setting the token text\n  // allows {@link Token//getText} to be called at any time regardless of the\n  // input stream implementation.\n  //\n  // <p>\n  // The default value is {@code false} to avoid the performance and memory\n  // overhead of copying text for every token unless explicitly requested.</p>\n  //\n\n  this.copyText = copyText === undefined ? false : copyText;\n  return this;\n}\n\nCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\nCommonTokenFactory.prototype.constructor = CommonTokenFactory; //\n// The default {@link CommonTokenFactory} instance.\n//\n// <p>\n// This token factory does not explicitly copy token text when constructing\n// tokens.</p>\n//\n\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nCommonTokenFactory.prototype.create = function (source, type, text, channel, start, stop, line, column) {\n  var t = new CommonToken(source, type, channel, start, stop);\n  t.line = line;\n  t.column = column;\n\n  if (text !== null) {\n    t.text = text;\n  } else if (this.copyText && source[1] !== null) {\n    t.text = source[1].getText(start, stop);\n  }\n\n  return t;\n};\n\nCommonTokenFactory.prototype.createThin = function (type, text) {\n  var t = new CommonToken(null, type);\n  t.text = text;\n  return t;\n};\n\nexports.CommonTokenFactory = CommonTokenFactory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L0NvbW1vblRva2VuRmFjdG9yeS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRscjQvQ29tbW9uVG9rZW5GYWN0b3J5LmpzPzViZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vXG5cbi8vXG4vLyBUaGlzIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFRva2VuRmFjdG9yeX0gY3JlYXRlc1xuLy8ge0BsaW5rIENvbW1vblRva2VufSBvYmplY3RzLlxuLy9cblxudmFyIENvbW1vblRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLkNvbW1vblRva2VuO1xuXG5mdW5jdGlvbiBUb2tlbkZhY3RvcnkoKSB7XG5cdHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBDb21tb25Ub2tlbkZhY3RvcnkoY29weVRleHQpIHtcblx0VG9rZW5GYWN0b3J5LmNhbGwodGhpcyk7XG4gICAgLy8gSW5kaWNhdGVzIHdoZXRoZXIge0BsaW5rIENvbW1vblRva2VuLy9zZXRUZXh0fSBzaG91bGQgYmUgY2FsbGVkIGFmdGVyXG4gICAgLy8gY29uc3RydWN0aW5nIHRva2VucyB0byBleHBsaWNpdGx5IHNldCB0aGUgdGV4dC4gVGhpcyBpcyB1c2VmdWwgZm9yIGNhc2VzXG4gICAgLy8gd2hlcmUgdGhlIGlucHV0IHN0cmVhbSBtaWdodCBub3QgYmUgYWJsZSB0byBwcm92aWRlIGFyYml0cmFyeSBzdWJzdHJpbmdzXG4gICAgLy8gb2YgdGV4dCBmcm9tIHRoZSBpbnB1dCBhZnRlciB0aGUgbGV4ZXIgY3JlYXRlcyBhIHRva2VuIChlLmcuIHRoZVxuICAgIC8vIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBDaGFyU3RyZWFtLy9nZXRUZXh0fSBpblxuICAgIC8vIHtAbGluayBVbmJ1ZmZlcmVkQ2hhclN0cmVhbX0gdGhyb3dzIGFuXG4gICAgLy8ge0BsaW5rIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9ufSkuIEV4cGxpY2l0bHkgc2V0dGluZyB0aGUgdG9rZW4gdGV4dFxuICAgIC8vIGFsbG93cyB7QGxpbmsgVG9rZW4vL2dldFRleHR9IHRvIGJlIGNhbGxlZCBhdCBhbnkgdGltZSByZWdhcmRsZXNzIG9mIHRoZVxuICAgIC8vIGlucHV0IHN0cmVhbSBpbXBsZW1lbnRhdGlvbi5cbiAgICAvL1xuICAgIC8vIDxwPlxuICAgIC8vIFRoZSBkZWZhdWx0IHZhbHVlIGlzIHtAY29kZSBmYWxzZX0gdG8gYXZvaWQgdGhlIHBlcmZvcm1hbmNlIGFuZCBtZW1vcnlcbiAgICAvLyBvdmVyaGVhZCBvZiBjb3B5aW5nIHRleHQgZm9yIGV2ZXJ5IHRva2VuIHVubGVzcyBleHBsaWNpdGx5IHJlcXVlc3RlZC48L3A+XG4gICAgLy9cbiAgICB0aGlzLmNvcHlUZXh0ID0gY29weVRleHQ9PT11bmRlZmluZWQgPyBmYWxzZSA6IGNvcHlUZXh0O1xuXHRyZXR1cm4gdGhpcztcbn1cblxuQ29tbW9uVG9rZW5GYWN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVG9rZW5GYWN0b3J5LnByb3RvdHlwZSk7XG5Db21tb25Ub2tlbkZhY3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tbW9uVG9rZW5GYWN0b3J5O1xuXG4vL1xuLy8gVGhlIGRlZmF1bHQge0BsaW5rIENvbW1vblRva2VuRmFjdG9yeX0gaW5zdGFuY2UuXG4vL1xuLy8gPHA+XG4vLyBUaGlzIHRva2VuIGZhY3RvcnkgZG9lcyBub3QgZXhwbGljaXRseSBjb3B5IHRva2VuIHRleHQgd2hlbiBjb25zdHJ1Y3Rpbmdcbi8vIHRva2Vucy48L3A+XG4vL1xuQ29tbW9uVG9rZW5GYWN0b3J5LkRFRkFVTFQgPSBuZXcgQ29tbW9uVG9rZW5GYWN0b3J5KCk7XG5cbkNvbW1vblRva2VuRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24oc291cmNlLCB0eXBlLCB0ZXh0LCBjaGFubmVsLCBzdGFydCwgc3RvcCwgbGluZSwgY29sdW1uKSB7XG4gICAgdmFyIHQgPSBuZXcgQ29tbW9uVG9rZW4oc291cmNlLCB0eXBlLCBjaGFubmVsLCBzdGFydCwgc3RvcCk7XG4gICAgdC5saW5lID0gbGluZTtcbiAgICB0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICBpZiAodGV4dCAhPT1udWxsKSB7XG4gICAgICAgIHQudGV4dCA9IHRleHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvcHlUZXh0ICYmIHNvdXJjZVsxXSAhPT1udWxsKSB7XG4gICAgICAgIHQudGV4dCA9IHNvdXJjZVsxXS5nZXRUZXh0KHN0YXJ0LHN0b3ApO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5cbkNvbW1vblRva2VuRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlVGhpbiA9IGZ1bmN0aW9uKHR5cGUsIHRleHQpIHtcbiAgICB2YXIgdCA9IG5ldyBDb21tb25Ub2tlbihudWxsLCB0eXBlKTtcbiAgICB0LnRleHQgPSB0ZXh0O1xuICAgIHJldHVybiB0O1xufTtcblxuZXhwb3J0cy5Db21tb25Ub2tlbkZhY3RvcnkgPSBDb21tb25Ub2tlbkZhY3Rvcnk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTs7OztBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/CommonTokenFactory.js\n");

/***/ }),

/***/ "./node_modules/antlr4/CommonTokenStream.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenStream.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n//\n// This class extends {@link BufferedTokenStream} with functionality to filter\n// token streams to tokens on a particular channel (tokens where\n// {@link Token//getChannel} returns a particular value).\n//\n// <p>\n// This token stream provides access to all tokens by index or when calling\n// methods like {@link //getText}. The channel filtering is only used for code\n// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n// {@link //LB}.</p>\n//\n// <p>\n// By default, tokens are placed on the default channel\n// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n// call {@link Lexer//setChannel}.\n// </p>\n//\n// <p>\n// Note: lexer rules which use the {@code ->skip} lexer command or call\n// {@link Lexer//skip} do not produce tokens at all, so input text matched by\n// such a rule will not be available as part of the token stream, regardless of\n// channel.</p>\n///\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ \"./node_modules/antlr4/BufferedTokenStream.js\").BufferedTokenStream;\n\nfunction CommonTokenStream(lexer, channel) {\n  BufferedTokenStream.call(this, lexer);\n  this.channel = channel === undefined ? Token.DEFAULT_CHANNEL : channel;\n  return this;\n}\n\nCommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);\nCommonTokenStream.prototype.constructor = CommonTokenStream;\n\nCommonTokenStream.prototype.adjustSeekIndex = function (i) {\n  return this.nextTokenOnChannel(i, this.channel);\n};\n\nCommonTokenStream.prototype.LB = function (k) {\n  if (k === 0 || this.index - k < 0) {\n    return null;\n  }\n\n  var i = this.index;\n  var n = 1; // find k good tokens looking backwards\n\n  while (n <= k) {\n    // skip off-channel tokens\n    i = this.previousTokenOnChannel(i - 1, this.channel);\n    n += 1;\n  }\n\n  if (i < 0) {\n    return null;\n  }\n\n  return this.tokens[i];\n};\n\nCommonTokenStream.prototype.LT = function (k) {\n  this.lazyInit();\n\n  if (k === 0) {\n    return null;\n  }\n\n  if (k < 0) {\n    return this.LB(-k);\n  }\n\n  var i = this.index;\n  var n = 1; // we know tokens[pos] is a good one\n  // find k good tokens\n\n  while (n < k) {\n    // skip off-channel tokens, but make sure to not look past EOF\n    if (this.sync(i + 1)) {\n      i = this.nextTokenOnChannel(i + 1, this.channel);\n    }\n\n    n += 1;\n  }\n\n  return this.tokens[i];\n}; // Count EOF just once.///\n\n\nCommonTokenStream.prototype.getNumberOfOnChannelTokens = function () {\n  var n = 0;\n  this.fill();\n\n  for (var i = 0; i < this.tokens.length; i++) {\n    var t = this.tokens[i];\n\n    if (t.channel === this.channel) {\n      n += 1;\n    }\n\n    if (t.type === Token.EOF) {\n      break;\n    }\n  }\n\n  return n;\n};\n\nexports.CommonTokenStream = CommonTokenStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L0NvbW1vblRva2VuU3RyZWFtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9Db21tb25Ub2tlblN0cmVhbS5qcz9jODQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vLy9cblxuLy9cbi8vIFRoaXMgY2xhc3MgZXh0ZW5kcyB7QGxpbmsgQnVmZmVyZWRUb2tlblN0cmVhbX0gd2l0aCBmdW5jdGlvbmFsaXR5IHRvIGZpbHRlclxuLy8gdG9rZW4gc3RyZWFtcyB0byB0b2tlbnMgb24gYSBwYXJ0aWN1bGFyIGNoYW5uZWwgKHRva2VucyB3aGVyZVxuLy8ge0BsaW5rIFRva2VuLy9nZXRDaGFubmVsfSByZXR1cm5zIGEgcGFydGljdWxhciB2YWx1ZSkuXG4vL1xuLy8gPHA+XG4vLyBUaGlzIHRva2VuIHN0cmVhbSBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIHRva2VucyBieSBpbmRleCBvciB3aGVuIGNhbGxpbmdcbi8vIG1ldGhvZHMgbGlrZSB7QGxpbmsgLy9nZXRUZXh0fS4gVGhlIGNoYW5uZWwgZmlsdGVyaW5nIGlzIG9ubHkgdXNlZCBmb3IgY29kZVxuLy8gYWNjZXNzaW5nIHRva2VucyB2aWEgdGhlIGxvb2thaGVhZCBtZXRob2RzIHtAbGluayAvL0xBfSwge0BsaW5rIC8vTFR9LCBhbmRcbi8vIHtAbGluayAvL0xCfS48L3A+XG4vL1xuLy8gPHA+XG4vLyBCeSBkZWZhdWx0LCB0b2tlbnMgYXJlIHBsYWNlZCBvbiB0aGUgZGVmYXVsdCBjaGFubmVsXG4vLyAoe0BsaW5rIFRva2VuLy9ERUZBVUxUX0NIQU5ORUx9KSwgYnV0IG1heSBiZSByZWFzc2lnbmVkIGJ5IHVzaW5nIHRoZVxuLy8ge0Bjb2RlIC0+Y2hhbm5lbChISURERU4pfSBsZXhlciBjb21tYW5kLCBvciBieSB1c2luZyBhbiBlbWJlZGRlZCBhY3Rpb24gdG9cbi8vIGNhbGwge0BsaW5rIExleGVyLy9zZXRDaGFubmVsfS5cbi8vIDwvcD5cbi8vXG4vLyA8cD5cbi8vIE5vdGU6IGxleGVyIHJ1bGVzIHdoaWNoIHVzZSB0aGUge0Bjb2RlIC0+c2tpcH0gbGV4ZXIgY29tbWFuZCBvciBjYWxsXG4vLyB7QGxpbmsgTGV4ZXIvL3NraXB9IGRvIG5vdCBwcm9kdWNlIHRva2VucyBhdCBhbGwsIHNvIGlucHV0IHRleHQgbWF0Y2hlZCBieVxuLy8gc3VjaCBhIHJ1bGUgd2lsbCBub3QgYmUgYXZhaWxhYmxlIGFzIHBhcnQgb2YgdGhlIHRva2VuIHN0cmVhbSwgcmVnYXJkbGVzcyBvZlxuLy8gY2hhbm5lbC48L3A+XG4vLy9cblxudmFyIFRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xudmFyIEJ1ZmZlcmVkVG9rZW5TdHJlYW0gPSByZXF1aXJlKCcuL0J1ZmZlcmVkVG9rZW5TdHJlYW0nKS5CdWZmZXJlZFRva2VuU3RyZWFtO1xuXG5mdW5jdGlvbiBDb21tb25Ub2tlblN0cmVhbShsZXhlciwgY2hhbm5lbCkge1xuXHRCdWZmZXJlZFRva2VuU3RyZWFtLmNhbGwodGhpcywgbGV4ZXIpO1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw9PT11bmRlZmluZWQgPyBUb2tlbi5ERUZBVUxUX0NIQU5ORUwgOiBjaGFubmVsO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5Db21tb25Ub2tlblN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlcmVkVG9rZW5TdHJlYW0ucHJvdG90eXBlKTtcbkNvbW1vblRva2VuU3RyZWFtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbW1vblRva2VuU3RyZWFtO1xuXG5Db21tb25Ub2tlblN0cmVhbS5wcm90b3R5cGUuYWRqdXN0U2Vla0luZGV4ID0gZnVuY3Rpb24oaSkge1xuICAgIHJldHVybiB0aGlzLm5leHRUb2tlbk9uQ2hhbm5lbChpLCB0aGlzLmNoYW5uZWwpO1xufTtcblxuQ29tbW9uVG9rZW5TdHJlYW0ucHJvdG90eXBlLkxCID0gZnVuY3Rpb24oaykge1xuICAgIGlmIChrPT09MCB8fCB0aGlzLmluZGV4LWs8MCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmluZGV4O1xuICAgIHZhciBuID0gMTtcbiAgICAvLyBmaW5kIGsgZ29vZCB0b2tlbnMgbG9va2luZyBiYWNrd2FyZHNcbiAgICB3aGlsZSAobiA8PSBrKSB7XG4gICAgICAgIC8vIHNraXAgb2ZmLWNoYW5uZWwgdG9rZW5zXG4gICAgICAgIGkgPSB0aGlzLnByZXZpb3VzVG9rZW5PbkNoYW5uZWwoaSAtIDEsIHRoaXMuY2hhbm5lbCk7XG4gICAgICAgIG4gKz0gMTtcbiAgICB9XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnNbaV07XG59O1xuXG5Db21tb25Ub2tlblN0cmVhbS5wcm90b3R5cGUuTFQgPSBmdW5jdGlvbihrKSB7XG4gICAgdGhpcy5sYXp5SW5pdCgpO1xuICAgIGlmIChrID09PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoayA8IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTEIoLWspO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuaW5kZXg7XG4gICAgdmFyIG4gPSAxOyAvLyB3ZSBrbm93IHRva2Vuc1twb3NdIGlzIGEgZ29vZCBvbmVcbiAgICAvLyBmaW5kIGsgZ29vZCB0b2tlbnNcbiAgICB3aGlsZSAobiA8IGspIHtcbiAgICAgICAgLy8gc2tpcCBvZmYtY2hhbm5lbCB0b2tlbnMsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGxvb2sgcGFzdCBFT0ZcbiAgICAgICAgaWYgKHRoaXMuc3luYyhpICsgMSkpIHtcbiAgICAgICAgICAgIGkgPSB0aGlzLm5leHRUb2tlbk9uQ2hhbm5lbChpICsgMSwgdGhpcy5jaGFubmVsKTtcbiAgICAgICAgfVxuICAgICAgICBuICs9IDE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1tpXTtcbn07XG5cbi8vIENvdW50IEVPRiBqdXN0IG9uY2UuLy8vXG5Db21tb25Ub2tlblN0cmVhbS5wcm90b3R5cGUuZ2V0TnVtYmVyT2ZPbkNoYW5uZWxUb2tlbnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgdGhpcy5maWxsKCk7XG4gICAgZm9yICh2YXIgaSA9MDsgaTwgdGhpcy50b2tlbnMubGVuZ3RoO2krKykge1xuICAgICAgICB2YXIgdCA9IHRoaXMudG9rZW5zW2ldO1xuICAgICAgICBpZiggdC5jaGFubmVsPT09dGhpcy5jaGFubmVsKSB7XG4gICAgICAgICAgICBuICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYoIHQudHlwZT09PVRva2VuLkVPRikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG59O1xuXG5leHBvcnRzLkNvbW1vblRva2VuU3RyZWFtID0gQ29tbW9uVG9rZW5TdHJlYW07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/CommonTokenStream.js\n");

/***/ }),

/***/ "./node_modules/antlr4/FileStream.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/FileStream.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n//  This is an InputStream that is loaded from a file all at once\n//  when you construct the object.\n//\nvar InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/InputStream.js\").InputStream;\n\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\") : null;\n\nfunction FileStream(fileName, decodeToUnicodeCodePoints) {\n  var data = fs.readFileSync(fileName, \"utf8\");\n  InputStream.call(this, data, decodeToUnicodeCodePoints);\n  this.fileName = fileName;\n  return this;\n}\n\nFileStream.prototype = Object.create(InputStream.prototype);\nFileStream.prototype.constructor = FileStream;\nexports.FileStream = FileStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L0ZpbGVTdHJlYW0uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L0ZpbGVTdHJlYW0uanM/ZTliMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy9cblxuLy9cbi8vICBUaGlzIGlzIGFuIElucHV0U3RyZWFtIHRoYXQgaXMgbG9hZGVkIGZyb20gYSBmaWxlIGFsbCBhdCBvbmNlXG4vLyAgd2hlbiB5b3UgY29uc3RydWN0IHRoZSBvYmplY3QuXG4vL1xudmFyIElucHV0U3RyZWFtID0gcmVxdWlyZSgnLi9JbnB1dFN0cmVhbScpLklucHV0U3RyZWFtO1xudmFyIGlzTm9kZUpzID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgPT09ICd1bmRlZmluZWQnO1xudmFyIGZzID0gaXNOb2RlSnMgPyByZXF1aXJlKFwiZnNcIikgOiBudWxsO1xuXG5mdW5jdGlvbiBGaWxlU3RyZWFtKGZpbGVOYW1lLCBkZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKSB7XG5cdHZhciBkYXRhID0gZnMucmVhZEZpbGVTeW5jKGZpbGVOYW1lLCBcInV0ZjhcIik7XG5cdElucHV0U3RyZWFtLmNhbGwodGhpcywgZGF0YSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyk7XG5cdHRoaXMuZmlsZU5hbWUgPSBmaWxlTmFtZTtcblx0cmV0dXJuIHRoaXM7XG59XG5cbkZpbGVTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJbnB1dFN0cmVhbS5wcm90b3R5cGUpO1xuRmlsZVN0cmVhbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGaWxlU3RyZWFtO1xuXG5leHBvcnRzLkZpbGVTdHJlYW0gPSBGaWxlU3RyZWFtO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/FileStream.js\n");

/***/ }),

/***/ "./node_modules/antlr4/InputStream.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/InputStream.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\n__webpack_require__(/*! ./polyfills/codepointat */ \"./node_modules/antlr4/polyfills/codepointat.js\");\n\n__webpack_require__(/*! ./polyfills/fromcodepoint */ \"./node_modules/antlr4/polyfills/fromcodepoint.js\"); // Vacuum all input from a string and then treat it like a buffer.\n\n\nfunction _loadString(stream) {\n  stream._index = 0;\n  stream.data = [];\n\n  if (stream.decodeToUnicodeCodePoints) {\n    for (var i = 0; i < stream.strdata.length;) {\n      var codePoint = stream.strdata.codePointAt(i);\n      stream.data.push(codePoint);\n      i += codePoint <= 0xFFFF ? 1 : 2;\n    }\n  } else {\n    for (var i = 0; i < stream.strdata.length; i++) {\n      var codeUnit = stream.strdata.charCodeAt(i);\n      stream.data.push(codeUnit);\n    }\n  }\n\n  stream._size = stream.data.length;\n} // If decodeToUnicodeCodePoints is true, the input is treated\n// as a series of Unicode code points.\n//\n// Otherwise, the input is treated as a series of 16-bit UTF-16 code\n// units.\n\n\nfunction InputStream(data, decodeToUnicodeCodePoints) {\n  this.name = \"<empty>\";\n  this.strdata = data;\n  this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\n  _loadString(this);\n\n  return this;\n}\n\nObject.defineProperty(InputStream.prototype, \"index\", {\n  get: function get() {\n    return this._index;\n  }\n});\nObject.defineProperty(InputStream.prototype, \"size\", {\n  get: function get() {\n    return this._size;\n  }\n}); // Reset the stream so that it's in the same state it was\n// when the object was created *except* the data array is not\n// touched.\n//\n\nInputStream.prototype.reset = function () {\n  this._index = 0;\n};\n\nInputStream.prototype.consume = function () {\n  if (this._index >= this._size) {\n    // assert this.LA(1) == Token.EOF\n    throw \"cannot consume EOF\";\n  }\n\n  this._index += 1;\n};\n\nInputStream.prototype.LA = function (offset) {\n  if (offset === 0) {\n    return 0; // undefined\n  }\n\n  if (offset < 0) {\n    offset += 1; // e.g., translate LA(-1) to use offset=0\n  }\n\n  var pos = this._index + offset - 1;\n\n  if (pos < 0 || pos >= this._size) {\n    // invalid\n    return Token.EOF;\n  }\n\n  return this.data[pos];\n};\n\nInputStream.prototype.LT = function (offset) {\n  return this.LA(offset);\n}; // mark/release do nothing; we have entire buffer\n\n\nInputStream.prototype.mark = function () {\n  return -1;\n};\n\nInputStream.prototype.release = function (marker) {}; // consume() ahead until p==_index; can't just set p=_index as we must\n// update line and column. If we seek backwards, just set p\n//\n\n\nInputStream.prototype.seek = function (_index) {\n  if (_index <= this._index) {\n    this._index = _index; // just jump; don't update stream state (line,\n    // ...)\n\n    return;\n  } // seek forward\n\n\n  this._index = Math.min(_index, this._size);\n};\n\nInputStream.prototype.getText = function (start, stop) {\n  if (stop >= this._size) {\n    stop = this._size - 1;\n  }\n\n  if (start >= this._size) {\n    return \"\";\n  } else {\n    if (this.decodeToUnicodeCodePoints) {\n      var result = \"\";\n\n      for (var i = start; i <= stop; i++) {\n        result += String.fromCodePoint(this.data[i]);\n      }\n\n      return result;\n    } else {\n      return this.strdata.slice(start, stop + 1);\n    }\n  }\n};\n\nInputStream.prototype.toString = function () {\n  return this.strdata;\n};\n\nexports.InputStream = InputStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L0lucHV0U3RyZWFtLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9JbnB1dFN0cmVhbS5qcz83ZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vL1xuXG52YXIgVG9rZW4gPSByZXF1aXJlKCcuL1Rva2VuJykuVG9rZW47XG5yZXF1aXJlKCcuL3BvbHlmaWxscy9jb2RlcG9pbnRhdCcpO1xucmVxdWlyZSgnLi9wb2x5ZmlsbHMvZnJvbWNvZGVwb2ludCcpO1xuXG4vLyBWYWN1dW0gYWxsIGlucHV0IGZyb20gYSBzdHJpbmcgYW5kIHRoZW4gdHJlYXQgaXQgbGlrZSBhIGJ1ZmZlci5cblxuZnVuY3Rpb24gX2xvYWRTdHJpbmcoc3RyZWFtKSB7XG5cdHN0cmVhbS5faW5kZXggPSAwO1xuXHRzdHJlYW0uZGF0YSA9IFtdO1xuXHRpZiAoc3RyZWFtLmRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0cmVhbS5zdHJkYXRhLmxlbmd0aDsgKSB7XG5cdFx0XHR2YXIgY29kZVBvaW50ID0gc3RyZWFtLnN0cmRhdGEuY29kZVBvaW50QXQoaSk7XG5cdFx0XHRzdHJlYW0uZGF0YS5wdXNoKGNvZGVQb2ludCk7XG5cdFx0XHRpICs9IGNvZGVQb2ludCA8PSAweEZGRkYgPyAxIDogMjtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHJlYW0uc3RyZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGNvZGVVbml0ID0gc3RyZWFtLnN0cmRhdGEuY2hhckNvZGVBdChpKTtcblx0XHRcdHN0cmVhbS5kYXRhLnB1c2goY29kZVVuaXQpO1xuXHRcdH1cblx0fVxuXHRzdHJlYW0uX3NpemUgPSBzdHJlYW0uZGF0YS5sZW5ndGg7XG59XG5cbi8vIElmIGRlY29kZVRvVW5pY29kZUNvZGVQb2ludHMgaXMgdHJ1ZSwgdGhlIGlucHV0IGlzIHRyZWF0ZWRcbi8vIGFzIGEgc2VyaWVzIG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4vL1xuLy8gT3RoZXJ3aXNlLCB0aGUgaW5wdXQgaXMgdHJlYXRlZCBhcyBhIHNlcmllcyBvZiAxNi1iaXQgVVRGLTE2IGNvZGVcbi8vIHVuaXRzLlxuZnVuY3Rpb24gSW5wdXRTdHJlYW0oZGF0YSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHR0aGlzLm5hbWUgPSBcIjxlbXB0eT5cIjtcblx0dGhpcy5zdHJkYXRhID0gZGF0YTtcblx0dGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzID0gZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyB8fCBmYWxzZTtcblx0X2xvYWRTdHJpbmcodGhpcyk7XG5cdHJldHVybiB0aGlzO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW5wdXRTdHJlYW0ucHJvdG90eXBlLCBcImluZGV4XCIsIHtcblx0Z2V0IDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2luZGV4O1xuXHR9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KElucHV0U3RyZWFtLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcblx0Z2V0IDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3NpemU7XG5cdH1cbn0pO1xuXG4vLyBSZXNldCB0aGUgc3RyZWFtIHNvIHRoYXQgaXQncyBpbiB0aGUgc2FtZSBzdGF0ZSBpdCB3YXNcbi8vIHdoZW4gdGhlIG9iamVjdCB3YXMgY3JlYXRlZCAqZXhjZXB0KiB0aGUgZGF0YSBhcnJheSBpcyBub3Rcbi8vIHRvdWNoZWQuXG4vL1xuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG5cdHRoaXMuX2luZGV4ID0gMDtcbn07XG5cbklucHV0U3RyZWFtLnByb3RvdHlwZS5jb25zdW1lID0gZnVuY3Rpb24oKSB7XG5cdGlmICh0aGlzLl9pbmRleCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0Ly8gYXNzZXJ0IHRoaXMuTEEoMSkgPT0gVG9rZW4uRU9GXG5cdFx0dGhyb3cgKFwiY2Fubm90IGNvbnN1bWUgRU9GXCIpO1xuXHR9XG5cdHRoaXMuX2luZGV4ICs9IDE7XG59O1xuXG5JbnB1dFN0cmVhbS5wcm90b3R5cGUuTEEgPSBmdW5jdGlvbihvZmZzZXQpIHtcblx0aWYgKG9mZnNldCA9PT0gMCkge1xuXHRcdHJldHVybiAwOyAvLyB1bmRlZmluZWRcblx0fVxuXHRpZiAob2Zmc2V0IDwgMCkge1xuXHRcdG9mZnNldCArPSAxOyAvLyBlLmcuLCB0cmFuc2xhdGUgTEEoLTEpIHRvIHVzZSBvZmZzZXQ9MFxuXHR9XG5cdHZhciBwb3MgPSB0aGlzLl9pbmRleCArIG9mZnNldCAtIDE7XG5cdGlmIChwb3MgPCAwIHx8IHBvcyA+PSB0aGlzLl9zaXplKSB7IC8vIGludmFsaWRcblx0XHRyZXR1cm4gVG9rZW4uRU9GO1xuXHR9XG5cdHJldHVybiB0aGlzLmRhdGFbcG9zXTtcbn07XG5cbklucHV0U3RyZWFtLnByb3RvdHlwZS5MVCA9IGZ1bmN0aW9uKG9mZnNldCkge1xuXHRyZXR1cm4gdGhpcy5MQShvZmZzZXQpO1xufTtcblxuLy8gbWFyay9yZWxlYXNlIGRvIG5vdGhpbmc7IHdlIGhhdmUgZW50aXJlIGJ1ZmZlclxuSW5wdXRTdHJlYW0ucHJvdG90eXBlLm1hcmsgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIC0xO1xufTtcblxuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbihtYXJrZXIpIHtcbn07XG5cbi8vIGNvbnN1bWUoKSBhaGVhZCB1bnRpbCBwPT1faW5kZXg7IGNhbid0IGp1c3Qgc2V0IHA9X2luZGV4IGFzIHdlIG11c3Rcbi8vIHVwZGF0ZSBsaW5lIGFuZCBjb2x1bW4uIElmIHdlIHNlZWsgYmFja3dhcmRzLCBqdXN0IHNldCBwXG4vL1xuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbihfaW5kZXgpIHtcblx0aWYgKF9pbmRleCA8PSB0aGlzLl9pbmRleCkge1xuXHRcdHRoaXMuX2luZGV4ID0gX2luZGV4OyAvLyBqdXN0IGp1bXA7IGRvbid0IHVwZGF0ZSBzdHJlYW0gc3RhdGUgKGxpbmUsXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uKVxuXHRcdHJldHVybjtcblx0fVxuXHQvLyBzZWVrIGZvcndhcmRcblx0dGhpcy5faW5kZXggPSBNYXRoLm1pbihfaW5kZXgsIHRoaXMuX3NpemUpO1xufTtcblxuSW5wdXRTdHJlYW0ucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbihzdGFydCwgc3RvcCkge1xuXHRpZiAoc3RvcCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0c3RvcCA9IHRoaXMuX3NpemUgLSAxO1xuXHR9XG5cdGlmIChzdGFydCA+PSB0aGlzLl9zaXplKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKHRoaXMuZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdFx0dmFyIHJlc3VsdCA9IFwiXCI7XG5cdFx0XHRmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gc3RvcDsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludCh0aGlzLmRhdGFbaV0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RyZGF0YS5zbGljZShzdGFydCwgc3RvcCArIDEpO1xuXHRcdH1cblx0fVxufTtcblxuSW5wdXRTdHJlYW0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnN0cmRhdGE7XG59O1xuXG5leHBvcnRzLklucHV0U3RyZWFtID0gSW5wdXRTdHJlYW07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTs7OztBQUlBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/InputStream.js\n");

/***/ }),

/***/ "./node_modules/antlr4/IntervalSet.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/IntervalSet.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/*jslint smarttabs:true */\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n/* stop is not included! */\n\n\nfunction Interval(start, stop) {\n  this.start = start;\n  this.stop = stop;\n  return this;\n}\n\nInterval.prototype.contains = function (item) {\n  return item >= this.start && item < this.stop;\n};\n\nInterval.prototype.toString = function () {\n  if (this.start === this.stop - 1) {\n    return this.start.toString();\n  } else {\n    return this.start.toString() + \"..\" + (this.stop - 1).toString();\n  }\n};\n\nObject.defineProperty(Interval.prototype, \"length\", {\n  get: function get() {\n    return this.stop - this.start;\n  }\n});\n\nfunction IntervalSet() {\n  this.intervals = null;\n  this.readOnly = false;\n}\n\nIntervalSet.prototype.first = function (v) {\n  if (this.intervals === null || this.intervals.length === 0) {\n    return Token.INVALID_TYPE;\n  } else {\n    return this.intervals[0].start;\n  }\n};\n\nIntervalSet.prototype.addOne = function (v) {\n  this.addInterval(new Interval(v, v + 1));\n};\n\nIntervalSet.prototype.addRange = function (l, h) {\n  this.addInterval(new Interval(l, h + 1));\n};\n\nIntervalSet.prototype.addInterval = function (v) {\n  if (this.intervals === null) {\n    this.intervals = [];\n    this.intervals.push(v);\n  } else {\n    // find insert pos\n    for (var k = 0; k < this.intervals.length; k++) {\n      var i = this.intervals[k]; // distinct range -> insert\n\n      if (v.stop < i.start) {\n        this.intervals.splice(k, 0, v);\n        return;\n      } // contiguous range -> adjust\n      else if (v.stop === i.start) {\n          this.intervals[k].start = v.start;\n          return;\n        } // overlapping range -> adjust and reduce\n        else if (v.start <= i.stop) {\n            this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n            this.reduce(k);\n            return;\n          }\n    } // greater than any existing\n\n\n    this.intervals.push(v);\n  }\n};\n\nIntervalSet.prototype.addSet = function (other) {\n  if (other.intervals !== null) {\n    for (var k = 0; k < other.intervals.length; k++) {\n      var i = other.intervals[k];\n      this.addInterval(new Interval(i.start, i.stop));\n    }\n  }\n\n  return this;\n};\n\nIntervalSet.prototype.reduce = function (k) {\n  // only need to reduce if k is not the last\n  if (k < this.intervalslength - 1) {\n    var l = this.intervals[k];\n    var r = this.intervals[k + 1]; // if r contained in l\n\n    if (l.stop >= r.stop) {\n      this.intervals.pop(k + 1);\n      this.reduce(k);\n    } else if (l.stop >= r.start) {\n      this.intervals[k] = new Interval(l.start, r.stop);\n      this.intervals.pop(k + 1);\n    }\n  }\n};\n\nIntervalSet.prototype.complement = function (start, stop) {\n  var result = new IntervalSet();\n  result.addInterval(new Interval(start, stop + 1));\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    result.removeRange(this.intervals[i]);\n  }\n\n  return result;\n};\n\nIntervalSet.prototype.contains = function (item) {\n  if (this.intervals === null) {\n    return false;\n  } else {\n    for (var k = 0; k < this.intervals.length; k++) {\n      if (this.intervals[k].contains(item)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n};\n\nObject.defineProperty(IntervalSet.prototype, \"length\", {\n  get: function get() {\n    var len = 0;\n    this.intervals.map(function (i) {\n      len += i.length;\n    });\n    return len;\n  }\n});\n\nIntervalSet.prototype.removeRange = function (v) {\n  if (v.start === v.stop - 1) {\n    this.removeOne(v.start);\n  } else if (this.intervals !== null) {\n    var k = 0;\n\n    for (var n = 0; n < this.intervals.length; n++) {\n      var i = this.intervals[k]; // intervals are ordered\n\n      if (v.stop <= i.start) {\n        return;\n      } // check for including range, split it\n      else if (v.start > i.start && v.stop < i.stop) {\n          this.intervals[k] = new Interval(i.start, v.start);\n          var x = new Interval(v.stop, i.stop);\n          this.intervals.splice(k, 0, x);\n          return;\n        } // check for included range, remove it\n        else if (v.start <= i.start && v.stop >= i.stop) {\n            this.intervals.splice(k, 1);\n            k = k - 1; // need another pass\n          } // check for lower boundary\n          else if (v.start < i.stop) {\n              this.intervals[k] = new Interval(i.start, v.start);\n            } // check for upper boundary\n            else if (v.stop < i.stop) {\n                this.intervals[k] = new Interval(v.stop, i.stop);\n              }\n\n      k += 1;\n    }\n  }\n};\n\nIntervalSet.prototype.removeOne = function (v) {\n  if (this.intervals !== null) {\n    for (var k = 0; k < this.intervals.length; k++) {\n      var i = this.intervals[k]; // intervals is ordered\n\n      if (v < i.start) {\n        return;\n      } // check for single value range\n      else if (v === i.start && v === i.stop - 1) {\n          this.intervals.splice(k, 1);\n          return;\n        } // check for lower boundary\n        else if (v === i.start) {\n            this.intervals[k] = new Interval(i.start + 1, i.stop);\n            return;\n          } // check for upper boundary\n          else if (v === i.stop - 1) {\n              this.intervals[k] = new Interval(i.start, i.stop - 1);\n              return;\n            } // split existing range\n            else if (v < i.stop - 1) {\n                var x = new Interval(i.start, v);\n                i.start = v + 1;\n                this.intervals.splice(k, 0, x);\n                return;\n              }\n    }\n  }\n};\n\nIntervalSet.prototype.toString = function (literalNames, symbolicNames, elemsAreChar) {\n  literalNames = literalNames || null;\n  symbolicNames = symbolicNames || null;\n  elemsAreChar = elemsAreChar || false;\n\n  if (this.intervals === null) {\n    return \"{}\";\n  } else if (literalNames !== null || symbolicNames !== null) {\n    return this.toTokenString(literalNames, symbolicNames);\n  } else if (elemsAreChar) {\n    return this.toCharString();\n  } else {\n    return this.toIndexString();\n  }\n};\n\nIntervalSet.prototype.toCharString = function () {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    if (v.stop === v.start + 1) {\n      if (v.start === Token.EOF) {\n        names.push(\"<EOF>\");\n      } else {\n        names.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n      }\n    } else {\n      names.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop - 1) + \"'\");\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.toIndexString = function () {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    if (v.stop === v.start + 1) {\n      if (v.start === Token.EOF) {\n        names.push(\"<EOF>\");\n      } else {\n        names.push(v.start.toString());\n      }\n    } else {\n      names.push(v.start.toString() + \"..\" + (v.stop - 1).toString());\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.toTokenString = function (literalNames, symbolicNames) {\n  var names = [];\n\n  for (var i = 0; i < this.intervals.length; i++) {\n    var v = this.intervals[i];\n\n    for (var j = v.start; j < v.stop; j++) {\n      names.push(this.elementName(literalNames, symbolicNames, j));\n    }\n  }\n\n  if (names.length > 1) {\n    return \"{\" + names.join(\", \") + \"}\";\n  } else {\n    return names[0];\n  }\n};\n\nIntervalSet.prototype.elementName = function (literalNames, symbolicNames, a) {\n  if (a === Token.EOF) {\n    return \"<EOF>\";\n  } else if (a === Token.EPSILON) {\n    return \"<EPSILON>\";\n  } else {\n    return literalNames[a] || symbolicNames[a];\n  }\n};\n\nexports.Interval = Interval;\nexports.IntervalSet = IntervalSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/IntervalSet.js\n");

/***/ }),

/***/ "./node_modules/antlr4/LL1Analyzer.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/LL1Analyzer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\nvar Set = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/Utils.js\").Set;\n\nvar BitSet = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/Utils.js\").BitSet;\n\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar ATNConfig = __webpack_require__(/*! ./atn/ATNConfig */ \"./node_modules/antlr4/atn/ATNConfig.js\").ATNConfig;\n\nvar Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar IntervalSet = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").IntervalSet;\n\nvar RuleStopState = __webpack_require__(/*! ./atn/ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").RuleStopState;\n\nvar RuleTransition = __webpack_require__(/*! ./atn/Transition */ \"./node_modules/antlr4/atn/Transition.js\").RuleTransition;\n\nvar NotSetTransition = __webpack_require__(/*! ./atn/Transition */ \"./node_modules/antlr4/atn/Transition.js\").NotSetTransition;\n\nvar WildcardTransition = __webpack_require__(/*! ./atn/Transition */ \"./node_modules/antlr4/atn/Transition.js\").WildcardTransition;\n\nvar AbstractPredicateTransition = __webpack_require__(/*! ./atn/Transition */ \"./node_modules/antlr4/atn/Transition.js\").AbstractPredicateTransition;\n\nvar pc = __webpack_require__(/*! ./PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\");\n\nvar predictionContextFromRuleContext = pc.predictionContextFromRuleContext;\nvar PredictionContext = pc.PredictionContext;\nvar SingletonPredictionContext = pc.SingletonPredictionContext;\n\nfunction LL1Analyzer(atn) {\n  this.atn = atn;\n} //* Special value added to the lookahead sets to indicate that we hit\n//  a predicate during analysis if {@code seeThruPreds==false}.\n///\n\n\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE; //*\n// Calculates the SLL(1) expected lookahead set for each outgoing transition\n// of an {@link ATNState}. The returned array has one element for each\n// outgoing transition in {@code s}. If the closure from transition\n// <em>i</em> leads to a semantic predicate before matching a symbol, the\n// element at index <em>i</em> of the result will be {@code null}.\n//\n// @param s the ATN state\n// @return the expected symbols for each outgoing transition of {@code s}.\n///\n\nLL1Analyzer.prototype.getDecisionLookahead = function (s) {\n  if (s === null) {\n    return null;\n  }\n\n  var count = s.transitions.length;\n  var look = [];\n\n  for (var alt = 0; alt < count; alt++) {\n    look[alt] = new IntervalSet();\n    var lookBusy = new Set();\n    var seeThruPreds = false; // fail to get lookahead upon pred\n\n    this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY, look[alt], lookBusy, new BitSet(), seeThruPreds, false); // Wipe out lookahead for this alternative if we found nothing\n    // or we had a predicate when we !seeThruPreds\n\n\n    if (look[alt].length === 0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n      look[alt] = null;\n    }\n  }\n\n  return look;\n}; //*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and the end of the rule containing\n// {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n// If {@code ctx} is not {@code null} and the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx the complete parser context, or {@code null} if the context\n// should be ignored\n//\n// @return The set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n///\n\n\nLL1Analyzer.prototype.LOOK = function (s, stopState, ctx) {\n  var r = new IntervalSet();\n  var seeThruPreds = true; // ignore preds; get all lookahead\n\n  ctx = ctx || null;\n  var lookContext = ctx !== null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n\n  this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n\n  return r;\n}; //*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n// rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n// {@code true} and {@code stopState} or the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state.\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx The outer context, or {@code null} if the outer context should\n// not be used.\n// @param look The result lookahead set.\n// @param lookBusy A set used for preventing epsilon closures in the ATN\n// from causing a stack overflow. Outside code should pass\n// {@code new Set<ATNConfig>} for this argument.\n// @param calledRuleStack A set used for preventing left recursion in the\n// ATN from causing a stack overflow. Outside code should pass\n// {@code new BitSet()} for this argument.\n// @param seeThruPreds {@code true} to true semantic predicates as\n// implicitly {@code true} and \"see through them\", otherwise {@code false}\n// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n// result if one is encountered.\n// @param addEOF Add {@link Token//EOF} to the result if the end of the\n// outermost context is reached. This parameter has no effect if {@code ctx}\n// is {@code null}.\n///\n\n\nLL1Analyzer.prototype._LOOK = function (s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n  var c = new ATNConfig({\n    state: s,\n    alt: 0,\n    context: ctx\n  }, null);\n\n  if (lookBusy.contains(c)) {\n    return;\n  }\n\n  lookBusy.add(c);\n\n  if (s === stopState) {\n    if (ctx === null) {\n      look.addOne(Token.EPSILON);\n      return;\n    } else if (ctx.isEmpty() && addEOF) {\n      look.addOne(Token.EOF);\n      return;\n    }\n  }\n\n  if (s instanceof RuleStopState) {\n    if (ctx === null) {\n      look.addOne(Token.EPSILON);\n      return;\n    } else if (ctx.isEmpty() && addEOF) {\n      look.addOne(Token.EOF);\n      return;\n    }\n\n    if (ctx !== PredictionContext.EMPTY) {\n      // run thru all possible stack tops in ctx\n      for (var i = 0; i < ctx.length; i++) {\n        var returnState = this.atn.states[ctx.getReturnState(i)];\n        var removed = calledRuleStack.contains(returnState.ruleIndex);\n\n        try {\n          calledRuleStack.remove(returnState.ruleIndex);\n\n          this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } finally {\n          if (removed) {\n            calledRuleStack.add(returnState.ruleIndex);\n          }\n        }\n      }\n\n      return;\n    }\n  }\n\n  for (var j = 0; j < s.transitions.length; j++) {\n    var t = s.transitions[j];\n\n    if (t.constructor === RuleTransition) {\n      if (calledRuleStack.contains(t.target.ruleIndex)) {\n        continue;\n      }\n\n      var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n\n      try {\n        calledRuleStack.add(t.target.ruleIndex);\n\n        this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n      } finally {\n        calledRuleStack.remove(t.target.ruleIndex);\n      }\n    } else if (t instanceof AbstractPredicateTransition) {\n      if (seeThruPreds) {\n        this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n      } else {\n        look.addOne(LL1Analyzer.HIT_PRED);\n      }\n    } else if (t.isEpsilon) {\n      this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n    } else if (t.constructor === WildcardTransition) {\n      look.addRange(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n    } else {\n      var set = t.label;\n\n      if (set !== null) {\n        if (t instanceof NotSetTransition) {\n          set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n        }\n\n        look.addSet(set);\n      }\n    }\n  }\n};\n\nexports.LL1Analyzer = LL1Analyzer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/LL1Analyzer.js\n");

/***/ }),

/***/ "./node_modules/antlr4/Lexer.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Lexer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// A lexer is recognizer that draws input symbols from a character stream.\n//  lexer grammars result in a subclass of this object. A Lexer object\n//  uses simplified match() and error recovery mechanisms in the interest of speed.\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Recognizer = __webpack_require__(/*! ./Recognizer */ \"./node_modules/antlr4/Recognizer.js\").Recognizer;\n\nvar CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ \"./node_modules/antlr4/CommonTokenFactory.js\").CommonTokenFactory;\n\nvar RecognitionException = __webpack_require__(/*! ./error/Errors */ \"./node_modules/antlr4/error/Errors.js\").RecognitionException;\n\nvar LexerNoViableAltException = __webpack_require__(/*! ./error/Errors */ \"./node_modules/antlr4/error/Errors.js\").LexerNoViableAltException;\n\nfunction TokenSource() {\n  return this;\n}\n\nfunction Lexer(input) {\n  Recognizer.call(this);\n  this._input = input;\n  this._factory = CommonTokenFactory.DEFAULT;\n  this._tokenFactorySourcePair = [this, input];\n  this._interp = null; // child classes must populate this\n  // The goal of all lexer rules/methods is to create a token object.\n  // this is an instance variable as multiple rules may collaborate to\n  // create a single token. nextToken will return this object after\n  // matching lexer rule(s). If you subclass to allow multiple token\n  // emissions, then set this to the last token to be matched or\n  // something nonnull so that the auto token emit mechanism will not\n  // emit another token.\n\n  this._token = null; // What character index in the stream did the current token start at?\n  // Needed, for example, to get the text for current token. Set at\n  // the start of nextToken.\n\n  this._tokenStartCharIndex = -1; // The line on which the first character of the token resides///\n\n  this._tokenStartLine = -1; // The character position of first character within the line///\n\n  this._tokenStartColumn = -1; // Once we see EOF on char stream, next token will be EOF.\n  // If you have DONE : EOF ; then you see DONE EOF.\n\n  this._hitEOF = false; // The channel number for the current token///\n\n  this._channel = Token.DEFAULT_CHANNEL; // The token type for the current token///\n\n  this._type = Token.INVALID_TYPE;\n  this._modeStack = [];\n  this._mode = Lexer.DEFAULT_MODE; // You can set the text for the current token to override what is in\n  // the input char buffer. Use setText() or can set this instance var.\n  // /\n\n  this._text = null;\n  return this;\n}\n\nLexer.prototype = Object.create(Recognizer.prototype);\nLexer.prototype.constructor = Lexer;\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\nLexer.prototype.reset = function () {\n  // wack Lexer state variables\n  if (this._input !== null) {\n    this._input.seek(0); // rewind the input\n\n  }\n\n  this._token = null;\n  this._type = Token.INVALID_TYPE;\n  this._channel = Token.DEFAULT_CHANNEL;\n  this._tokenStartCharIndex = -1;\n  this._tokenStartColumn = -1;\n  this._tokenStartLine = -1;\n  this._text = null;\n  this._hitEOF = false;\n  this._mode = Lexer.DEFAULT_MODE;\n  this._modeStack = [];\n\n  this._interp.reset();\n}; // Return a token from this source; i.e., match a token on the char stream.\n\n\nLexer.prototype.nextToken = function () {\n  if (this._input === null) {\n    throw \"nextToken requires a non-null input stream.\";\n  } // Mark start location in char stream so unbuffered streams are\n  // guaranteed at least have text of current token\n\n\n  var tokenStartMarker = this._input.mark();\n\n  try {\n    while (true) {\n      if (this._hitEOF) {\n        this.emitEOF();\n        return this._token;\n      }\n\n      this._token = null;\n      this._channel = Token.DEFAULT_CHANNEL;\n      this._tokenStartCharIndex = this._input.index;\n      this._tokenStartColumn = this._interp.column;\n      this._tokenStartLine = this._interp.line;\n      this._text = null;\n      var continueOuter = false;\n\n      while (true) {\n        this._type = Token.INVALID_TYPE;\n        var ttype = Lexer.SKIP;\n\n        try {\n          ttype = this._interp.match(this._input, this._mode);\n        } catch (e) {\n          if (e instanceof RecognitionException) {\n            this.notifyListeners(e); // report error\n\n            this.recover(e);\n          } else {\n            console.log(e.stack);\n            throw e;\n          }\n        }\n\n        if (this._input.LA(1) === Token.EOF) {\n          this._hitEOF = true;\n        }\n\n        if (this._type === Token.INVALID_TYPE) {\n          this._type = ttype;\n        }\n\n        if (this._type === Lexer.SKIP) {\n          continueOuter = true;\n          break;\n        }\n\n        if (this._type !== Lexer.MORE) {\n          break;\n        }\n      }\n\n      if (continueOuter) {\n        continue;\n      }\n\n      if (this._token === null) {\n        this.emit();\n      }\n\n      return this._token;\n    }\n  } finally {\n    // make sure we release marker after match or\n    // unbuffered char stream will keep buffering\n    this._input.release(tokenStartMarker);\n  }\n}; // Instruct the lexer to skip creating a token for current lexer rule\n// and look for another token. nextToken() knows to keep looking when\n// a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n// if token==null at end of any token rule, it creates one for you\n// and emits it.\n// /\n\n\nLexer.prototype.skip = function () {\n  this._type = Lexer.SKIP;\n};\n\nLexer.prototype.more = function () {\n  this._type = Lexer.MORE;\n};\n\nLexer.prototype.mode = function (m) {\n  this._mode = m;\n};\n\nLexer.prototype.pushMode = function (m) {\n  if (this._interp.debug) {\n    console.log(\"pushMode \" + m);\n  }\n\n  this._modeStack.push(this._mode);\n\n  this.mode(m);\n};\n\nLexer.prototype.popMode = function () {\n  if (this._modeStack.length === 0) {\n    throw \"Empty Stack\";\n  }\n\n  if (this._interp.debug) {\n    console.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n  }\n\n  this.mode(this._modeStack.pop());\n  return this._mode;\n}; // Set the char stream and reset the lexer\n\n\nObject.defineProperty(Lexer.prototype, \"inputStream\", {\n  get: function get() {\n    return this._input;\n  },\n  set: function set(input) {\n    this._input = null;\n    this._tokenFactorySourcePair = [this, this._input];\n    this.reset();\n    this._input = input;\n    this._tokenFactorySourcePair = [this, this._input];\n  }\n});\nObject.defineProperty(Lexer.prototype, \"sourceName\", {\n  get: function sourceName() {\n    return this._input.sourceName;\n  }\n}); // By default does not support multiple emits per nextToken invocation\n// for efficiency reasons. Subclass and override this method, nextToken,\n// and getToken (to push tokens into a list and pull from that list\n// rather than a single variable as this implementation does).\n// /\n\nLexer.prototype.emitToken = function (token) {\n  this._token = token;\n}; // The standard method called to automatically emit a token at the\n// outermost lexical rule. The token object should point into the\n// char buffer start..stop. If there is a text override in 'text',\n// use that to set the token's text. Override this method to emit\n// custom Token objects or provide a new factory.\n// /\n\n\nLexer.prototype.emit = function () {\n  var t = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.getCharIndex() - 1, this._tokenStartLine, this._tokenStartColumn);\n\n  this.emitToken(t);\n  return t;\n};\n\nLexer.prototype.emitEOF = function () {\n  var cpos = this.column;\n  var lpos = this.line;\n\n  var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, lpos, cpos);\n\n  this.emitToken(eof);\n  return eof;\n};\n\nObject.defineProperty(Lexer.prototype, \"type\", {\n  get: function get() {\n    return this.type;\n  },\n  set: function set(type) {\n    this._type = type;\n  }\n});\nObject.defineProperty(Lexer.prototype, \"line\", {\n  get: function get() {\n    return this._interp.line;\n  },\n  set: function set(line) {\n    this._interp.line = line;\n  }\n});\nObject.defineProperty(Lexer.prototype, \"column\", {\n  get: function get() {\n    return this._interp.column;\n  },\n  set: function set(column) {\n    this._interp.column = column;\n  }\n}); // What is the index of the current character of lookahead?///\n\nLexer.prototype.getCharIndex = function () {\n  return this._input.index;\n}; // Return the text matched so far for the current token or any text override.\n//Set the complete text of this token; it wipes any previous changes to the text.\n\n\nObject.defineProperty(Lexer.prototype, \"text\", {\n  get: function get() {\n    if (this._text !== null) {\n      return this._text;\n    } else {\n      return this._interp.getText(this._input);\n    }\n  },\n  set: function set(text) {\n    this._text = text;\n  }\n}); // Return a list of all Token objects in input char stream.\n// Forces load of all tokens. Does not include EOF token.\n// /\n\nLexer.prototype.getAllTokens = function () {\n  var tokens = [];\n  var t = this.nextToken();\n\n  while (t.type !== Token.EOF) {\n    tokens.push(t);\n    t = this.nextToken();\n  }\n\n  return tokens;\n};\n\nLexer.prototype.notifyListeners = function (e) {\n  var start = this._tokenStartCharIndex;\n  var stop = this._input.index;\n\n  var text = this._input.getText(start, stop);\n\n  var msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n  var listener = this.getErrorListenerDispatch();\n  listener.syntaxError(this, null, this._tokenStartLine, this._tokenStartColumn, msg, e);\n};\n\nLexer.prototype.getErrorDisplay = function (s) {\n  var d = [];\n\n  for (var i = 0; i < s.length; i++) {\n    d.push(s[i]);\n  }\n\n  return d.join('');\n};\n\nLexer.prototype.getErrorDisplayForChar = function (c) {\n  if (c.charCodeAt(0) === Token.EOF) {\n    return \"<EOF>\";\n  } else if (c === '\\n') {\n    return \"\\\\n\";\n  } else if (c === '\\t') {\n    return \"\\\\t\";\n  } else if (c === '\\r') {\n    return \"\\\\r\";\n  } else {\n    return c;\n  }\n};\n\nLexer.prototype.getCharErrorDisplay = function (c) {\n  return \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n}; // Lexers can normally match any char in it's vocabulary after matching\n// a token, so do the easy thing and just kill a character and hope\n// it all works out. You can instead use the rule invocation stack\n// to do sophisticated error recovery if you are in a fragment rule.\n// /\n\n\nLexer.prototype.recover = function (re) {\n  if (this._input.LA(1) !== Token.EOF) {\n    if (re instanceof LexerNoViableAltException) {\n      // skip a char and try again\n      this._interp.consume(this._input);\n    } else {\n      // TODO: Do we lose character or line position information?\n      this._input.consume();\n    }\n  }\n};\n\nexports.Lexer = Lexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/Lexer.js\n");

/***/ }),

/***/ "./node_modules/antlr4/Parser.js":
/*!***************************************!*\
  !*** ./node_modules/antlr4/Parser.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar ParseTreeListener = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\").ParseTreeListener;\n\nvar Recognizer = __webpack_require__(/*! ./Recognizer */ \"./node_modules/antlr4/Recognizer.js\").Recognizer;\n\nvar DefaultErrorStrategy = __webpack_require__(/*! ./error/ErrorStrategy */ \"./node_modules/antlr4/error/ErrorStrategy.js\").DefaultErrorStrategy;\n\nvar ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ \"./node_modules/antlr4/atn/ATNDeserializer.js\").ATNDeserializer;\n\nvar ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ \"./node_modules/antlr4/atn/ATNDeserializationOptions.js\").ATNDeserializationOptions;\n\nvar TerminalNode = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\").TerminalNode;\n\nvar ErrorNode = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\").ErrorNode;\n\nfunction TraceListener(parser) {\n  ParseTreeListener.call(this);\n  this.parser = parser;\n  return this;\n}\n\nTraceListener.prototype = Object.create(ParseTreeListener.prototype);\nTraceListener.prototype.constructor = TraceListener;\n\nTraceListener.prototype.enterEveryRule = function (ctx) {\n  console.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\nTraceListener.prototype.visitTerminal = function (node) {\n  console.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n};\n\nTraceListener.prototype.exitEveryRule = function (ctx) {\n  console.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n}; // this is all the parsing support code essentially; most of it is error\n// recovery stuff.//\n\n\nfunction Parser(input) {\n  Recognizer.call(this); // The input stream.\n\n  this._input = null; // The error handling strategy for the parser. The default value is a new\n  // instance of {@link DefaultErrorStrategy}.\n\n  this._errHandler = new DefaultErrorStrategy();\n  this._precedenceStack = [];\n\n  this._precedenceStack.push(0); // The {@link ParserRuleContext} object for the currently executing rule.\n  // this is always non-null during the parsing process.\n\n\n  this._ctx = null; // Specifies whether or not the parser should construct a parse tree during\n  // the parsing process. The default value is {@code true}.\n\n  this.buildParseTrees = true; // When {@link //setTrace}{@code (true)} is called, a reference to the\n  // {@link TraceListener} is stored here so it can be easily removed in a\n  // later call to {@link //setTrace}{@code (false)}. The listener itself is\n  // implemented as a parser listener so this field is not directly used by\n  // other parser methods.\n\n  this._tracer = null; // The list of {@link ParseTreeListener} listeners registered to receive\n  // events during the parse.\n\n  this._parseListeners = null; // The number of syntax errors reported during parsing. this value is\n  // incremented each time {@link //notifyErrorListeners} is called.\n\n  this._syntaxErrors = 0;\n  this.setInputStream(input);\n  return this;\n}\n\nParser.prototype = Object.create(Recognizer.prototype);\nParser.prototype.contructor = Parser; // this field maps from the serialized ATN string to the deserialized {@link\n// ATN} with\n// bypass alternatives.\n//\n// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n//\n\nParser.bypassAltsAtnCache = {}; // reset the parser's state//\n\nParser.prototype.reset = function () {\n  if (this._input !== null) {\n    this._input.seek(0);\n  }\n\n  this._errHandler.reset(this);\n\n  this._ctx = null;\n  this._syntaxErrors = 0;\n  this.setTrace(false);\n  this._precedenceStack = [];\n\n  this._precedenceStack.push(0);\n\n  if (this._interp !== null) {\n    this._interp.reset();\n  }\n}; // Match current input symbol against {@code ttype}. If the symbol type\n// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n// called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @param ttype the token type to match\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// {@code ttype} and the error strategy could not recover from the\n// mismatched symbol\n\n\nParser.prototype.match = function (ttype) {\n  var t = this.getCurrentToken();\n\n  if (t.type === ttype) {\n    this._errHandler.reportMatch(this);\n\n    this.consume();\n  } else {\n    t = this._errHandler.recoverInline(this);\n\n    if (this.buildParseTrees && t.tokenIndex === -1) {\n      // we must have conjured up a new token during single token\n      // insertion\n      // if it's not the current symbol\n      this._ctx.addErrorNode(t);\n    }\n  }\n\n  return t;\n}; // Match current input symbol as a wildcard. If the symbol type matches\n// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n// and {@link //consume} are called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// a wildcard and the error strategy could not recover from the mismatched\n// symbol\n\n\nParser.prototype.matchWildcard = function () {\n  var t = this.getCurrentToken();\n\n  if (t.type > 0) {\n    this._errHandler.reportMatch(this);\n\n    this.consume();\n  } else {\n    t = this._errHandler.recoverInline(this);\n\n    if (this._buildParseTrees && t.tokenIndex === -1) {\n      // we must have conjured up a new token during single token\n      // insertion\n      // if it's not the current symbol\n      this._ctx.addErrorNode(t);\n    }\n  }\n\n  return t;\n};\n\nParser.prototype.getParseListeners = function () {\n  return this._parseListeners || [];\n}; // Registers {@code listener} to receive events during the parsing process.\n//\n// <p>To support output-preserving grammar transformations (including but not\n// limited to left-recursion removal, automated left-factoring, and\n// optimized code generation), calls to listener methods during the parse\n// may differ substantially from calls made by\n// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n// particular, rule entry and exit events may occur in a different order\n// during the parse than after the parser. In addition, calls to certain\n// rule entry methods may be omitted.</p>\n//\n// <p>With the following specific exceptions, calls to listener events are\n// <em>deterministic</em>, i.e. for identical input the calls to listener\n// methods will be the same.</p>\n//\n// <ul>\n// <li>Alterations to the grammar used to generate code may change the\n// behavior of the listener calls.</li>\n// <li>Alterations to the command line options passed to ANTLR 4 when\n// generating the parser may change the behavior of the listener calls.</li>\n// <li>Changing the version of the ANTLR Tool used to generate the parser\n// may change the behavior of the listener calls.</li>\n// </ul>\n//\n// @param listener the listener to add\n//\n// @throws NullPointerException if {@code} listener is {@code null}\n//\n\n\nParser.prototype.addParseListener = function (listener) {\n  if (listener === null) {\n    throw \"listener\";\n  }\n\n  if (this._parseListeners === null) {\n    this._parseListeners = [];\n  }\n\n  this._parseListeners.push(listener);\n}; //\n// Remove {@code listener} from the list of parse listeners.\n//\n// <p>If {@code listener} is {@code null} or has not been added as a parse\n// listener, this method does nothing.</p>\n// @param listener the listener to remove\n//\n\n\nParser.prototype.removeParseListener = function (listener) {\n  if (this._parseListeners !== null) {\n    var idx = this._parseListeners.indexOf(listener);\n\n    if (idx >= 0) {\n      this._parseListeners.splice(idx, 1);\n    }\n\n    if (this._parseListeners.length === 0) {\n      this._parseListeners = null;\n    }\n  }\n}; // Remove all parse listeners.\n\n\nParser.prototype.removeParseListeners = function () {\n  this._parseListeners = null;\n}; // Notify any parse listeners of an enter rule event.\n\n\nParser.prototype.triggerEnterRuleEvent = function () {\n  if (this._parseListeners !== null) {\n    var ctx = this._ctx;\n\n    this._parseListeners.map(function (listener) {\n      listener.enterEveryRule(ctx);\n      ctx.enterRule(listener);\n    });\n  }\n}; //\n// Notify any parse listeners of an exit rule event.\n//\n// @see //addParseListener\n//\n\n\nParser.prototype.triggerExitRuleEvent = function () {\n  if (this._parseListeners !== null) {\n    // reverse order walk of listeners\n    var ctx = this._ctx;\n\n    this._parseListeners.slice(0).reverse().map(function (listener) {\n      ctx.exitRule(listener);\n      listener.exitEveryRule(ctx);\n    });\n  }\n};\n\nParser.prototype.getTokenFactory = function () {\n  return this._input.tokenSource._factory;\n}; // Tell our token source and error strategy about a new way to create tokens.//\n\n\nParser.prototype.setTokenFactory = function (factory) {\n  this._input.tokenSource._factory = factory;\n}; // The ATN with bypass alternatives is expensive to create so we create it\n// lazily.\n//\n// @throws UnsupportedOperationException if the current parser does not\n// implement the {@link //getSerializedATN()} method.\n//\n\n\nParser.prototype.getATNWithBypassAlts = function () {\n  var serializedAtn = this.getSerializedATN();\n\n  if (serializedAtn === null) {\n    throw \"The current parser does not support an ATN with bypass alternatives.\";\n  }\n\n  var result = this.bypassAltsAtnCache[serializedAtn];\n\n  if (result === null) {\n    var deserializationOptions = new ATNDeserializationOptions();\n    deserializationOptions.generateRuleBypassTransitions = true;\n    result = new ATNDeserializer(deserializationOptions).deserialize(serializedAtn);\n    this.bypassAltsAtnCache[serializedAtn] = result;\n  }\n\n  return result;\n}; // The preferred method of getting a tree pattern. For example, here's a\n// sample use:\n//\n// <pre>\n// ParseTree t = parser.expr();\n// ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n// MyParser.RULE_expr);\n// ParseTreeMatch m = p.match(t);\n// String id = m.get(\"ID\");\n// </pre>\n\n\nvar Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/Lexer.js\").Lexer;\n\nParser.prototype.compileParseTreePattern = function (pattern, patternRuleIndex, lexer) {\n  lexer = lexer || null;\n\n  if (lexer === null) {\n    if (this.getTokenStream() !== null) {\n      var tokenSource = this.getTokenStream().tokenSource;\n\n      if (tokenSource instanceof Lexer) {\n        lexer = tokenSource;\n      }\n    }\n  }\n\n  if (lexer === null) {\n    throw \"Parser can't discover a lexer to use\";\n  }\n\n  var m = new ParseTreePatternMatcher(lexer, this);\n  return m.compile(pattern, patternRuleIndex);\n};\n\nParser.prototype.getInputStream = function () {\n  return this.getTokenStream();\n};\n\nParser.prototype.setInputStream = function (input) {\n  this.setTokenStream(input);\n};\n\nParser.prototype.getTokenStream = function () {\n  return this._input;\n}; // Set the token stream and reset the parser.//\n\n\nParser.prototype.setTokenStream = function (input) {\n  this._input = null;\n  this.reset();\n  this._input = input;\n}; // Match needs to return the current input symbol, which gets put\n// into the label for the associated token ref; e.g., x=ID.\n//\n\n\nParser.prototype.getCurrentToken = function () {\n  return this._input.LT(1);\n};\n\nParser.prototype.notifyErrorListeners = function (msg, offendingToken, err) {\n  offendingToken = offendingToken || null;\n  err = err || null;\n\n  if (offendingToken === null) {\n    offendingToken = this.getCurrentToken();\n  }\n\n  this._syntaxErrors += 1;\n  var line = offendingToken.line;\n  var column = offendingToken.column;\n  var listener = this.getErrorListenerDispatch();\n  listener.syntaxError(this, offendingToken, line, column, msg, err);\n}; //\n// Consume and return the {@linkplain //getCurrentToken current symbol}.\n//\n// <p>E.g., given the following input with {@code A} being the current\n// lookahead symbol, this function moves the cursor to {@code B} and returns\n// {@code A}.</p>\n//\n// <pre>\n// A B\n// ^\n// </pre>\n//\n// If the parser is not in error recovery mode, the consumed symbol is added\n// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n// If the parser <em>is</em> in error recovery mode, the consumed symbol is\n// added to the parse tree using\n// {@link ParserRuleContext//addErrorNode(Token)}, and\n// {@link ParseTreeListener//visitErrorNode} is called on any parse\n// listeners.\n//\n\n\nParser.prototype.consume = function () {\n  var o = this.getCurrentToken();\n\n  if (o.type !== Token.EOF) {\n    this.getInputStream().consume();\n  }\n\n  var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\n  if (this.buildParseTrees || hasListener) {\n    var node;\n\n    if (this._errHandler.inErrorRecoveryMode(this)) {\n      node = this._ctx.addErrorNode(o);\n    } else {\n      node = this._ctx.addTokenNode(o);\n    }\n\n    node.invokingState = this.state;\n\n    if (hasListener) {\n      this._parseListeners.map(function (listener) {\n        if (node instanceof ErrorNode || node.isErrorNode !== undefined && node.isErrorNode()) {\n          listener.visitErrorNode(node);\n        } else if (node instanceof TerminalNode) {\n          listener.visitTerminal(node);\n        }\n      });\n    }\n  }\n\n  return o;\n};\n\nParser.prototype.addContextToParseTree = function () {\n  // add current context to parent if we have a parent\n  if (this._ctx.parentCtx !== null) {\n    this._ctx.parentCtx.addChild(this._ctx);\n  }\n}; // Always called by generated parsers upon entry to a rule. Access field\n// {@link //_ctx} get the current context.\n\n\nParser.prototype.enterRule = function (localctx, state, ruleIndex) {\n  this.state = state;\n  this._ctx = localctx;\n  this._ctx.start = this._input.LT(1);\n\n  if (this.buildParseTrees) {\n    this.addContextToParseTree();\n  }\n\n  if (this._parseListeners !== null) {\n    this.triggerEnterRuleEvent();\n  }\n};\n\nParser.prototype.exitRule = function () {\n  this._ctx.stop = this._input.LT(-1); // trigger event on _ctx, before it reverts to parent\n\n  if (this._parseListeners !== null) {\n    this.triggerExitRuleEvent();\n  }\n\n  this.state = this._ctx.invokingState;\n  this._ctx = this._ctx.parentCtx;\n};\n\nParser.prototype.enterOuterAlt = function (localctx, altNum) {\n  localctx.setAltNumber(altNum); // if we have new localctx, make sure we replace existing ctx\n  // that is previous child of parse tree\n\n  if (this.buildParseTrees && this._ctx !== localctx) {\n    if (this._ctx.parentCtx !== null) {\n      this._ctx.parentCtx.removeLastChild();\n\n      this._ctx.parentCtx.addChild(localctx);\n    }\n  }\n\n  this._ctx = localctx;\n}; // Get the precedence level for the top-most precedence rule.\n//\n// @return The precedence level for the top-most precedence rule, or -1 if\n// the parser context is not nested within a precedence rule.\n\n\nParser.prototype.getPrecedence = function () {\n  if (this._precedenceStack.length === 0) {\n    return -1;\n  } else {\n    return this._precedenceStack[this._precedenceStack.length - 1];\n  }\n};\n\nParser.prototype.enterRecursionRule = function (localctx, state, ruleIndex, precedence) {\n  this.state = state;\n\n  this._precedenceStack.push(precedence);\n\n  this._ctx = localctx;\n  this._ctx.start = this._input.LT(1);\n\n  if (this._parseListeners !== null) {\n    this.triggerEnterRuleEvent(); // simulates rule entry for\n    // left-recursive rules\n  }\n}; //\n// Like {@link //enterRule} but for recursive rules.\n\n\nParser.prototype.pushNewRecursionContext = function (localctx, state, ruleIndex) {\n  var previous = this._ctx;\n  previous.parentCtx = localctx;\n  previous.invokingState = state;\n  previous.stop = this._input.LT(-1);\n  this._ctx = localctx;\n  this._ctx.start = previous.start;\n\n  if (this.buildParseTrees) {\n    this._ctx.addChild(previous);\n  }\n\n  if (this._parseListeners !== null) {\n    this.triggerEnterRuleEvent(); // simulates rule entry for\n    // left-recursive rules\n  }\n};\n\nParser.prototype.unrollRecursionContexts = function (parentCtx) {\n  this._precedenceStack.pop();\n\n  this._ctx.stop = this._input.LT(-1);\n  var retCtx = this._ctx; // save current ctx (return value)\n  // unroll so _ctx is as it was before call to recursive method\n\n  if (this._parseListeners !== null) {\n    while (this._ctx !== parentCtx) {\n      this.triggerExitRuleEvent();\n      this._ctx = this._ctx.parentCtx;\n    }\n  } else {\n    this._ctx = parentCtx;\n  } // hook into tree\n\n\n  retCtx.parentCtx = parentCtx;\n\n  if (this.buildParseTrees && parentCtx !== null) {\n    // add return ctx into invoking rule's tree\n    parentCtx.addChild(retCtx);\n  }\n};\n\nParser.prototype.getInvokingContext = function (ruleIndex) {\n  var ctx = this._ctx;\n\n  while (ctx !== null) {\n    if (ctx.ruleIndex === ruleIndex) {\n      return ctx;\n    }\n\n    ctx = ctx.parentCtx;\n  }\n\n  return null;\n};\n\nParser.prototype.precpred = function (localctx, precedence) {\n  return precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n};\n\nParser.prototype.inContext = function (context) {\n  // TODO: useful in parser?\n  return false;\n}; //\n// Checks whether or not {@code symbol} can follow the current state in the\n// ATN. The behavior of this method is equivalent to the following, but is\n// implemented such that the complete context-sensitive follow set does not\n// need to be explicitly constructed.\n//\n// <pre>\n// return getExpectedTokens().contains(symbol);\n// </pre>\n//\n// @param symbol the symbol type to check\n// @return {@code true} if {@code symbol} can follow the current state in\n// the ATN, otherwise {@code false}.\n\n\nParser.prototype.isExpectedToken = function (symbol) {\n  var atn = this._interp.atn;\n  var ctx = this._ctx;\n  var s = atn.states[this.state];\n  var following = atn.nextTokens(s);\n\n  if (following.contains(symbol)) {\n    return true;\n  }\n\n  if (!following.contains(Token.EPSILON)) {\n    return false;\n  }\n\n  while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n    var invokingState = atn.states[ctx.invokingState];\n    var rt = invokingState.transitions[0];\n    following = atn.nextTokens(rt.followState);\n\n    if (following.contains(symbol)) {\n      return true;\n    }\n\n    ctx = ctx.parentCtx;\n  }\n\n  if (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n    return true;\n  } else {\n    return false;\n  }\n}; // Computes the set of input symbols which could follow the current parser\n// state and context, as given by {@link //getState} and {@link //getContext},\n// respectively.\n//\n// @see ATN//getExpectedTokens(int, RuleContext)\n//\n\n\nParser.prototype.getExpectedTokens = function () {\n  return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n};\n\nParser.prototype.getExpectedTokensWithinCurrentRule = function () {\n  var atn = this._interp.atn;\n  var s = atn.states[this.state];\n  return atn.nextTokens(s);\n}; // Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//\n\n\nParser.prototype.getRuleIndex = function (ruleName) {\n  var ruleIndex = this.getRuleIndexMap()[ruleName];\n\n  if (ruleIndex !== null) {\n    return ruleIndex;\n  } else {\n    return -1;\n  }\n}; // Return List&lt;String&gt; of the rule names in your parser instance\n// leading up to a call to the current rule. You could override if\n// you want more details such as the file/line info of where\n// in the ATN a rule is invoked.\n//\n// this is very useful for error messages.\n//\n\n\nParser.prototype.getRuleInvocationStack = function (p) {\n  p = p || null;\n\n  if (p === null) {\n    p = this._ctx;\n  }\n\n  var stack = [];\n\n  while (p !== null) {\n    // compute what follows who invoked us\n    var ruleIndex = p.ruleIndex;\n\n    if (ruleIndex < 0) {\n      stack.push(\"n/a\");\n    } else {\n      stack.push(this.ruleNames[ruleIndex]);\n    }\n\n    p = p.parentCtx;\n  }\n\n  return stack;\n}; // For debugging and other purposes.//\n\n\nParser.prototype.getDFAStrings = function () {\n  return this._interp.decisionToDFA.toString();\n}; // For debugging and other purposes.//\n\n\nParser.prototype.dumpDFA = function () {\n  var seenOne = false;\n\n  for (var i = 0; i < this._interp.decisionToDFA.length; i++) {\n    var dfa = this._interp.decisionToDFA[i];\n\n    if (dfa.states.length > 0) {\n      if (seenOne) {\n        console.log();\n      }\n\n      this.printer.println(\"Decision \" + dfa.decision + \":\");\n      this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n      seenOne = true;\n    }\n  }\n};\n/*\n\"\t\t\tprinter = function() {\\r\\n\" +\n\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\"\t\t\t};\\r\\n\" +\n*/\n\n\nParser.prototype.getSourceName = function () {\n  return this._input.sourceName;\n}; // During a parse is sometimes useful to listen in on the rule entry and exit\n// events as well as token matches. this is for quick and dirty debugging.\n//\n\n\nParser.prototype.setTrace = function (trace) {\n  if (!trace) {\n    this.removeParseListener(this._tracer);\n    this._tracer = null;\n  } else {\n    if (this._tracer !== null) {\n      this.removeParseListener(this._tracer);\n    }\n\n    this._tracer = new TraceListener(this);\n    this.addParseListener(this._tracer);\n  }\n};\n\nexports.Parser = Parser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/Parser.js\n");

/***/ }),

/***/ "./node_modules/antlr4/ParserRuleContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/ParserRuleContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//* A rule invocation record for parsing.\n//\n//  Contains all of the information about the current rule not stored in the\n//  RuleContext. It handles parse tree children list, Any ATN state\n//  tracing, and the default values available for rule indications:\n//  start, stop, rule index, current alt number, current\n//  ATN state.\n//\n//  Subclasses made for each rule and grammar track the parameters,\n//  return values, locals, and labels specific to that rule. These\n//  are the objects that are returned from rules.\n//\n//  Note text is not an actual field of a rule return value; it is computed\n//  from start and stop using the input stream's toString() method.  I\n//  could add a ctor to this so that we can pass in and store the input\n//  stream, but I'm not sure we want to do that.  It would seem to be undefined\n//  to get the .text property anyway if the rule matches tokens from multiple\n//  input streams.\n//\n//  I do not use getters for fields of objects that are used simply to\n//  group values such as this aggregate.  The getters/setters are there to\n//  satisfy the superclass interface.\nvar RuleContext = __webpack_require__(/*! ./RuleContext */ \"./node_modules/antlr4/RuleContext.js\").RuleContext;\n\nvar Tree = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\");\n\nvar INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nvar TerminalNode = Tree.TerminalNode;\nvar TerminalNodeImpl = Tree.TerminalNodeImpl;\nvar ErrorNodeImpl = Tree.ErrorNodeImpl;\n\nvar Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nfunction ParserRuleContext(parent, invokingStateNumber) {\n  parent = parent || null;\n  invokingStateNumber = invokingStateNumber || null;\n  RuleContext.call(this, parent, invokingStateNumber);\n  this.ruleIndex = -1; // * If we are debugging or building a parse tree for a visitor,\n  // we need to track all of the tokens and rule invocations associated\n  // with this rule's context. This is empty for parsing w/o tree constr.\n  // operation because we don't the need to track the details about\n  // how we parse this rule.\n  // /\n\n  this.children = null;\n  this.start = null;\n  this.stop = null; // The exception that forced this rule to return. If the rule successfully\n  // completed, this is {@code null}.\n\n  this.exception = null;\n}\n\nParserRuleContext.prototype = Object.create(RuleContext.prototype);\nParserRuleContext.prototype.constructor = ParserRuleContext; // * COPY a ctx (I'm deliberately not using copy constructor)///\n\nParserRuleContext.prototype.copyFrom = function (ctx) {\n  // from RuleContext\n  this.parentCtx = ctx.parentCtx;\n  this.invokingState = ctx.invokingState;\n  this.children = null;\n  this.start = ctx.start;\n  this.stop = ctx.stop; // copy any error nodes to alt label node\n\n  if (ctx.children) {\n    this.children = []; // reset parent pointer for any error nodes\n\n    ctx.children.map(function (child) {\n      if (child instanceof ErrorNodeImpl) {\n        this.children.push(child);\n        child.parentCtx = this;\n      }\n    }, this);\n  }\n}; // Double dispatch methods for listeners\n\n\nParserRuleContext.prototype.enterRule = function (listener) {};\n\nParserRuleContext.prototype.exitRule = function (listener) {}; // * Does not set parent link; other add methods do that///\n\n\nParserRuleContext.prototype.addChild = function (child) {\n  if (this.children === null) {\n    this.children = [];\n  }\n\n  this.children.push(child);\n  return child;\n}; // * Used by enterOuterAlt to toss out a RuleContext previously added as\n// we entered a rule. If we have // label, we will need to remove\n// generic ruleContext object.\n// /\n\n\nParserRuleContext.prototype.removeLastChild = function () {\n  if (this.children !== null) {\n    this.children.pop();\n  }\n};\n\nParserRuleContext.prototype.addTokenNode = function (token) {\n  var node = new TerminalNodeImpl(token);\n  this.addChild(node);\n  node.parentCtx = this;\n  return node;\n};\n\nParserRuleContext.prototype.addErrorNode = function (badToken) {\n  var node = new ErrorNodeImpl(badToken);\n  this.addChild(node);\n  node.parentCtx = this;\n  return node;\n};\n\nParserRuleContext.prototype.getChild = function (i, type) {\n  type = type || null;\n\n  if (this.children === null || i < 0 || i >= this.children.length) {\n    return null;\n  }\n\n  if (type === null) {\n    return this.children[i];\n  } else {\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n\n      if (child instanceof type) {\n        if (i === 0) {\n          return child;\n        } else {\n          i -= 1;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\nParserRuleContext.prototype.getToken = function (ttype, i) {\n  if (this.children === null || i < 0 || i >= this.children.length) {\n    return null;\n  }\n\n  for (var j = 0; j < this.children.length; j++) {\n    var child = this.children[j];\n\n    if (child instanceof TerminalNode) {\n      if (child.symbol.type === ttype) {\n        if (i === 0) {\n          return child;\n        } else {\n          i -= 1;\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nParserRuleContext.prototype.getTokens = function (ttype) {\n  if (this.children === null) {\n    return [];\n  } else {\n    var tokens = [];\n\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n\n      if (child instanceof TerminalNode) {\n        if (child.symbol.type === ttype) {\n          tokens.push(child);\n        }\n      }\n    }\n\n    return tokens;\n  }\n};\n\nParserRuleContext.prototype.getTypedRuleContext = function (ctxType, i) {\n  return this.getChild(i, ctxType);\n};\n\nParserRuleContext.prototype.getTypedRuleContexts = function (ctxType) {\n  if (this.children === null) {\n    return [];\n  } else {\n    var contexts = [];\n\n    for (var j = 0; j < this.children.length; j++) {\n      var child = this.children[j];\n\n      if (child instanceof ctxType) {\n        contexts.push(child);\n      }\n    }\n\n    return contexts;\n  }\n};\n\nParserRuleContext.prototype.getChildCount = function () {\n  if (this.children === null) {\n    return 0;\n  } else {\n    return this.children.length;\n  }\n};\n\nParserRuleContext.prototype.getSourceInterval = function () {\n  if (this.start === null || this.stop === null) {\n    return INVALID_INTERVAL;\n  } else {\n    return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n  }\n};\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nfunction InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n  ParserRuleContext.call(parent, invokingStateNumber);\n  this.ruleIndex = ruleIndex;\n  return this;\n}\n\nInterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);\nInterpreterRuleContext.prototype.constructor = InterpreterRuleContext;\nexports.ParserRuleContext = ParserRuleContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/ParserRuleContext.js\n");

/***/ }),

/***/ "./node_modules/antlr4/PredictionContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/PredictionContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\nvar RuleContext = __webpack_require__(/*! ./RuleContext */ \"./node_modules/antlr4/RuleContext.js\").RuleContext;\n\nvar Hash = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/Utils.js\").Hash;\n\nvar Map = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/Utils.js\").Map;\n\nfunction PredictionContext(cachedHashCode) {\n  this.cachedHashCode = cachedHashCode;\n} // Represents {@code $} in local context prediction, which means wildcard.\n// {@code//+x =//}.\n// /\n\n\nPredictionContext.EMPTY = null; // Represents {@code $} in an array in full context mode, when {@code $}\n// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n// {@code $} = {@link //EMPTY_RETURN_STATE}.\n// /\n\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount; // Stores the computed hash code of this {@link PredictionContext}. The hash\n// code is computed in parts to match the following reference algorithm.\n//\n// <pre>\n// private int referenceHashCode() {\n// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n// //INITIAL_HASH});\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n// getParent}(i));\n// }\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n// //getReturnState getReturnState}(i));\n// }\n//\n// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n// //size()});\n// return hash;\n// }\n// </pre>\n// /\n// This means only the {@link //EMPTY} context is in set.\n\nPredictionContext.prototype.isEmpty = function () {\n  return this === PredictionContext.EMPTY;\n};\n\nPredictionContext.prototype.hasEmptyPath = function () {\n  return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nPredictionContext.prototype.hashCode = function () {\n  return this.cachedHashCode;\n};\n\nPredictionContext.prototype.updateHashCode = function (hash) {\n  hash.update(this.cachedHashCode);\n};\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n// Used to cache {@link PredictionContext} objects. Its used for the shared\n// context cash associated with contexts in DFA states. This cache\n// can be used for both lexers and parsers.\n\n\nfunction PredictionContextCache() {\n  this.cache = new Map();\n  return this;\n} // Add a context to the cache and return it. If the context already exists,\n// return that one instead and do not add a new context to the cache.\n// Protect shared cache from unsafe thread access.\n//\n\n\nPredictionContextCache.prototype.add = function (ctx) {\n  if (ctx === PredictionContext.EMPTY) {\n    return PredictionContext.EMPTY;\n  }\n\n  var existing = this.cache.get(ctx) || null;\n\n  if (existing !== null) {\n    return existing;\n  }\n\n  this.cache.put(ctx, ctx);\n  return ctx;\n};\n\nPredictionContextCache.prototype.get = function (ctx) {\n  return this.cache.get(ctx) || null;\n};\n\nObject.defineProperty(PredictionContextCache.prototype, \"length\", {\n  get: function get() {\n    return this.cache.length;\n  }\n});\n\nfunction SingletonPredictionContext(parent, returnState) {\n  var hashCode = 0;\n  var hash = new Hash();\n\n  if (parent !== null) {\n    hash.update(parent, returnState);\n  } else {\n    hash.update(1);\n  }\n\n  hashCode = hash.finish();\n  PredictionContext.call(this, hashCode);\n  this.parentCtx = parent;\n  this.returnState = returnState;\n}\n\nSingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);\nSingletonPredictionContext.prototype.contructor = SingletonPredictionContext;\n\nSingletonPredictionContext.create = function (parent, returnState) {\n  if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n    // someone can pass in the bits of an array ctx that mean $\n    return PredictionContext.EMPTY;\n  } else {\n    return new SingletonPredictionContext(parent, returnState);\n  }\n};\n\nObject.defineProperty(SingletonPredictionContext.prototype, \"length\", {\n  get: function get() {\n    return 1;\n  }\n});\n\nSingletonPredictionContext.prototype.getParent = function (index) {\n  return this.parentCtx;\n};\n\nSingletonPredictionContext.prototype.getReturnState = function (index) {\n  return this.returnState;\n};\n\nSingletonPredictionContext.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof SingletonPredictionContext)) {\n    return false;\n  } else if (this.hashCode() !== other.hashCode()) {\n    return false; // can't be same if hash is different\n  } else {\n    if (this.returnState !== other.returnState) return false;else if (this.parentCtx == null) return other.parentCtx == null;else return this.parentCtx.equals(other.parentCtx);\n  }\n};\n\nSingletonPredictionContext.prototype.toString = function () {\n  var up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\n  if (up.length === 0) {\n    if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n      return \"$\";\n    } else {\n      return \"\" + this.returnState;\n    }\n  } else {\n    return \"\" + this.returnState + \" \" + up;\n  }\n};\n\nfunction EmptyPredictionContext() {\n  SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);\n  return this;\n}\n\nEmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);\nEmptyPredictionContext.prototype.constructor = EmptyPredictionContext;\n\nEmptyPredictionContext.prototype.isEmpty = function () {\n  return true;\n};\n\nEmptyPredictionContext.prototype.getParent = function (index) {\n  return null;\n};\n\nEmptyPredictionContext.prototype.getReturnState = function (index) {\n  return this.returnState;\n};\n\nEmptyPredictionContext.prototype.equals = function (other) {\n  return this === other;\n};\n\nEmptyPredictionContext.prototype.toString = function () {\n  return \"$\";\n};\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nfunction ArrayPredictionContext(parents, returnStates) {\n  // Parent can be null only if full ctx mode and we make an array\n  // from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n  // null parent and\n  // returnState == {@link //EMPTY_RETURN_STATE}.\n  var h = new Hash();\n  h.update(parents, returnStates);\n  var hashCode = h.finish();\n  PredictionContext.call(this, hashCode);\n  this.parents = parents;\n  this.returnStates = returnStates;\n  return this;\n}\n\nArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);\nArrayPredictionContext.prototype.constructor = ArrayPredictionContext;\n\nArrayPredictionContext.prototype.isEmpty = function () {\n  // since EMPTY_RETURN_STATE can only appear in the last position, we\n  // don't need to verify that size==1\n  return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nObject.defineProperty(ArrayPredictionContext.prototype, \"length\", {\n  get: function get() {\n    return this.returnStates.length;\n  }\n});\n\nArrayPredictionContext.prototype.getParent = function (index) {\n  return this.parents[index];\n};\n\nArrayPredictionContext.prototype.getReturnState = function (index) {\n  return this.returnStates[index];\n};\n\nArrayPredictionContext.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof ArrayPredictionContext)) {\n    return false;\n  } else if (this.hashCode() !== other.hashCode()) {\n    return false; // can't be same if hash is different\n  } else {\n    return this.returnStates === other.returnStates && this.parents === other.parents;\n  }\n};\n\nArrayPredictionContext.prototype.toString = function () {\n  if (this.isEmpty()) {\n    return \"[]\";\n  } else {\n    var s = \"[\";\n\n    for (var i = 0; i < this.returnStates.length; i++) {\n      if (i > 0) {\n        s = s + \", \";\n      }\n\n      if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n        s = s + \"$\";\n        continue;\n      }\n\n      s = s + this.returnStates[i];\n\n      if (this.parents[i] !== null) {\n        s = s + \" \" + this.parents[i];\n      } else {\n        s = s + \"null\";\n      }\n    }\n\n    return s + \"]\";\n  }\n}; // Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n// Return {@link //EMPTY} if {@code outerContext} is empty or null.\n// /\n\n\nfunction predictionContextFromRuleContext(atn, outerContext) {\n  if (outerContext === undefined || outerContext === null) {\n    outerContext = RuleContext.EMPTY;\n  } // if we are in RuleContext of start rule, s, then PredictionContext\n  // is EMPTY. Nobody called us. (if we are empty, return empty)\n\n\n  if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n    return PredictionContext.EMPTY;\n  } // If we have a parent, convert it to a PredictionContext graph\n\n\n  var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n  var state = atn.states[outerContext.invokingState];\n  var transition = state.transitions[0];\n  return SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tvar s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\n\n\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n  // share same graph if both same\n  if (a === b) {\n    return a;\n  }\n\n  if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n    return mergeSingletons(a, b, rootIsWildcard, mergeCache);\n  } // At least one of a or b is array\n  // If one is $ and rootIsWildcard, return $ as// wildcard\n\n\n  if (rootIsWildcard) {\n    if (a instanceof EmptyPredictionContext) {\n      return a;\n    }\n\n    if (b instanceof EmptyPredictionContext) {\n      return b;\n    }\n  } // convert singleton so both are arrays to normalize\n\n\n  if (a instanceof SingletonPredictionContext) {\n    a = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n  }\n\n  if (b instanceof SingletonPredictionContext) {\n    b = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n  }\n\n  return mergeArrays(a, b, rootIsWildcard, mergeCache);\n} //\n// Merge two {@link SingletonPredictionContext} instances.\n//\n// <p>Stack tops equal, parents merge is same; return left graph.<br>\n// <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Same stack top, parents differ; merge parents giving array node, then\n// remainders of those graphs. A new root node is created to point to the\n// merged parents.<br>\n// <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to same parent. Make array node for the\n// root where both element in the root point to the same (original)\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to different parents. Make array node for\n// the root where each element points to the corresponding original\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// @param mergeCache\n// /\n\n\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n  if (mergeCache !== null) {\n    var previous = mergeCache.get(a, b);\n\n    if (previous !== null) {\n      return previous;\n    }\n\n    previous = mergeCache.get(b, a);\n\n    if (previous !== null) {\n      return previous;\n    }\n  }\n\n  var rootMerge = mergeRoot(a, b, rootIsWildcard);\n\n  if (rootMerge !== null) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, rootMerge);\n    }\n\n    return rootMerge;\n  }\n\n  if (a.returnState === b.returnState) {\n    var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache); // if parent is same as existing a or b parent or reduced to a parent,\n    // return it\n\n    if (parent === a.parentCtx) {\n      return a; // ax + bx = ax, if a=b\n    }\n\n    if (parent === b.parentCtx) {\n      return b; // ax + bx = bx, if a=b\n    } // else: ax + ay = a'[x,y]\n    // merge parents x and y, giving array node with x,y then remainders\n    // of those graphs. dup a, a' points at merged array\n    // new joined parent so create new singleton pointing to it, a'\n\n\n    var spc = SingletonPredictionContext.create(parent, a.returnState);\n\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, spc);\n    }\n\n    return spc;\n  } else {\n    // a != b payloads differ\n    // see if we can collapse parents due to $+x parents if local ctx\n    var singleParent = null;\n\n    if (a === b || a.parentCtx !== null && a.parentCtx === b.parentCtx) {\n      // ax +\n      // bx =\n      // [a,b]x\n      singleParent = a.parentCtx;\n    }\n\n    if (singleParent !== null) {\n      // parents are same\n      // sort payloads and use same parent\n      var payloads = [a.returnState, b.returnState];\n\n      if (a.returnState > b.returnState) {\n        payloads[0] = b.returnState;\n        payloads[1] = a.returnState;\n      }\n\n      var parents = [singleParent, singleParent];\n      var apc = new ArrayPredictionContext(parents, payloads);\n\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, apc);\n      }\n\n      return apc;\n    } // parents differ and can't merge them. Just pack together\n    // into array; can't merge.\n    // ax + by = [ax,by]\n\n\n    var payloads = [a.returnState, b.returnState];\n    var parents = [a.parentCtx, b.parentCtx];\n\n    if (a.returnState > b.returnState) {\n      // sort by payload\n      payloads[0] = b.returnState;\n      payloads[1] = a.returnState;\n      parents = [b.parentCtx, a.parentCtx];\n    }\n\n    var a_ = new ArrayPredictionContext(parents, payloads);\n\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, a_);\n    }\n\n    return a_;\n  }\n} //\n// Handle case where at least one of {@code a} or {@code b} is\n// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n// to represent {@link //EMPTY}.\n//\n// <h2>Local-Context Merges</h2>\n//\n// <p>These local-context merge operations are used when {@code rootIsWildcard}\n// is true.</p>\n//\n// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n// <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n// {@code //EMPTY}; return left graph.<br>\n// <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Special case of last merge if local context.<br>\n// <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <h2>Full-Context Merges</h2>\n//\n// <p>These full-context merge operations are used when {@code rootIsWildcard}\n// is false.</p>\n//\n// <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n// null parent).<br>\n// <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// /\n\n\nfunction mergeRoot(a, b, rootIsWildcard) {\n  if (rootIsWildcard) {\n    if (a === PredictionContext.EMPTY) {\n      return PredictionContext.EMPTY; // // + b =//\n    }\n\n    if (b === PredictionContext.EMPTY) {\n      return PredictionContext.EMPTY; // a +// =//\n    }\n  } else {\n    if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n      return PredictionContext.EMPTY; // $ + $ = $\n    } else if (a === PredictionContext.EMPTY) {\n      // $ + x = [$,x]\n      var payloads = [b.returnState, PredictionContext.EMPTY_RETURN_STATE];\n      var parents = [b.parentCtx, null];\n      return new ArrayPredictionContext(parents, payloads);\n    } else if (b === PredictionContext.EMPTY) {\n      // x + $ = [$,x] ($ is always first if present)\n      var payloads = [a.returnState, PredictionContext.EMPTY_RETURN_STATE];\n      var parents = [a.parentCtx, null];\n      return new ArrayPredictionContext(parents, payloads);\n    }\n  }\n\n  return null;\n} //\n// Merge two {@link ArrayPredictionContext} instances.\n//\n// <p>Different tops, different parents.<br>\n// <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, same parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, different parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, all shared parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Equal tops, merge parents and reduce top to\n// {@link SingletonPredictionContext}.<br>\n// <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n// /\n\n\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n  if (mergeCache !== null) {\n    var previous = mergeCache.get(a, b);\n\n    if (previous !== null) {\n      return previous;\n    }\n\n    previous = mergeCache.get(b, a);\n\n    if (previous !== null) {\n      return previous;\n    }\n  } // merge sorted payloads a + b => M\n\n\n  var i = 0; // walks a\n\n  var j = 0; // walks b\n\n  var k = 0; // walks target M array\n\n  var mergedReturnStates = [];\n  var mergedParents = []; // walk and merge to yield mergedParents, mergedReturnStates\n\n  while (i < a.returnStates.length && j < b.returnStates.length) {\n    var a_parent = a.parents[i];\n    var b_parent = b.parents[j];\n\n    if (a.returnStates[i] === b.returnStates[j]) {\n      // same payload (stack tops are equal), must yield merged singleton\n      var payload = a.returnStates[i]; // $+$ = $\n\n      var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE && a_parent === null && b_parent === null;\n      var ax_ax = a_parent !== null && b_parent !== null && a_parent === b_parent; // ax+ax\n      // ->\n      // ax\n\n      if (bothDollars || ax_ax) {\n        mergedParents[k] = a_parent; // choose left\n\n        mergedReturnStates[k] = payload;\n      } else {\n        // ax+ay -> a'[x,y]\n        var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n        mergedParents[k] = mergedParent;\n        mergedReturnStates[k] = payload;\n      }\n\n      i += 1; // hop over left one as usual\n\n      j += 1; // but also skip one in right side since we merge\n    } else if (a.returnStates[i] < b.returnStates[j]) {\n      // copy a[i] to M\n      mergedParents[k] = a_parent;\n      mergedReturnStates[k] = a.returnStates[i];\n      i += 1;\n    } else {\n      // b > a, copy b[j] to M\n      mergedParents[k] = b_parent;\n      mergedReturnStates[k] = b.returnStates[j];\n      j += 1;\n    }\n\n    k += 1;\n  } // copy over any payloads remaining in either array\n\n\n  if (i < a.returnStates.length) {\n    for (var p = i; p < a.returnStates.length; p++) {\n      mergedParents[k] = a.parents[p];\n      mergedReturnStates[k] = a.returnStates[p];\n      k += 1;\n    }\n  } else {\n    for (var p = j; p < b.returnStates.length; p++) {\n      mergedParents[k] = b.parents[p];\n      mergedReturnStates[k] = b.returnStates[p];\n      k += 1;\n    }\n  } // trim merged if we combined a few that had same stack tops\n\n\n  if (k < mergedParents.length) {\n    // write index < last position; trim\n    if (k === 1) {\n      // for just one merged element, return singleton top\n      var a_ = SingletonPredictionContext.create(mergedParents[0], mergedReturnStates[0]);\n\n      if (mergeCache !== null) {\n        mergeCache.set(a, b, a_);\n      }\n\n      return a_;\n    }\n\n    mergedParents = mergedParents.slice(0, k);\n    mergedReturnStates = mergedReturnStates.slice(0, k);\n  }\n\n  var M = new ArrayPredictionContext(mergedParents, mergedReturnStates); // if we created same array as a or b, return that instead\n  // TODO: track whether this is possible above during merge sort for speed\n\n  if (M === a) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, a);\n    }\n\n    return a;\n  }\n\n  if (M === b) {\n    if (mergeCache !== null) {\n      mergeCache.set(a, b, b);\n    }\n\n    return b;\n  }\n\n  combineCommonParents(mergedParents);\n\n  if (mergeCache !== null) {\n    mergeCache.set(a, b, M);\n  }\n\n  return M;\n} //\n// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n// ones.\n// /\n\n\nfunction combineCommonParents(parents) {\n  var uniqueParents = new Map();\n\n  for (var p = 0; p < parents.length; p++) {\n    var parent = parents[p];\n\n    if (!uniqueParents.containsKey(parent)) {\n      uniqueParents.put(parent, parent);\n    }\n  }\n\n  for (var q = 0; q < parents.length; q++) {\n    parents[q] = uniqueParents.get(parents[q]);\n  }\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n  if (context.isEmpty()) {\n    return context;\n  }\n\n  var existing = visited.get(context) || null;\n\n  if (existing !== null) {\n    return existing;\n  }\n\n  existing = contextCache.get(context);\n\n  if (existing !== null) {\n    visited.put(context, existing);\n    return existing;\n  }\n\n  var changed = false;\n  var parents = [];\n\n  for (var i = 0; i < parents.length; i++) {\n    var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\n    if (changed || parent !== context.getParent(i)) {\n      if (!changed) {\n        parents = [];\n\n        for (var j = 0; j < context.length; j++) {\n          parents[j] = context.getParent(j);\n        }\n\n        changed = true;\n      }\n\n      parents[i] = parent;\n    }\n  }\n\n  if (!changed) {\n    contextCache.add(context);\n    visited.put(context, context);\n    return context;\n  }\n\n  var updated = null;\n\n  if (parents.length === 0) {\n    updated = PredictionContext.EMPTY;\n  } else if (parents.length === 1) {\n    updated = SingletonPredictionContext.create(parents[0], context.getReturnState(0));\n  } else {\n    updated = new ArrayPredictionContext(parents, context.returnStates);\n  }\n\n  contextCache.add(updated);\n  visited.put(updated, updated);\n  visited.put(context, updated);\n  return updated;\n} // ter's recursive version of Sam's getAllNodes()\n\n\nfunction getAllContextNodes(context, nodes, visited) {\n  if (nodes === null) {\n    nodes = [];\n    return getAllContextNodes(context, nodes, visited);\n  } else if (visited === null) {\n    visited = new Map();\n    return getAllContextNodes(context, nodes, visited);\n  } else {\n    if (context === null || visited.containsKey(context)) {\n      return nodes;\n    }\n\n    visited.put(context, context);\n    nodes.push(context);\n\n    for (var i = 0; i < context.length; i++) {\n      getAllContextNodes(context.getParent(i), nodes, visited);\n    }\n\n    return nodes;\n  }\n}\n\nexports.merge = merge;\nexports.PredictionContext = PredictionContext;\nexports.PredictionContextCache = PredictionContextCache;\nexports.SingletonPredictionContext = SingletonPredictionContext;\nexports.predictionContextFromRuleContext = predictionContextFromRuleContext;\nexports.getCachedPredictionContext = getCachedPredictionContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/PredictionContext.js\n");

/***/ }),

/***/ "./node_modules/antlr4/Recognizer.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/Recognizer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nvar Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar ConsoleErrorListener = __webpack_require__(/*! ./error/ErrorListener */ \"./node_modules/antlr4/error/ErrorListener.js\").ConsoleErrorListener;\n\nvar ProxyErrorListener = __webpack_require__(/*! ./error/ErrorListener */ \"./node_modules/antlr4/error/ErrorListener.js\").ProxyErrorListener;\n\nfunction Recognizer() {\n  this._listeners = [ConsoleErrorListener.INSTANCE];\n  this._interp = null;\n  this._stateNumber = -1;\n  return this;\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nRecognizer.prototype.checkVersion = function (toolVersion) {\n  var runtimeVersion = \"4.8\";\n\n  if (runtimeVersion !== toolVersion) {\n    console.log(\"ANTLR runtime and generated code versions disagree: \" + runtimeVersion + \"!=\" + toolVersion);\n  }\n};\n\nRecognizer.prototype.addErrorListener = function (listener) {\n  this._listeners.push(listener);\n};\n\nRecognizer.prototype.removeErrorListeners = function () {\n  this._listeners = [];\n};\n\nRecognizer.prototype.getTokenTypeMap = function () {\n  var tokenNames = this.getTokenNames();\n\n  if (tokenNames === null) {\n    throw \"The current recognizer does not provide a list of token names.\";\n  }\n\n  var result = this.tokenTypeMapCache[tokenNames];\n\n  if (result === undefined) {\n    result = tokenNames.reduce(function (o, k, i) {\n      o[k] = i;\n    });\n    result.EOF = Token.EOF;\n    this.tokenTypeMapCache[tokenNames] = result;\n  }\n\n  return result;\n}; // Get a map from rule names to rule indexes.\n//\n// <p>Used for XPath and tree pattern compilation.</p>\n//\n\n\nRecognizer.prototype.getRuleIndexMap = function () {\n  var ruleNames = this.ruleNames;\n\n  if (ruleNames === null) {\n    throw \"The current recognizer does not provide a list of rule names.\";\n  }\n\n  var result = this.ruleIndexMapCache[ruleNames];\n\n  if (result === undefined) {\n    result = ruleNames.reduce(function (o, k, i) {\n      o[k] = i;\n    });\n    this.ruleIndexMapCache[ruleNames] = result;\n  }\n\n  return result;\n};\n\nRecognizer.prototype.getTokenType = function (tokenName) {\n  var ttype = this.getTokenTypeMap()[tokenName];\n\n  if (ttype !== undefined) {\n    return ttype;\n  } else {\n    return Token.INVALID_TYPE;\n  }\n}; // What is the error header, normally line/character position information?//\n\n\nRecognizer.prototype.getErrorHeader = function (e) {\n  var line = e.getOffendingToken().line;\n  var column = e.getOffendingToken().column;\n  return \"line \" + line + \":\" + column;\n}; // How should a token be displayed in an error message? The default\n//  is to display just the text, but during development you might\n//  want to have a lot of information spit out.  Override in that case\n//  to use t.toString() (which, for CommonToken, dumps everything about\n//  the token). This is better than forcing you to override a method in\n//  your token objects because you don't have to go modify your lexer\n//  so that it creates a new Java type.\n//\n// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n// implementations of {@link ANTLRErrorStrategy} may provide a similar\n// feature when necessary. For example, see\n// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n//\n\n\nRecognizer.prototype.getTokenErrorDisplay = function (t) {\n  if (t === null) {\n    return \"<no token>\";\n  }\n\n  var s = t.text;\n\n  if (s === null) {\n    if (t.type === Token.EOF) {\n      s = \"<EOF>\";\n    } else {\n      s = \"<\" + t.type + \">\";\n    }\n  }\n\n  s = s.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\").replace(\"\\t\", \"\\\\t\");\n  return \"'\" + s + \"'\";\n};\n\nRecognizer.prototype.getErrorListenerDispatch = function () {\n  return new ProxyErrorListener(this._listeners);\n}; // subclass needs to override these if there are sempreds or actions\n// that the ATN interp needs to execute\n\n\nRecognizer.prototype.sempred = function (localctx, ruleIndex, actionIndex) {\n  return true;\n};\n\nRecognizer.prototype.precpred = function (localctx, precedence) {\n  return true;\n}; //Indicate that the recognizer has changed internal state that is\n//consistent with the ATN state passed in.  This way we always know\n//where we are in the ATN as the parser goes along. The rule\n//context objects form a stack that lets us see the stack of\n//invoking rules. Combine this and we have complete ATN\n//configuration information.\n\n\nObject.defineProperty(Recognizer.prototype, \"state\", {\n  get: function get() {\n    return this._stateNumber;\n  },\n  set: function set(state) {\n    this._stateNumber = state;\n  }\n});\nexports.Recognizer = Recognizer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L1JlY29nbml6ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L1JlY29nbml6ZXIuanM/ZTI1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy9cblxudmFyIFRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xudmFyIENvbnNvbGVFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvckxpc3RlbmVyJykuQ29uc29sZUVycm9yTGlzdGVuZXI7XG52YXIgUHJveHlFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9lcnJvci9FcnJvckxpc3RlbmVyJykuUHJveHlFcnJvckxpc3RlbmVyO1xuXG5mdW5jdGlvbiBSZWNvZ25pemVyKCkge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFsgQ29uc29sZUVycm9yTGlzdGVuZXIuSU5TVEFOQ0UgXTtcbiAgICB0aGlzLl9pbnRlcnAgPSBudWxsO1xuICAgIHRoaXMuX3N0YXRlTnVtYmVyID0gLTE7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cblJlY29nbml6ZXIudG9rZW5UeXBlTWFwQ2FjaGUgPSB7fTtcblJlY29nbml6ZXIucnVsZUluZGV4TWFwQ2FjaGUgPSB7fTtcblxuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5jaGVja1ZlcnNpb24gPSBmdW5jdGlvbih0b29sVmVyc2lvbikge1xuICAgIHZhciBydW50aW1lVmVyc2lvbiA9IFwiNC44XCI7XG4gICAgaWYgKHJ1bnRpbWVWZXJzaW9uIT09dG9vbFZlcnNpb24pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBTlRMUiBydW50aW1lIGFuZCBnZW5lcmF0ZWQgY29kZSB2ZXJzaW9ucyBkaXNhZ3JlZTogXCIrcnVudGltZVZlcnNpb24rXCIhPVwiK3Rvb2xWZXJzaW9uKTtcbiAgICB9XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5hZGRFcnJvckxpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5yZW1vdmVFcnJvckxpc3RlbmVycyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdO1xufTtcblxuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG9rZW5UeXBlTWFwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuTmFtZXMgPSB0aGlzLmdldFRva2VuTmFtZXMoKTtcbiAgICBpZiAodG9rZW5OYW1lcz09PW51bGwpIHtcbiAgICAgICAgdGhyb3coXCJUaGUgY3VycmVudCByZWNvZ25pemVyIGRvZXMgbm90IHByb3ZpZGUgYSBsaXN0IG9mIHRva2VuIG5hbWVzLlwiKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMudG9rZW5UeXBlTWFwQ2FjaGVbdG9rZW5OYW1lc107XG4gICAgaWYocmVzdWx0PT09dW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHRva2VuTmFtZXMucmVkdWNlKGZ1bmN0aW9uKG8sIGssIGkpIHsgb1trXSA9IGk7IH0pO1xuICAgICAgICByZXN1bHQuRU9GID0gVG9rZW4uRU9GO1xuICAgICAgICB0aGlzLnRva2VuVHlwZU1hcENhY2hlW3Rva2VuTmFtZXNdID0gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gR2V0IGEgbWFwIGZyb20gcnVsZSBuYW1lcyB0byBydWxlIGluZGV4ZXMuXG4vL1xuLy8gPHA+VXNlZCBmb3IgWFBhdGggYW5kIHRyZWUgcGF0dGVybiBjb21waWxhdGlvbi48L3A+XG4vL1xuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0UnVsZUluZGV4TWFwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJ1bGVOYW1lcyA9IHRoaXMucnVsZU5hbWVzO1xuICAgIGlmIChydWxlTmFtZXM9PT1udWxsKSB7XG4gICAgICAgIHRocm93KFwiVGhlIGN1cnJlbnQgcmVjb2duaXplciBkb2VzIG5vdCBwcm92aWRlIGEgbGlzdCBvZiBydWxlIG5hbWVzLlwiKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucnVsZUluZGV4TWFwQ2FjaGVbcnVsZU5hbWVzXTtcbiAgICBpZihyZXN1bHQ9PT11bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gcnVsZU5hbWVzLnJlZHVjZShmdW5jdGlvbihvLCBrLCBpKSB7IG9ba10gPSBpOyB9KTtcbiAgICAgICAgdGhpcy5ydWxlSW5kZXhNYXBDYWNoZVtydWxlTmFtZXNdID0gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG9rZW5UeXBlID0gZnVuY3Rpb24odG9rZW5OYW1lKSB7XG4gICAgdmFyIHR0eXBlID0gdGhpcy5nZXRUb2tlblR5cGVNYXAoKVt0b2tlbk5hbWVdO1xuICAgIGlmICh0dHlwZSAhPT11bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHR0eXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUb2tlbi5JTlZBTElEX1RZUEU7XG4gICAgfVxufTtcblxuXG4vLyBXaGF0IGlzIHRoZSBlcnJvciBoZWFkZXIsIG5vcm1hbGx5IGxpbmUvY2hhcmFjdGVyIHBvc2l0aW9uIGluZm9ybWF0aW9uPy8vXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRFcnJvckhlYWRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgbGluZSA9IGUuZ2V0T2ZmZW5kaW5nVG9rZW4oKS5saW5lO1xuICAgIHZhciBjb2x1bW4gPSBlLmdldE9mZmVuZGluZ1Rva2VuKCkuY29sdW1uO1xuICAgIHJldHVybiBcImxpbmUgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW47XG59O1xuXG5cbi8vIEhvdyBzaG91bGQgYSB0b2tlbiBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3IgbWVzc2FnZT8gVGhlIGRlZmF1bHRcbi8vICBpcyB0byBkaXNwbGF5IGp1c3QgdGhlIHRleHQsIGJ1dCBkdXJpbmcgZGV2ZWxvcG1lbnQgeW91IG1pZ2h0XG4vLyAgd2FudCB0byBoYXZlIGEgbG90IG9mIGluZm9ybWF0aW9uIHNwaXQgb3V0LiAgT3ZlcnJpZGUgaW4gdGhhdCBjYXNlXG4vLyAgdG8gdXNlIHQudG9TdHJpbmcoKSAod2hpY2gsIGZvciBDb21tb25Ub2tlbiwgZHVtcHMgZXZlcnl0aGluZyBhYm91dFxuLy8gIHRoZSB0b2tlbikuIFRoaXMgaXMgYmV0dGVyIHRoYW4gZm9yY2luZyB5b3UgdG8gb3ZlcnJpZGUgYSBtZXRob2QgaW5cbi8vICB5b3VyIHRva2VuIG9iamVjdHMgYmVjYXVzZSB5b3UgZG9uJ3QgaGF2ZSB0byBnbyBtb2RpZnkgeW91ciBsZXhlclxuLy8gIHNvIHRoYXQgaXQgY3JlYXRlcyBhIG5ldyBKYXZhIHR5cGUuXG4vL1xuLy8gQGRlcHJlY2F0ZWQgVGhpcyBtZXRob2QgaXMgbm90IGNhbGxlZCBieSB0aGUgQU5UTFIgNCBSdW50aW1lLiBTcGVjaWZpY1xuLy8gaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3l9IG1heSBwcm92aWRlIGEgc2ltaWxhclxuLy8gZmVhdHVyZSB3aGVuIG5lY2Vzc2FyeS4gRm9yIGV4YW1wbGUsIHNlZVxuLy8ge0BsaW5rIERlZmF1bHRFcnJvclN0cmF0ZWd5Ly9nZXRUb2tlbkVycm9yRGlzcGxheX0uXG4vL1xuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG9rZW5FcnJvckRpc3BsYXkgPSBmdW5jdGlvbih0KSB7XG4gICAgaWYgKHQ9PT1udWxsKSB7XG4gICAgICAgIHJldHVybiBcIjxubyB0b2tlbj5cIjtcbiAgICB9XG4gICAgdmFyIHMgPSB0LnRleHQ7XG4gICAgaWYgKHM9PT1udWxsKSB7XG4gICAgICAgIGlmICh0LnR5cGU9PT1Ub2tlbi5FT0YpIHtcbiAgICAgICAgICAgIHMgPSBcIjxFT0Y+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzID0gXCI8XCIgKyB0LnR5cGUgKyBcIj5cIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzID0gcy5yZXBsYWNlKFwiXFxuXCIsXCJcXFxcblwiKS5yZXBsYWNlKFwiXFxyXCIsXCJcXFxcclwiKS5yZXBsYWNlKFwiXFx0XCIsXCJcXFxcdFwiKTtcbiAgICByZXR1cm4gXCInXCIgKyBzICsgXCInXCI7XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5nZXRFcnJvckxpc3RlbmVyRGlzcGF0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFByb3h5RXJyb3JMaXN0ZW5lcih0aGlzLl9saXN0ZW5lcnMpO1xufTtcblxuLy8gc3ViY2xhc3MgbmVlZHMgdG8gb3ZlcnJpZGUgdGhlc2UgaWYgdGhlcmUgYXJlIHNlbXByZWRzIG9yIGFjdGlvbnNcbi8vIHRoYXQgdGhlIEFUTiBpbnRlcnAgbmVlZHMgdG8gZXhlY3V0ZVxuUmVjb2duaXplci5wcm90b3R5cGUuc2VtcHJlZCA9IGZ1bmN0aW9uKGxvY2FsY3R4LCBydWxlSW5kZXgsIGFjdGlvbkluZGV4KSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5SZWNvZ25pemVyLnByb3RvdHlwZS5wcmVjcHJlZCA9IGZ1bmN0aW9uKGxvY2FsY3R4ICwgcHJlY2VkZW5jZSkge1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuLy9JbmRpY2F0ZSB0aGF0IHRoZSByZWNvZ25pemVyIGhhcyBjaGFuZ2VkIGludGVybmFsIHN0YXRlIHRoYXQgaXNcbi8vY29uc2lzdGVudCB3aXRoIHRoZSBBVE4gc3RhdGUgcGFzc2VkIGluLiAgVGhpcyB3YXkgd2UgYWx3YXlzIGtub3dcbi8vd2hlcmUgd2UgYXJlIGluIHRoZSBBVE4gYXMgdGhlIHBhcnNlciBnb2VzIGFsb25nLiBUaGUgcnVsZVxuLy9jb250ZXh0IG9iamVjdHMgZm9ybSBhIHN0YWNrIHRoYXQgbGV0cyB1cyBzZWUgdGhlIHN0YWNrIG9mXG4vL2ludm9raW5nIHJ1bGVzLiBDb21iaW5lIHRoaXMgYW5kIHdlIGhhdmUgY29tcGxldGUgQVROXG4vL2NvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWNvZ25pemVyLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XG5cdGdldCA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9zdGF0ZU51bWJlcjtcblx0fSxcblx0c2V0IDogZnVuY3Rpb24oc3RhdGUpIHtcblx0XHR0aGlzLl9zdGF0ZU51bWJlciA9IHN0YXRlO1xuXHR9XG59KTtcblxuXG5leHBvcnRzLlJlY29nbml6ZXIgPSBSZWNvZ25pemVyO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFVQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/Recognizer.js\n");

/***/ }),

/***/ "./node_modules/antlr4/RuleContext.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/RuleContext.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n//  A rule context is a record of a single rule invocation. It knows\n//  which context invoked it, if any. If there is no parent context, then\n//  naturally the invoking state is not valid.  The parent link\n//  provides a chain upwards from the current rule invocation to the root\n//  of the invocation tree, forming a stack. We actually carry no\n//  information about the rule associated with this context (except\n//  when parsing). We keep only the state number of the invoking state from\n//  the ATN submachine that invoked this. Contrast this with the s\n//  pointer inside ParserRuleContext that tracks the current state\n//  being \"executed\" for the current rule.\n//\n//  The parent contexts are useful for computing lookahead sets and\n//  getting error information.\n//\n//  These objects are used during parsing and prediction.\n//  For the special case of parsers, we use the subclass\n//  ParserRuleContext.\n//\n//  @see ParserRuleContext\n///\nvar RuleNode = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\").RuleNode;\n\nvar INVALID_INTERVAL = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/tree/Tree.js\").INVALID_INTERVAL;\n\nvar INVALID_ALT_NUMBER = __webpack_require__(/*! ./atn/ATN */ \"./node_modules/antlr4/atn/ATN.js\").INVALID_ALT_NUMBER;\n\nfunction RuleContext(parent, invokingState) {\n  RuleNode.call(this); // What context invoked this rule?\n\n  this.parentCtx = parent || null; // What state invoked the rule associated with this context?\n  // The \"return address\" is the followState of invokingState\n  // If parent is null, this should be -1.\n\n  this.invokingState = invokingState || -1;\n  return this;\n}\n\nRuleContext.prototype = Object.create(RuleNode.prototype);\nRuleContext.prototype.constructor = RuleContext;\n\nRuleContext.prototype.depth = function () {\n  var n = 0;\n  var p = this;\n\n  while (p !== null) {\n    p = p.parentCtx;\n    n += 1;\n  }\n\n  return n;\n}; // A context is empty if there is no invoking state; meaning nobody call\n// current context.\n\n\nRuleContext.prototype.isEmpty = function () {\n  return this.invokingState === -1;\n}; // satisfy the ParseTree / SyntaxTree interface\n\n\nRuleContext.prototype.getSourceInterval = function () {\n  return INVALID_INTERVAL;\n};\n\nRuleContext.prototype.getRuleContext = function () {\n  return this;\n};\n\nRuleContext.prototype.getPayload = function () {\n  return this;\n}; // Return the combined text of all child nodes. This method only considers\n// tokens which have been added to the parse tree.\n// <p>\n// Since tokens on hidden channels (e.g. whitespace or comments) are not\n// added to the parse trees, they will not appear in the output of this\n// method.\n// /\n\n\nRuleContext.prototype.getText = function () {\n  if (this.getChildCount() === 0) {\n    return \"\";\n  } else {\n    return this.children.map(function (child) {\n      return child.getText();\n    }).join(\"\");\n  }\n}; // For rule associated with this parse tree internal node, return\n// the outer alternative number used to match the input. Default\n// implementation does not compute nor store this alt num. Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\n// to set it.\n\n\nRuleContext.prototype.getAltNumber = function () {\n  return INVALID_ALT_NUMBER;\n}; // Set the outer alternative number for this context node. Default\n// implementation does nothing to avoid backing field overhead for\n// trees that don't need it.  Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\n\n\nRuleContext.prototype.setAltNumber = function (altNumber) {};\n\nRuleContext.prototype.getChild = function (i) {\n  return null;\n};\n\nRuleContext.prototype.getChildCount = function () {\n  return 0;\n};\n\nRuleContext.prototype.accept = function (visitor) {\n  return visitor.visitChildren(this);\n}; //need to manage circular dependencies, so export now\n\n\nexports.RuleContext = RuleContext;\n\nvar Trees = __webpack_require__(/*! ./tree/Trees */ \"./node_modules/antlr4/tree/Trees.js\").Trees; // Print out a whole tree, not just a node, in LISP format\n// (root child1 .. childN). Print just a node if this is a leaf.\n//\n\n\nRuleContext.prototype.toStringTree = function (ruleNames, recog) {\n  return Trees.toStringTree(this, ruleNames, recog);\n};\n\nRuleContext.prototype.toString = function (ruleNames, stop) {\n  ruleNames = ruleNames || null;\n  stop = stop || null;\n  var p = this;\n  var s = \"[\";\n\n  while (p !== null && p !== stop) {\n    if (ruleNames === null) {\n      if (!p.isEmpty()) {\n        s += p.invokingState;\n      }\n    } else {\n      var ri = p.ruleIndex;\n      var ruleName = ri >= 0 && ri < ruleNames.length ? ruleNames[ri] : \"\" + ri;\n      s += ruleName;\n    }\n\n    if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n      s += \" \";\n    }\n\n    p = p.parentCtx;\n  }\n\n  s += \"]\";\n  return s;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L1J1bGVDb250ZXh0LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9SdWxlQ29udGV4dC5qcz8wNWM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vL1xuXG4vLyAgQSBydWxlIGNvbnRleHQgaXMgYSByZWNvcmQgb2YgYSBzaW5nbGUgcnVsZSBpbnZvY2F0aW9uLiBJdCBrbm93c1xuLy8gIHdoaWNoIGNvbnRleHQgaW52b2tlZCBpdCwgaWYgYW55LiBJZiB0aGVyZSBpcyBubyBwYXJlbnQgY29udGV4dCwgdGhlblxuLy8gIG5hdHVyYWxseSB0aGUgaW52b2tpbmcgc3RhdGUgaXMgbm90IHZhbGlkLiAgVGhlIHBhcmVudCBsaW5rXG4vLyAgcHJvdmlkZXMgYSBjaGFpbiB1cHdhcmRzIGZyb20gdGhlIGN1cnJlbnQgcnVsZSBpbnZvY2F0aW9uIHRvIHRoZSByb290XG4vLyAgb2YgdGhlIGludm9jYXRpb24gdHJlZSwgZm9ybWluZyBhIHN0YWNrLiBXZSBhY3R1YWxseSBjYXJyeSBub1xuLy8gIGluZm9ybWF0aW9uIGFib3V0IHRoZSBydWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRleHQgKGV4Y2VwdFxuLy8gIHdoZW4gcGFyc2luZykuIFdlIGtlZXAgb25seSB0aGUgc3RhdGUgbnVtYmVyIG9mIHRoZSBpbnZva2luZyBzdGF0ZSBmcm9tXG4vLyAgdGhlIEFUTiBzdWJtYWNoaW5lIHRoYXQgaW52b2tlZCB0aGlzLiBDb250cmFzdCB0aGlzIHdpdGggdGhlIHNcbi8vICBwb2ludGVyIGluc2lkZSBQYXJzZXJSdWxlQ29udGV4dCB0aGF0IHRyYWNrcyB0aGUgY3VycmVudCBzdGF0ZVxuLy8gIGJlaW5nIFwiZXhlY3V0ZWRcIiBmb3IgdGhlIGN1cnJlbnQgcnVsZS5cbi8vXG4vLyAgVGhlIHBhcmVudCBjb250ZXh0cyBhcmUgdXNlZnVsIGZvciBjb21wdXRpbmcgbG9va2FoZWFkIHNldHMgYW5kXG4vLyAgZ2V0dGluZyBlcnJvciBpbmZvcm1hdGlvbi5cbi8vXG4vLyAgVGhlc2Ugb2JqZWN0cyBhcmUgdXNlZCBkdXJpbmcgcGFyc2luZyBhbmQgcHJlZGljdGlvbi5cbi8vICBGb3IgdGhlIHNwZWNpYWwgY2FzZSBvZiBwYXJzZXJzLCB3ZSB1c2UgdGhlIHN1YmNsYXNzXG4vLyAgUGFyc2VyUnVsZUNvbnRleHQuXG4vL1xuLy8gIEBzZWUgUGFyc2VyUnVsZUNvbnRleHRcbi8vL1xuXG52YXIgUnVsZU5vZGUgPSByZXF1aXJlKCcuL3RyZWUvVHJlZScpLlJ1bGVOb2RlO1xudmFyIElOVkFMSURfSU5URVJWQUwgPSByZXF1aXJlKCcuL3RyZWUvVHJlZScpLklOVkFMSURfSU5URVJWQUw7XG52YXIgSU5WQUxJRF9BTFRfTlVNQkVSID0gcmVxdWlyZSgnLi9hdG4vQVROJykuSU5WQUxJRF9BTFRfTlVNQkVSO1xuXG5mdW5jdGlvbiBSdWxlQ29udGV4dChwYXJlbnQsIGludm9raW5nU3RhdGUpIHtcblx0UnVsZU5vZGUuY2FsbCh0aGlzKTtcblx0Ly8gV2hhdCBjb250ZXh0IGludm9rZWQgdGhpcyBydWxlP1xuXHR0aGlzLnBhcmVudEN0eCA9IHBhcmVudCB8fCBudWxsO1xuXHQvLyBXaGF0IHN0YXRlIGludm9rZWQgdGhlIHJ1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29udGV4dD9cblx0Ly8gVGhlIFwicmV0dXJuIGFkZHJlc3NcIiBpcyB0aGUgZm9sbG93U3RhdGUgb2YgaW52b2tpbmdTdGF0ZVxuXHQvLyBJZiBwYXJlbnQgaXMgbnVsbCwgdGhpcyBzaG91bGQgYmUgLTEuXG5cdHRoaXMuaW52b2tpbmdTdGF0ZSA9IGludm9raW5nU3RhdGUgfHwgLTE7XG5cdHJldHVybiB0aGlzO1xufVxuXG5SdWxlQ29udGV4dC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJ1bGVOb2RlLnByb3RvdHlwZSk7XG5SdWxlQ29udGV4dC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSdWxlQ29udGV4dDtcblxuUnVsZUNvbnRleHQucHJvdG90eXBlLmRlcHRoID0gZnVuY3Rpb24oKSB7XG5cdHZhciBuID0gMDtcblx0dmFyIHAgPSB0aGlzO1xuXHR3aGlsZSAocCAhPT0gbnVsbCkge1xuXHRcdHAgPSBwLnBhcmVudEN0eDtcblx0XHRuICs9IDE7XG5cdH1cblx0cmV0dXJuIG47XG59O1xuXG4vLyBBIGNvbnRleHQgaXMgZW1wdHkgaWYgdGhlcmUgaXMgbm8gaW52b2tpbmcgc3RhdGU7IG1lYW5pbmcgbm9ib2R5IGNhbGxcbi8vIGN1cnJlbnQgY29udGV4dC5cblJ1bGVDb250ZXh0LnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmludm9raW5nU3RhdGUgPT09IC0xO1xufTtcblxuLy8gc2F0aXNmeSB0aGUgUGFyc2VUcmVlIC8gU3ludGF4VHJlZSBpbnRlcmZhY2VcblxuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldFNvdXJjZUludGVydmFsID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBJTlZBTElEX0lOVEVSVkFMO1xufTtcblxuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldFJ1bGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufTtcblxuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldFBheWxvYWQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG4vLyBSZXR1cm4gdGhlIGNvbWJpbmVkIHRleHQgb2YgYWxsIGNoaWxkIG5vZGVzLiBUaGlzIG1ldGhvZCBvbmx5IGNvbnNpZGVyc1xuLy8gdG9rZW5zIHdoaWNoIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgcGFyc2UgdHJlZS5cbi8vIDxwPlxuLy8gU2luY2UgdG9rZW5zIG9uIGhpZGRlbiBjaGFubmVscyAoZS5nLiB3aGl0ZXNwYWNlIG9yIGNvbW1lbnRzKSBhcmUgbm90XG4vLyBhZGRlZCB0byB0aGUgcGFyc2UgdHJlZXMsIHRoZXkgd2lsbCBub3QgYXBwZWFyIGluIHRoZSBvdXRwdXQgb2YgdGhpc1xuLy8gbWV0aG9kLlxuLy8gL1xuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbigpIHtcblx0aWYgKHRoaXMuZ2V0Q2hpbGRDb3VudCgpID09PSAwKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG5cdFx0XHRyZXR1cm4gY2hpbGQuZ2V0VGV4dCgpO1xuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH1cbn07XG5cbi8vIEZvciBydWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBhcnNlIHRyZWUgaW50ZXJuYWwgbm9kZSwgcmV0dXJuXG4vLyB0aGUgb3V0ZXIgYWx0ZXJuYXRpdmUgbnVtYmVyIHVzZWQgdG8gbWF0Y2ggdGhlIGlucHV0LiBEZWZhdWx0XG4vLyBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBjb21wdXRlIG5vciBzdG9yZSB0aGlzIGFsdCBudW0uIENyZWF0ZVxuLy8gYSBzdWJjbGFzcyBvZiBQYXJzZXJSdWxlQ29udGV4dCB3aXRoIGJhY2tpbmcgZmllbGQgYW5kIHNldFxuLy8gb3B0aW9uIGNvbnRleHRTdXBlckNsYXNzLlxuLy8gdG8gc2V0IGl0LlxuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldEFsdE51bWJlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gSU5WQUxJRF9BTFRfTlVNQkVSOyB9XG5cbi8vIFNldCB0aGUgb3V0ZXIgYWx0ZXJuYXRpdmUgbnVtYmVyIGZvciB0aGlzIGNvbnRleHQgbm9kZS4gRGVmYXVsdFxuLy8gaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nIHRvIGF2b2lkIGJhY2tpbmcgZmllbGQgb3ZlcmhlYWQgZm9yXG4vLyB0cmVlcyB0aGF0IGRvbid0IG5lZWQgaXQuICBDcmVhdGVcbi8vIGEgc3ViY2xhc3Mgb2YgUGFyc2VyUnVsZUNvbnRleHQgd2l0aCBiYWNraW5nIGZpZWxkIGFuZCBzZXRcbi8vIG9wdGlvbiBjb250ZXh0U3VwZXJDbGFzcy5cblJ1bGVDb250ZXh0LnByb3RvdHlwZS5zZXRBbHROdW1iZXIgPSBmdW5jdGlvbihhbHROdW1iZXIpIHsgfVxuXG5SdWxlQ29udGV4dC5wcm90b3R5cGUuZ2V0Q2hpbGQgPSBmdW5jdGlvbihpKSB7XG5cdHJldHVybiBudWxsO1xufTtcblxuUnVsZUNvbnRleHQucHJvdG90eXBlLmdldENoaWxkQ291bnQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIDA7XG59O1xuXG5SdWxlQ29udGV4dC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odmlzaXRvcikge1xuXHRyZXR1cm4gdmlzaXRvci52aXNpdENoaWxkcmVuKHRoaXMpO1xufTtcblxuLy9uZWVkIHRvIG1hbmFnZSBjaXJjdWxhciBkZXBlbmRlbmNpZXMsIHNvIGV4cG9ydCBub3dcbmV4cG9ydHMuUnVsZUNvbnRleHQgPSBSdWxlQ29udGV4dDtcbnZhciBUcmVlcyA9IHJlcXVpcmUoJy4vdHJlZS9UcmVlcycpLlRyZWVzO1xuXG5cbi8vIFByaW50IG91dCBhIHdob2xlIHRyZWUsIG5vdCBqdXN0IGEgbm9kZSwgaW4gTElTUCBmb3JtYXRcbi8vIChyb290IGNoaWxkMSAuLiBjaGlsZE4pLiBQcmludCBqdXN0IGEgbm9kZSBpZiB0aGlzIGlzIGEgbGVhZi5cbi8vXG5cblJ1bGVDb250ZXh0LnByb3RvdHlwZS50b1N0cmluZ1RyZWUgPSBmdW5jdGlvbihydWxlTmFtZXMsIHJlY29nKSB7XG5cdHJldHVybiBUcmVlcy50b1N0cmluZ1RyZWUodGhpcywgcnVsZU5hbWVzLCByZWNvZyk7XG59O1xuXG5SdWxlQ29udGV4dC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihydWxlTmFtZXMsIHN0b3ApIHtcblx0cnVsZU5hbWVzID0gcnVsZU5hbWVzIHx8IG51bGw7XG5cdHN0b3AgPSBzdG9wIHx8IG51bGw7XG5cdHZhciBwID0gdGhpcztcblx0dmFyIHMgPSBcIltcIjtcblx0d2hpbGUgKHAgIT09IG51bGwgJiYgcCAhPT0gc3RvcCkge1xuXHRcdGlmIChydWxlTmFtZXMgPT09IG51bGwpIHtcblx0XHRcdGlmICghcC5pc0VtcHR5KCkpIHtcblx0XHRcdFx0cyArPSBwLmludm9raW5nU3RhdGU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciByaSA9IHAucnVsZUluZGV4O1xuXHRcdFx0dmFyIHJ1bGVOYW1lID0gKHJpID49IDAgJiYgcmkgPCBydWxlTmFtZXMubGVuZ3RoKSA/IHJ1bGVOYW1lc1tyaV1cblx0XHRcdFx0XHQ6IFwiXCIgKyByaTtcblx0XHRcdHMgKz0gcnVsZU5hbWU7XG5cdFx0fVxuXHRcdGlmIChwLnBhcmVudEN0eCAhPT0gbnVsbCAmJiAocnVsZU5hbWVzICE9PSBudWxsIHx8ICFwLnBhcmVudEN0eC5pc0VtcHR5KCkpKSB7XG5cdFx0XHRzICs9IFwiIFwiO1xuXHRcdH1cblx0XHRwID0gcC5wYXJlbnRDdHg7XG5cdH1cblx0cyArPSBcIl1cIjtcblx0cmV0dXJuIHM7XG59O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/RuleContext.js\n");

/***/ }),

/***/ "./node_modules/antlr4/Token.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Token.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n// A token has properties: text, type, line, character position in the line\n// (so we can ignore tabs), token channel, index, and source from which\n// we obtained this token.\nfunction Token() {\n  this.source = null;\n  this.type = null; // token type of the token\n\n  this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\n  this.start = null; // optional; return -1 if not implemented.\n\n  this.stop = null; // optional; return -1 if not implemented.\n\n  this.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\n  this.line = null; // line=1..n of the 1st character\n\n  this.column = null; // beginning of the line at which it occurs, 0..n-1\n\n  this._text = null; // text of the token.\n\n  return this;\n}\n\nToken.INVALID_TYPE = 0; // During lookahead operations, this \"token\" signifies we hit rule end ATN state\n// and did not follow it despite needing to.\n\nToken.EPSILON = -2;\nToken.MIN_USER_TOKEN_TYPE = 1;\nToken.EOF = -1; // All tokens go to the parser (unless skip() is called in that rule)\n// on a particular \"channel\". The parser tunes to a particular channel\n// so that whitespace etc... can go to the parser on a \"hidden\" channel.\n\nToken.DEFAULT_CHANNEL = 0; // Anything on different channel than DEFAULT_CHANNEL is not parsed\n// by parser.\n\nToken.HIDDEN_CHANNEL = 1; // Explicitly set the text for this token. If {code text} is not\n// {@code null}, then {@link //getText} will return this value rather than\n// extracting the text from the input.\n//\n// @param text The explicit text of the token, or {@code null} if the text\n// should be obtained from the input along with the start and stop indexes\n// of the token.\n\nObject.defineProperty(Token.prototype, \"text\", {\n  get: function get() {\n    return this._text;\n  },\n  set: function set(text) {\n    this._text = text;\n  }\n});\n\nToken.prototype.getTokenSource = function () {\n  return this.source[0];\n};\n\nToken.prototype.getInputStream = function () {\n  return this.source[1];\n};\n\nfunction CommonToken(source, type, channel, start, stop) {\n  Token.call(this);\n  this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n  this.type = type !== undefined ? type : null;\n  this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n  this.start = start !== undefined ? start : -1;\n  this.stop = stop !== undefined ? stop : -1;\n  this.tokenIndex = -1;\n\n  if (this.source[0] !== null) {\n    this.line = source[0].line;\n    this.column = source[0].column;\n  } else {\n    this.column = -1;\n  }\n\n  return this;\n}\n\nCommonToken.prototype = Object.create(Token.prototype);\nCommonToken.prototype.constructor = CommonToken; // An empty {@link Pair} which is used as the default value of\n// {@link //source} for tokens that do not have a source.\n\nCommonToken.EMPTY_SOURCE = [null, null]; // Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n//\n// <p>\n// If {@code oldToken} is also a {@link CommonToken} instance, the newly\n// constructed token will share a reference to the {@link //text} field and\n// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n// be assigned the result of calling {@link //getText}, and {@link //source}\n// will be constructed from the result of {@link Token//getTokenSource} and\n// {@link Token//getInputStream}.</p>\n//\n// @param oldToken The token to copy.\n//\n\nCommonToken.prototype.clone = function () {\n  var t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n  t.tokenIndex = this.tokenIndex;\n  t.line = this.line;\n  t.column = this.column;\n  t.text = this.text;\n  return t;\n};\n\nObject.defineProperty(CommonToken.prototype, \"text\", {\n  get: function get() {\n    if (this._text !== null) {\n      return this._text;\n    }\n\n    var input = this.getInputStream();\n\n    if (input === null) {\n      return null;\n    }\n\n    var n = input.size;\n\n    if (this.start < n && this.stop < n) {\n      return input.getText(this.start, this.stop);\n    } else {\n      return \"<EOF>\";\n    }\n  },\n  set: function set(text) {\n    this._text = text;\n  }\n});\n\nCommonToken.prototype.toString = function () {\n  var txt = this.text;\n\n  if (txt !== null) {\n    txt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n  } else {\n    txt = \"<no text>\";\n  }\n\n  return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" + txt + \"',<\" + this.type + \">\" + (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" + this.line + \":\" + this.column + \"]\";\n};\n\nexports.Token = Token;\nexports.CommonToken = CommonToken;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L1Rva2VuLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9Ub2tlbi5qcz83NzE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vXG5cbi8vIEEgdG9rZW4gaGFzIHByb3BlcnRpZXM6IHRleHQsIHR5cGUsIGxpbmUsIGNoYXJhY3RlciBwb3NpdGlvbiBpbiB0aGUgbGluZVxuLy8gKHNvIHdlIGNhbiBpZ25vcmUgdGFicyksIHRva2VuIGNoYW5uZWwsIGluZGV4LCBhbmQgc291cmNlIGZyb20gd2hpY2hcbi8vIHdlIG9idGFpbmVkIHRoaXMgdG9rZW4uXG5cbmZ1bmN0aW9uIFRva2VuKCkge1xuXHR0aGlzLnNvdXJjZSA9IG51bGw7XG5cdHRoaXMudHlwZSA9IG51bGw7IC8vIHRva2VuIHR5cGUgb2YgdGhlIHRva2VuXG5cdHRoaXMuY2hhbm5lbCA9IG51bGw7IC8vIFRoZSBwYXJzZXIgaWdub3JlcyBldmVyeXRoaW5nIG5vdCBvbiBERUZBVUxUX0NIQU5ORUxcblx0dGhpcy5zdGFydCA9IG51bGw7IC8vIG9wdGlvbmFsOyByZXR1cm4gLTEgaWYgbm90IGltcGxlbWVudGVkLlxuXHR0aGlzLnN0b3AgPSBudWxsOyAvLyBvcHRpb25hbDsgcmV0dXJuIC0xIGlmIG5vdCBpbXBsZW1lbnRlZC5cblx0dGhpcy50b2tlbkluZGV4ID0gbnVsbDsgLy8gZnJvbSAwLi5uLTEgb2YgdGhlIHRva2VuIG9iamVjdCBpbiB0aGUgaW5wdXQgc3RyZWFtXG5cdHRoaXMubGluZSA9IG51bGw7IC8vIGxpbmU9MS4ubiBvZiB0aGUgMXN0IGNoYXJhY3RlclxuXHR0aGlzLmNvbHVtbiA9IG51bGw7IC8vIGJlZ2lubmluZyBvZiB0aGUgbGluZSBhdCB3aGljaCBpdCBvY2N1cnMsIDAuLm4tMVxuXHR0aGlzLl90ZXh0ID0gbnVsbDsgLy8gdGV4dCBvZiB0aGUgdG9rZW4uXG5cdHJldHVybiB0aGlzO1xufVxuXG5Ub2tlbi5JTlZBTElEX1RZUEUgPSAwO1xuXG4vLyBEdXJpbmcgbG9va2FoZWFkIG9wZXJhdGlvbnMsIHRoaXMgXCJ0b2tlblwiIHNpZ25pZmllcyB3ZSBoaXQgcnVsZSBlbmQgQVROIHN0YXRlXG4vLyBhbmQgZGlkIG5vdCBmb2xsb3cgaXQgZGVzcGl0ZSBuZWVkaW5nIHRvLlxuVG9rZW4uRVBTSUxPTiA9IC0yO1xuXG5Ub2tlbi5NSU5fVVNFUl9UT0tFTl9UWVBFID0gMTtcblxuVG9rZW4uRU9GID0gLTE7XG5cbi8vIEFsbCB0b2tlbnMgZ28gdG8gdGhlIHBhcnNlciAodW5sZXNzIHNraXAoKSBpcyBjYWxsZWQgaW4gdGhhdCBydWxlKVxuLy8gb24gYSBwYXJ0aWN1bGFyIFwiY2hhbm5lbFwiLiBUaGUgcGFyc2VyIHR1bmVzIHRvIGEgcGFydGljdWxhciBjaGFubmVsXG4vLyBzbyB0aGF0IHdoaXRlc3BhY2UgZXRjLi4uIGNhbiBnbyB0byB0aGUgcGFyc2VyIG9uIGEgXCJoaWRkZW5cIiBjaGFubmVsLlxuXG5Ub2tlbi5ERUZBVUxUX0NIQU5ORUwgPSAwO1xuXG4vLyBBbnl0aGluZyBvbiBkaWZmZXJlbnQgY2hhbm5lbCB0aGFuIERFRkFVTFRfQ0hBTk5FTCBpcyBub3QgcGFyc2VkXG4vLyBieSBwYXJzZXIuXG5cblRva2VuLkhJRERFTl9DSEFOTkVMID0gMTtcblxuLy8gRXhwbGljaXRseSBzZXQgdGhlIHRleHQgZm9yIHRoaXMgdG9rZW4uIElmIHtjb2RlIHRleHR9IGlzIG5vdFxuLy8ge0Bjb2RlIG51bGx9LCB0aGVuIHtAbGluayAvL2dldFRleHR9IHdpbGwgcmV0dXJuIHRoaXMgdmFsdWUgcmF0aGVyIHRoYW5cbi8vIGV4dHJhY3RpbmcgdGhlIHRleHQgZnJvbSB0aGUgaW5wdXQuXG4vL1xuLy8gQHBhcmFtIHRleHQgVGhlIGV4cGxpY2l0IHRleHQgb2YgdGhlIHRva2VuLCBvciB7QGNvZGUgbnVsbH0gaWYgdGhlIHRleHRcbi8vIHNob3VsZCBiZSBvYnRhaW5lZCBmcm9tIHRoZSBpbnB1dCBhbG9uZyB3aXRoIHRoZSBzdGFydCBhbmQgc3RvcCBpbmRleGVzXG4vLyBvZiB0aGUgdG9rZW4uXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb2tlbi5wcm90b3R5cGUsIFwidGV4dFwiLCB7XG5cdGdldCA6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl90ZXh0O1xuXHR9LFxuXHRzZXQgOiBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0dGhpcy5fdGV4dCA9IHRleHQ7XG5cdH1cbn0pO1xuXG5Ub2tlbi5wcm90b3R5cGUuZ2V0VG9rZW5Tb3VyY2UgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMuc291cmNlWzBdO1xufTtcblxuVG9rZW4ucHJvdG90eXBlLmdldElucHV0U3RyZWFtID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnNvdXJjZVsxXTtcbn07XG5cbmZ1bmN0aW9uIENvbW1vblRva2VuKHNvdXJjZSwgdHlwZSwgY2hhbm5lbCwgc3RhcnQsIHN0b3ApIHtcblx0VG9rZW4uY2FsbCh0aGlzKTtcblx0dGhpcy5zb3VyY2UgPSBzb3VyY2UgIT09IHVuZGVmaW5lZCA/IHNvdXJjZSA6IENvbW1vblRva2VuLkVNUFRZX1NPVVJDRTtcblx0dGhpcy50eXBlID0gdHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZSA6IG51bGw7XG5cdHRoaXMuY2hhbm5lbCA9IGNoYW5uZWwgIT09IHVuZGVmaW5lZCA/IGNoYW5uZWwgOiBUb2tlbi5ERUZBVUxUX0NIQU5ORUw7XG5cdHRoaXMuc3RhcnQgPSBzdGFydCAhPT0gdW5kZWZpbmVkID8gc3RhcnQgOiAtMTtcblx0dGhpcy5zdG9wID0gc3RvcCAhPT0gdW5kZWZpbmVkID8gc3RvcCA6IC0xO1xuXHR0aGlzLnRva2VuSW5kZXggPSAtMTtcblx0aWYgKHRoaXMuc291cmNlWzBdICE9PSBudWxsKSB7XG5cdFx0dGhpcy5saW5lID0gc291cmNlWzBdLmxpbmU7XG5cdFx0dGhpcy5jb2x1bW4gPSBzb3VyY2VbMF0uY29sdW1uO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMuY29sdW1uID0gLTE7XG5cdH1cblx0cmV0dXJuIHRoaXM7XG59XG5cbkNvbW1vblRva2VuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVG9rZW4ucHJvdG90eXBlKTtcbkNvbW1vblRva2VuLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbW1vblRva2VuO1xuXG4vLyBBbiBlbXB0eSB7QGxpbmsgUGFpcn0gd2hpY2ggaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCB2YWx1ZSBvZlxuLy8ge0BsaW5rIC8vc291cmNlfSBmb3IgdG9rZW5zIHRoYXQgZG8gbm90IGhhdmUgYSBzb3VyY2UuXG5Db21tb25Ub2tlbi5FTVBUWV9TT1VSQ0UgPSBbIG51bGwsIG51bGwgXTtcblxuLy8gQ29uc3RydWN0cyBhIG5ldyB7QGxpbmsgQ29tbW9uVG9rZW59IGFzIGEgY29weSBvZiBhbm90aGVyIHtAbGluayBUb2tlbn0uXG4vL1xuLy8gPHA+XG4vLyBJZiB7QGNvZGUgb2xkVG9rZW59IGlzIGFsc28gYSB7QGxpbmsgQ29tbW9uVG9rZW59IGluc3RhbmNlLCB0aGUgbmV3bHlcbi8vIGNvbnN0cnVjdGVkIHRva2VuIHdpbGwgc2hhcmUgYSByZWZlcmVuY2UgdG8gdGhlIHtAbGluayAvL3RleHR9IGZpZWxkIGFuZFxuLy8gdGhlIHtAbGluayBQYWlyfSBzdG9yZWQgaW4ge0BsaW5rIC8vc291cmNlfS4gT3RoZXJ3aXNlLCB7QGxpbmsgLy90ZXh0fSB3aWxsXG4vLyBiZSBhc3NpZ25lZCB0aGUgcmVzdWx0IG9mIGNhbGxpbmcge0BsaW5rIC8vZ2V0VGV4dH0sIGFuZCB7QGxpbmsgLy9zb3VyY2V9XG4vLyB3aWxsIGJlIGNvbnN0cnVjdGVkIGZyb20gdGhlIHJlc3VsdCBvZiB7QGxpbmsgVG9rZW4vL2dldFRva2VuU291cmNlfSBhbmRcbi8vIHtAbGluayBUb2tlbi8vZ2V0SW5wdXRTdHJlYW19LjwvcD5cbi8vXG4vLyBAcGFyYW0gb2xkVG9rZW4gVGhlIHRva2VuIHRvIGNvcHkuXG4vL1xuQ29tbW9uVG9rZW4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0ID0gbmV3IENvbW1vblRva2VuKHRoaXMuc291cmNlLCB0aGlzLnR5cGUsIHRoaXMuY2hhbm5lbCwgdGhpcy5zdGFydCxcblx0XHRcdHRoaXMuc3RvcCk7XG5cdHQudG9rZW5JbmRleCA9IHRoaXMudG9rZW5JbmRleDtcblx0dC5saW5lID0gdGhpcy5saW5lO1xuXHR0LmNvbHVtbiA9IHRoaXMuY29sdW1uO1xuXHR0LnRleHQgPSB0aGlzLnRleHQ7XG5cdHJldHVybiB0O1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbW1vblRva2VuLnByb3RvdHlwZSwgXCJ0ZXh0XCIsIHtcblx0Z2V0IDogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuX3RleHQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLl90ZXh0O1xuXHRcdH1cblx0XHR2YXIgaW5wdXQgPSB0aGlzLmdldElucHV0U3RyZWFtKCk7XG5cdFx0aWYgKGlucHV0ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0dmFyIG4gPSBpbnB1dC5zaXplO1xuXHRcdGlmICh0aGlzLnN0YXJ0IDwgbiAmJiB0aGlzLnN0b3AgPCBuKSB7XG5cdFx0XHRyZXR1cm4gaW5wdXQuZ2V0VGV4dCh0aGlzLnN0YXJ0LCB0aGlzLnN0b3ApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gXCI8RU9GPlwiO1xuXHRcdH1cblx0fSxcblx0c2V0IDogZnVuY3Rpb24odGV4dCkge1xuXHRcdHRoaXMuX3RleHQgPSB0ZXh0O1xuXHR9XG59KTtcblxuQ29tbW9uVG9rZW4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0eHQgPSB0aGlzLnRleHQ7XG5cdGlmICh0eHQgIT09IG51bGwpIHtcblx0XHR0eHQgPSB0eHQucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIikucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIikucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIik7XG5cdH0gZWxzZSB7XG5cdFx0dHh0ID0gXCI8bm8gdGV4dD5cIjtcblx0fVxuXHRyZXR1cm4gXCJbQFwiICsgdGhpcy50b2tlbkluZGV4ICsgXCIsXCIgKyB0aGlzLnN0YXJ0ICsgXCI6XCIgKyB0aGlzLnN0b3AgKyBcIj0nXCIgK1xuXHRcdFx0dHh0ICsgXCInLDxcIiArIHRoaXMudHlwZSArIFwiPlwiICtcblx0XHRcdCh0aGlzLmNoYW5uZWwgPiAwID8gXCIsY2hhbm5lbD1cIiArIHRoaXMuY2hhbm5lbCA6IFwiXCIpICsgXCIsXCIgK1xuXHRcdFx0dGhpcy5saW5lICsgXCI6XCIgKyB0aGlzLmNvbHVtbiArIFwiXVwiO1xufTtcblxuZXhwb3J0cy5Ub2tlbiA9IFRva2VuO1xuZXhwb3J0cy5Db21tb25Ub2tlbiA9IENvbW1vblRva2VuO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFFQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBO0FBQ0E7QUFvQkE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/Token.js\n");

/***/ }),

/***/ "./node_modules/antlr4/Utils.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Utils.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction arrayToString(a) {\n  return \"[\" + a.join(\", \") + \"]\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n  var remainder,\n      bytes,\n      h1,\n      h1b,\n      c1,\n      c1b,\n      c2,\n      c2b,\n      k1,\n      i,\n      key = this.toString();\n  remainder = key.length & 3; // key.length % 4\n\n  bytes = key.length - remainder;\n  h1 = String.prototype.seed;\n  c1 = 0xcc9e2d51;\n  c2 = 0x1b873593;\n  i = 0;\n\n  while (i < bytes) {\n    k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n    ++i;\n    k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n    k1 = k1 << 15 | k1 >>> 17;\n    k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n    h1 ^= k1;\n    h1 = h1 << 13 | h1 >>> 19;\n    h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n    h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      k1 ^= key.charCodeAt(i) & 0xff;\n      k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= k1;\n  }\n\n  h1 ^= key.length;\n  h1 ^= h1 >>> 16;\n  h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 13;\n  h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n  h1 ^= h1 >>> 16;\n  return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n  return a.equals(b);\n}\n\nfunction standardHashCodeFunction(a) {\n  return a.hashCode();\n}\n\nfunction Set(hashFunction, equalsFunction) {\n  this.data = {};\n  this.hashFunction = hashFunction || standardHashCodeFunction;\n  this.equalsFunction = equalsFunction || standardEqualsFunction;\n  return this;\n}\n\nObject.defineProperty(Set.prototype, \"length\", {\n  get: function get() {\n    var l = 0;\n\n    for (var key in this.data) {\n      if (key.indexOf(\"hash_\") === 0) {\n        l = l + this.data[key].length;\n      }\n    }\n\n    return l;\n  }\n});\n\nSet.prototype.add = function (value) {\n  var hash = this.hashFunction(value);\n  var key = \"hash_\" + hash;\n\n  if (key in this.data) {\n    var values = this.data[key];\n\n    for (var i = 0; i < values.length; i++) {\n      if (this.equalsFunction(value, values[i])) {\n        return values[i];\n      }\n    }\n\n    values.push(value);\n    return value;\n  } else {\n    this.data[key] = [value];\n    return value;\n  }\n};\n\nSet.prototype.contains = function (value) {\n  return this.get(value) != null;\n};\n\nSet.prototype.get = function (value) {\n  var hash = this.hashFunction(value);\n  var key = \"hash_\" + hash;\n\n  if (key in this.data) {\n    var values = this.data[key];\n\n    for (var i = 0; i < values.length; i++) {\n      if (this.equalsFunction(value, values[i])) {\n        return values[i];\n      }\n    }\n  }\n\n  return null;\n};\n\nSet.prototype.values = function () {\n  var l = [];\n\n  for (var key in this.data) {\n    if (key.indexOf(\"hash_\") === 0) {\n      l = l.concat(this.data[key]);\n    }\n  }\n\n  return l;\n};\n\nSet.prototype.toString = function () {\n  return arrayToString(this.values());\n};\n\nfunction BitSet() {\n  this.data = [];\n  return this;\n}\n\nBitSet.prototype.add = function (value) {\n  this.data[value] = true;\n};\n\nBitSet.prototype.or = function (set) {\n  var bits = this;\n  Object.keys(set.data).map(function (alt) {\n    bits.add(alt);\n  });\n};\n\nBitSet.prototype.remove = function (value) {\n  delete this.data[value];\n};\n\nBitSet.prototype.contains = function (value) {\n  return this.data[value] === true;\n};\n\nBitSet.prototype.values = function () {\n  return Object.keys(this.data);\n};\n\nBitSet.prototype.minValue = function () {\n  return Math.min.apply(null, this.values());\n};\n\nBitSet.prototype.hashCode = function () {\n  var hash = new Hash();\n  hash.update(this.values());\n  return hash.finish();\n};\n\nBitSet.prototype.equals = function (other) {\n  if (!(other instanceof BitSet)) {\n    return false;\n  }\n\n  return this.hashCode() === other.hashCode();\n};\n\nObject.defineProperty(BitSet.prototype, \"length\", {\n  get: function get() {\n    return this.values().length;\n  }\n});\n\nBitSet.prototype.toString = function () {\n  return \"{\" + this.values().join(\", \") + \"}\";\n};\n\nfunction Map(hashFunction, equalsFunction) {\n  this.data = {};\n  this.hashFunction = hashFunction || standardHashCodeFunction;\n  this.equalsFunction = equalsFunction || standardEqualsFunction;\n  return this;\n}\n\nObject.defineProperty(Map.prototype, \"length\", {\n  get: function get() {\n    var l = 0;\n\n    for (var hashKey in this.data) {\n      if (hashKey.indexOf(\"hash_\") === 0) {\n        l = l + this.data[hashKey].length;\n      }\n    }\n\n    return l;\n  }\n});\n\nMap.prototype.put = function (key, value) {\n  var hashKey = \"hash_\" + this.hashFunction(key);\n\n  if (hashKey in this.data) {\n    var entries = this.data[hashKey];\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n\n      if (this.equalsFunction(key, entry.key)) {\n        var oldValue = entry.value;\n        entry.value = value;\n        return oldValue;\n      }\n    }\n\n    entries.push({\n      key: key,\n      value: value\n    });\n    return value;\n  } else {\n    this.data[hashKey] = [{\n      key: key,\n      value: value\n    }];\n    return value;\n  }\n};\n\nMap.prototype.containsKey = function (key) {\n  var hashKey = \"hash_\" + this.hashFunction(key);\n\n  if (hashKey in this.data) {\n    var entries = this.data[hashKey];\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      if (this.equalsFunction(key, entry.key)) return true;\n    }\n  }\n\n  return false;\n};\n\nMap.prototype.get = function (key) {\n  var hashKey = \"hash_\" + this.hashFunction(key);\n\n  if (hashKey in this.data) {\n    var entries = this.data[hashKey];\n\n    for (var i = 0; i < entries.length; i++) {\n      var entry = entries[i];\n      if (this.equalsFunction(key, entry.key)) return entry.value;\n    }\n  }\n\n  return null;\n};\n\nMap.prototype.entries = function () {\n  var l = [];\n\n  for (var key in this.data) {\n    if (key.indexOf(\"hash_\") === 0) {\n      l = l.concat(this.data[key]);\n    }\n  }\n\n  return l;\n};\n\nMap.prototype.getKeys = function () {\n  return this.entries().map(function (e) {\n    return e.key;\n  });\n};\n\nMap.prototype.getValues = function () {\n  return this.entries().map(function (e) {\n    return e.value;\n  });\n};\n\nMap.prototype.toString = function () {\n  var ss = this.entries().map(function (entry) {\n    return '{' + entry.key + ':' + entry.value + '}';\n  });\n  return '[' + ss.join(\", \") + ']';\n};\n\nfunction AltDict() {\n  this.data = {};\n  return this;\n}\n\nAltDict.prototype.get = function (key) {\n  key = \"k-\" + key;\n\n  if (key in this.data) {\n    return this.data[key];\n  } else {\n    return null;\n  }\n};\n\nAltDict.prototype.put = function (key, value) {\n  key = \"k-\" + key;\n  this.data[key] = value;\n};\n\nAltDict.prototype.values = function () {\n  var data = this.data;\n  var keys = Object.keys(this.data);\n  return keys.map(function (key) {\n    return data[key];\n  });\n};\n\nfunction DoubleDict(defaultMapCtor) {\n  this.defaultMapCtor = defaultMapCtor || Map;\n  this.cacheMap = new this.defaultMapCtor();\n  return this;\n}\n\nfunction Hash() {\n  this.count = 0;\n  this.hash = 0;\n  return this;\n}\n\nHash.prototype.update = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    var value = arguments[i];\n    if (value == null) continue;\n    if (Array.isArray(value)) this.update.apply(this, value);else {\n      var k = 0;\n\n      switch (_typeof(value)) {\n        case 'undefined':\n        case 'function':\n          continue;\n\n        case 'number':\n        case 'boolean':\n          k = value;\n          break;\n\n        case 'string':\n          k = value.hashCode();\n          break;\n\n        default:\n          if (value.updateHashCode) value.updateHashCode(this);else console.log(\"No updateHashCode for \" + value.toString());\n          continue;\n      }\n\n      k = k * 0xCC9E2D51;\n      k = k << 15 | k >>> 32 - 15;\n      k = k * 0x1B873593;\n      this.count = this.count + 1;\n      var hash = this.hash ^ k;\n      hash = hash << 13 | hash >>> 32 - 13;\n      hash = hash * 5 + 0xE6546B64;\n      this.hash = hash;\n    }\n  }\n};\n\nHash.prototype.finish = function () {\n  var hash = this.hash ^ this.count * 4;\n  hash = hash ^ hash >>> 16;\n  hash = hash * 0x85EBCA6B;\n  hash = hash ^ hash >>> 13;\n  hash = hash * 0xC2B2AE35;\n  hash = hash ^ hash >>> 16;\n  return hash;\n};\n\nfunction hashStuff() {\n  var hash = new Hash();\n  hash.update.apply(hash, arguments);\n  return hash.finish();\n}\n\nDoubleDict.prototype.get = function (a, b) {\n  var d = this.cacheMap.get(a) || null;\n  return d === null ? null : d.get(b) || null;\n};\n\nDoubleDict.prototype.set = function (a, b, o) {\n  var d = this.cacheMap.get(a) || null;\n\n  if (d === null) {\n    d = new this.defaultMapCtor();\n    this.cacheMap.put(a, d);\n  }\n\n  d.put(b, o);\n};\n\nfunction escapeWhitespace(s, escapeSpaces) {\n  s = s.replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\");\n\n  if (escapeSpaces) {\n    s = s.replace(/ /g, \"\\xB7\");\n  }\n\n  return s;\n}\n\nfunction titleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1);\n  });\n}\n\n;\n\nfunction equalArrays(a, b) {\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a == b) return true;\n  if (a.length != b.length) return false;\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) continue;\n    if (!a[i].equals(b[i])) return false;\n  }\n\n  return true;\n}\n\n;\nexports.Hash = Hash;\nexports.Set = Set;\nexports.Map = Map;\nexports.BitSet = BitSet;\nexports.AltDict = AltDict;\nexports.DoubleDict = DoubleDict;\nexports.hashStuff = hashStuff;\nexports.escapeWhitespace = escapeWhitespace;\nexports.arrayToString = arrayToString;\nexports.titleCase = titleCase;\nexports.equalArrays = equalArrays;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/Utils.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATN.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/atn/ATN.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ \"./node_modules/antlr4/LL1Analyzer.js\").LL1Analyzer;\n\nvar IntervalSet = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").IntervalSet;\n\nfunction ATN(grammarType, maxTokenType) {\n  // Used for runtime deserialization of ATNs from strings///\n  // The type of the ATN.\n  this.grammarType = grammarType; // The maximum value for any symbol recognized by a transition in the ATN.\n\n  this.maxTokenType = maxTokenType;\n  this.states = []; // Each subrule/rule is a decision point and we must track them so we\n  //  can go back later and build DFA predictors for them.  This includes\n  //  all the rules, subrules, optional blocks, ()+, ()* etc...\n\n  this.decisionToState = []; // Maps from rule index to starting state number.\n\n  this.ruleToStartState = []; // Maps from rule index to stop state number.\n\n  this.ruleToStopState = null;\n  this.modeNameToStartState = {}; // For lexer ATNs, this maps the rule index to the resulting token type.\n  // For parser ATNs, this maps the rule index to the generated bypass token\n  // type if the\n  // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n  // deserialization option was specified; otherwise, this is {@code null}.\n\n  this.ruleToTokenType = null; // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n  // be referenced by action transitions in the ATN.\n\n  this.lexerActions = null;\n  this.modeToStartState = [];\n  return this;\n} // Compute the set of valid tokens that can occur starting in state {@code s}.\n//  If {@code ctx} is null, the set of tokens will not include what can follow\n//  the rule surrounding {@code s}. In other words, the set will be\n//  restricted to tokens reachable staying within {@code s}'s rule.\n\n\nATN.prototype.nextTokensInContext = function (s, ctx) {\n  var anal = new LL1Analyzer(this);\n  return anal.LOOK(s, null, ctx);\n}; // Compute the set of valid tokens that can occur starting in {@code s} and\n// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n// rule.\n\n\nATN.prototype.nextTokensNoContext = function (s) {\n  if (s.nextTokenWithinRule !== null) {\n    return s.nextTokenWithinRule;\n  }\n\n  s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n  s.nextTokenWithinRule.readOnly = true;\n  return s.nextTokenWithinRule;\n};\n\nATN.prototype.nextTokens = function (s, ctx) {\n  if (ctx === undefined) {\n    return this.nextTokensNoContext(s);\n  } else {\n    return this.nextTokensInContext(s, ctx);\n  }\n};\n\nATN.prototype.addState = function (state) {\n  if (state !== null) {\n    state.atn = this;\n    state.stateNumber = this.states.length;\n  }\n\n  this.states.push(state);\n};\n\nATN.prototype.removeState = function (state) {\n  this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n};\n\nATN.prototype.defineDecisionState = function (s) {\n  this.decisionToState.push(s);\n  s.decision = this.decisionToState.length - 1;\n  return s.decision;\n};\n\nATN.prototype.getDecisionState = function (decision) {\n  if (this.decisionToState.length === 0) {\n    return null;\n  } else {\n    return this.decisionToState[decision];\n  }\n}; // Computes the set of input symbols which could follow ATN state number\n// {@code stateNumber} in the specified full {@code context}. This method\n// considers the complete parser context, but does not evaluate semantic\n// predicates (i.e. all predicates encountered during the calculation are\n// assumed true). If a path in the ATN exists from the starting state to the\n// {@link RuleStopState} of the outermost context without matching any\n// symbols, {@link Token//EOF} is added to the returned set.\n//\n// <p>If {@code context} is {@code null}, it is treated as\n// {@link ParserRuleContext//EMPTY}.</p>\n//\n// @param stateNumber the ATN state number\n// @param context the full parse context\n// @return The set of potentially valid input symbols which could follow the\n// specified state in the specified context.\n// @throws IllegalArgumentException if the ATN does not contain a state with\n// number {@code stateNumber}\n\n\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nATN.prototype.getExpectedTokens = function (stateNumber, ctx) {\n  if (stateNumber < 0 || stateNumber >= this.states.length) {\n    throw \"Invalid state number.\";\n  }\n\n  var s = this.states[stateNumber];\n  var following = this.nextTokens(s);\n\n  if (!following.contains(Token.EPSILON)) {\n    return following;\n  }\n\n  var expected = new IntervalSet();\n  expected.addSet(following);\n  expected.removeOne(Token.EPSILON);\n\n  while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n    var invokingState = this.states[ctx.invokingState];\n    var rt = invokingState.transitions[0];\n    following = this.nextTokens(rt.followState);\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    ctx = ctx.parentCtx;\n  }\n\n  if (following.contains(Token.EPSILON)) {\n    expected.addOne(Token.EOF);\n  }\n\n  return expected;\n};\n\nATN.INVALID_ALT_NUMBER = 0;\nexports.ATN = ATN;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATN.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfig.js":
/*!**********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfig.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// A tuple: (ATN state, predicted alt, syntactic, semantic context).\n//  The syntactic context is a graph-structured stack node whose\n//  path(s) to the root is the rule invocation(s)\n//  chain used to arrive at the state.  The semantic context is\n//  the tree of semantic predicates encountered before reaching\n//  an ATN state.\n///\nvar DecisionState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").DecisionState;\n\nvar SemanticContext = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").SemanticContext;\n\nvar Hash = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/Utils.js\").Hash;\n\nfunction checkParams(params, isCfg) {\n  if (params === null) {\n    var result = {\n      state: null,\n      alt: null,\n      context: null,\n      semanticContext: null\n    };\n\n    if (isCfg) {\n      result.reachesIntoOuterContext = 0;\n    }\n\n    return result;\n  } else {\n    var props = {};\n    props.state = params.state || null;\n    props.alt = params.alt === undefined ? null : params.alt;\n    props.context = params.context || null;\n    props.semanticContext = params.semanticContext || null;\n\n    if (isCfg) {\n      props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n      props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n    }\n\n    return props;\n  }\n}\n\nfunction ATNConfig(params, config) {\n  this.checkContext(params, config);\n  params = checkParams(params);\n  config = checkParams(config, true); // The ATN state associated with this configuration///\n\n  this.state = params.state !== null ? params.state : config.state; // What alt (or lexer rule) is predicted by this configuration///\n\n  this.alt = params.alt !== null ? params.alt : config.alt; // The stack of invoking states leading to the rule/states associated\n  //  with this config.  We track only those contexts pushed during\n  //  execution of the ATN simulator.\n\n  this.context = params.context !== null ? params.context : config.context;\n  this.semanticContext = params.semanticContext !== null ? params.semanticContext : config.semanticContext !== null ? config.semanticContext : SemanticContext.NONE; // We cannot execute predicates dependent upon local context unless\n  // we know for sure we are in the correct context. Because there is\n  // no way to do this efficiently, we simply cannot evaluate\n  // dependent predicates unless we are in the rule that initially\n  // invokes the ATN simulator.\n  //\n  // closure() tracks the depth of how far we dip into the\n  // outer context: depth &gt; 0.  Note that it may not be totally\n  // accurate depth since I don't ever decrement. TODO: make it a boolean then\n\n  this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n  this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n  return this;\n}\n\nATNConfig.prototype.checkContext = function (params, config) {\n  if ((params.context === null || params.context === undefined) && (config === null || config.context === null || config.context === undefined)) {\n    this.context = null;\n  }\n};\n\nATNConfig.prototype.hashCode = function () {\n  var hash = new Hash();\n  this.updateHashCode(hash);\n  return hash.finish();\n};\n\nATNConfig.prototype.updateHashCode = function (hash) {\n  hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n}; // An ATN configuration is equal to another if both have\n//  the same state, they predict the same alternative, and\n//  syntactic/semantic contexts are the same.\n\n\nATNConfig.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof ATNConfig)) {\n    return false;\n  } else {\n    return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && (this.context === null ? other.context === null : this.context.equals(other.context)) && this.semanticContext.equals(other.semanticContext) && this.precedenceFilterSuppressed === other.precedenceFilterSuppressed;\n  }\n};\n\nATNConfig.prototype.hashCodeForConfigSet = function () {\n  var hash = new Hash();\n  hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n  return hash.finish();\n};\n\nATNConfig.prototype.equalsForConfigSet = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof ATNConfig)) {\n    return false;\n  } else {\n    return this.state.stateNumber === other.state.stateNumber && this.alt === other.alt && this.semanticContext.equals(other.semanticContext);\n  }\n};\n\nATNConfig.prototype.toString = function () {\n  return \"(\" + this.state + \",\" + this.alt + (this.context !== null ? \",[\" + this.context.toString() + \"]\" : \"\") + (this.semanticContext !== SemanticContext.NONE ? \",\" + this.semanticContext.toString() : \"\") + (this.reachesIntoOuterContext > 0 ? \",up=\" + this.reachesIntoOuterContext : \"\") + \")\";\n};\n\nfunction LexerATNConfig(params, config) {\n  ATNConfig.call(this, params, config); // This is the backing field for {@link //getLexerActionExecutor}.\n\n  var lexerActionExecutor = params.lexerActionExecutor || null;\n  this.lexerActionExecutor = lexerActionExecutor || (config !== null ? config.lexerActionExecutor : null);\n  this.passedThroughNonGreedyDecision = config !== null ? this.checkNonGreedyDecision(config, this.state) : false;\n  return this;\n}\n\nLexerATNConfig.prototype = Object.create(ATNConfig.prototype);\nLexerATNConfig.prototype.constructor = LexerATNConfig;\n\nLexerATNConfig.prototype.updateHashCode = function (hash) {\n  hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n};\n\nLexerATNConfig.prototype.equals = function (other) {\n  return this === other || other instanceof LexerATNConfig && this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision && (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) && ATNConfig.prototype.equals.call(this, other);\n};\n\nLexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\nLexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;\n\nLexerATNConfig.prototype.checkNonGreedyDecision = function (source, target) {\n  return source.passedThroughNonGreedyDecision || target instanceof DecisionState && target.nonGreedy;\n};\n\nexports.ATNConfig = ATNConfig;\nexports.LexerATNConfig = LexerATNConfig;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNConfig.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfigSet.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfigSet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n// info about the set, with support for combining similar configurations using a\n// graph-structured stack.\n///\nvar ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\n\nvar Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\");\n\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\n\nvar SemanticContext = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").SemanticContext;\n\nvar merge = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").merge;\n\nfunction hashATNConfig(c) {\n  return c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n  if (a === b) {\n    return true;\n  } else if (a === null || b === null) {\n    return false;\n  } else return a.equalsForConfigSet(b);\n}\n\nfunction ATNConfigSet(fullCtx) {\n  //\n  // The reason that we need this is because we don't want the hash map to use\n  // the standard hash code and equals. We need all configurations with the\n  // same\n  // {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n  // doubles\n  // the number of objects associated with ATNConfigs. The other solution is\n  // to\n  // use a hash table that lets us specify the equals/hashcode operation.\n  // All configs but hashed by (s, i, _, pi) not including context. Wiped out\n  // when we go readonly as this set becomes a DFA state.\n  this.configLookup = new Set(hashATNConfig, equalATNConfigs); // Indicates that this configuration set is part of a full context\n  // LL prediction. It will be used to determine how to merge $. With SLL\n  // it's a wildcard whereas it is not for LL context merge.\n\n  this.fullCtx = fullCtx === undefined ? true : fullCtx; // Indicates that the set of configurations is read-only. Do not\n  // allow any code to manipulate the set; DFA states will point at\n  // the sets and they must not change. This does not protect the other\n  // fields; in particular, conflictingAlts is set after\n  // we've made this readonly.\n\n  this.readOnly = false; // Track the elements as they are added to the set; supports get(i)///\n\n  this.configs = []; // TODO: these fields make me pretty uncomfortable but nice to pack up info\n  // together, saves recomputation\n  // TODO: can we track conflicts as they are added to save scanning configs\n  // later?\n\n  this.uniqueAlt = 0;\n  this.conflictingAlts = null; // Used in parser and lexer. In lexer, it indicates we hit a pred\n  // while computing a closure operation. Don't make a DFA state from this.\n\n  this.hasSemanticContext = false;\n  this.dipsIntoOuterContext = false;\n  this.cachedHashCode = -1;\n  return this;\n} // Adding a new config means merging contexts with existing configs for\n// {@code (s, i, pi, _)}, where {@code s} is the\n// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n// {@code pi} is the {@link ATNConfig//semanticContext}. We use\n// {@code (s,i,pi)} as key.\n//\n// <p>This method updates {@link //dipsIntoOuterContext} and\n// {@link //hasSemanticContext} when necessary.</p>\n// /\n\n\nATNConfigSet.prototype.add = function (config, mergeCache) {\n  if (mergeCache === undefined) {\n    mergeCache = null;\n  }\n\n  if (this.readOnly) {\n    throw \"This set is readonly\";\n  }\n\n  if (config.semanticContext !== SemanticContext.NONE) {\n    this.hasSemanticContext = true;\n  }\n\n  if (config.reachesIntoOuterContext > 0) {\n    this.dipsIntoOuterContext = true;\n  }\n\n  var existing = this.configLookup.add(config);\n\n  if (existing === config) {\n    this.cachedHashCode = -1;\n    this.configs.push(config); // track order here\n\n    return true;\n  } // a previous (s,i,pi,_), merge with it and save result\n\n\n  var rootIsWildcard = !this.fullCtx;\n  var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache); // no need to check for existing.context, config.context in cache\n  // since only way to create new graphs is \"call rule\" and here. We\n  // cache at both places.\n\n  existing.reachesIntoOuterContext = Math.max(existing.reachesIntoOuterContext, config.reachesIntoOuterContext); // make sure to preserve the precedence filter suppression during the merge\n\n  if (config.precedenceFilterSuppressed) {\n    existing.precedenceFilterSuppressed = true;\n  }\n\n  existing.context = merged; // replace context; no need to alt mapping\n\n  return true;\n};\n\nATNConfigSet.prototype.getStates = function () {\n  var states = new Set();\n\n  for (var i = 0; i < this.configs.length; i++) {\n    states.add(this.configs[i].state);\n  }\n\n  return states;\n};\n\nATNConfigSet.prototype.getPredicates = function () {\n  var preds = [];\n\n  for (var i = 0; i < this.configs.length; i++) {\n    var c = this.configs[i].semanticContext;\n\n    if (c !== SemanticContext.NONE) {\n      preds.push(c.semanticContext);\n    }\n  }\n\n  return preds;\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"items\", {\n  get: function get() {\n    return this.configs;\n  }\n});\n\nATNConfigSet.prototype.optimizeConfigs = function (interpreter) {\n  if (this.readOnly) {\n    throw \"This set is readonly\";\n  }\n\n  if (this.configLookup.length === 0) {\n    return;\n  }\n\n  for (var i = 0; i < this.configs.length; i++) {\n    var config = this.configs[i];\n    config.context = interpreter.getCachedContext(config.context);\n  }\n};\n\nATNConfigSet.prototype.addAll = function (coll) {\n  for (var i = 0; i < coll.length; i++) {\n    this.add(coll[i]);\n  }\n\n  return false;\n};\n\nATNConfigSet.prototype.equals = function (other) {\n  return this === other || other instanceof ATNConfigSet && Utils.equalArrays(this.configs, other.configs) && this.fullCtx === other.fullCtx && this.uniqueAlt === other.uniqueAlt && this.conflictingAlts === other.conflictingAlts && this.hasSemanticContext === other.hasSemanticContext && this.dipsIntoOuterContext === other.dipsIntoOuterContext;\n};\n\nATNConfigSet.prototype.hashCode = function () {\n  var hash = new Hash();\n  hash.update(this.configs);\n  return hash.finish();\n};\n\nATNConfigSet.prototype.updateHashCode = function (hash) {\n  if (this.readOnly) {\n    if (this.cachedHashCode === -1) {\n      this.cachedHashCode = this.hashCode();\n    }\n\n    hash.update(this.cachedHashCode);\n  } else {\n    hash.update(this.hashCode());\n  }\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"length\", {\n  get: function get() {\n    return this.configs.length;\n  }\n});\n\nATNConfigSet.prototype.isEmpty = function () {\n  return this.configs.length === 0;\n};\n\nATNConfigSet.prototype.contains = function (item) {\n  if (this.configLookup === null) {\n    throw \"This method is not implemented for readonly sets.\";\n  }\n\n  return this.configLookup.contains(item);\n};\n\nATNConfigSet.prototype.containsFast = function (item) {\n  if (this.configLookup === null) {\n    throw \"This method is not implemented for readonly sets.\";\n  }\n\n  return this.configLookup.containsFast(item);\n};\n\nATNConfigSet.prototype.clear = function () {\n  if (this.readOnly) {\n    throw \"This set is readonly\";\n  }\n\n  this.configs = [];\n  this.cachedHashCode = -1;\n  this.configLookup = new Set();\n};\n\nATNConfigSet.prototype.setReadonly = function (readOnly) {\n  this.readOnly = readOnly;\n\n  if (readOnly) {\n    this.configLookup = null; // can't mod, no need for lookup cache\n  }\n};\n\nATNConfigSet.prototype.toString = function () {\n  return Utils.arrayToString(this.configs) + (this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") + (this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") + (this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") + (this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n};\n\nfunction OrderedATNConfigSet() {\n  ATNConfigSet.call(this);\n  this.configLookup = new Set();\n  return this;\n}\n\nOrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);\nOrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;\nexports.ATNConfigSet = ATNConfigSet;\nexports.OrderedATNConfigSet = OrderedATNConfigSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNConfigSet.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializationOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializationOptions.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction ATNDeserializationOptions(copyFrom) {\n  if (copyFrom === undefined) {\n    copyFrom = null;\n  }\n\n  this.readOnly = false;\n  this.verifyATN = copyFrom === null ? true : copyFrom.verifyATN;\n  this.generateRuleBypassTransitions = copyFrom === null ? false : copyFrom.generateRuleBypassTransitions;\n  return this;\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true; //    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nexports.ATNDeserializationOptions = ATNDeserializationOptions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9BVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9hdG4vQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5qcz9jNzBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZnVuY3Rpb24gQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucyhjb3B5RnJvbSkge1xuXHRpZihjb3B5RnJvbT09PXVuZGVmaW5lZCkge1xuXHRcdGNvcHlGcm9tID0gbnVsbDtcblx0fVxuXHR0aGlzLnJlYWRPbmx5ID0gZmFsc2U7XG4gICAgdGhpcy52ZXJpZnlBVE4gPSBjb3B5RnJvbT09PW51bGwgPyB0cnVlIDogY29weUZyb20udmVyaWZ5QVROO1xuICAgIHRoaXMuZ2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnMgPSBjb3B5RnJvbT09PW51bGwgPyBmYWxzZSA6IGNvcHlGcm9tLmdlbmVyYXRlUnVsZUJ5cGFzc1RyYW5zaXRpb25zO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbkFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMuZGVmYXVsdE9wdGlvbnMgPSBuZXcgQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucygpO1xuQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5kZWZhdWx0T3B0aW9ucy5yZWFkT25seSA9IHRydWU7XG5cbi8vICAgIGRlZiBfX3NldGF0dHJfXyhzZWxmLCBrZXksIHZhbHVlKTpcbi8vICAgICAgICBpZiBrZXkhPVwicmVhZE9ubHlcIiBhbmQgc2VsZi5yZWFkT25seTpcbi8vICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKFwiVGhlIG9iamVjdCBpcyByZWFkIG9ubHkuXCIpXG4vLyAgICAgICAgc3VwZXIodHlwZShzZWxmKSwgc2VsZikuX19zZXRhdHRyX18oa2V5LHZhbHVlKVxuXG5leHBvcnRzLkFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNDeserializationOptions.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializer.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\n\nvar ATNType = __webpack_require__(/*! ./ATNType */ \"./node_modules/antlr4/atn/ATNType.js\").ATNType;\n\nvar ATNStates = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\");\n\nvar ATNState = ATNStates.ATNState;\nvar BasicState = ATNStates.BasicState;\nvar DecisionState = ATNStates.DecisionState;\nvar BlockStartState = ATNStates.BlockStartState;\nvar BlockEndState = ATNStates.BlockEndState;\nvar LoopEndState = ATNStates.LoopEndState;\nvar RuleStartState = ATNStates.RuleStartState;\nvar RuleStopState = ATNStates.RuleStopState;\nvar TokensStartState = ATNStates.TokensStartState;\nvar PlusLoopbackState = ATNStates.PlusLoopbackState;\nvar StarLoopbackState = ATNStates.StarLoopbackState;\nvar StarLoopEntryState = ATNStates.StarLoopEntryState;\nvar PlusBlockStartState = ATNStates.PlusBlockStartState;\nvar StarBlockStartState = ATNStates.StarBlockStartState;\nvar BasicBlockStartState = ATNStates.BasicBlockStartState;\n\nvar Transitions = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/atn/Transition.js\");\n\nvar Transition = Transitions.Transition;\nvar AtomTransition = Transitions.AtomTransition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar RangeTransition = Transitions.RangeTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar EpsilonTransition = Transitions.EpsilonTransition;\nvar WildcardTransition = Transitions.WildcardTransition;\nvar PredicateTransition = Transitions.PredicateTransition;\nvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\n\nvar IntervalSet = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").IntervalSet;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ \"./node_modules/antlr4/atn/ATNDeserializationOptions.js\").ATNDeserializationOptions;\n\nvar LexerActions = __webpack_require__(/*! ./LexerAction */ \"./node_modules/antlr4/atn/LexerAction.js\");\n\nvar LexerActionType = LexerActions.LexerActionType;\nvar LexerSkipAction = LexerActions.LexerSkipAction;\nvar LexerChannelAction = LexerActions.LexerChannelAction;\nvar LexerCustomAction = LexerActions.LexerCustomAction;\nvar LexerMoreAction = LexerActions.LexerMoreAction;\nvar LexerTypeAction = LexerActions.LexerTypeAction;\nvar LexerPushModeAction = LexerActions.LexerPushModeAction;\nvar LexerPopModeAction = LexerActions.LexerPopModeAction;\nvar LexerModeAction = LexerActions.LexerModeAction; // This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\n\nvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\"; //\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\n\nvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\"; // This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\n\nvar SUPPORTED_UUIDS = [BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP];\nvar SERIALIZED_VERSION = 3; // This is the current serialized UUID.\n\nvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray(length, value) {\n  var tmp = [];\n  tmp[length - 1] = value;\n  return tmp.map(function (i) {\n    return value;\n  });\n}\n\nfunction ATNDeserializer(options) {\n  if (options === undefined || options === null) {\n    options = ATNDeserializationOptions.defaultOptions;\n  }\n\n  this.deserializationOptions = options;\n  this.stateFactories = null;\n  this.actionFactories = null;\n  return this;\n} // Determines if a particular serialized representation of an ATN supports\n// a particular feature, identified by the {@link UUID} used for serializing\n// the ATN at the time the feature was first introduced.\n//\n// @param feature The {@link UUID} marking the first time the feature was\n// supported in the serialized ATN.\n// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n// currently being deserialized.\n// @return {@code true} if the {@code actualUuid} value represents a\n// serialized ATN at or after the feature identified by {@code feature} was\n// introduced; otherwise, {@code false}.\n\n\nATNDeserializer.prototype.isFeatureSupported = function (feature, actualUuid) {\n  var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n\n  if (idx1 < 0) {\n    return false;\n  }\n\n  var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n  return idx2 >= idx1;\n};\n\nATNDeserializer.prototype.deserialize = function (data) {\n  this.reset(data);\n  this.checkVersion();\n  this.checkUUID();\n  var atn = this.readATN();\n  this.readStates(atn);\n  this.readRules(atn);\n  this.readModes(atn);\n  var sets = []; // First, deserialize sets with 16-bit arguments <= U+FFFF.\n\n  this.readSets(atn, sets, this.readInt.bind(this)); // Next, if the ATN was serialized with the Unicode SMP feature,\n  // deserialize sets with 32-bit arguments <= U+10FFFF.\n\n  if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n    this.readSets(atn, sets, this.readInt32.bind(this));\n  }\n\n  this.readEdges(atn, sets);\n  this.readDecisions(atn);\n  this.readLexerActions(atn);\n  this.markPrecedenceDecisions(atn);\n  this.verifyATN(atn);\n\n  if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER) {\n    this.generateRuleBypassTransitions(atn); // re-verify after modification\n\n    this.verifyATN(atn);\n  }\n\n  return atn;\n};\n\nATNDeserializer.prototype.reset = function (data) {\n  var adjust = function adjust(c) {\n    var v = c.charCodeAt(0);\n    return v > 1 ? v - 2 : v + 65534;\n  };\n\n  var temp = data.split(\"\").map(adjust); // don't adjust the first value since that's the version number\n\n  temp[0] = data.charCodeAt(0);\n  this.data = temp;\n  this.pos = 0;\n};\n\nATNDeserializer.prototype.checkVersion = function () {\n  var version = this.readInt();\n\n  if (version !== SERIALIZED_VERSION) {\n    throw \"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\";\n  }\n};\n\nATNDeserializer.prototype.checkUUID = function () {\n  var uuid = this.readUUID();\n\n  if (SUPPORTED_UUIDS.indexOf(uuid) < 0) {\n    throw \"Could not deserialize ATN with UUID: \" + uuid + \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID;\n  }\n\n  this.uuid = uuid;\n};\n\nATNDeserializer.prototype.readATN = function () {\n  var grammarType = this.readInt();\n  var maxTokenType = this.readInt();\n  return new ATN(grammarType, maxTokenType);\n};\n\nATNDeserializer.prototype.readStates = function (atn) {\n  var j, pair, stateNumber;\n  var loopBackStateNumbers = [];\n  var endStateNumbers = [];\n  var nstates = this.readInt();\n\n  for (var i = 0; i < nstates; i++) {\n    var stype = this.readInt(); // ignore bad type of states\n\n    if (stype === ATNState.INVALID_TYPE) {\n      atn.addState(null);\n      continue;\n    }\n\n    var ruleIndex = this.readInt();\n\n    if (ruleIndex === 0xFFFF) {\n      ruleIndex = -1;\n    }\n\n    var s = this.stateFactory(stype, ruleIndex);\n\n    if (stype === ATNState.LOOP_END) {\n      // special case\n      var loopBackStateNumber = this.readInt();\n      loopBackStateNumbers.push([s, loopBackStateNumber]);\n    } else if (s instanceof BlockStartState) {\n      var endStateNumber = this.readInt();\n      endStateNumbers.push([s, endStateNumber]);\n    }\n\n    atn.addState(s);\n  } // delay the assignment of loop back and end states until we know all the\n  // state instances have been initialized\n\n\n  for (j = 0; j < loopBackStateNumbers.length; j++) {\n    pair = loopBackStateNumbers[j];\n    pair[0].loopBackState = atn.states[pair[1]];\n  }\n\n  for (j = 0; j < endStateNumbers.length; j++) {\n    pair = endStateNumbers[j];\n    pair[0].endState = atn.states[pair[1]];\n  }\n\n  var numNonGreedyStates = this.readInt();\n\n  for (j = 0; j < numNonGreedyStates; j++) {\n    stateNumber = this.readInt();\n    atn.states[stateNumber].nonGreedy = true;\n  }\n\n  var numPrecedenceStates = this.readInt();\n\n  for (j = 0; j < numPrecedenceStates; j++) {\n    stateNumber = this.readInt();\n    atn.states[stateNumber].isPrecedenceRule = true;\n  }\n};\n\nATNDeserializer.prototype.readRules = function (atn) {\n  var i;\n  var nrules = this.readInt();\n\n  if (atn.grammarType === ATNType.LEXER) {\n    atn.ruleToTokenType = initArray(nrules, 0);\n  }\n\n  atn.ruleToStartState = initArray(nrules, 0);\n\n  for (i = 0; i < nrules; i++) {\n    var s = this.readInt();\n    var startState = atn.states[s];\n    atn.ruleToStartState[i] = startState;\n\n    if (atn.grammarType === ATNType.LEXER) {\n      var tokenType = this.readInt();\n\n      if (tokenType === 0xFFFF) {\n        tokenType = Token.EOF;\n      }\n\n      atn.ruleToTokenType[i] = tokenType;\n    }\n  }\n\n  atn.ruleToStopState = initArray(nrules, 0);\n\n  for (i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (!(state instanceof RuleStopState)) {\n      continue;\n    }\n\n    atn.ruleToStopState[state.ruleIndex] = state;\n    atn.ruleToStartState[state.ruleIndex].stopState = state;\n  }\n};\n\nATNDeserializer.prototype.readModes = function (atn) {\n  var nmodes = this.readInt();\n\n  for (var i = 0; i < nmodes; i++) {\n    var s = this.readInt();\n    atn.modeToStartState.push(atn.states[s]);\n  }\n};\n\nATNDeserializer.prototype.readSets = function (atn, sets, readUnicode) {\n  var m = this.readInt();\n\n  for (var i = 0; i < m; i++) {\n    var iset = new IntervalSet();\n    sets.push(iset);\n    var n = this.readInt();\n    var containsEof = this.readInt();\n\n    if (containsEof !== 0) {\n      iset.addOne(-1);\n    }\n\n    for (var j = 0; j < n; j++) {\n      var i1 = readUnicode();\n      var i2 = readUnicode();\n      iset.addRange(i1, i2);\n    }\n  }\n};\n\nATNDeserializer.prototype.readEdges = function (atn, sets) {\n  var i, j, state, trans, target;\n  var nedges = this.readInt();\n\n  for (i = 0; i < nedges; i++) {\n    var src = this.readInt();\n    var trg = this.readInt();\n    var ttype = this.readInt();\n    var arg1 = this.readInt();\n    var arg2 = this.readInt();\n    var arg3 = this.readInt();\n    trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n    var srcState = atn.states[src];\n    srcState.addTransition(trans);\n  } // edges for rule stop states can be derived, so they aren't serialized\n\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    for (j = 0; j < state.transitions.length; j++) {\n      var t = state.transitions[j];\n\n      if (!(t instanceof RuleTransition)) {\n        continue;\n      }\n\n      var outermostPrecedenceReturn = -1;\n\n      if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n        if (t.precedence === 0) {\n          outermostPrecedenceReturn = t.target.ruleIndex;\n        }\n      }\n\n      trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n      atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n    }\n  }\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    if (state instanceof BlockStartState) {\n      // we need to know the end state to set its start state\n      if (state.endState === null) {\n        throw \"IllegalState\";\n      } // block end states can only be associated to a single block start\n      // state\n\n\n      if (state.endState.startState !== null) {\n        throw \"IllegalState\";\n      }\n\n      state.endState.startState = state;\n    }\n\n    if (state instanceof PlusLoopbackState) {\n      for (j = 0; j < state.transitions.length; j++) {\n        target = state.transitions[j].target;\n\n        if (target instanceof PlusBlockStartState) {\n          target.loopBackState = state;\n        }\n      }\n    } else if (state instanceof StarLoopbackState) {\n      for (j = 0; j < state.transitions.length; j++) {\n        target = state.transitions[j].target;\n\n        if (target instanceof StarLoopEntryState) {\n          target.loopBackState = state;\n        }\n      }\n    }\n  }\n};\n\nATNDeserializer.prototype.readDecisions = function (atn) {\n  var ndecisions = this.readInt();\n\n  for (var i = 0; i < ndecisions; i++) {\n    var s = this.readInt();\n    var decState = atn.states[s];\n    atn.decisionToState.push(decState);\n    decState.decision = i;\n  }\n};\n\nATNDeserializer.prototype.readLexerActions = function (atn) {\n  if (atn.grammarType === ATNType.LEXER) {\n    var count = this.readInt();\n    atn.lexerActions = initArray(count, null);\n\n    for (var i = 0; i < count; i++) {\n      var actionType = this.readInt();\n      var data1 = this.readInt();\n\n      if (data1 === 0xFFFF) {\n        data1 = -1;\n      }\n\n      var data2 = this.readInt();\n\n      if (data2 === 0xFFFF) {\n        data2 = -1;\n      }\n\n      var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n      atn.lexerActions[i] = lexerAction;\n    }\n  }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransitions = function (atn) {\n  var i;\n  var count = atn.ruleToStartState.length;\n\n  for (i = 0; i < count; i++) {\n    atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n  }\n\n  for (i = 0; i < count; i++) {\n    this.generateRuleBypassTransition(atn, i);\n  }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransition = function (atn, idx) {\n  var i, state;\n  var bypassStart = new BasicBlockStartState();\n  bypassStart.ruleIndex = idx;\n  atn.addState(bypassStart);\n  var bypassStop = new BlockEndState();\n  bypassStop.ruleIndex = idx;\n  atn.addState(bypassStop);\n  bypassStart.endState = bypassStop;\n  atn.defineDecisionState(bypassStart);\n  bypassStop.startState = bypassStart;\n  var excludeTransition = null;\n  var endState = null;\n\n  if (atn.ruleToStartState[idx].isPrecedenceRule) {\n    // wrap from the beginning of the rule to the StarLoopEntryState\n    endState = null;\n\n    for (i = 0; i < atn.states.length; i++) {\n      state = atn.states[i];\n\n      if (this.stateIsEndStateFor(state, idx)) {\n        endState = state;\n        excludeTransition = state.loopBackState.transitions[0];\n        break;\n      }\n    }\n\n    if (excludeTransition === null) {\n      throw \"Couldn't identify final state of the precedence rule prefix section.\";\n    }\n  } else {\n    endState = atn.ruleToStopState[idx];\n  } // all non-excluded transitions that currently target end state need to\n  // target blockEnd instead\n\n\n  for (i = 0; i < atn.states.length; i++) {\n    state = atn.states[i];\n\n    for (var j = 0; j < state.transitions.length; j++) {\n      var transition = state.transitions[j];\n\n      if (transition === excludeTransition) {\n        continue;\n      }\n\n      if (transition.target === endState) {\n        transition.target = bypassStop;\n      }\n    }\n  } // all transitions leaving the rule start state need to leave blockStart\n  // instead\n\n\n  var ruleToStartState = atn.ruleToStartState[idx];\n  var count = ruleToStartState.transitions.length;\n\n  while (count > 0) {\n    bypassStart.addTransition(ruleToStartState.transitions[count - 1]);\n    ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n  } // link the new states\n\n\n  atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n  bypassStop.addTransition(new EpsilonTransition(endState));\n  var matchState = new BasicState();\n  atn.addState(matchState);\n  matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n  bypassStart.addTransition(new EpsilonTransition(matchState));\n};\n\nATNDeserializer.prototype.stateIsEndStateFor = function (state, idx) {\n  if (state.ruleIndex !== idx) {\n    return null;\n  }\n\n  if (!(state instanceof StarLoopEntryState)) {\n    return null;\n  }\n\n  var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\n  if (!(maybeLoopEndState instanceof LoopEndState)) {\n    return null;\n  }\n\n  if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n    return state;\n  } else {\n    return null;\n  }\n}; //\n// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n// correct value.\n//\n// @param atn The ATN.\n//\n\n\nATNDeserializer.prototype.markPrecedenceDecisions = function (atn) {\n  for (var i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (!(state instanceof StarLoopEntryState)) {\n      continue;\n    } // We analyze the ATN to determine if this ATN decision state is the\n    // decision for the closure block that determines whether a\n    // precedence rule should continue or complete.\n    //\n\n\n    if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n      var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n\n      if (maybeLoopEndState instanceof LoopEndState) {\n        if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transitions[0].target instanceof RuleStopState) {\n          state.isPrecedenceDecision = true;\n        }\n      }\n    }\n  }\n};\n\nATNDeserializer.prototype.verifyATN = function (atn) {\n  if (!this.deserializationOptions.verifyATN) {\n    return;\n  } // verify assumptions\n\n\n  for (var i = 0; i < atn.states.length; i++) {\n    var state = atn.states[i];\n\n    if (state === null) {\n      continue;\n    }\n\n    this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n\n    if (state instanceof PlusBlockStartState) {\n      this.checkCondition(state.loopBackState !== null);\n    } else if (state instanceof StarLoopEntryState) {\n      this.checkCondition(state.loopBackState !== null);\n      this.checkCondition(state.transitions.length === 2);\n\n      if (state.transitions[0].target instanceof StarBlockStartState) {\n        this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n        this.checkCondition(!state.nonGreedy);\n      } else if (state.transitions[0].target instanceof LoopEndState) {\n        this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n        this.checkCondition(state.nonGreedy);\n      } else {\n        throw \"IllegalState\";\n      }\n    } else if (state instanceof StarLoopbackState) {\n      this.checkCondition(state.transitions.length === 1);\n      this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n    } else if (state instanceof LoopEndState) {\n      this.checkCondition(state.loopBackState !== null);\n    } else if (state instanceof RuleStartState) {\n      this.checkCondition(state.stopState !== null);\n    } else if (state instanceof BlockStartState) {\n      this.checkCondition(state.endState !== null);\n    } else if (state instanceof BlockEndState) {\n      this.checkCondition(state.startState !== null);\n    } else if (state instanceof DecisionState) {\n      this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n    } else {\n      this.checkCondition(state.transitions.length <= 1 || state instanceof RuleStopState);\n    }\n  }\n};\n\nATNDeserializer.prototype.checkCondition = function (condition, message) {\n  if (!condition) {\n    if (message === undefined || message === null) {\n      message = \"IllegalState\";\n    }\n\n    throw message;\n  }\n};\n\nATNDeserializer.prototype.readInt = function () {\n  return this.data[this.pos++];\n};\n\nATNDeserializer.prototype.readInt32 = function () {\n  var low = this.readInt();\n  var high = this.readInt();\n  return low | high << 16;\n};\n\nATNDeserializer.prototype.readLong = function () {\n  var low = this.readInt32();\n  var high = this.readInt32();\n  return low & 0x00000000FFFFFFFF | high << 32;\n};\n\nfunction createByteToHex() {\n  var bth = [];\n\n  for (var i = 0; i < 256; i++) {\n    bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n  }\n\n  return bth;\n}\n\nvar byteToHex = createByteToHex();\n\nATNDeserializer.prototype.readUUID = function () {\n  var bb = [];\n\n  for (var i = 7; i >= 0; i--) {\n    var _int = this.readInt();\n    /* jshint bitwise: false */\n\n\n    bb[2 * i + 1] = _int & 0xFF;\n    bb[2 * i] = _int >> 8 & 0xFF;\n  }\n\n  return byteToHex[bb[0]] + byteToHex[bb[1]] + byteToHex[bb[2]] + byteToHex[bb[3]] + '-' + byteToHex[bb[4]] + byteToHex[bb[5]] + '-' + byteToHex[bb[6]] + byteToHex[bb[7]] + '-' + byteToHex[bb[8]] + byteToHex[bb[9]] + '-' + byteToHex[bb[10]] + byteToHex[bb[11]] + byteToHex[bb[12]] + byteToHex[bb[13]] + byteToHex[bb[14]] + byteToHex[bb[15]];\n};\n\nATNDeserializer.prototype.edgeFactory = function (atn, type, src, trg, arg1, arg2, arg3, sets) {\n  var target = atn.states[trg];\n\n  switch (type) {\n    case Transition.EPSILON:\n      return new EpsilonTransition(target);\n\n    case Transition.RANGE:\n      return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n\n    case Transition.RULE:\n      return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n\n    case Transition.PREDICATE:\n      return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n\n    case Transition.PRECEDENCE:\n      return new PrecedencePredicateTransition(target, arg1);\n\n    case Transition.ATOM:\n      return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n\n    case Transition.ACTION:\n      return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n\n    case Transition.SET:\n      return new SetTransition(target, sets[arg1]);\n\n    case Transition.NOT_SET:\n      return new NotSetTransition(target, sets[arg1]);\n\n    case Transition.WILDCARD:\n      return new WildcardTransition(target);\n\n    default:\n      throw \"The specified transition type: \" + type + \" is not valid.\";\n  }\n};\n\nATNDeserializer.prototype.stateFactory = function (type, ruleIndex) {\n  if (this.stateFactories === null) {\n    var sf = [];\n    sf[ATNState.INVALID_TYPE] = null;\n\n    sf[ATNState.BASIC] = function () {\n      return new BasicState();\n    };\n\n    sf[ATNState.RULE_START] = function () {\n      return new RuleStartState();\n    };\n\n    sf[ATNState.BLOCK_START] = function () {\n      return new BasicBlockStartState();\n    };\n\n    sf[ATNState.PLUS_BLOCK_START] = function () {\n      return new PlusBlockStartState();\n    };\n\n    sf[ATNState.STAR_BLOCK_START] = function () {\n      return new StarBlockStartState();\n    };\n\n    sf[ATNState.TOKEN_START] = function () {\n      return new TokensStartState();\n    };\n\n    sf[ATNState.RULE_STOP] = function () {\n      return new RuleStopState();\n    };\n\n    sf[ATNState.BLOCK_END] = function () {\n      return new BlockEndState();\n    };\n\n    sf[ATNState.STAR_LOOP_BACK] = function () {\n      return new StarLoopbackState();\n    };\n\n    sf[ATNState.STAR_LOOP_ENTRY] = function () {\n      return new StarLoopEntryState();\n    };\n\n    sf[ATNState.PLUS_LOOP_BACK] = function () {\n      return new PlusLoopbackState();\n    };\n\n    sf[ATNState.LOOP_END] = function () {\n      return new LoopEndState();\n    };\n\n    this.stateFactories = sf;\n  }\n\n  if (type > this.stateFactories.length || this.stateFactories[type] === null) {\n    throw \"The specified state type \" + type + \" is not valid.\";\n  } else {\n    var s = this.stateFactories[type]();\n\n    if (s !== null) {\n      s.ruleIndex = ruleIndex;\n      return s;\n    }\n  }\n};\n\nATNDeserializer.prototype.lexerActionFactory = function (type, data1, data2) {\n  if (this.actionFactories === null) {\n    var af = [];\n\n    af[LexerActionType.CHANNEL] = function (data1, data2) {\n      return new LexerChannelAction(data1);\n    };\n\n    af[LexerActionType.CUSTOM] = function (data1, data2) {\n      return new LexerCustomAction(data1, data2);\n    };\n\n    af[LexerActionType.MODE] = function (data1, data2) {\n      return new LexerModeAction(data1);\n    };\n\n    af[LexerActionType.MORE] = function (data1, data2) {\n      return LexerMoreAction.INSTANCE;\n    };\n\n    af[LexerActionType.POP_MODE] = function (data1, data2) {\n      return LexerPopModeAction.INSTANCE;\n    };\n\n    af[LexerActionType.PUSH_MODE] = function (data1, data2) {\n      return new LexerPushModeAction(data1);\n    };\n\n    af[LexerActionType.SKIP] = function (data1, data2) {\n      return LexerSkipAction.INSTANCE;\n    };\n\n    af[LexerActionType.TYPE] = function (data1, data2) {\n      return new LexerTypeAction(data1);\n    };\n\n    this.actionFactories = af;\n  }\n\n  if (type > this.actionFactories.length || this.actionFactories[type] === null) {\n    throw \"The specified lexer action type \" + type + \" is not valid.\";\n  } else {\n    return this.actionFactories[type](data1, data2);\n  }\n};\n\nexports.ATNDeserializer = ATNDeserializer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNDeserializer.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNSimulator.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNSimulator.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\nvar DFAState = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").DFAState;\n\nvar ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar getCachedPredictionContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").getCachedPredictionContext;\n\nvar Map = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").Map;\n\nfunction ATNSimulator(atn, sharedContextCache) {\n  // The context cache maps all PredictionContext objects that are ==\n  //  to a single cached copy. This cache is shared across all contexts\n  //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n  //  to use only cached nodes/graphs in addDFAState(). We don't want to\n  //  fill this during closure() since there are lots of contexts that\n  //  pop up but are not used ever again. It also greatly slows down closure().\n  //\n  //  <p>This cache makes a huge difference in memory and a little bit in speed.\n  //  For the Java grammar on java.*, it dropped the memory requirements\n  //  at the end from 25M to 16M. We don't store any of the full context\n  //  graphs in the DFA because they are limited to local context only,\n  //  but apparently there's a lot of repetition there as well. We optimize\n  //  the config contexts before storing the config set in the DFA states\n  //  by literally rebuilding them with cached subgraphs only.</p>\n  //\n  //  <p>I tried a cache for use during closure operations, that was\n  //  whacked after each adaptivePredict(). It cost a little bit\n  //  more time I think and doesn't save on the overall footprint\n  //  so it's not worth the complexity.</p>\n  ///\n  this.atn = atn;\n  this.sharedContextCache = sharedContextCache;\n  return this;\n} // Must distinguish between missing edge and edge we know leads nowhere///\n\n\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\nATNSimulator.prototype.getCachedContext = function (context) {\n  if (this.sharedContextCache === null) {\n    return context;\n  }\n\n  var visited = new Map();\n  return getCachedPredictionContext(context, this.sharedContextCache, visited);\n};\n\nexports.ATNSimulator = ATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9BVE5TaW11bGF0b3IuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9BVE5TaW11bGF0b3IuanM/NWU1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuLy8vXG5cbnZhciBERkFTdGF0ZSA9IHJlcXVpcmUoJy4vLi4vZGZhL0RGQVN0YXRlJykuREZBU3RhdGU7XG52YXIgQVROQ29uZmlnU2V0ID0gcmVxdWlyZSgnLi9BVE5Db25maWdTZXQnKS5BVE5Db25maWdTZXQ7XG52YXIgZ2V0Q2FjaGVkUHJlZGljdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuLy4uL1ByZWRpY3Rpb25Db250ZXh0JykuZ2V0Q2FjaGVkUHJlZGljdGlvbkNvbnRleHQ7XG52YXIgTWFwID0gcmVxdWlyZSgnLi8uLi9VdGlscycpLk1hcDtcblxuZnVuY3Rpb24gQVROU2ltdWxhdG9yKGF0biwgc2hhcmVkQ29udGV4dENhY2hlKSB7XG5cbiAgICAvLyBUaGUgY29udGV4dCBjYWNoZSBtYXBzIGFsbCBQcmVkaWN0aW9uQ29udGV4dCBvYmplY3RzIHRoYXQgYXJlID09XG4gICAgLy8gIHRvIGEgc2luZ2xlIGNhY2hlZCBjb3B5LiBUaGlzIGNhY2hlIGlzIHNoYXJlZCBhY3Jvc3MgYWxsIGNvbnRleHRzXG4gICAgLy8gIGluIGFsbCBBVE5Db25maWdzIGluIGFsbCBERkEgc3RhdGVzLiAgV2UgcmVidWlsZCBlYWNoIEFUTkNvbmZpZ1NldFxuICAgIC8vICB0byB1c2Ugb25seSBjYWNoZWQgbm9kZXMvZ3JhcGhzIGluIGFkZERGQVN0YXRlKCkuIFdlIGRvbid0IHdhbnQgdG9cbiAgICAvLyAgZmlsbCB0aGlzIGR1cmluZyBjbG9zdXJlKCkgc2luY2UgdGhlcmUgYXJlIGxvdHMgb2YgY29udGV4dHMgdGhhdFxuICAgIC8vICBwb3AgdXAgYnV0IGFyZSBub3QgdXNlZCBldmVyIGFnYWluLiBJdCBhbHNvIGdyZWF0bHkgc2xvd3MgZG93biBjbG9zdXJlKCkuXG4gICAgLy9cbiAgICAvLyAgPHA+VGhpcyBjYWNoZSBtYWtlcyBhIGh1Z2UgZGlmZmVyZW5jZSBpbiBtZW1vcnkgYW5kIGEgbGl0dGxlIGJpdCBpbiBzcGVlZC5cbiAgICAvLyAgRm9yIHRoZSBKYXZhIGdyYW1tYXIgb24gamF2YS4qLCBpdCBkcm9wcGVkIHRoZSBtZW1vcnkgcmVxdWlyZW1lbnRzXG4gICAgLy8gIGF0IHRoZSBlbmQgZnJvbSAyNU0gdG8gMTZNLiBXZSBkb24ndCBzdG9yZSBhbnkgb2YgdGhlIGZ1bGwgY29udGV4dFxuICAgIC8vICBncmFwaHMgaW4gdGhlIERGQSBiZWNhdXNlIHRoZXkgYXJlIGxpbWl0ZWQgdG8gbG9jYWwgY29udGV4dCBvbmx5LFxuICAgIC8vICBidXQgYXBwYXJlbnRseSB0aGVyZSdzIGEgbG90IG9mIHJlcGV0aXRpb24gdGhlcmUgYXMgd2VsbC4gV2Ugb3B0aW1pemVcbiAgICAvLyAgdGhlIGNvbmZpZyBjb250ZXh0cyBiZWZvcmUgc3RvcmluZyB0aGUgY29uZmlnIHNldCBpbiB0aGUgREZBIHN0YXRlc1xuICAgIC8vICBieSBsaXRlcmFsbHkgcmVidWlsZGluZyB0aGVtIHdpdGggY2FjaGVkIHN1YmdyYXBocyBvbmx5LjwvcD5cbiAgICAvL1xuICAgIC8vICA8cD5JIHRyaWVkIGEgY2FjaGUgZm9yIHVzZSBkdXJpbmcgY2xvc3VyZSBvcGVyYXRpb25zLCB0aGF0IHdhc1xuICAgIC8vICB3aGFja2VkIGFmdGVyIGVhY2ggYWRhcHRpdmVQcmVkaWN0KCkuIEl0IGNvc3QgYSBsaXR0bGUgYml0XG4gICAgLy8gIG1vcmUgdGltZSBJIHRoaW5rIGFuZCBkb2Vzbid0IHNhdmUgb24gdGhlIG92ZXJhbGwgZm9vdHByaW50XG4gICAgLy8gIHNvIGl0J3Mgbm90IHdvcnRoIHRoZSBjb21wbGV4aXR5LjwvcD5cbiAgICAvLy9cbiAgICB0aGlzLmF0biA9IGF0bjtcbiAgICB0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9IHNoYXJlZENvbnRleHRDYWNoZTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gTXVzdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIG1pc3NpbmcgZWRnZSBhbmQgZWRnZSB3ZSBrbm93IGxlYWRzIG5vd2hlcmUvLy9cbkFUTlNpbXVsYXRvci5FUlJPUiA9IG5ldyBERkFTdGF0ZSgweDdGRkZGRkZGLCBuZXcgQVROQ29uZmlnU2V0KCkpO1xuXG5cbkFUTlNpbXVsYXRvci5wcm90b3R5cGUuZ2V0Q2FjaGVkQ29udGV4dCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5zaGFyZWRDb250ZXh0Q2FjaGUgPT09bnVsbCkge1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gICAgdmFyIHZpc2l0ZWQgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIGdldENhY2hlZFByZWRpY3Rpb25Db250ZXh0KGNvbnRleHQsIHRoaXMuc2hhcmVkQ29udGV4dENhY2hlLCB2aXNpdGVkKTtcbn07XG5cbmV4cG9ydHMuQVROU2ltdWxhdG9yID0gQVROU2ltdWxhdG9yO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNSimulator.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n// The following images show the relation of states and\n// {@link ATNState//transitions} for various grammar constructs.\n//\n// <ul>\n//\n// <li>Solid edges marked with an &//0949; indicate a required\n// {@link EpsilonTransition}.</li>\n//\n// <li>Dashed edges indicate locations where any transition derived from\n// {@link Transition} might appear.</li>\n//\n// <li>Dashed nodes are place holders for either a sequence of linked\n// {@link BasicState} states or the inclusion of a block representing a nested\n// construct in one of the forms below.</li>\n//\n// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n// any number of alternatives (one or more). Nodes without the {@code ...} only\n// support the exact number of alternatives shown in the diagram.</li>\n//\n// </ul>\n//\n// <h2>Basic Blocks</h2>\n//\n// <h3>Rule</h3>\n//\n// <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Block of 1 or more alternatives</h3>\n//\n// <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Greedy Loops</h2>\n//\n// <h3>Greedy Closure: {@code (...)*}</h3>\n//\n// <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Positive Closure: {@code (...)+}</h3>\n//\n// <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Optional: {@code (...)?}</h3>\n//\n// <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Non-Greedy Loops</h2>\n//\n// <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n//\n// <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n//\n// <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Optional: {@code (...)??}</h3>\n//\n// <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\nvar INITIAL_NUM_TRANSITIONS = 4;\n\nfunction ATNState() {\n  // Which ATN are we in?\n  this.atn = null;\n  this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n  this.stateType = null;\n  this.ruleIndex = 0; // at runtime, we don't have Rule objects\n\n  this.epsilonOnlyTransitions = false; // Track the transitions emanating from this ATN state.\n\n  this.transitions = []; // Used to cache lookahead during parsing, not used during construction\n\n  this.nextTokenWithinRule = null;\n  return this;\n} // constants for serialization\n\n\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\nATNState.serializationNames = [\"INVALID\", \"BASIC\", \"RULE_START\", \"BLOCK_START\", \"PLUS_BLOCK_START\", \"STAR_BLOCK_START\", \"TOKEN_START\", \"RULE_STOP\", \"BLOCK_END\", \"STAR_LOOP_BACK\", \"STAR_LOOP_ENTRY\", \"PLUS_LOOP_BACK\", \"LOOP_END\"];\nATNState.INVALID_STATE_NUMBER = -1;\n\nATNState.prototype.toString = function () {\n  return this.stateNumber;\n};\n\nATNState.prototype.equals = function (other) {\n  if (other instanceof ATNState) {\n    return this.stateNumber === other.stateNumber;\n  } else {\n    return false;\n  }\n};\n\nATNState.prototype.isNonGreedyExitState = function () {\n  return false;\n};\n\nATNState.prototype.addTransition = function (trans, index) {\n  if (index === undefined) {\n    index = -1;\n  }\n\n  if (this.transitions.length === 0) {\n    this.epsilonOnlyTransitions = trans.isEpsilon;\n  } else if (this.epsilonOnlyTransitions !== trans.isEpsilon) {\n    this.epsilonOnlyTransitions = false;\n  }\n\n  if (index === -1) {\n    this.transitions.push(trans);\n  } else {\n    this.transitions.splice(index, 1, trans);\n  }\n};\n\nfunction BasicState() {\n  ATNState.call(this);\n  this.stateType = ATNState.BASIC;\n  return this;\n}\n\nBasicState.prototype = Object.create(ATNState.prototype);\nBasicState.prototype.constructor = BasicState;\n\nfunction DecisionState() {\n  ATNState.call(this);\n  this.decision = -1;\n  this.nonGreedy = false;\n  return this;\n}\n\nDecisionState.prototype = Object.create(ATNState.prototype);\nDecisionState.prototype.constructor = DecisionState; //  The start of a regular {@code (...)} block.\n\nfunction BlockStartState() {\n  DecisionState.call(this);\n  this.endState = null;\n  return this;\n}\n\nBlockStartState.prototype = Object.create(DecisionState.prototype);\nBlockStartState.prototype.constructor = BlockStartState;\n\nfunction BasicBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.BLOCK_START;\n  return this;\n}\n\nBasicBlockStartState.prototype = Object.create(BlockStartState.prototype);\nBasicBlockStartState.prototype.constructor = BasicBlockStartState; // Terminal node of a simple {@code (a|b|c)} block.\n\nfunction BlockEndState() {\n  ATNState.call(this);\n  this.stateType = ATNState.BLOCK_END;\n  this.startState = null;\n  return this;\n}\n\nBlockEndState.prototype = Object.create(ATNState.prototype);\nBlockEndState.prototype.constructor = BlockEndState; // The last node in the ATN for a rule, unless that rule is the start symbol.\n//  In that case, there is one transition to EOF. Later, we might encode\n//  references to all calls to this rule to compute FOLLOW sets for\n//  error handling.\n//\n\nfunction RuleStopState() {\n  ATNState.call(this);\n  this.stateType = ATNState.RULE_STOP;\n  return this;\n}\n\nRuleStopState.prototype = Object.create(ATNState.prototype);\nRuleStopState.prototype.constructor = RuleStopState;\n\nfunction RuleStartState() {\n  ATNState.call(this);\n  this.stateType = ATNState.RULE_START;\n  this.stopState = null;\n  this.isPrecedenceRule = false;\n  return this;\n}\n\nRuleStartState.prototype = Object.create(ATNState.prototype);\nRuleStartState.prototype.constructor = RuleStartState; // Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n//  one to the loop back to start of the block and one to exit.\n//\n\nfunction PlusLoopbackState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.PLUS_LOOP_BACK;\n  return this;\n}\n\nPlusLoopbackState.prototype = Object.create(DecisionState.prototype);\nPlusLoopbackState.prototype.constructor = PlusLoopbackState; // Start of {@code (A|B|...)+} loop. Technically a decision state, but\n//  we don't use for code generation; somebody might need it, so I'm defining\n//  it for completeness. In reality, the {@link PlusLoopbackState} node is the\n//  real decision-making note for {@code A+}.\n//\n\nfunction PlusBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.PLUS_BLOCK_START;\n  this.loopBackState = null;\n  return this;\n}\n\nPlusBlockStartState.prototype = Object.create(BlockStartState.prototype);\nPlusBlockStartState.prototype.constructor = PlusBlockStartState; // The block that begins a closure loop.\n\nfunction StarBlockStartState() {\n  BlockStartState.call(this);\n  this.stateType = ATNState.STAR_BLOCK_START;\n  return this;\n}\n\nStarBlockStartState.prototype = Object.create(BlockStartState.prototype);\nStarBlockStartState.prototype.constructor = StarBlockStartState;\n\nfunction StarLoopbackState() {\n  ATNState.call(this);\n  this.stateType = ATNState.STAR_LOOP_BACK;\n  return this;\n}\n\nStarLoopbackState.prototype = Object.create(ATNState.prototype);\nStarLoopbackState.prototype.constructor = StarLoopbackState;\n\nfunction StarLoopEntryState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.STAR_LOOP_ENTRY;\n  this.loopBackState = null; // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n\n  this.isPrecedenceDecision = null;\n  return this;\n}\n\nStarLoopEntryState.prototype = Object.create(DecisionState.prototype);\nStarLoopEntryState.prototype.constructor = StarLoopEntryState; // Mark the end of a * or + loop.\n\nfunction LoopEndState() {\n  ATNState.call(this);\n  this.stateType = ATNState.LOOP_END;\n  this.loopBackState = null;\n  return this;\n}\n\nLoopEndState.prototype = Object.create(ATNState.prototype);\nLoopEndState.prototype.constructor = LoopEndState; // The Tokens rule start state linking to each lexer rule start state */\n\nfunction TokensStartState() {\n  DecisionState.call(this);\n  this.stateType = ATNState.TOKEN_START;\n  return this;\n}\n\nTokensStartState.prototype = Object.create(DecisionState.prototype);\nTokensStartState.prototype.constructor = TokensStartState;\nexports.ATNState = ATNState;\nexports.BasicState = BasicState;\nexports.DecisionState = DecisionState;\nexports.BlockStartState = BlockStartState;\nexports.BlockEndState = BlockEndState;\nexports.LoopEndState = LoopEndState;\nexports.RuleStartState = RuleStartState;\nexports.RuleStopState = RuleStopState;\nexports.TokensStartState = TokensStartState;\nexports.PlusLoopbackState = PlusLoopbackState;\nexports.StarLoopbackState = StarLoopbackState;\nexports.StarLoopEntryState = StarLoopEntryState;\nexports.PlusBlockStartState = PlusBlockStartState;\nexports.StarBlockStartState = StarBlockStartState;\nexports.BasicBlockStartState = BasicBlockStartState;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNState.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNType.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNType.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// Represents the type of recognizer an ATN applies to.\nfunction ATNType() {}\n\nATNType.LEXER = 0;\nATNType.PARSER = 1;\nexports.ATNType = ATNType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9BVE5UeXBlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9hdG4vQVROVHlwZS5qcz85YjRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbi8vL1xuXG4vLyBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIHJlY29nbml6ZXIgYW4gQVROIGFwcGxpZXMgdG8uXG5cbmZ1bmN0aW9uIEFUTlR5cGUoKSB7XG5cbn1cblxuQVROVHlwZS5MRVhFUiA9IDA7XG5BVE5UeXBlLlBBUlNFUiA9IDE7XG5cbmV4cG9ydHMuQVROVHlwZSA9IEFUTlR5cGU7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ATNType.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/LexerATNSimulator.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerATNSimulator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// When we hit an accept state in either the DFA or the ATN, we\n//  have to notify the character stream to start buffering characters\n//  via {@link IntStream//mark} and record the current state. The current sim state\n//  includes the current index into the input, the current line,\n//  and current character position in that line. Note that the Lexer is\n//  tracking the starting line and characterization of the token. These\n//  variables track the \"state\" of the simulator when it hits an accept state.\n//\n//  <p>We track these variables separately for the DFA and ATN simulation\n//  because the DFA simulation often has to fail over to the ATN\n//  simulation. If the ATN simulation fails, we need the DFA to fall\n//  back to its previously accepted state, if any. If the ATN succeeds,\n//  then the ATN does the accept and the DFA simulator that invoked it\n//  can simply return the predicted token type.</p>\n///\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Lexer = __webpack_require__(/*! ./../Lexer */ \"./node_modules/antlr4/Lexer.js\").Lexer;\n\nvar ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\n\nvar ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"./node_modules/antlr4/atn/ATNSimulator.js\").ATNSimulator;\n\nvar DFAState = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").DFAState;\n\nvar ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar OrderedATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").OrderedATNConfigSet;\n\nvar PredictionContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").PredictionContext;\n\nvar SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").SingletonPredictionContext;\n\nvar RuleStopState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").RuleStopState;\n\nvar LexerATNConfig = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/atn/ATNConfig.js\").LexerATNConfig;\n\nvar Transition = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/atn/Transition.js\").Transition;\n\nvar LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ \"./node_modules/antlr4/atn/LexerActionExecutor.js\").LexerActionExecutor;\n\nvar LexerNoViableAltException = __webpack_require__(/*! ./../error/Errors */ \"./node_modules/antlr4/error/Errors.js\").LexerNoViableAltException;\n\nfunction resetSimState(sim) {\n  sim.index = -1;\n  sim.line = 0;\n  sim.column = -1;\n  sim.dfaState = null;\n}\n\nfunction SimState() {\n  resetSimState(this);\n  return this;\n}\n\nSimState.prototype.reset = function () {\n  resetSimState(this);\n};\n\nfunction LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {\n  ATNSimulator.call(this, atn, sharedContextCache);\n  this.decisionToDFA = decisionToDFA;\n  this.recog = recog; // The current token's starting index into the character stream.\n  // Shared across DFA to ATN simulation in case the ATN fails and the\n  // DFA did not have a previous accept state. In this case, we use the\n  // ATN-generated exception object.\n\n  this.startIndex = -1; // line number 1..n within the input///\n\n  this.line = 1; // The index of the character relative to the beginning of the line\n  // 0..n-1///\n\n  this.column = 0;\n  this.mode = Lexer.DEFAULT_MODE; // Used during DFA/ATN exec to record the most recent accept configuration\n  // info\n\n  this.prevAccept = new SimState(); // done\n\n  return this;\n}\n\nLexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nLexerATNSimulator.prototype.constructor = LexerATNSimulator;\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nLexerATNSimulator.prototype.copyState = function (simulator) {\n  this.column = simulator.column;\n  this.line = simulator.line;\n  this.mode = simulator.mode;\n  this.startIndex = simulator.startIndex;\n};\n\nLexerATNSimulator.prototype.match = function (input, mode) {\n  this.match_calls += 1;\n  this.mode = mode;\n  var mark = input.mark();\n\n  try {\n    this.startIndex = input.index;\n    this.prevAccept.reset();\n    var dfa = this.decisionToDFA[mode];\n\n    if (dfa.s0 === null) {\n      return this.matchATN(input);\n    } else {\n      return this.execATN(input, dfa.s0);\n    }\n  } finally {\n    input.release(mark);\n  }\n};\n\nLexerATNSimulator.prototype.reset = function () {\n  this.prevAccept.reset();\n  this.startIndex = -1;\n  this.line = 1;\n  this.column = 0;\n  this.mode = Lexer.DEFAULT_MODE;\n};\n\nLexerATNSimulator.prototype.matchATN = function (input) {\n  var startState = this.atn.modeToStartState[this.mode];\n\n  if (LexerATNSimulator.debug) {\n    console.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n  }\n\n  var old_mode = this.mode;\n  var s0_closure = this.computeStartState(input, startState);\n  var suppressEdge = s0_closure.hasSemanticContext;\n  s0_closure.hasSemanticContext = false;\n  var next = this.addDFAState(s0_closure);\n\n  if (!suppressEdge) {\n    this.decisionToDFA[this.mode].s0 = next;\n  }\n\n  var predict = this.execATN(input, next);\n\n  if (LexerATNSimulator.debug) {\n    console.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n  }\n\n  return predict;\n};\n\nLexerATNSimulator.prototype.execATN = function (input, ds0) {\n  if (LexerATNSimulator.debug) {\n    console.log(\"start state closure=\" + ds0.configs);\n  }\n\n  if (ds0.isAcceptState) {\n    // allow zero-length tokens\n    this.captureSimState(this.prevAccept, input, ds0);\n  }\n\n  var t = input.LA(1);\n  var s = ds0; // s is current/from DFA state\n\n  while (true) {\n    // while more work\n    if (LexerATNSimulator.debug) {\n      console.log(\"execATN loop starting closure: \" + s.configs);\n    } // As we move src->trg, src->trg, we keep track of the previous trg to\n    // avoid looking up the DFA state again, which is expensive.\n    // If the previous target was already part of the DFA, we might\n    // be able to avoid doing a reach operation upon t. If s!=null,\n    // it means that semantic predicates didn't prevent us from\n    // creating a DFA state. Once we know s!=null, we check to see if\n    // the DFA state has an edge already for t. If so, we can just reuse\n    // it's configuration set; there's no point in re-computing it.\n    // This is kind of like doing DFA simulation within the ATN\n    // simulation because DFA simulation is really just a way to avoid\n    // computing reach/closure sets. Technically, once we know that\n    // we have a previously added DFA state, we could jump over to\n    // the DFA simulator. But, that would mean popping back and forth\n    // a lot and making things more complicated algorithmically.\n    // This optimization makes a lot of sense for loops within DFA.\n    // A character will take us back to an existing DFA state\n    // that already has lots of edges out of it. e.g., .* in comments.\n    // print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\n\n    var target = this.getExistingTargetState(s, t); // print(\"Existing:\" + str(target))\n\n    if (target === null) {\n      target = this.computeTargetState(input, s, t); // print(\"Computed:\" + str(target))\n    }\n\n    if (target === ATNSimulator.ERROR) {\n      break;\n    } // If this is a consumable input element, make sure to consume before\n    // capturing the accept state so the input index, line, and char\n    // position accurately reflect the state of the interpreter at the\n    // end of the token.\n\n\n    if (t !== Token.EOF) {\n      this.consume(input);\n    }\n\n    if (target.isAcceptState) {\n      this.captureSimState(this.prevAccept, input, target);\n\n      if (t === Token.EOF) {\n        break;\n      }\n    }\n\n    t = input.LA(1);\n    s = target; // flip; current DFA target becomes new src/from state\n  }\n\n  return this.failOrAccept(this.prevAccept, input, s.configs, t);\n}; // Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param s The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\n\n\nLexerATNSimulator.prototype.getExistingTargetState = function (s, t) {\n  if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n    return null;\n  }\n\n  var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\n  if (target === undefined) {\n    target = null;\n  }\n\n  if (LexerATNSimulator.debug && target !== null) {\n    console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n  }\n\n  return target;\n}; // Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param input The input stream\n// @param s The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\n\n\nLexerATNSimulator.prototype.computeTargetState = function (input, s, t) {\n  var reach = new OrderedATNConfigSet(); // if we don't find an existing DFA state\n  // Fill reach starting from closure, following t transitions\n\n  this.getReachableConfigSet(input, s.configs, reach, t);\n\n  if (reach.items.length === 0) {\n    // we got nowhere on t from s\n    if (!reach.hasSemanticContext) {\n      // we got nowhere on t, don't throw out this knowledge; it'd\n      // cause a failover from DFA later.\n      this.addDFAEdge(s, t, ATNSimulator.ERROR);\n    } // stop when we can't match any more char\n\n\n    return ATNSimulator.ERROR;\n  } // Add an edge from s to target DFA found/created for reach\n\n\n  return this.addDFAEdge(s, t, null, reach);\n};\n\nLexerATNSimulator.prototype.failOrAccept = function (prevAccept, input, reach, t) {\n  if (this.prevAccept.dfaState !== null) {\n    var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n    this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.column);\n    return prevAccept.dfaState.prediction;\n  } else {\n    // if no accept and EOF is first char, return EOF\n    if (t === Token.EOF && input.index === this.startIndex) {\n      return Token.EOF;\n    }\n\n    throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n  }\n}; // Given a starting configuration set, figure out all ATN configurations\n// we can reach upon input {@code t}. Parameter {@code reach} is a return\n// parameter.\n\n\nLexerATNSimulator.prototype.getReachableConfigSet = function (input, closure, reach, t) {\n  // this is used to skip processing for configs which have a lower priority\n  // than a config that already reached an accept state for the same rule\n  var skipAlt = ATN.INVALID_ALT_NUMBER;\n\n  for (var i = 0; i < closure.items.length; i++) {\n    var cfg = closure.items[i];\n    var currentAltReachedAcceptState = cfg.alt === skipAlt;\n\n    if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n      continue;\n    }\n\n    if (LexerATNSimulator.debug) {\n      console.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg.toString(this.recog, true));\n    }\n\n    for (var j = 0; j < cfg.state.transitions.length; j++) {\n      var trans = cfg.state.transitions[j]; // for each transition\n\n      var target = this.getReachableTarget(trans, t);\n\n      if (target !== null) {\n        var lexerActionExecutor = cfg.lexerActionExecutor;\n\n        if (lexerActionExecutor !== null) {\n          lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n        }\n\n        var treatEofAsEpsilon = t === Token.EOF;\n        var config = new LexerATNConfig({\n          state: target,\n          lexerActionExecutor: lexerActionExecutor\n        }, cfg);\n\n        if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n          // any remaining configs for this alt have a lower priority\n          // than the one that just reached an accept state.\n          skipAlt = cfg.alt;\n        }\n      }\n    }\n  }\n};\n\nLexerATNSimulator.prototype.accept = function (input, lexerActionExecutor, startIndex, index, line, charPos) {\n  if (LexerATNSimulator.debug) {\n    console.log(\"ACTION %s\\n\", lexerActionExecutor);\n  } // seek to after last char in token\n\n\n  input.seek(index);\n  this.line = line;\n  this.column = charPos;\n\n  if (lexerActionExecutor !== null && this.recog !== null) {\n    lexerActionExecutor.execute(this.recog, input, startIndex);\n  }\n};\n\nLexerATNSimulator.prototype.getReachableTarget = function (trans, t) {\n  if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n    return trans.target;\n  } else {\n    return null;\n  }\n};\n\nLexerATNSimulator.prototype.computeStartState = function (input, p) {\n  var initialContext = PredictionContext.EMPTY;\n  var configs = new OrderedATNConfigSet();\n\n  for (var i = 0; i < p.transitions.length; i++) {\n    var target = p.transitions[i].target;\n    var cfg = new LexerATNConfig({\n      state: target,\n      alt: i + 1,\n      context: initialContext\n    }, null);\n    this.closure(input, cfg, configs, false, false, false);\n  }\n\n  return configs;\n}; // Since the alternatives within any lexer decision are ordered by\n// preference, this method stops pursuing the closure as soon as an accept\n// state is reached. After the first accept state is reached by depth-first\n// search from {@code config}, all other (potentially reachable) states for\n// this rule would have a lower priority.\n//\n// @return {@code true} if an accept state is reached, otherwise\n// {@code false}.\n\n\nLexerATNSimulator.prototype.closure = function (input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n  var cfg = null;\n\n  if (LexerATNSimulator.debug) {\n    console.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n  }\n\n  if (config.state instanceof RuleStopState) {\n    if (LexerATNSimulator.debug) {\n      if (this.recog !== null) {\n        console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n      } else {\n        console.log(\"closure at rule stop %s\\n\", config);\n      }\n    }\n\n    if (config.context === null || config.context.hasEmptyPath()) {\n      if (config.context === null || config.context.isEmpty()) {\n        configs.add(config);\n        return true;\n      } else {\n        configs.add(new LexerATNConfig({\n          state: config.state,\n          context: PredictionContext.EMPTY\n        }, config));\n        currentAltReachedAcceptState = true;\n      }\n    }\n\n    if (config.context !== null && !config.context.isEmpty()) {\n      for (var i = 0; i < config.context.length; i++) {\n        if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n          var newContext = config.context.getParent(i); // \"pop\" return state\n\n          var returnState = this.atn.states[config.context.getReturnState(i)];\n          cfg = new LexerATNConfig({\n            state: returnState,\n            context: newContext\n          }, config);\n          currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n        }\n      }\n    }\n\n    return currentAltReachedAcceptState;\n  } // optimization\n\n\n  if (!config.state.epsilonOnlyTransitions) {\n    if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n      configs.add(config);\n    }\n  }\n\n  for (var j = 0; j < config.state.transitions.length; j++) {\n    var trans = config.state.transitions[j];\n    cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\n    if (cfg !== null) {\n      currentAltReachedAcceptState = this.closure(input, cfg, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n    }\n  }\n\n  return currentAltReachedAcceptState;\n}; // side-effect: can alter configs.hasSemanticContext\n\n\nLexerATNSimulator.prototype.getEpsilonTarget = function (input, config, trans, configs, speculative, treatEofAsEpsilon) {\n  var cfg = null;\n\n  if (trans.serializationType === Transition.RULE) {\n    var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n    cfg = new LexerATNConfig({\n      state: trans.target,\n      context: newContext\n    }, config);\n  } else if (trans.serializationType === Transition.PRECEDENCE) {\n    throw \"Precedence predicates are not supported in lexers.\";\n  } else if (trans.serializationType === Transition.PREDICATE) {\n    // Track traversing semantic predicates. If we traverse,\n    // we cannot add a DFA state for this \"reach\" computation\n    // because the DFA would not test the predicate again in the\n    // future. Rather than creating collections of semantic predicates\n    // like v3 and testing them on prediction, v4 will test them on the\n    // fly all the time using the ATN not the DFA. This is slower but\n    // semantically it's not used that often. One of the key elements to\n    // this predicate mechanism is not adding DFA states that see\n    // predicates immediately afterwards in the ATN. For example,\n    // a : ID {p1}? | ID {p2}? ;\n    // should create the start state for rule 'a' (to save start state\n    // competition), but should not create target of ID state. The\n    // collection of ATN states the following ID references includes\n    // states reached by traversing predicates. Since this is when we\n    // test them, we cannot cash the DFA state target of ID.\n    if (LexerATNSimulator.debug) {\n      console.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n    }\n\n    configs.hasSemanticContext = true;\n\n    if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n      cfg = new LexerATNConfig({\n        state: trans.target\n      }, config);\n    }\n  } else if (trans.serializationType === Transition.ACTION) {\n    if (config.context === null || config.context.hasEmptyPath()) {\n      // execute actions anywhere in the start rule for a token.\n      //\n      // TODO: if the entry rule is invoked recursively, some\n      // actions may be executed during the recursive call. The\n      // problem can appear when hasEmptyPath() is true but\n      // isEmpty() is false. In this case, the config needs to be\n      // split into two contexts - one with just the empty path\n      // and another with everything but the empty path.\n      // Unfortunately, the current algorithm does not allow\n      // getEpsilonTarget to return two configurations, so\n      // additional modifications are needed before we can support\n      // the split operation.\n      var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[trans.actionIndex]);\n      cfg = new LexerATNConfig({\n        state: trans.target,\n        lexerActionExecutor: lexerActionExecutor\n      }, config);\n    } else {\n      // ignore actions in referenced rules\n      cfg = new LexerATNConfig({\n        state: trans.target\n      }, config);\n    }\n  } else if (trans.serializationType === Transition.EPSILON) {\n    cfg = new LexerATNConfig({\n      state: trans.target\n    }, config);\n  } else if (trans.serializationType === Transition.ATOM || trans.serializationType === Transition.RANGE || trans.serializationType === Transition.SET) {\n    if (treatEofAsEpsilon) {\n      if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n        cfg = new LexerATNConfig({\n          state: trans.target\n        }, config);\n      }\n    }\n  }\n\n  return cfg;\n}; // Evaluate a predicate specified in the lexer.\n//\n// <p>If {@code speculative} is {@code true}, this method was called before\n// {@link //consume} for the matched character. This method should call\n// {@link //consume} before evaluating the predicate to ensure position\n// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n// and {@link Lexer//getcolumn}, properly reflect the current\n// lexer state. This method should restore {@code input} and the simulator\n// to the original state before returning (i.e. undo the actions made by the\n// call to {@link //consume}.</p>\n//\n// @param input The input stream.\n// @param ruleIndex The rule containing the predicate.\n// @param predIndex The index of the predicate within the rule.\n// @param speculative {@code true} if the current index in {@code input} is\n// one character before the predicate's location.\n//\n// @return {@code true} if the specified predicate evaluates to\n// {@code true}.\n// /\n\n\nLexerATNSimulator.prototype.evaluatePredicate = function (input, ruleIndex, predIndex, speculative) {\n  // assume true if no recognizer was provided\n  if (this.recog === null) {\n    return true;\n  }\n\n  if (!speculative) {\n    return this.recog.sempred(null, ruleIndex, predIndex);\n  }\n\n  var savedcolumn = this.column;\n  var savedLine = this.line;\n  var index = input.index;\n  var marker = input.mark();\n\n  try {\n    this.consume(input);\n    return this.recog.sempred(null, ruleIndex, predIndex);\n  } finally {\n    this.column = savedcolumn;\n    this.line = savedLine;\n    input.seek(index);\n    input.release(marker);\n  }\n};\n\nLexerATNSimulator.prototype.captureSimState = function (settings, input, dfaState) {\n  settings.index = input.index;\n  settings.line = this.line;\n  settings.column = this.column;\n  settings.dfaState = dfaState;\n};\n\nLexerATNSimulator.prototype.addDFAEdge = function (from_, tk, to, cfgs) {\n  if (to === undefined) {\n    to = null;\n  }\n\n  if (cfgs === undefined) {\n    cfgs = null;\n  }\n\n  if (to === null && cfgs !== null) {\n    // leading to this call, ATNConfigSet.hasSemanticContext is used as a\n    // marker indicating dynamic predicate evaluation makes this edge\n    // dependent on the specific input sequence, so the static edge in the\n    // DFA should be omitted. The target DFAState is still created since\n    // execATN has the ability to resynchronize with the DFA state cache\n    // following the predicate evaluation step.\n    //\n    // TJP notes: next time through the DFA, we see a pred again and eval.\n    // If that gets us to a previously created (but dangling) DFA\n    // state, we can continue in pure DFA mode from there.\n    // /\n    var suppressEdge = cfgs.hasSemanticContext;\n    cfgs.hasSemanticContext = false;\n    to = this.addDFAState(cfgs);\n\n    if (suppressEdge) {\n      return to;\n    }\n  } // add the edge\n\n\n  if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n    // Only track edges within the DFA bounds\n    return to;\n  }\n\n  if (LexerATNSimulator.debug) {\n    console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n  }\n\n  if (from_.edges === null) {\n    // make room for tokens 1..n and -1 masquerading as index 0\n    from_.edges = [];\n  }\n\n  from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n  return to;\n}; // Add a new DFA state if there isn't one with this set of\n// configurations already. This method also detects the first\n// configuration containing an ATN rule stop state. Later, when\n// traversing the DFA, we will know which rule to accept.\n\n\nLexerATNSimulator.prototype.addDFAState = function (configs) {\n  var proposed = new DFAState(null, configs);\n  var firstConfigWithRuleStopState = null;\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var cfg = configs.items[i];\n\n    if (cfg.state instanceof RuleStopState) {\n      firstConfigWithRuleStopState = cfg;\n      break;\n    }\n  }\n\n  if (firstConfigWithRuleStopState !== null) {\n    proposed.isAcceptState = true;\n    proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n    proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n  }\n\n  var dfa = this.decisionToDFA[this.mode];\n  var existing = dfa.states.get(proposed);\n\n  if (existing !== null) {\n    return existing;\n  }\n\n  var newState = proposed;\n  newState.stateNumber = dfa.states.length;\n  configs.setReadonly(true);\n  newState.configs = configs;\n  dfa.states.add(newState);\n  return newState;\n};\n\nLexerATNSimulator.prototype.getDFA = function (mode) {\n  return this.decisionToDFA[mode];\n}; // Get the text matched so far for the current token.\n\n\nLexerATNSimulator.prototype.getText = function (input) {\n  // index is first lookahead char, don't include.\n  return input.getText(this.startIndex, input.index - 1);\n};\n\nLexerATNSimulator.prototype.consume = function (input) {\n  var curChar = input.LA(1);\n\n  if (curChar === \"\\n\".charCodeAt(0)) {\n    this.line += 1;\n    this.column = 0;\n  } else {\n    this.column += 1;\n  }\n\n  input.consume();\n};\n\nLexerATNSimulator.prototype.getTokenName = function (tt) {\n  if (tt === -1) {\n    return \"EOF\";\n  } else {\n    return \"'\" + String.fromCharCode(tt) + \"'\";\n  }\n};\n\nexports.LexerATNSimulator = LexerATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/LexerATNSimulator.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/LexerAction.js":
/*!************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerAction.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nfunction LexerActionType() {}\n\nLexerActionType.CHANNEL = 0; //The type of a {@link LexerChannelAction} action.\n\nLexerActionType.CUSTOM = 1; //The type of a {@link LexerCustomAction} action.\n\nLexerActionType.MODE = 2; //The type of a {@link LexerModeAction} action.\n\nLexerActionType.MORE = 3; //The type of a {@link LexerMoreAction} action.\n\nLexerActionType.POP_MODE = 4; //The type of a {@link LexerPopModeAction} action.\n\nLexerActionType.PUSH_MODE = 5; //The type of a {@link LexerPushModeAction} action.\n\nLexerActionType.SKIP = 6; //The type of a {@link LexerSkipAction} action.\n\nLexerActionType.TYPE = 7; //The type of a {@link LexerTypeAction} action.\n\nfunction LexerAction(action) {\n  this.actionType = action;\n  this.isPositionDependent = false;\n  return this;\n}\n\nLexerAction.prototype.hashCode = function () {\n  var hash = new Hash();\n  this.updateHashCode(hash);\n  return hash.finish();\n};\n\nLexerAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType);\n};\n\nLexerAction.prototype.equals = function (other) {\n  return this === other;\n}; //\n// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n//\n// <p>The {@code skip} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\n\nfunction LexerSkipAction() {\n  LexerAction.call(this, LexerActionType.SKIP);\n  return this;\n}\n\nLexerSkipAction.prototype = Object.create(LexerAction.prototype);\nLexerSkipAction.prototype.constructor = LexerSkipAction; // Provides a singleton instance of this parameterless lexer action.\n\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\nLexerSkipAction.prototype.execute = function (lexer) {\n  lexer.skip();\n};\n\nLexerSkipAction.prototype.toString = function () {\n  return \"skip\";\n}; //  Implements the {@code type} lexer action by calling {@link Lexer//setType}\n// with the assigned type.\n\n\nfunction LexerTypeAction(type) {\n  LexerAction.call(this, LexerActionType.TYPE);\n  this.type = type;\n  return this;\n}\n\nLexerTypeAction.prototype = Object.create(LexerAction.prototype);\nLexerTypeAction.prototype.constructor = LexerTypeAction;\n\nLexerTypeAction.prototype.execute = function (lexer) {\n  lexer.type = this.type;\n};\n\nLexerTypeAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.type);\n};\n\nLexerTypeAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerTypeAction)) {\n    return false;\n  } else {\n    return this.type === other.type;\n  }\n};\n\nLexerTypeAction.prototype.toString = function () {\n  return \"type(\" + this.type + \")\";\n}; // Implements the {@code pushMode} lexer action by calling\n// {@link Lexer//pushMode} with the assigned mode.\n\n\nfunction LexerPushModeAction(mode) {\n  LexerAction.call(this, LexerActionType.PUSH_MODE);\n  this.mode = mode;\n  return this;\n}\n\nLexerPushModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPushModeAction.prototype.constructor = LexerPushModeAction; // <p>This action is implemented by calling {@link Lexer//pushMode} with the\n// value provided by {@link //getMode}.</p>\n\nLexerPushModeAction.prototype.execute = function (lexer) {\n  lexer.pushMode(this.mode);\n};\n\nLexerPushModeAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.mode);\n};\n\nLexerPushModeAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerPushModeAction)) {\n    return false;\n  } else {\n    return this.mode === other.mode;\n  }\n};\n\nLexerPushModeAction.prototype.toString = function () {\n  return \"pushMode(\" + this.mode + \")\";\n}; // Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n//\n// <p>The {@code popMode} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\n\nfunction LexerPopModeAction() {\n  LexerAction.call(this, LexerActionType.POP_MODE);\n  return this;\n}\n\nLexerPopModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPopModeAction.prototype.constructor = LexerPopModeAction;\nLexerPopModeAction.INSTANCE = new LexerPopModeAction(); // <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n\nLexerPopModeAction.prototype.execute = function (lexer) {\n  lexer.popMode();\n};\n\nLexerPopModeAction.prototype.toString = function () {\n  return \"popMode\";\n}; // Implements the {@code more} lexer action by calling {@link Lexer//more}.\n//\n// <p>The {@code more} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n\n\nfunction LexerMoreAction() {\n  LexerAction.call(this, LexerActionType.MORE);\n  return this;\n}\n\nLexerMoreAction.prototype = Object.create(LexerAction.prototype);\nLexerMoreAction.prototype.constructor = LexerMoreAction;\nLexerMoreAction.INSTANCE = new LexerMoreAction(); // <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n\nLexerMoreAction.prototype.execute = function (lexer) {\n  lexer.more();\n};\n\nLexerMoreAction.prototype.toString = function () {\n  return \"more\";\n}; // Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n// the assigned mode.\n\n\nfunction LexerModeAction(mode) {\n  LexerAction.call(this, LexerActionType.MODE);\n  this.mode = mode;\n  return this;\n}\n\nLexerModeAction.prototype = Object.create(LexerAction.prototype);\nLexerModeAction.prototype.constructor = LexerModeAction; // <p>This action is implemented by calling {@link Lexer//mode} with the\n// value provided by {@link //getMode}.</p>\n\nLexerModeAction.prototype.execute = function (lexer) {\n  lexer.mode(this.mode);\n};\n\nLexerModeAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.mode);\n};\n\nLexerModeAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerModeAction)) {\n    return false;\n  } else {\n    return this.mode === other.mode;\n  }\n};\n\nLexerModeAction.prototype.toString = function () {\n  return \"mode(\" + this.mode + \")\";\n}; // Executes a custom lexer action by calling {@link Recognizer//action} with the\n// rule and action indexes assigned to the custom action. The implementation of\n// a custom action is added to the generated code for the lexer in an override\n// of {@link Recognizer//action} when the grammar is compiled.\n//\n// <p>This class may represent embedded actions created with the <code>{...}</code>\n// syntax in ANTLR 4, as well as actions created for lexer commands where the\n// command argument could not be evaluated when the grammar was compiled.</p>\n// Constructs a custom lexer action with the specified rule and action\n// indexes.\n//\n// @param ruleIndex The rule index to use for calls to\n// {@link Recognizer//action}.\n// @param actionIndex The action index to use for calls to\n// {@link Recognizer//action}.\n\n\nfunction LexerCustomAction(ruleIndex, actionIndex) {\n  LexerAction.call(this, LexerActionType.CUSTOM);\n  this.ruleIndex = ruleIndex;\n  this.actionIndex = actionIndex;\n  this.isPositionDependent = true;\n  return this;\n}\n\nLexerCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerCustomAction.prototype.constructor = LexerCustomAction; // <p>Custom actions are implemented by calling {@link Lexer//action} with the\n// appropriate rule and action indexes.</p>\n\nLexerCustomAction.prototype.execute = function (lexer) {\n  lexer.action(null, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerCustomAction)) {\n    return false;\n  } else {\n    return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n  }\n}; // Implements the {@code channel} lexer action by calling\n// {@link Lexer//setChannel} with the assigned channel.\n// Constructs a new {@code channel} action with the specified channel value.\n// @param channel The channel value to pass to {@link Lexer//setChannel}.\n\n\nfunction LexerChannelAction(channel) {\n  LexerAction.call(this, LexerActionType.CHANNEL);\n  this.channel = channel;\n  return this;\n}\n\nLexerChannelAction.prototype = Object.create(LexerAction.prototype);\nLexerChannelAction.prototype.constructor = LexerChannelAction; // <p>This action is implemented by calling {@link Lexer//setChannel} with the\n// value provided by {@link //getChannel}.</p>\n\nLexerChannelAction.prototype.execute = function (lexer) {\n  lexer._channel = this.channel;\n};\n\nLexerChannelAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.channel);\n};\n\nLexerChannelAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerChannelAction)) {\n    return false;\n  } else {\n    return this.channel === other.channel;\n  }\n};\n\nLexerChannelAction.prototype.toString = function () {\n  return \"channel(\" + this.channel + \")\";\n}; // This implementation of {@link LexerAction} is used for tracking input offsets\n// for position-dependent actions within a {@link LexerActionExecutor}.\n//\n// <p>This action is not serialized as part of the ATN, and is only required for\n// position-dependent lexer actions which appear at a location other than the\n// end of a rule. For more information about DFA optimizations employed for\n// lexer actions, see {@link LexerActionExecutor//append} and\n// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n// Constructs a new indexed custom action by associating a character offset\n// with a {@link LexerAction}.\n//\n// <p>Note: This class is only required for lexer actions for which\n// {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n//\n// @param offset The offset into the input {@link CharStream}, relative to\n// the token start index, at which the specified lexer action should be\n// executed.\n// @param action The lexer action to execute at a particular offset in the\n// input {@link CharStream}.\n\n\nfunction LexerIndexedCustomAction(offset, action) {\n  LexerAction.call(this, action.actionType);\n  this.offset = offset;\n  this.action = action;\n  this.isPositionDependent = true;\n  return this;\n}\n\nLexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction; // <p>This method calls {@link //execute} on the result of {@link //getAction}\n// using the provided {@code lexer}.</p>\n\nLexerIndexedCustomAction.prototype.execute = function (lexer) {\n  // assume the input stream position was properly set by the calling code\n  this.action.execute(lexer);\n};\n\nLexerIndexedCustomAction.prototype.updateHashCode = function (hash) {\n  hash.update(this.actionType, this.offset, this.action);\n};\n\nLexerIndexedCustomAction.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerIndexedCustomAction)) {\n    return false;\n  } else {\n    return this.offset === other.offset && this.action === other.action;\n  }\n};\n\nexports.LexerActionType = LexerActionType;\nexports.LexerSkipAction = LexerSkipAction;\nexports.LexerChannelAction = LexerChannelAction;\nexports.LexerCustomAction = LexerCustomAction;\nexports.LexerIndexedCustomAction = LexerIndexedCustomAction;\nexports.LexerMoreAction = LexerMoreAction;\nexports.LexerTypeAction = LexerTypeAction;\nexports.LexerPushModeAction = LexerPushModeAction;\nexports.LexerPopModeAction = LexerPopModeAction;\nexports.LexerModeAction = LexerModeAction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/LexerAction.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/LexerActionExecutor.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerActionExecutor.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// Represents an executor for a sequence of lexer actions which traversed during\n// the matching operation of a lexer rule (token).\n//\n// <p>The executor tracks position information for position-dependent lexer actions\n// efficiently, ensuring that actions appearing only at the end of the rule do\n// not cause bloating of the {@link DFA} created for the lexer.</p>\nvar hashStuff = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/Utils.js\").hashStuff;\n\nvar LexerIndexedCustomAction = __webpack_require__(/*! ./LexerAction */ \"./node_modules/antlr4/atn/LexerAction.js\").LexerIndexedCustomAction;\n\nfunction LexerActionExecutor(lexerActions) {\n  this.lexerActions = lexerActions === null ? [] : lexerActions; // Caches the result of {@link //hashCode} since the hash code is an element\n  // of the performance-critical {@link LexerATNConfig//hashCode} operation.\n\n  this.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n  // lexerActions]))\n\n  return this;\n} // Creates a {@link LexerActionExecutor} which executes the actions for\n// the input {@code lexerActionExecutor} followed by a specified\n// {@code lexerAction}.\n//\n// @param lexerActionExecutor The executor for actions already traversed by\n// the lexer while matching a token within a particular\n// {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n// though it were an empty executor.\n// @param lexerAction The lexer action to execute after the actions\n// specified in {@code lexerActionExecutor}.\n//\n// @return A {@link LexerActionExecutor} for executing the combine actions\n// of {@code lexerActionExecutor} and {@code lexerAction}.\n\n\nLexerActionExecutor.append = function (lexerActionExecutor, lexerAction) {\n  if (lexerActionExecutor === null) {\n    return new LexerActionExecutor([lexerAction]);\n  }\n\n  var lexerActions = lexerActionExecutor.lexerActions.concat([lexerAction]);\n  return new LexerActionExecutor(lexerActions);\n}; // Creates a {@link LexerActionExecutor} which encodes the current offset\n// for position-dependent lexer actions.\n//\n// <p>Normally, when the executor encounters lexer actions where\n// {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n// {@link IntStream//seek} on the input {@link CharStream} to set the input\n// position to the <em>end</em> of the current token. This behavior provides\n// for efficient DFA representation of lexer actions which appear at the end\n// of a lexer rule, even when the lexer rule matches a variable number of\n// characters.</p>\n//\n// <p>Prior to traversing a match transition in the ATN, the current offset\n// from the token start index is assigned to all position-dependent lexer\n// actions which have not already been assigned a fixed offset. By storing\n// the offsets relative to the token start index, the DFA representation of\n// lexer actions which appear in the middle of tokens remains efficient due\n// to sharing among tokens of the same length, regardless of their absolute\n// position in the input stream.</p>\n//\n// <p>If the current executor already has offsets assigned to all\n// position-dependent lexer actions, the method returns {@code this}.</p>\n//\n// @param offset The current offset to assign to all position-dependent\n// lexer actions which do not already have offsets assigned.\n//\n// @return A {@link LexerActionExecutor} which stores input stream offsets\n// for all position-dependent lexer actions.\n// /\n\n\nLexerActionExecutor.prototype.fixOffsetBeforeMatch = function (offset) {\n  var updatedLexerActions = null;\n\n  for (var i = 0; i < this.lexerActions.length; i++) {\n    if (this.lexerActions[i].isPositionDependent && !(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n      if (updatedLexerActions === null) {\n        updatedLexerActions = this.lexerActions.concat([]);\n      }\n\n      updatedLexerActions[i] = new LexerIndexedCustomAction(offset, this.lexerActions[i]);\n    }\n  }\n\n  if (updatedLexerActions === null) {\n    return this;\n  } else {\n    return new LexerActionExecutor(updatedLexerActions);\n  }\n}; // Execute the actions encapsulated by this executor within the context of a\n// particular {@link Lexer}.\n//\n// <p>This method calls {@link IntStream//seek} to set the position of the\n// {@code input} {@link CharStream} prior to calling\n// {@link LexerAction//execute} on a position-dependent action. Before the\n// method returns, the input position will be restored to the same position\n// it was in when the method was invoked.</p>\n//\n// @param lexer The lexer instance.\n// @param input The input stream which is the source for the current token.\n// When this method is called, the current {@link IntStream//index} for\n// {@code input} should be the start of the following token, i.e. 1\n// character past the end of the current token.\n// @param startIndex The token start index. This value may be passed to\n// {@link IntStream//seek} to set the {@code input} position to the beginning\n// of the token.\n// /\n\n\nLexerActionExecutor.prototype.execute = function (lexer, input, startIndex) {\n  var requiresSeek = false;\n  var stopIndex = input.index;\n\n  try {\n    for (var i = 0; i < this.lexerActions.length; i++) {\n      var lexerAction = this.lexerActions[i];\n\n      if (lexerAction instanceof LexerIndexedCustomAction) {\n        var offset = lexerAction.offset;\n        input.seek(startIndex + offset);\n        lexerAction = lexerAction.action;\n        requiresSeek = startIndex + offset !== stopIndex;\n      } else if (lexerAction.isPositionDependent) {\n        input.seek(stopIndex);\n        requiresSeek = false;\n      }\n\n      lexerAction.execute(lexer);\n    }\n  } finally {\n    if (requiresSeek) {\n      input.seek(stopIndex);\n    }\n  }\n};\n\nLexerActionExecutor.prototype.hashCode = function () {\n  return this.cachedHashCode;\n};\n\nLexerActionExecutor.prototype.updateHashCode = function (hash) {\n  hash.update(this.cachedHashCode);\n};\n\nLexerActionExecutor.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof LexerActionExecutor)) {\n    return false;\n  } else if (this.cachedHashCode != other.cachedHashCode) {\n    return false;\n  } else if (this.lexerActions.length != other.lexerActions.length) {\n    return false;\n  } else {\n    var numActions = this.lexerActions.length;\n\n    for (var idx = 0; idx < numActions; ++idx) {\n      if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};\n\nexports.LexerActionExecutor = LexerActionExecutor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9MZXhlckFjdGlvbkV4ZWN1dG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9hdG4vTGV4ZXJBY3Rpb25FeGVjdXRvci5qcz8wY2ZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vLy9cblxuLy8gUmVwcmVzZW50cyBhbiBleGVjdXRvciBmb3IgYSBzZXF1ZW5jZSBvZiBsZXhlciBhY3Rpb25zIHdoaWNoIHRyYXZlcnNlZCBkdXJpbmdcbi8vIHRoZSBtYXRjaGluZyBvcGVyYXRpb24gb2YgYSBsZXhlciBydWxlICh0b2tlbikuXG4vL1xuLy8gPHA+VGhlIGV4ZWN1dG9yIHRyYWNrcyBwb3NpdGlvbiBpbmZvcm1hdGlvbiBmb3IgcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnNcbi8vIGVmZmljaWVudGx5LCBlbnN1cmluZyB0aGF0IGFjdGlvbnMgYXBwZWFyaW5nIG9ubHkgYXQgdGhlIGVuZCBvZiB0aGUgcnVsZSBkb1xuLy8gbm90IGNhdXNlIGJsb2F0aW5nIG9mIHRoZSB7QGxpbmsgREZBfSBjcmVhdGVkIGZvciB0aGUgbGV4ZXIuPC9wPlxuXG52YXIgaGFzaFN0dWZmID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpLmhhc2hTdHVmZjtcbnZhciBMZXhlckluZGV4ZWRDdXN0b21BY3Rpb24gPSByZXF1aXJlKCcuL0xleGVyQWN0aW9uJykuTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uO1xuXG5mdW5jdGlvbiBMZXhlckFjdGlvbkV4ZWN1dG9yKGxleGVyQWN0aW9ucykge1xuXHR0aGlzLmxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9ucyA9PT0gbnVsbCA/IFtdIDogbGV4ZXJBY3Rpb25zO1xuXHQvLyBDYWNoZXMgdGhlIHJlc3VsdCBvZiB7QGxpbmsgLy9oYXNoQ29kZX0gc2luY2UgdGhlIGhhc2ggY29kZSBpcyBhbiBlbGVtZW50XG5cdC8vIG9mIHRoZSBwZXJmb3JtYW5jZS1jcml0aWNhbCB7QGxpbmsgTGV4ZXJBVE5Db25maWcvL2hhc2hDb2RlfSBvcGVyYXRpb24uXG5cdHRoaXMuY2FjaGVkSGFzaENvZGUgPSBoYXNoU3R1ZmYobGV4ZXJBY3Rpb25zKTsgLy8gXCJcIi5qb2luKFtzdHIobGEpIGZvciBsYSBpblxuXHQvLyBsZXhlckFjdGlvbnNdKSlcblx0cmV0dXJuIHRoaXM7XG59XG5cbi8vIENyZWF0ZXMgYSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gd2hpY2ggZXhlY3V0ZXMgdGhlIGFjdGlvbnMgZm9yXG4vLyB0aGUgaW5wdXQge0Bjb2RlIGxleGVyQWN0aW9uRXhlY3V0b3J9IGZvbGxvd2VkIGJ5IGEgc3BlY2lmaWVkXG4vLyB7QGNvZGUgbGV4ZXJBY3Rpb259LlxuLy9cbi8vIEBwYXJhbSBsZXhlckFjdGlvbkV4ZWN1dG9yIFRoZSBleGVjdXRvciBmb3IgYWN0aW9ucyBhbHJlYWR5IHRyYXZlcnNlZCBieVxuLy8gdGhlIGxleGVyIHdoaWxlIG1hdGNoaW5nIGEgdG9rZW4gd2l0aGluIGEgcGFydGljdWxhclxuLy8ge0BsaW5rIExleGVyQVROQ29uZmlnfS4gSWYgdGhpcyBpcyB7QGNvZGUgbnVsbH0sIHRoZSBtZXRob2QgYmVoYXZlcyBhc1xuLy8gdGhvdWdoIGl0IHdlcmUgYW4gZW1wdHkgZXhlY3V0b3IuXG4vLyBAcGFyYW0gbGV4ZXJBY3Rpb24gVGhlIGxleGVyIGFjdGlvbiB0byBleGVjdXRlIGFmdGVyIHRoZSBhY3Rpb25zXG4vLyBzcGVjaWZpZWQgaW4ge0Bjb2RlIGxleGVyQWN0aW9uRXhlY3V0b3J9LlxuLy9cbi8vIEByZXR1cm4gQSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gZm9yIGV4ZWN1dGluZyB0aGUgY29tYmluZSBhY3Rpb25zXG4vLyBvZiB7QGNvZGUgbGV4ZXJBY3Rpb25FeGVjdXRvcn0gYW5kIHtAY29kZSBsZXhlckFjdGlvbn0uXG5MZXhlckFjdGlvbkV4ZWN1dG9yLmFwcGVuZCA9IGZ1bmN0aW9uKGxleGVyQWN0aW9uRXhlY3V0b3IsIGxleGVyQWN0aW9uKSB7XG5cdGlmIChsZXhlckFjdGlvbkV4ZWN1dG9yID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIG5ldyBMZXhlckFjdGlvbkV4ZWN1dG9yKFsgbGV4ZXJBY3Rpb24gXSk7XG5cdH1cblx0dmFyIGxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9uRXhlY3V0b3IubGV4ZXJBY3Rpb25zLmNvbmNhdChbIGxleGVyQWN0aW9uIF0pO1xuXHRyZXR1cm4gbmV3IExleGVyQWN0aW9uRXhlY3V0b3IobGV4ZXJBY3Rpb25zKTtcbn07XG5cbi8vIENyZWF0ZXMgYSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gd2hpY2ggZW5jb2RlcyB0aGUgY3VycmVudCBvZmZzZXRcbi8vIGZvciBwb3NpdGlvbi1kZXBlbmRlbnQgbGV4ZXIgYWN0aW9ucy5cbi8vXG4vLyA8cD5Ob3JtYWxseSwgd2hlbiB0aGUgZXhlY3V0b3IgZW5jb3VudGVycyBsZXhlciBhY3Rpb25zIHdoZXJlXG4vLyB7QGxpbmsgTGV4ZXJBY3Rpb24vL2lzUG9zaXRpb25EZXBlbmRlbnR9IHJldHVybnMge0Bjb2RlIHRydWV9LCBpdCBjYWxsc1xuLy8ge0BsaW5rIEludFN0cmVhbS8vc2Vla30gb24gdGhlIGlucHV0IHtAbGluayBDaGFyU3RyZWFtfSB0byBzZXQgdGhlIGlucHV0XG4vLyBwb3NpdGlvbiB0byB0aGUgPGVtPmVuZDwvZW0+IG9mIHRoZSBjdXJyZW50IHRva2VuLiBUaGlzIGJlaGF2aW9yIHByb3ZpZGVzXG4vLyBmb3IgZWZmaWNpZW50IERGQSByZXByZXNlbnRhdGlvbiBvZiBsZXhlciBhY3Rpb25zIHdoaWNoIGFwcGVhciBhdCB0aGUgZW5kXG4vLyBvZiBhIGxleGVyIHJ1bGUsIGV2ZW4gd2hlbiB0aGUgbGV4ZXIgcnVsZSBtYXRjaGVzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG4vLyBjaGFyYWN0ZXJzLjwvcD5cbi8vXG4vLyA8cD5QcmlvciB0byB0cmF2ZXJzaW5nIGEgbWF0Y2ggdHJhbnNpdGlvbiBpbiB0aGUgQVROLCB0aGUgY3VycmVudCBvZmZzZXRcbi8vIGZyb20gdGhlIHRva2VuIHN0YXJ0IGluZGV4IGlzIGFzc2lnbmVkIHRvIGFsbCBwb3NpdGlvbi1kZXBlbmRlbnQgbGV4ZXJcbi8vIGFjdGlvbnMgd2hpY2ggaGF2ZSBub3QgYWxyZWFkeSBiZWVuIGFzc2lnbmVkIGEgZml4ZWQgb2Zmc2V0LiBCeSBzdG9yaW5nXG4vLyB0aGUgb2Zmc2V0cyByZWxhdGl2ZSB0byB0aGUgdG9rZW4gc3RhcnQgaW5kZXgsIHRoZSBERkEgcmVwcmVzZW50YXRpb24gb2Zcbi8vIGxleGVyIGFjdGlvbnMgd2hpY2ggYXBwZWFyIGluIHRoZSBtaWRkbGUgb2YgdG9rZW5zIHJlbWFpbnMgZWZmaWNpZW50IGR1ZVxuLy8gdG8gc2hhcmluZyBhbW9uZyB0b2tlbnMgb2YgdGhlIHNhbWUgbGVuZ3RoLCByZWdhcmRsZXNzIG9mIHRoZWlyIGFic29sdXRlXG4vLyBwb3NpdGlvbiBpbiB0aGUgaW5wdXQgc3RyZWFtLjwvcD5cbi8vXG4vLyA8cD5JZiB0aGUgY3VycmVudCBleGVjdXRvciBhbHJlYWR5IGhhcyBvZmZzZXRzIGFzc2lnbmVkIHRvIGFsbFxuLy8gcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMsIHRoZSBtZXRob2QgcmV0dXJucyB7QGNvZGUgdGhpc30uPC9wPlxuLy9cbi8vIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0IHRvIGFzc2lnbiB0byBhbGwgcG9zaXRpb24tZGVwZW5kZW50XG4vLyBsZXhlciBhY3Rpb25zIHdoaWNoIGRvIG5vdCBhbHJlYWR5IGhhdmUgb2Zmc2V0cyBhc3NpZ25lZC5cbi8vXG4vLyBAcmV0dXJuIEEge0BsaW5rIExleGVyQWN0aW9uRXhlY3V0b3J9IHdoaWNoIHN0b3JlcyBpbnB1dCBzdHJlYW0gb2Zmc2V0c1xuLy8gZm9yIGFsbCBwb3NpdGlvbi1kZXBlbmRlbnQgbGV4ZXIgYWN0aW9ucy5cbi8vIC9cbkxleGVyQWN0aW9uRXhlY3V0b3IucHJvdG90eXBlLmZpeE9mZnNldEJlZm9yZU1hdGNoID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG5cdHZhciB1cGRhdGVkTGV4ZXJBY3Rpb25zID0gbnVsbDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxleGVyQWN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICh0aGlzLmxleGVyQWN0aW9uc1tpXS5pc1Bvc2l0aW9uRGVwZW5kZW50ICYmXG5cdFx0XHRcdCEodGhpcy5sZXhlckFjdGlvbnNbaV0gaW5zdGFuY2VvZiBMZXhlckluZGV4ZWRDdXN0b21BY3Rpb24pKSB7XG5cdFx0XHRpZiAodXBkYXRlZExleGVyQWN0aW9ucyA9PT0gbnVsbCkge1xuXHRcdFx0XHR1cGRhdGVkTGV4ZXJBY3Rpb25zID0gdGhpcy5sZXhlckFjdGlvbnMuY29uY2F0KFtdKTtcblx0XHRcdH1cblx0XHRcdHVwZGF0ZWRMZXhlckFjdGlvbnNbaV0gPSBuZXcgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKG9mZnNldCxcblx0XHRcdFx0XHR0aGlzLmxleGVyQWN0aW9uc1tpXSk7XG5cdFx0fVxuXHR9XG5cdGlmICh1cGRhdGVkTGV4ZXJBY3Rpb25zID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG5ldyBMZXhlckFjdGlvbkV4ZWN1dG9yKHVwZGF0ZWRMZXhlckFjdGlvbnMpO1xuXHR9XG59O1xuXG4vLyBFeGVjdXRlIHRoZSBhY3Rpb25zIGVuY2Fwc3VsYXRlZCBieSB0aGlzIGV4ZWN1dG9yIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhXG4vLyBwYXJ0aWN1bGFyIHtAbGluayBMZXhlcn0uXG4vL1xuLy8gPHA+VGhpcyBtZXRob2QgY2FsbHMge0BsaW5rIEludFN0cmVhbS8vc2Vla30gdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGVcbi8vIHtAY29kZSBpbnB1dH0ge0BsaW5rIENoYXJTdHJlYW19IHByaW9yIHRvIGNhbGxpbmdcbi8vIHtAbGluayBMZXhlckFjdGlvbi8vZXhlY3V0ZX0gb24gYSBwb3NpdGlvbi1kZXBlbmRlbnQgYWN0aW9uLiBCZWZvcmUgdGhlXG4vLyBtZXRob2QgcmV0dXJucywgdGhlIGlucHV0IHBvc2l0aW9uIHdpbGwgYmUgcmVzdG9yZWQgdG8gdGhlIHNhbWUgcG9zaXRpb25cbi8vIGl0IHdhcyBpbiB3aGVuIHRoZSBtZXRob2Qgd2FzIGludm9rZWQuPC9wPlxuLy9cbi8vIEBwYXJhbSBsZXhlciBUaGUgbGV4ZXIgaW5zdGFuY2UuXG4vLyBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IHN0cmVhbSB3aGljaCBpcyB0aGUgc291cmNlIGZvciB0aGUgY3VycmVudCB0b2tlbi5cbi8vIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgY3VycmVudCB7QGxpbmsgSW50U3RyZWFtLy9pbmRleH0gZm9yXG4vLyB7QGNvZGUgaW5wdXR9IHNob3VsZCBiZSB0aGUgc3RhcnQgb2YgdGhlIGZvbGxvd2luZyB0b2tlbiwgaS5lLiAxXG4vLyBjaGFyYWN0ZXIgcGFzdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHRva2VuLlxuLy8gQHBhcmFtIHN0YXJ0SW5kZXggVGhlIHRva2VuIHN0YXJ0IGluZGV4LiBUaGlzIHZhbHVlIG1heSBiZSBwYXNzZWQgdG9cbi8vIHtAbGluayBJbnRTdHJlYW0vL3NlZWt9IHRvIHNldCB0aGUge0Bjb2RlIGlucHV0fSBwb3NpdGlvbiB0byB0aGUgYmVnaW5uaW5nXG4vLyBvZiB0aGUgdG9rZW4uXG4vLyAvXG5MZXhlckFjdGlvbkV4ZWN1dG9yLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24obGV4ZXIsIGlucHV0LCBzdGFydEluZGV4KSB7XG5cdHZhciByZXF1aXJlc1NlZWsgPSBmYWxzZTtcblx0dmFyIHN0b3BJbmRleCA9IGlucHV0LmluZGV4O1xuXHR0cnkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBsZXhlckFjdGlvbiA9IHRoaXMubGV4ZXJBY3Rpb25zW2ldO1xuXHRcdFx0aWYgKGxleGVyQWN0aW9uIGluc3RhbmNlb2YgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKSB7XG5cdFx0XHRcdHZhciBvZmZzZXQgPSBsZXhlckFjdGlvbi5vZmZzZXQ7XG5cdFx0XHRcdGlucHV0LnNlZWsoc3RhcnRJbmRleCArIG9mZnNldCk7XG5cdFx0XHRcdGxleGVyQWN0aW9uID0gbGV4ZXJBY3Rpb24uYWN0aW9uO1xuXHRcdFx0XHRyZXF1aXJlc1NlZWsgPSAoc3RhcnRJbmRleCArIG9mZnNldCkgIT09IHN0b3BJbmRleDtcblx0XHRcdH0gZWxzZSBpZiAobGV4ZXJBY3Rpb24uaXNQb3NpdGlvbkRlcGVuZGVudCkge1xuXHRcdFx0XHRpbnB1dC5zZWVrKHN0b3BJbmRleCk7XG5cdFx0XHRcdHJlcXVpcmVzU2VlayA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0bGV4ZXJBY3Rpb24uZXhlY3V0ZShsZXhlcik7XG5cdFx0fVxuXHR9IGZpbmFsbHkge1xuXHRcdGlmIChyZXF1aXJlc1NlZWspIHtcblx0XHRcdGlucHV0LnNlZWsoc3RvcEluZGV4KTtcblx0XHR9XG5cdH1cbn07XG5cbkxleGVyQWN0aW9uRXhlY3V0b3IucHJvdG90eXBlLmhhc2hDb2RlID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLmNhY2hlZEhhc2hDb2RlO1xufTtcblxuTGV4ZXJBY3Rpb25FeGVjdXRvci5wcm90b3R5cGUudXBkYXRlSGFzaENvZGUgPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgaGFzaC51cGRhdGUodGhpcy5jYWNoZWRIYXNoQ29kZSk7XG59O1xuXG5cbkxleGVyQWN0aW9uRXhlY3V0b3IucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uKG90aGVyKSB7XG5cdGlmICh0aGlzID09PSBvdGhlcikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBMZXhlckFjdGlvbkV4ZWN1dG9yKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBlbHNlIGlmICh0aGlzLmNhY2hlZEhhc2hDb2RlICE9IG90aGVyLmNhY2hlZEhhc2hDb2RlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2UgaWYgKHRoaXMubGV4ZXJBY3Rpb25zLmxlbmd0aCAhPSBvdGhlci5sZXhlckFjdGlvbnMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBudW1BY3Rpb25zID0gdGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoXG5cdFx0Zm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbnVtQWN0aW9uczsgKytpZHgpIHtcblx0XHRcdGlmICghdGhpcy5sZXhlckFjdGlvbnNbaWR4XS5lcXVhbHMob3RoZXIubGV4ZXJBY3Rpb25zW2lkeF0pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbmV4cG9ydHMuTGV4ZXJBY3Rpb25FeGVjdXRvciA9IExleGVyQWN0aW9uRXhlY3V0b3I7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTs7OztBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/LexerActionExecutor.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/ParserATNSimulator.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/atn/ParserATNSimulator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n//\n// <p>\n// The basic complexity of the adaptive strategy makes it harder to understand.\n// We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n// requests go through the DFA first. If they reach a state without an edge for\n// the current symbol, the algorithm fails over to the ATN simulation to\n// complete the DFA path for the current input (until it finds a conflict state\n// or uniquely predicting state).</p>\n//\n// <p>\n// All of that is done without using the outer context because we want to create\n// a DFA that is not dependent upon the rule invocation stack when we do a\n// prediction. One DFA works in all contexts. We avoid using context not\n// necessarily because it's slower, although it can be, but because of the DFA\n// caching problem. The closure routine only considers the rule invocation stack\n// created during prediction beginning in the decision rule. For example, if\n// prediction occurs without invoking another rule's ATN, there are no context\n// stacks in the configurations. When lack of context leads to a conflict, we\n// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n// strategy (versus full LL(*)).</p>\n//\n// <p>\n// When SLL yields a configuration set with conflict, we rewind the input and\n// retry the ATN simulation, this time using full outer context without adding\n// to the DFA. Configuration context stacks will be the full invocation stacks\n// from the start rule. If we get a conflict using full context, then we can\n// definitively say we have a true ambiguity for that input sequence. If we\n// don't get a conflict, it implies that the decision is sensitive to the outer\n// context. (It is not context-sensitive in the sense of context-sensitive\n// grammars.)</p>\n//\n// <p>\n// The next time we reach this DFA state with an SLL conflict, through DFA\n// simulation, we will again retry the ATN simulation using full context mode.\n// This is slow because we can't save the results and have to \"interpret\" the\n// ATN each time we get that input.</p>\n//\n// <p>\n// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n//\n// <p>\n// We could cache results from full context to predicted alternative easily and\n// that saves a lot of time but doesn't work in presence of predicates. The set\n// of visible predicates from the ATN start state changes depending on the\n// context, because closure can fall off the end of a rule. I tried to cache\n// tuples (stack context, semantic context, predicted alt) but it was slower\n// than interpreting and much more complicated. Also required a huge amount of\n// memory. The goal is not to create the world's fastest parser anyway. I'd like\n// to keep this algorithm simple. By launching multiple threads, we can improve\n// the speed of parsing across a large number of files.</p>\n//\n// <p>\n// There is no strict ordering between the amount of input used by SLL vs LL,\n// which makes it really hard to build a cache for full context. Let's say that\n// we have input A B C that leads to an SLL conflict with full context X. That\n// implies that using X we might only use A B but we could also use A B C D to\n// resolve conflict. Input A B C D could predict alternative 1 in one position\n// in the input and A B C E could predict alternative 2 in another position in\n// input. The conflicting SLL configurations could still be non-unique in the\n// full context prediction, which would lead us to requiring more input than the\n// original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n// input\tused during the previous prediction. That amounts to a cache that maps\n// X to a specific DFA for that context.</p>\n//\n// <p>\n// Something should be done for left-recursive expression predictions. They are\n// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n// with full LL thing Sam does.</p>\n//\n// <p>\n// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n//\n// <p>\n// We avoid doing full context retry when the outer context is empty, we did not\n// dip into the outer context by falling off the end of the decision state rule,\n// or when we force SLL mode.</p>\n//\n// <p>\n// As an example of the not dip into outer context case, consider as super\n// constructor calls versus function calls. One grammar might look like\n// this:</p>\n//\n// <pre>\n// ctorBody\n//   : '{' superCall? stat* '}'\n//   ;\n// </pre>\n//\n// <p>\n// Or, you might see something like</p>\n//\n// <pre>\n// stat\n//   : superCall ';'\n//   | expression ';'\n//   | ...\n//   ;\n// </pre>\n//\n// <p>\n// In both cases I believe that no closure operations will dip into the outer\n// context. In the first case ctorBody in the worst case will stop at the '}'.\n// In the 2nd case it should stop at the ';'. Both cases should stay within the\n// entry rule and not dip into the outer context.</p>\n//\n// <p>\n// <strong>PREDICATES</strong></p>\n//\n// <p>\n// Predicates are always evaluated if present in either SLL or LL both. SLL and\n// LL simulation deals with predicates differently. SLL collects predicates as\n// it performs closure operations like ANTLR v3 did. It delays predicate\n// evaluation until it reaches and accept state. This allows us to cache the SLL\n// ATN simulation whereas, if we had evaluated predicates on-the-fly during\n// closure, the DFA state configuration sets would be different and we couldn't\n// build up a suitable DFA.</p>\n//\n// <p>\n// When building a DFA accept state during ATN simulation, we evaluate any\n// predicates and return the sole semantically valid alternative. If there is\n// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n// we throw an exception. Alternatives without predicates act like they have\n// true predicates. The simple way to think about it is to strip away all\n// alternatives with false predicates and choose the minimum alternative that\n// remains.</p>\n//\n// <p>\n// When we start in the DFA and reach an accept state that's predicated, we test\n// those and return the minimum semantically viable alternative. If no\n// alternatives are viable, we throw an exception.</p>\n//\n// <p>\n// During full LL ATN simulation, closure always evaluates predicates and\n// on-the-fly. This is crucial to reducing the configuration set size during\n// closure. It hits a landmine when parsing with the Java grammar, for example,\n// without this on-the-fly evaluation.</p>\n//\n// <p>\n// <strong>SHARING DFA</strong></p>\n//\n// <p>\n// All instances of the same parser share the same decision DFAs through a\n// static field. Each instance gets its own ATN simulator but they share the\n// same {@link //decisionToDFA} field. They also share a\n// {@link PredictionContextCache} object that makes sure that all\n// {@link PredictionContext} objects are shared among the DFA states. This makes\n// a big size difference.</p>\n//\n// <p>\n// <strong>THREAD SAFETY</strong></p>\n//\n// <p>\n// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n// it adds a new DFA object to that array. {@link //addDFAEdge}\n// locks on the DFA for the current decision when setting the\n// {@link DFAState//edges} field. {@link //addDFAState} locks on\n// the DFA for the current decision when looking up a DFA state to see if it\n// already exists. We must make sure that all requests to add DFA states that\n// are equivalent result in the same shared DFA object. This is because lots of\n// threads will be trying to update the DFA at once. The\n// {@link //addDFAState} method also locks inside the DFA lock\n// but this time on the shared context cache when it rebuilds the\n// configurations' {@link PredictionContext} objects using cached\n// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n// safe as long as we can guarantee that all threads referencing\n// {@code s.edge[t]} get the same physical target {@link DFAState}, or\n// {@code null}. Once into the DFA, the DFA simulation does not reference the\n// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n// targets. The DFA simulator will either find {@link DFAState//edges} to be\n// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n// {@code dfa.edges[t]} to be non-null. The\n// {@link //addDFAEdge} method could be racing to set the field\n// but in either case the DFA simulator works; if {@code null}, and requests ATN\n// simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n// way it will work because it's not doing a test and set operation.</p>\n//\n// <p>\n// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n// Parsing)</strong></p>\n//\n// <p>\n// Sam pointed out that if SLL does not give a syntax error, then there is no\n// point in doing full LL, which is slower. We only have to try LL if we get a\n// syntax error. For maximum speed, Sam starts the parser set to pure SLL\n// mode with the {@link BailErrorStrategy}:</p>\n//\n// <pre>\n// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n// </pre>\n//\n// <p>\n// If it does not get a syntax error, then we're done. If it does get a syntax\n// error, we need to retry with the combined SLL/LL strategy.</p>\n//\n// <p>\n// The reason this works is as follows. If there are no SLL conflicts, then the\n// grammar is SLL (at least for that input set). If there is an SLL conflict,\n// the full LL analysis must yield a set of viable alternatives which is a\n// subset of the alternatives reported by SLL. If the LL set is a singleton,\n// then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n// set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n// is truly ambiguous on the current input. If the LL set is smaller, then the\n// SLL conflict resolution might choose an alternative that the full LL would\n// rule out as a possibility based upon better context information. If that's\n// the case, then the SLL parse will definitely get an error because the full LL\n// analysis says it's not viable. If SLL conflict resolution chooses an\n// alternative within the LL set, them both SLL and LL would choose the same\n// alternative because they both choose the minimum of multiple conflicting\n// alternatives.</p>\n//\n// <p>\n// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n// parsing will get an error because SLL will pursue alternative 1. If\n// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n// choose the same alternative because alternative one is the minimum of either\n// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n//\n// <p>\n// Of course, if the input is invalid, then we will get an error for sure in\n// both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n// the input.</p>\n//\nvar Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\");\n\nvar Set = Utils.Set;\nvar BitSet = Utils.BitSet;\nvar DoubleDict = Utils.DoubleDict;\n\nvar ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\n\nvar ATNState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").ATNState;\n\nvar ATNConfig = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/atn/ATNConfig.js\").ATNConfig;\n\nvar ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar DFAState = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").DFAState;\n\nvar PredPrediction = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").PredPrediction;\n\nvar ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"./node_modules/antlr4/atn/ATNSimulator.js\").ATNSimulator;\n\nvar PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"./node_modules/antlr4/atn/PredictionMode.js\").PredictionMode;\n\nvar RuleContext = __webpack_require__(/*! ./../RuleContext */ \"./node_modules/antlr4/RuleContext.js\").RuleContext;\n\nvar ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ \"./node_modules/antlr4/ParserRuleContext.js\").ParserRuleContext;\n\nvar SemanticContext = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").SemanticContext;\n\nvar StarLoopEntryState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").StarLoopEntryState;\n\nvar RuleStopState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").RuleStopState;\n\nvar PredictionContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").PredictionContext;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar Transitions = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/atn/Transition.js\");\n\nvar Transition = Transitions.Transition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar ActionTransition = Transitions.ActionTransition;\n\nvar NoViableAltException = __webpack_require__(/*! ./../error/Errors */ \"./node_modules/antlr4/error/Errors.js\").NoViableAltException;\n\nvar SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").SingletonPredictionContext;\n\nvar predictionContextFromRuleContext = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\").predictionContextFromRuleContext;\n\nfunction ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {\n  ATNSimulator.call(this, atn, sharedContextCache);\n  this.parser = parser;\n  this.decisionToDFA = decisionToDFA; // SLL, LL, or LL + exact ambig detection?//\n\n  this.predictionMode = PredictionMode.LL; // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n\n  this._input = null;\n  this._startIndex = 0;\n  this._outerContext = null;\n  this._dfa = null; // Each prediction operation uses a cache for merge of prediction contexts.\n  //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n  //  isn't synchronized but we're ok since two threads shouldn't reuse same\n  //  parser/atnsim object because it can only handle one input at a time.\n  //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n  //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n  //  also be examined during cache lookup.\n  //\n\n  this.mergeCache = null;\n  return this;\n}\n\nParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nParserATNSimulator.prototype.constructor = ParserATNSimulator;\nParserATNSimulator.prototype.debug = false;\nParserATNSimulator.prototype.debug_closure = false;\nParserATNSimulator.prototype.debug_add = false;\nParserATNSimulator.prototype.debug_list_atn_decisions = false;\nParserATNSimulator.prototype.dfa_debug = false;\nParserATNSimulator.prototype.retry_debug = false;\n\nParserATNSimulator.prototype.reset = function () {};\n\nParserATNSimulator.prototype.adaptivePredict = function (input, decision, outerContext) {\n  if (this.debug || this.debug_list_atn_decisions) {\n    console.log(\"adaptivePredict decision \" + decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n  }\n\n  this._input = input;\n  this._startIndex = input.index;\n  this._outerContext = outerContext;\n  var dfa = this.decisionToDFA[decision];\n  this._dfa = dfa;\n  var m = input.mark();\n  var index = input.index; // Now we are certain to have a specific decision's DFA\n  // But, do we still need an initial state?\n\n  try {\n    var s0;\n\n    if (dfa.precedenceDfa) {\n      // the start state for a precedence DFA depends on the current\n      // parser precedence, and is provided by a DFA method.\n      s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n    } else {\n      // the start state for a \"regular\" DFA is just s0\n      s0 = dfa.s0;\n    }\n\n    if (s0 === null) {\n      if (outerContext === null) {\n        outerContext = RuleContext.EMPTY;\n      }\n\n      if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"predictATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n      }\n\n      var fullCtx = false;\n      var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n      if (dfa.precedenceDfa) {\n        // If this is a precedence DFA, we use applyPrecedenceFilter\n        // to convert the computed start state to a precedence start\n        // state. We then use DFA.setPrecedenceStartState to set the\n        // appropriate start state for the precedence level rather\n        // than simply setting DFA.s0.\n        //\n        dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n\n        s0_closure = this.applyPrecedenceFilter(s0_closure);\n        s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n        dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n      } else {\n        s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n        dfa.s0 = s0;\n      }\n    }\n\n    var alt = this.execATN(dfa, s0, input, index, outerContext);\n\n    if (this.debug) {\n      console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n    }\n\n    return alt;\n  } finally {\n    this._dfa = null;\n    this.mergeCache = null; // wack cache after each prediction\n\n    input.seek(index);\n    input.release(m);\n  }\n}; // Performs ATN simulation to compute a predicted alternative based\n//  upon the remaining input, but also updates the DFA cache to avoid\n//  having to traverse the ATN again for the same input sequence.\n// There are some key conditions we're looking for after computing a new\n// set of ATN configs (proposed DFA state):\n// if the set is empty, there is no viable alternative for current symbol\n// does the state uniquely predict an alternative?\n// does the state have a conflict that would prevent us from\n//   putting it on the work list?\n// We also have some key operations to do:\n// add an edge from previous DFA state to potentially new DFA state, D,\n//   upon current symbol but only if adding to work list, which means in all\n//   cases except no viable alternative (and possibly non-greedy decisions?)\n// collecting predicates and adding semantic context to DFA accept states\n// adding rule context to context-sensitive DFA accept states\n// consuming an input symbol\n// reporting a conflict\n// reporting an ambiguity\n// reporting a context sensitivity\n// reporting insufficient predicates\n// cover these cases:\n//    dead end\n//    single alt\n//    single alt + preds\n//    conflict\n//    conflict + preds\n//\n\n\nParserATNSimulator.prototype.execATN = function (dfa, s0, input, startIndex, outerContext) {\n  if (this.debug || this.debug_list_atn_decisions) {\n    console.log(\"execATN decision \" + dfa.decision + \" exec LA(1)==\" + this.getLookaheadName(input) + \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n  }\n\n  var alt;\n  var previousD = s0;\n\n  if (this.debug) {\n    console.log(\"s0 = \" + s0);\n  }\n\n  var t = input.LA(1);\n\n  while (true) {\n    // while more work\n    var D = this.getExistingTargetState(previousD, t);\n\n    if (D === null) {\n      D = this.computeTargetState(dfa, previousD, t);\n    }\n\n    if (D === ATNSimulator.ERROR) {\n      // if any configs in previous dipped into outer context, that\n      // means that input up to t actually finished entry rule\n      // at least for SLL decision. Full LL doesn't dip into outer\n      // so don't need special case.\n      // We will get an error no matter what so delay until after\n      // decision; better error message. Also, no reachable target\n      // ATN states in SLL implies LL will also get nowhere.\n      // If conflict in states that dip out, choose min since we\n      // will get error no matter what.\n      var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n      input.seek(startIndex);\n      alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n\n      if (alt !== ATN.INVALID_ALT_NUMBER) {\n        return alt;\n      } else {\n        throw e;\n      }\n    }\n\n    if (D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n      // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n      var conflictingAlts = null;\n\n      if (D.predicates !== null) {\n        if (this.debug) {\n          console.log(\"DFA state has preds in DFA sim LL failover\");\n        }\n\n        var conflictIndex = input.index;\n\n        if (conflictIndex !== startIndex) {\n          input.seek(startIndex);\n        }\n\n        conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n\n        if (conflictingAlts.length === 1) {\n          if (this.debug) {\n            console.log(\"Full LL avoided\");\n          }\n\n          return conflictingAlts.minValue();\n        }\n\n        if (conflictIndex !== startIndex) {\n          // restore the index so reporting the fallback to full\n          // context occurs with the index at the correct spot\n          input.seek(conflictIndex);\n        }\n      }\n\n      if (this.dfa_debug) {\n        console.log(\"ctx sensitive state \" + outerContext + \" in \" + D);\n      }\n\n      var fullCtx = true;\n      var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n      this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n      alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n      return alt;\n    }\n\n    if (D.isAcceptState) {\n      if (D.predicates === null) {\n        return D.prediction;\n      }\n\n      var stopIndex = input.index;\n      input.seek(startIndex);\n      var alts = this.evalSemanticContext(D.predicates, outerContext, true);\n\n      if (alts.length === 0) {\n        throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n      } else if (alts.length === 1) {\n        return alts.minValue();\n      } else {\n        // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n        this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n        return alts.minValue();\n      }\n    }\n\n    previousD = D;\n\n    if (t !== Token.EOF) {\n      input.consume();\n      t = input.LA(1);\n    }\n  }\n}; //\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param previousD The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\n//\n\n\nParserATNSimulator.prototype.getExistingTargetState = function (previousD, t) {\n  var edges = previousD.edges;\n\n  if (edges === null) {\n    return null;\n  } else {\n    return edges[t + 1] || null;\n  }\n}; //\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param dfa The DFA\n// @param previousD The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\n//\n\n\nParserATNSimulator.prototype.computeTargetState = function (dfa, previousD, t) {\n  var reach = this.computeReachSet(previousD.configs, t, false);\n\n  if (reach === null) {\n    this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n    return ATNSimulator.ERROR;\n  } // create new target state; we'll add to DFA after it's complete\n\n\n  var D = new DFAState(null, reach);\n  var predictedAlt = this.getUniqueAlt(reach);\n\n  if (this.debug) {\n    var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n    console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) + \", previous=\" + previousD.configs + \", configs=\" + reach + \", predict=\" + predictedAlt + \", allSubsetsConflict=\" + PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" + this.getConflictingAlts(reach));\n  }\n\n  if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n    // NO CONFLICT, UNIQUELY PREDICTED ALT\n    D.isAcceptState = true;\n    D.configs.uniqueAlt = predictedAlt;\n    D.prediction = predictedAlt;\n  } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n    // MORE THAN ONE VIABLE ALTERNATIVE\n    D.configs.conflictingAlts = this.getConflictingAlts(reach);\n    D.requiresFullContext = true; // in SLL-only mode, we will stop at this state and return the minimum alt\n\n    D.isAcceptState = true;\n    D.prediction = D.configs.conflictingAlts.minValue();\n  }\n\n  if (D.isAcceptState && D.configs.hasSemanticContext) {\n    this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n\n    if (D.predicates !== null) {\n      D.prediction = ATN.INVALID_ALT_NUMBER;\n    }\n  } // all adds to dfa are done after we've created full D state\n\n\n  D = this.addDFAEdge(dfa, previousD, t, D);\n  return D;\n};\n\nParserATNSimulator.prototype.predicateDFAState = function (dfaState, decisionState) {\n  // We need to test all predicates, even in DFA states that\n  // uniquely predict alternative.\n  var nalts = decisionState.transitions.length; // Update DFA so reach becomes accept state with (predicate,alt)\n  // pairs if preds found for conflicting alts\n\n  var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n  var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n\n  if (altToPred !== null) {\n    dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n    dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n  } else {\n    // There are preds in configs but they might go away\n    // when OR'd together like {p}? || NONE == NONE. If neither\n    // alt has preds, resolve to min alt\n    dfaState.prediction = altsToCollectPredsFrom.minValue();\n  }\n}; // comes back with reach.uniqueAlt set to a valid alt\n\n\nParserATNSimulator.prototype.execATNWithFullContext = function (dfa, D, // how far we got before failing over\ns0, input, startIndex, outerContext) {\n  if (this.debug || this.debug_list_atn_decisions) {\n    console.log(\"execATNWithFullContext \" + s0);\n  }\n\n  var fullCtx = true;\n  var foundExactAmbig = false;\n  var reach = null;\n  var previous = s0;\n  input.seek(startIndex);\n  var t = input.LA(1);\n  var predictedAlt = -1;\n\n  while (true) {\n    // while more work\n    reach = this.computeReachSet(previous, t, fullCtx);\n\n    if (reach === null) {\n      // if any configs in previous dipped into outer context, that\n      // means that input up to t actually finished entry rule\n      // at least for LL decision. Full LL doesn't dip into outer\n      // so don't need special case.\n      // We will get an error no matter what so delay until after\n      // decision; better error message. Also, no reachable target\n      // ATN states in SLL implies LL will also get nowhere.\n      // If conflict in states that dip out, choose min since we\n      // will get error no matter what.\n      var e = this.noViableAlt(input, outerContext, previous, startIndex);\n      input.seek(startIndex);\n      var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n\n      if (alt !== ATN.INVALID_ALT_NUMBER) {\n        return alt;\n      } else {\n        throw e;\n      }\n    }\n\n    var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n\n    if (this.debug) {\n      console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" + PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" + PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n    }\n\n    reach.uniqueAlt = this.getUniqueAlt(reach); // unique prediction?\n\n    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n      predictedAlt = reach.uniqueAlt;\n      break;\n    } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n      predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n\n      if (predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n        break;\n      }\n    } else {\n      // In exact ambiguity mode, we never try to terminate early.\n      // Just keeps scarfing until we know what the conflict is\n      if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n        foundExactAmbig = true;\n        predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n        break;\n      } // else there are multiple non-conflicting subsets or\n      // we're not sure what the ambiguity is yet.\n      // So, keep going.\n\n    }\n\n    previous = reach;\n\n    if (t !== Token.EOF) {\n      input.consume();\n      t = input.LA(1);\n    }\n  } // If the configuration set uniquely predicts an alternative,\n  // without conflict, then we know that it's a full LL decision\n  // not SLL.\n\n\n  if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n    this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n    return predictedAlt;\n  } // We do not check predicates here because we have checked them\n  // on-the-fly when doing full context prediction.\n  //\n  // In non-exact ambiguity detection mode, we might\tactually be able to\n  // detect an exact ambiguity, but I'm not going to spend the cycles\n  // needed to check. We only emit ambiguity warnings in exact ambiguity\n  // mode.\n  //\n  // For example, we might know that we have conflicting configurations.\n  // But, that does not mean that there is no way forward without a\n  // conflict. It's possible to have nonconflicting alt subsets as in:\n  // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n  // from\n  //\n  //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n  //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n  //\n  // In this case, (17,1,[5 $]) indicates there is some next sequence that\n  // would resolve this without conflict to alternative 1. Any other viable\n  // next sequence, however, is associated with a conflict.  We stop\n  // looking for input because no amount of further lookahead will alter\n  // the fact that we should predict alternative 1.  We just can't say for\n  // sure that there is an ambiguity without looking further.\n\n\n  this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n  return predictedAlt;\n};\n\nParserATNSimulator.prototype.computeReachSet = function (closure, t, fullCtx) {\n  if (this.debug) {\n    console.log(\"in computeReachSet, starting closure: \" + closure);\n  }\n\n  if (this.mergeCache === null) {\n    this.mergeCache = new DoubleDict();\n  }\n\n  var intermediate = new ATNConfigSet(fullCtx); // Configurations already in a rule stop state indicate reaching the end\n  // of the decision rule (local context) or end of the start rule (full\n  // context). Once reached, these configurations are never updated by a\n  // closure operation, so they are handled separately for the performance\n  // advantage of having a smaller intermediate set when calling closure.\n  //\n  // For full-context reach operations, separate handling is required to\n  // ensure that the alternative matching the longest overall sequence is\n  // chosen when multiple such configurations can match the input.\n\n  var skippedStopStates = null; // First figure out where we can reach on input t\n\n  for (var i = 0; i < closure.items.length; i++) {\n    var c = closure.items[i];\n\n    if (this.debug_add) {\n      console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n    }\n\n    if (c.state instanceof RuleStopState) {\n      if (fullCtx || t === Token.EOF) {\n        if (skippedStopStates === null) {\n          skippedStopStates = [];\n        }\n\n        skippedStopStates.push(c);\n\n        if (this.debug_add) {\n          console.log(\"added \" + c + \" to skippedStopStates\");\n        }\n      }\n\n      continue;\n    }\n\n    for (var j = 0; j < c.state.transitions.length; j++) {\n      var trans = c.state.transitions[j];\n      var target = this.getReachableTarget(trans, t);\n\n      if (target !== null) {\n        var cfg = new ATNConfig({\n          state: target\n        }, c);\n        intermediate.add(cfg, this.mergeCache);\n\n        if (this.debug_add) {\n          console.log(\"added \" + cfg + \" to intermediate\");\n        }\n      }\n    }\n  } // Now figure out where the reach operation can take us...\n\n\n  var reach = null; // This block optimizes the reach operation for intermediate sets which\n  // trivially indicate a termination state for the overall\n  // adaptivePredict operation.\n  //\n  // The conditions assume that intermediate\n  // contains all configurations relevant to the reach set, but this\n  // condition is not true when one or more configurations have been\n  // withheld in skippedStopStates, or when the current symbol is EOF.\n  //\n\n  if (skippedStopStates === null && t !== Token.EOF) {\n    if (intermediate.items.length === 1) {\n      // Don't pursue the closure if there is just one state.\n      // It can only have one alternative; just add to result\n      // Also don't pursue the closure if there is unique alternative\n      // among the configurations.\n      reach = intermediate;\n    } else if (this.getUniqueAlt(intermediate) !== ATN.INVALID_ALT_NUMBER) {\n      // Also don't pursue the closure if there is unique alternative\n      // among the configurations.\n      reach = intermediate;\n    }\n  } // If the reach set could not be trivially determined, perform a closure\n  // operation on the intermediate set to compute its initial value.\n  //\n\n\n  if (reach === null) {\n    reach = new ATNConfigSet(fullCtx);\n    var closureBusy = new Set();\n    var treatEofAsEpsilon = t === Token.EOF;\n\n    for (var k = 0; k < intermediate.items.length; k++) {\n      this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n    }\n  }\n\n  if (t === Token.EOF) {\n    // After consuming EOF no additional input is possible, so we are\n    // only interested in configurations which reached the end of the\n    // decision rule (local context) or end of the start rule (full\n    // context). Update reach to contain only these configurations. This\n    // handles both explicit EOF transitions in the grammar and implicit\n    // EOF transitions following the end of the decision or start rule.\n    //\n    // When reach==intermediate, no closure operation was performed. In\n    // this case, removeAllConfigsNotInRuleStopState needs to check for\n    // reachable rule stop states as well as configurations already in\n    // a rule stop state.\n    //\n    // This is handled before the configurations in skippedStopStates,\n    // because any configurations potentially added from that list are\n    // already guaranteed to meet this condition whether or not it's\n    // required.\n    //\n    reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n  } // If skippedStopStates!==null, then it contains at least one\n  // configuration. For full-context reach operations, these\n  // configurations reached the end of the start rule, in which case we\n  // only add them back to reach if no configuration during the current\n  // closure operation reached such a state. This ensures adaptivePredict\n  // chooses an alternative matching the longest overall sequence when\n  // multiple alternatives are viable.\n  //\n\n\n  if (skippedStopStates !== null && (!fullCtx || !PredictionMode.hasConfigInRuleStopState(reach))) {\n    for (var l = 0; l < skippedStopStates.length; l++) {\n      reach.add(skippedStopStates[l], this.mergeCache);\n    }\n  }\n\n  if (reach.items.length === 0) {\n    return null;\n  } else {\n    return reach;\n  }\n}; //\n// Return a configuration set containing only the configurations from\n// {@code configs} which are in a {@link RuleStopState}. If all\n// configurations in {@code configs} are already in a rule stop state, this\n// method simply returns {@code configs}.\n//\n// <p>When {@code lookToEndOfRule} is true, this method uses\n// {@link ATN//nextTokens} for each configuration in {@code configs} which is\n// not already in a rule stop state to see if a rule stop state is reachable\n// from the configuration via epsilon-only transitions.</p>\n//\n// @param configs the configuration set to update\n// @param lookToEndOfRule when true, this method checks for rule stop states\n// reachable by epsilon-only transitions from each configuration in\n// {@code configs}.\n//\n// @return {@code configs} if all configurations in {@code configs} are in a\n// rule stop state, otherwise return a new configuration set containing only\n// the configurations from {@code configs} which are in a rule stop state\n//\n\n\nParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function (configs, lookToEndOfRule) {\n  if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n    return configs;\n  }\n\n  var result = new ATNConfigSet(configs.fullCtx);\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var config = configs.items[i];\n\n    if (config.state instanceof RuleStopState) {\n      result.add(config, this.mergeCache);\n      continue;\n    }\n\n    if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n      var nextTokens = this.atn.nextTokens(config.state);\n\n      if (nextTokens.contains(Token.EPSILON)) {\n        var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n        result.add(new ATNConfig({\n          state: endOfRuleState\n        }, config), this.mergeCache);\n      }\n    }\n  }\n\n  return result;\n};\n\nParserATNSimulator.prototype.computeStartState = function (p, ctx, fullCtx) {\n  // always at least the implicit call to start rule\n  var initialContext = predictionContextFromRuleContext(this.atn, ctx);\n  var configs = new ATNConfigSet(fullCtx);\n\n  for (var i = 0; i < p.transitions.length; i++) {\n    var target = p.transitions[i].target;\n    var c = new ATNConfig({\n      state: target,\n      alt: i + 1,\n      context: initialContext\n    }, null);\n    var closureBusy = new Set();\n    this.closure(c, configs, closureBusy, true, fullCtx, false);\n  }\n\n  return configs;\n}; //\n// This method transforms the start state computed by\n// {@link //computeStartState} to the special start state used by a\n// precedence DFA for a particular precedence value. The transformation\n// process applies the following changes to the start state's configuration\n// set.\n//\n// <ol>\n// <li>Evaluate the precedence predicates for each configuration using\n// {@link SemanticContext//evalPrecedence}.</li>\n// <li>Remove all configurations which predict an alternative greater than\n// 1, for which another configuration that predicts alternative 1 is in the\n// same ATN state with the same prediction context. This transformation is\n// valid for the following reasons:\n// <ul>\n// <li>The closure block cannot contain any epsilon transitions which bypass\n// the body of the closure, so all states reachable via alternative 1 are\n// part of the precedence alternatives of the transformed left-recursive\n// rule.</li>\n// <li>The \"primary\" portion of a left recursive rule cannot contain an\n// epsilon transition, so the only way an alternative other than 1 can exist\n// in a state that is also reachable via alternative 1 is by nesting calls\n// to the left-recursive rule, with the outer calls not being at the\n// preferred precedence level.</li>\n// </ul>\n// </li>\n// </ol>\n//\n// <p>\n// The prediction context must be considered by this filter to address\n// situations like the following.\n// </p>\n// <code>\n// <pre>\n// grammar TA;\n// prog: statement* EOF;\n// statement: letterA | statement letterA 'b' ;\n// letterA: 'a';\n// </pre>\n// </code>\n// <p>\n// If the above grammar, the ATN state immediately before the token\n// reference {@code 'a'} in {@code letterA} is reachable from the left edge\n// of both the primary and closure blocks of the left-recursive rule\n// {@code statement}. The prediction context associated with each of these\n// configurations distinguishes between them, and prevents the alternative\n// which stepped out to {@code prog} (and then back in to {@code statement}\n// from being eliminated by the filter.\n// </p>\n//\n// @param configs The configuration set computed by\n// {@link //computeStartState} as the start state for the DFA.\n// @return The transformed configuration set representing the start state\n// for a precedence DFA at a particular precedence level (determined by\n// calling {@link Parser//getPrecedence}).\n//\n\n\nParserATNSimulator.prototype.applyPrecedenceFilter = function (configs) {\n  var config;\n  var statesFromAlt1 = [];\n  var configSet = new ATNConfigSet(configs.fullCtx);\n\n  for (var i = 0; i < configs.items.length; i++) {\n    config = configs.items[i]; // handle alt 1 first\n\n    if (config.alt !== 1) {\n      continue;\n    }\n\n    var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n\n    if (updatedContext === null) {\n      // the configuration was eliminated\n      continue;\n    }\n\n    statesFromAlt1[config.state.stateNumber] = config.context;\n\n    if (updatedContext !== config.semanticContext) {\n      configSet.add(new ATNConfig({\n        semanticContext: updatedContext\n      }, config), this.mergeCache);\n    } else {\n      configSet.add(config, this.mergeCache);\n    }\n  }\n\n  for (i = 0; i < configs.items.length; i++) {\n    config = configs.items[i];\n\n    if (config.alt === 1) {\n      // already handled\n      continue;\n    } // In the future, this elimination step could be updated to also\n    // filter the prediction context for alternatives predicting alt>1\n    // (basically a graph subtraction algorithm).\n\n\n    if (!config.precedenceFilterSuppressed) {\n      var context = statesFromAlt1[config.state.stateNumber] || null;\n\n      if (context !== null && context.equals(config.context)) {\n        // eliminated\n        continue;\n      }\n    }\n\n    configSet.add(config, this.mergeCache);\n  }\n\n  return configSet;\n};\n\nParserATNSimulator.prototype.getReachableTarget = function (trans, ttype) {\n  if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n    return trans.target;\n  } else {\n    return null;\n  }\n};\n\nParserATNSimulator.prototype.getPredsForAmbigAlts = function (ambigAlts, configs, nalts) {\n  // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n  // altToPred starts as an array of all null contexts. The entry at index i\n  // corresponds to alternative i. altToPred[i] may have one of three values:\n  //   1. null: no ATNConfig c is found such that c.alt==i\n  //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n  //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n  //      alt i has at least one unpredicated config.\n  //   3. Non-NONE Semantic Context: There exists at least one, and for all\n  //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n  //\n  // From this, it is clear that NONE||anything==NONE.\n  //\n  var altToPred = [];\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (ambigAlts.contains(c.alt)) {\n      altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n    }\n  }\n\n  var nPredAlts = 0;\n\n  for (i = 1; i < nalts + 1; i++) {\n    var pred = altToPred[i] || null;\n\n    if (pred === null) {\n      altToPred[i] = SemanticContext.NONE;\n    } else if (pred !== SemanticContext.NONE) {\n      nPredAlts += 1;\n    }\n  } // nonambig alts are null in altToPred\n\n\n  if (nPredAlts === 0) {\n    altToPred = null;\n  }\n\n  if (this.debug) {\n    console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n  }\n\n  return altToPred;\n};\n\nParserATNSimulator.prototype.getPredicatePredictions = function (ambigAlts, altToPred) {\n  var pairs = [];\n  var containsPredicate = false;\n\n  for (var i = 1; i < altToPred.length; i++) {\n    var pred = altToPred[i]; // unpredicated is indicated by SemanticContext.NONE\n\n    if (ambigAlts !== null && ambigAlts.contains(i)) {\n      pairs.push(new PredPrediction(pred, i));\n    }\n\n    if (pred !== SemanticContext.NONE) {\n      containsPredicate = true;\n    }\n  }\n\n  if (!containsPredicate) {\n    return null;\n  }\n\n  return pairs;\n}; //\n// This method is used to improve the localization of error messages by\n// choosing an alternative rather than throwing a\n// {@link NoViableAltException} in particular prediction scenarios where the\n// {@link //ERROR} state was reached during ATN simulation.\n//\n// <p>\n// The default implementation of this method uses the following\n// algorithm to identify an ATN configuration which successfully parsed the\n// decision entry rule. Choosing such an alternative ensures that the\n// {@link ParserRuleContext} returned by the calling rule will be complete\n// and valid, and the syntax error will be reported later at a more\n// localized location.</p>\n//\n// <ul>\n// <li>If a syntactically valid path or paths reach the end of the decision rule and\n// they are semantically valid if predicated, return the min associated alt.</li>\n// <li>Else, if a semantically invalid but syntactically valid path exist\n// or paths exist, return the minimum associated alt.\n// </li>\n// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n// </ul>\n//\n// <p>\n// In some scenarios, the algorithm described above could predict an\n// alternative which will result in a {@link FailedPredicateException} in\n// the parser. Specifically, this could occur if the <em>only</em> configuration\n// capable of successfully parsing to the end of the decision rule is\n// blocked by a semantic predicate. By choosing this alternative within\n// {@link //adaptivePredict} instead of throwing a\n// {@link NoViableAltException}, the resulting\n// {@link FailedPredicateException} in the parser will identify the specific\n// predicate which is preventing the parser from successfully parsing the\n// decision rule, which helps developers identify and correct logic errors\n// in semantic predicates.\n// </p>\n//\n// @param configs The ATN configurations which were valid immediately before\n// the {@link //ERROR} state was reached\n// @param outerContext The is the \\gamma_0 initial parser context from the paper\n// or the parser stack at the instant before prediction commences.\n//\n// @return The value to return from {@link //adaptivePredict}, or\n// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n// identified and {@link //adaptivePredict} should report an error instead.\n//\n\n\nParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function (configs, outerContext) {\n  var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n  var semValidConfigs = cfgs[0];\n  var semInvalidConfigs = cfgs[1];\n  var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n\n  if (alt !== ATN.INVALID_ALT_NUMBER) {\n    // semantically/syntactically viable path exists\n    return alt;\n  } // Is there a syntactically valid path with a failed pred?\n\n\n  if (semInvalidConfigs.items.length > 0) {\n    alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n\n    if (alt !== ATN.INVALID_ALT_NUMBER) {\n      // syntactically viable path exists\n      return alt;\n    }\n  }\n\n  return ATN.INVALID_ALT_NUMBER;\n};\n\nParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function (configs) {\n  var alts = [];\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (c.reachesIntoOuterContext > 0 || c.state instanceof RuleStopState && c.context.hasEmptyPath()) {\n      if (alts.indexOf(c.alt) < 0) {\n        alts.push(c.alt);\n      }\n    }\n  }\n\n  if (alts.length === 0) {\n    return ATN.INVALID_ALT_NUMBER;\n  } else {\n    return Math.min.apply(null, alts);\n  }\n}; // Walk the list of configurations and split them according to\n//  those that have preds evaluating to true/false.  If no pred, assume\n//  true pred and include in succeeded set.  Returns Pair of sets.\n//\n//  Create a new set so as not to alter the incoming parameter.\n//\n//  Assumption: the input stream has been restored to the starting point\n//  prediction, which is where predicates need to evaluate.\n//\n\n\nParserATNSimulator.prototype.splitAccordingToSemanticValidity = function (configs, outerContext) {\n  var succeeded = new ATNConfigSet(configs.fullCtx);\n  var failed = new ATNConfigSet(configs.fullCtx);\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (c.semanticContext !== SemanticContext.NONE) {\n      var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n\n      if (predicateEvaluationResult) {\n        succeeded.add(c);\n      } else {\n        failed.add(c);\n      }\n    } else {\n      succeeded.add(c);\n    }\n  }\n\n  return [succeeded, failed];\n}; // Look through a list of predicate/alt pairs, returning alts for the\n//  pairs that win. A {@code NONE} predicate indicates an alt containing an\n//  unpredicated config which behaves as \"always true.\" If !complete\n//  then we stop at the first predicate that evaluates to true. This\n//  includes pairs with null predicates.\n//\n\n\nParserATNSimulator.prototype.evalSemanticContext = function (predPredictions, outerContext, complete) {\n  var predictions = new BitSet();\n\n  for (var i = 0; i < predPredictions.length; i++) {\n    var pair = predPredictions[i];\n\n    if (pair.pred === SemanticContext.NONE) {\n      predictions.add(pair.alt);\n\n      if (!complete) {\n        break;\n      }\n\n      continue;\n    }\n\n    var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n\n    if (this.debug || this.dfa_debug) {\n      console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n    }\n\n    if (predicateEvaluationResult) {\n      if (this.debug || this.dfa_debug) {\n        console.log(\"PREDICT \" + pair.alt);\n      }\n\n      predictions.add(pair.alt);\n\n      if (!complete) {\n        break;\n      }\n    }\n  }\n\n  return predictions;\n}; // TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n\n\nParserATNSimulator.prototype.closure = function (config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n  var initialDepth = 0;\n  this.closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, initialDepth, treatEofAsEpsilon);\n};\n\nParserATNSimulator.prototype.closureCheckingStopState = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n  if (this.debug || this.debug_closure) {\n    console.log(\"closure(\" + config.toString(this.parser, true) + \")\"); // console.log(\"configs(\" + configs.toString() + \")\");\n\n    if (config.reachesIntoOuterContext > 50) {\n      throw \"problem\";\n    }\n  }\n\n  if (config.state instanceof RuleStopState) {\n    // We hit rule end. If we have context info, use it\n    // run thru all possible stack tops in ctx\n    if (!config.context.isEmpty()) {\n      for (var i = 0; i < config.context.length; i++) {\n        if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n          if (fullCtx) {\n            configs.add(new ATNConfig({\n              state: config.state,\n              context: PredictionContext.EMPTY\n            }, config), this.mergeCache);\n            continue;\n          } else {\n            // we have no context info, just chase follow links (if greedy)\n            if (this.debug) {\n              console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n            }\n\n            this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n          }\n\n          continue;\n        }\n\n        var returnState = this.atn.states[config.context.getReturnState(i)];\n        var newContext = config.context.getParent(i); // \"pop\" return state\n\n        var parms = {\n          state: returnState,\n          alt: config.alt,\n          context: newContext,\n          semanticContext: config.semanticContext\n        };\n        var c = new ATNConfig(parms, null); // While we have context to pop back from, we may have\n        // gotten that context AFTER having falling off a rule.\n        // Make sure we track that we are now out of context.\n\n        c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n      }\n\n      return;\n    } else if (fullCtx) {\n      // reached end of start rule\n      configs.add(config, this.mergeCache);\n      return;\n    } else {\n      // else if we have no context info, just chase follow links (if greedy)\n      if (this.debug) {\n        console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n      }\n    }\n  }\n\n  this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n}; // Do the actual work of walking epsilon edges//\n\n\nParserATNSimulator.prototype.closure_ = function (config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n  var p = config.state; // optimization\n\n  if (!p.epsilonOnlyTransitions) {\n    configs.add(config, this.mergeCache); // make sure to not return here, because EOF transitions can act as\n    // both epsilon transitions and non-epsilon transitions.\n  }\n\n  for (var i = 0; i < p.transitions.length; i++) {\n    if (i == 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config)) continue;\n    var t = p.transitions[i];\n    var continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n    var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n\n    if (c !== null) {\n      var newDepth = depth;\n\n      if (config.state instanceof RuleStopState) {\n        // target fell off end of rule; mark resulting c as having dipped into outer context\n        // We can't get here if incoming config was rule stop and we had context\n        // track how far we dip into outer context.  Might\n        // come in handy and we avoid evaluating context dependent\n        // preds if this is > 0.\n        if (this._dfa !== null && this._dfa.precedenceDfa) {\n          if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n            c.precedenceFilterSuppressed = true;\n          }\n        }\n\n        c.reachesIntoOuterContext += 1;\n\n        if (closureBusy.add(c) !== c) {\n          // avoid infinite recursion for right-recursive rules\n          continue;\n        }\n\n        configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n\n        newDepth -= 1;\n\n        if (this.debug) {\n          console.log(\"dips into outer ctx: \" + c);\n        }\n      } else {\n        if (!t.isEpsilon && closureBusy.add(c) !== c) {\n          // avoid infinite recursion for EOF* and EOF+\n          continue;\n        }\n\n        if (t instanceof RuleTransition) {\n          // latch when newDepth goes negative - once we step out of the entry context we can't return\n          if (newDepth >= 0) {\n            newDepth += 1;\n          }\n        }\n      }\n\n      this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n    }\n  }\n};\n\nParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function (config) {\n  // return False\n  var p = config.state; // First check to see if we are in StarLoopEntryState generated during\n  // left-recursion elimination. For efficiency, also check if\n  // the context has an empty stack case. If so, it would mean\n  // global FOLLOW so we can't perform optimization\n  // Are we the special loop entry/exit state? or SLL wildcard\n\n  if (p.stateType != ATNState.STAR_LOOP_ENTRY) return false;\n  if (p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision || config.context.isEmpty() || config.context.hasEmptyPath()) return false; // Require all return states to return back to the same rule that p is in.\n\n  var numCtxs = config.context.length;\n\n  for (var i = 0; i < numCtxs; i++) {\n    // for each stack context\n    var returnState = this.atn.states[config.context.getReturnState(i)];\n    if (returnState.ruleIndex != p.ruleIndex) return false;\n  }\n\n  var decisionStartState = p.transitions[0].target;\n  var blockEndStateNum = decisionStartState.endState.stateNumber;\n  var blockEndState = this.atn.states[blockEndStateNum]; // Verify that the top of each stack context leads to loop entry/exit\n  // state through epsilon edges and w/o leaving rule.\n\n  for (var i = 0; i < numCtxs; i++) {\n    // for each stack context\n    var returnStateNumber = config.context.getReturnState(i);\n    var returnState = this.atn.states[returnStateNumber]; // all states must have single outgoing epsilon edge\n\n    if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon) return false; // Look for prefix op case like 'not expr', (' type ')' expr\n\n    var returnStateTarget = returnState.transitions[0].target;\n    if (returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p) continue; // Look for 'expr op expr' or case where expr's return state is block end\n    // of (...)* internal block; the block end points to loop back\n    // which points to p but we don't need to check that\n\n    if (returnState == blockEndState) continue; // Look for ternary expr ? expr : expr. The return state points at block end,\n    // which points at loop entry state\n\n    if (returnStateTarget == blockEndState) continue; // Look for complex prefix 'between expr and expr' case where 2nd expr's\n    // return state points at block end state of (...)* internal block\n\n    if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1 && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p) continue; // anything else ain't conforming\n\n    return false;\n  }\n\n  return true;\n};\n\nParserATNSimulator.prototype.getRuleName = function (index) {\n  if (this.parser !== null && index >= 0) {\n    return this.parser.ruleNames[index];\n  } else {\n    return \"<rule \" + index + \">\";\n  }\n};\n\nParserATNSimulator.prototype.getEpsilonTarget = function (config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n  switch (t.serializationType) {\n    case Transition.RULE:\n      return this.ruleTransition(config, t);\n\n    case Transition.PRECEDENCE:\n      return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n\n    case Transition.PREDICATE:\n      return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n\n    case Transition.ACTION:\n      return this.actionTransition(config, t);\n\n    case Transition.EPSILON:\n      return new ATNConfig({\n        state: t.target\n      }, config);\n\n    case Transition.ATOM:\n    case Transition.RANGE:\n    case Transition.SET:\n      // EOF transitions act like epsilon transitions after the first EOF\n      // transition is traversed\n      if (treatEofAsEpsilon) {\n        if (t.matches(Token.EOF, 0, 1)) {\n          return new ATNConfig({\n            state: t.target\n          }, config);\n        }\n      }\n\n      return null;\n\n    default:\n      return null;\n  }\n};\n\nParserATNSimulator.prototype.actionTransition = function (config, t) {\n  if (this.debug) {\n    var index = t.actionIndex == -1 ? 65535 : t.actionIndex;\n    console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n  }\n\n  return new ATNConfig({\n    state: t.target\n  }, config);\n};\n\nParserATNSimulator.prototype.precedenceTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n  if (this.debug) {\n    console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.precedence + \">=_p, ctx dependent=true\");\n\n    if (this.parser !== null) {\n      console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n    }\n  }\n\n  var c = null;\n\n  if (collectPredicates && inContext) {\n    if (fullCtx) {\n      // In full context mode, we can evaluate predicates on-the-fly\n      // during closure, which dramatically reduces the size of\n      // the config sets. It also obviates the need to test predicates\n      // later during conflict resolution.\n      var currentPosition = this._input.index;\n\n      this._input.seek(this._startIndex);\n\n      var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n\n      this._input.seek(currentPosition);\n\n      if (predSucceeds) {\n        c = new ATNConfig({\n          state: pt.target\n        }, config); // no pred context\n      }\n    } else {\n      var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n      c = new ATNConfig({\n        state: pt.target,\n        semanticContext: newSemCtx\n      }, config);\n    }\n  } else {\n    c = new ATNConfig({\n      state: pt.target\n    }, config);\n  }\n\n  if (this.debug) {\n    console.log(\"config from pred transition=\" + c);\n  }\n\n  return c;\n};\n\nParserATNSimulator.prototype.predTransition = function (config, pt, collectPredicates, inContext, fullCtx) {\n  if (this.debug) {\n    console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex + \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n\n    if (this.parser !== null) {\n      console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n    }\n  }\n\n  var c = null;\n\n  if (collectPredicates && (pt.isCtxDependent && inContext || !pt.isCtxDependent)) {\n    if (fullCtx) {\n      // In full context mode, we can evaluate predicates on-the-fly\n      // during closure, which dramatically reduces the size of\n      // the config sets. It also obviates the need to test predicates\n      // later during conflict resolution.\n      var currentPosition = this._input.index;\n\n      this._input.seek(this._startIndex);\n\n      var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n\n      this._input.seek(currentPosition);\n\n      if (predSucceeds) {\n        c = new ATNConfig({\n          state: pt.target\n        }, config); // no pred context\n      }\n    } else {\n      var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n      c = new ATNConfig({\n        state: pt.target,\n        semanticContext: newSemCtx\n      }, config);\n    }\n  } else {\n    c = new ATNConfig({\n      state: pt.target\n    }, config);\n  }\n\n  if (this.debug) {\n    console.log(\"config from pred transition=\" + c);\n  }\n\n  return c;\n};\n\nParserATNSimulator.prototype.ruleTransition = function (config, t) {\n  if (this.debug) {\n    console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n  }\n\n  var returnState = t.followState;\n  var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n  return new ATNConfig({\n    state: t.target,\n    context: newContext\n  }, config);\n};\n\nParserATNSimulator.prototype.getConflictingAlts = function (configs) {\n  var altsets = PredictionMode.getConflictingAltSubsets(configs);\n  return PredictionMode.getAlts(altsets);\n}; // Sam pointed out a problem with the previous definition, v3, of\n// ambiguous states. If we have another state associated with conflicting\n// alternatives, we should keep going. For example, the following grammar\n//\n// s : (ID | ID ID?) ';' ;\n//\n// When the ATN simulation reaches the state before ';', it has a DFA\n// state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n// 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n// because alternative to has another way to continue, via [6|2|[]].\n// The key is that we have a single state that has config's only associated\n// with a single alternative, 2, and crucially the state transitions\n// among the configurations are all non-epsilon transitions. That means\n// we don't consider any conflicts that include alternative 2. So, we\n// ignore the conflict between alts 1 and 2. We ignore a set of\n// conflicting alts when there is an intersection with an alternative\n// associated with a single alt state in the state&rarr;config-list map.\n//\n// It's also the case that we might have two conflicting configurations but\n// also a 3rd nonconflicting configuration for a different alternative:\n// [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n//\n// a : A | A | A B ;\n//\n// After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not\n// stop working on this state. In the previous example, we're concerned\n// with states associated with the conflicting alternatives. Here alt\n// 3 is not associated with the conflicting configs, but since we can continue\n// looking for input reasonably, I don't declare the state done. We\n// ignore a set of conflicting alts when we have an alternative\n// that we still need to pursue.\n//\n\n\nParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function (configs) {\n  var conflictingAlts = null;\n\n  if (configs.uniqueAlt !== ATN.INVALID_ALT_NUMBER) {\n    conflictingAlts = new BitSet();\n    conflictingAlts.add(configs.uniqueAlt);\n  } else {\n    conflictingAlts = configs.conflictingAlts;\n  }\n\n  return conflictingAlts;\n};\n\nParserATNSimulator.prototype.getTokenName = function (t) {\n  if (t === Token.EOF) {\n    return \"EOF\";\n  }\n\n  if (this.parser !== null && this.parser.literalNames !== null) {\n    if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n      console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n      console.log(\"\" + this.parser.getInputStream().getTokens());\n    } else {\n      var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n      return name + \"<\" + t + \">\";\n    }\n  }\n\n  return \"\" + t;\n};\n\nParserATNSimulator.prototype.getLookaheadName = function (input) {\n  return this.getTokenName(input.LA(1));\n}; // Used for debugging in adaptivePredict around execATN but I cut\n//  it out for clarity now that alg. works well. We can leave this\n//  \"dead\" code for a bit.\n//\n\n\nParserATNSimulator.prototype.dumpDeadEndConfigs = function (nvae) {\n  console.log(\"dead end configs: \");\n  var decs = nvae.getDeadEndConfigs();\n\n  for (var i = 0; i < decs.length; i++) {\n    var c = decs[i];\n    var trans = \"no edges\";\n\n    if (c.state.transitions.length > 0) {\n      var t = c.state.transitions[0];\n\n      if (t instanceof AtomTransition) {\n        trans = \"Atom \" + this.getTokenName(t.label);\n      } else if (t instanceof SetTransition) {\n        var neg = t instanceof NotSetTransition;\n        trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n      }\n    }\n\n    console.error(c.toString(this.parser, true) + \":\" + trans);\n  }\n};\n\nParserATNSimulator.prototype.noViableAlt = function (input, outerContext, configs, startIndex) {\n  return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n};\n\nParserATNSimulator.prototype.getUniqueAlt = function (configs) {\n  var alt = ATN.INVALID_ALT_NUMBER;\n\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (alt === ATN.INVALID_ALT_NUMBER) {\n      alt = c.alt; // found first alt\n    } else if (c.alt !== alt) {\n      return ATN.INVALID_ALT_NUMBER;\n    }\n  }\n\n  return alt;\n}; //\n// Add an edge to the DFA, if possible. This method calls\n// {@link //addDFAState} to ensure the {@code to} state is present in the\n// DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n// range of edges that can be represented in the DFA tables, this method\n// returns without adding the edge to the DFA.\n//\n// <p>If {@code to} is {@code null}, this method returns {@code null}.\n// Otherwise, this method returns the {@link DFAState} returned by calling\n// {@link //addDFAState} for the {@code to} state.</p>\n//\n// @param dfa The DFA\n// @param from The source state for the edge\n// @param t The input symbol\n// @param to The target state for the edge\n//\n// @return If {@code to} is {@code null}, this method returns {@code null};\n// otherwise this method returns the result of calling {@link //addDFAState}\n// on {@code to}\n//\n\n\nParserATNSimulator.prototype.addDFAEdge = function (dfa, from_, t, to) {\n  if (this.debug) {\n    console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n  }\n\n  if (to === null) {\n    return null;\n  }\n\n  to = this.addDFAState(dfa, to); // used existing if possible not incoming\n\n  if (from_ === null || t < -1 || t > this.atn.maxTokenType) {\n    return to;\n  }\n\n  if (from_.edges === null) {\n    from_.edges = [];\n  }\n\n  from_.edges[t + 1] = to; // connect\n\n  if (this.debug) {\n    var literalNames = this.parser === null ? null : this.parser.literalNames;\n    var symbolicNames = this.parser === null ? null : this.parser.symbolicNames;\n    console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n  }\n\n  return to;\n}; //\n// Add state {@code D} to the DFA if it is not already present, and return\n// the actual instance stored in the DFA. If a state equivalent to {@code D}\n// is already in the DFA, the existing state is returned. Otherwise this\n// method returns {@code D} after adding it to the DFA.\n//\n// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n// does not change the DFA.</p>\n//\n// @param dfa The dfa\n// @param D The DFA state to add\n// @return The state stored in the DFA. This will be either the existing\n// state if {@code D} is already in the DFA, or {@code D} itself if the\n// state was not already present.\n//\n\n\nParserATNSimulator.prototype.addDFAState = function (dfa, D) {\n  if (D == ATNSimulator.ERROR) {\n    return D;\n  }\n\n  var existing = dfa.states.get(D);\n\n  if (existing !== null) {\n    return existing;\n  }\n\n  D.stateNumber = dfa.states.length;\n\n  if (!D.configs.readOnly) {\n    D.configs.optimizeConfigs(this);\n    D.configs.setReadonly(true);\n  }\n\n  dfa.states.add(D);\n\n  if (this.debug) {\n    console.log(\"adding new DFA state: \" + D);\n  }\n\n  return D;\n};\n\nParserATNSimulator.prototype.reportAttemptingFullContext = function (dfa, conflictingAlts, configs, startIndex, stopIndex) {\n  if (this.debug || this.retry_debug) {\n    var interval = new Interval(startIndex, stopIndex + 1);\n    console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n  }\n\n  if (this.parser !== null) {\n    this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n  }\n};\n\nParserATNSimulator.prototype.reportContextSensitivity = function (dfa, prediction, configs, startIndex, stopIndex) {\n  if (this.debug || this.retry_debug) {\n    var interval = new Interval(startIndex, stopIndex + 1);\n    console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n  }\n\n  if (this.parser !== null) {\n    this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n  }\n}; // If context sensitive parsing, we know it's ambiguity not conflict//\n\n\nParserATNSimulator.prototype.reportAmbiguity = function (dfa, D, startIndex, stopIndex, exact, ambigAlts, configs) {\n  if (this.debug || this.retry_debug) {\n    var interval = new Interval(startIndex, stopIndex + 1);\n    console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs + \", input=\" + this.parser.getTokenStream().getText(interval));\n  }\n\n  if (this.parser !== null) {\n    this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n  }\n};\n\nexports.ParserATNSimulator = ParserATNSimulator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/ParserATNSimulator.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/PredictionMode.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/atn/PredictionMode.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This enumeration defines the prediction modes available in ANTLR 4 along with\n// utility methods for analyzing configuration sets for conflicts and/or\n// ambiguities.\nvar Set = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").Set;\n\nvar Map = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").Map;\n\nvar BitSet = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").BitSet;\n\nvar AltDict = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").AltDict;\n\nvar ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\n\nvar RuleStopState = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").RuleStopState;\n\nvar ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar ATNConfig = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/atn/ATNConfig.js\").ATNConfig;\n\nvar SemanticContext = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").SemanticContext;\n\nvar Hash = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/Utils.js\").Hash;\n\nvar hashStuff = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").hashStuff;\n\nvar equalArrays = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").equalArrays;\n\nfunction PredictionMode() {\n  return this;\n} //\n// The SLL(*) prediction mode. This prediction mode ignores the current\n// parser context when making predictions. This is the fastest prediction\n// mode, and provides correct results for many grammars. This prediction\n// mode is more powerful than the prediction mode provided by ANTLR 3, but\n// may result in syntax errors for grammar and input combinations which are\n// not SLL.\n//\n// <p>\n// When using this prediction mode, the parser will either return a correct\n// parse tree (i.e. the same parse tree that would be returned with the\n// {@link //LL} prediction mode), or it will report a syntax error. If a\n// syntax error is encountered when using the {@link //SLL} prediction mode,\n// it may be due to either an actual syntax error in the input or indicate\n// that the particular combination of grammar and input requires the more\n// powerful {@link //LL} prediction abilities to complete successfully.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\n\n\nPredictionMode.SLL = 0; //\n// The LL(*) prediction mode. This prediction mode allows the current parser\n// context to be used for resolving SLL conflicts that occur during\n// prediction. This is the fastest prediction mode that guarantees correct\n// parse results for all combinations of grammars with syntactically correct\n// inputs.\n//\n// <p>\n// When using this prediction mode, the parser will make correct decisions\n// for all syntactically-correct grammar and input combinations. However, in\n// cases where the grammar is truly ambiguous this prediction mode might not\n// report a precise answer for <em>exactly which</em> alternatives are\n// ambiguous.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\n\nPredictionMode.LL = 1; //\n// The LL(*) prediction mode with exact ambiguity detection. In addition to\n// the correctness guarantees provided by the {@link //LL} prediction mode,\n// this prediction mode instructs the prediction algorithm to determine the\n// complete and exact set of ambiguous alternatives for every ambiguous\n// decision encountered while parsing.\n//\n// <p>\n// This prediction mode may be used for diagnosing ambiguities during\n// grammar development. Due to the performance overhead of calculating sets\n// of ambiguous alternatives, this prediction mode should be avoided when\n// the exact results are not necessary.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\n\nPredictionMode.LL_EXACT_AMBIG_DETECTION = 2; //\n// Computes the SLL prediction termination condition.\n//\n// <p>\n// This method computes the SLL prediction termination condition for both of\n// the following cases.</p>\n//\n// <ul>\n// <li>The usual SLL+LL fallback upon SLL conflict</li>\n// <li>Pure SLL without LL fallback</li>\n// </ul>\n//\n// <p><strong>COMBINED SLL+LL PARSING</strong></p>\n//\n// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n// ensured regardless of how the termination condition is computed by this\n// method. Due to the substantially higher cost of LL prediction, the\n// prediction should only fall back to LL when the additional lookahead\n// cannot lead to a unique SLL prediction.</p>\n//\n// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n// conflicting subsets should fall back to full LL, even if the\n// configuration sets don't resolve to the same alternative (e.g.\n// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n// configuration, SLL could continue with the hopes that more lookahead will\n// resolve via one of those non-conflicting configurations.</p>\n//\n// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n// stops when it sees only conflicting configuration subsets. In contrast,\n// full LL keeps going when there is uncertainty.</p>\n//\n// <p><strong>HEURISTIC</strong></p>\n//\n// <p>As a heuristic, we stop prediction when we see any conflicting subset\n// unless we see a state that only has one alternative associated with it.\n// The single-alt-state thing lets prediction continue upon rules like\n// (otherwise, it would admit defeat too soon):</p>\n//\n// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n//\n// <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n// processing this node because alternative to has another way to continue,\n// via {@code [6|2|[]]}.</p>\n//\n// <p>It also let's us continue for this rule:</p>\n//\n// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n//\n// <p>After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not stop\n// working on this state. In the previous example, we're concerned with\n// states associated with the conflicting alternatives. Here alt 3 is not\n// associated with the conflicting configs, but since we can continue\n// looking for input reasonably, don't declare the state done.</p>\n//\n// <p><strong>PURE SLL PARSING</strong></p>\n//\n// <p>To handle pure SLL parsing, all we have to do is make sure that we\n// combine stack contexts for configurations that differ only by semantic\n// predicate. From there, we can do the usual SLL termination heuristic.</p>\n//\n// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n//\n// <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n// states because they need to create the DFA cache that works in all\n// semantic situations. In contrast, full LL evaluates predicates collected\n// during start state computation so it can ignore predicates thereafter.\n// This means that SLL termination detection can totally ignore semantic\n// predicates.</p>\n//\n// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n// semantic predicate contexts so we might see two configurations like the\n// following.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n//\n// <p>Before testing these configurations against others, we have to merge\n// {@code x} and {@code x'} (without modifying the existing configurations).\n// For example, we test {@code (x+x')==x''} when looking for conflicts in\n// the following configurations.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n//\n// <p>If the configuration set has predicates (as indicated by\n// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n// the configurations to strip out all of the predicates so that a standard\n// {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n//\n\nPredictionMode.hasSLLConflictTerminatingPrediction = function (mode, configs) {\n  // Configs in rule stop states indicate reaching the end of the decision\n  // rule (local context) or end of start rule (full context). If all\n  // configs meet this condition, then none of the configurations is able\n  // to match additional input so we terminate prediction.\n  //\n  if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n    return true;\n  } // pure SLL mode parsing\n\n\n  if (mode === PredictionMode.SLL) {\n    // Don't bother with combining configs from different semantic\n    // contexts if we can fail over to full LL; costs more time\n    // since we'll often fail over anyway.\n    if (configs.hasSemanticContext) {\n      // dup configs, tossing out semantic predicates\n      var dup = new ATNConfigSet();\n\n      for (var i = 0; i < configs.items.length; i++) {\n        var c = configs.items[i];\n        c = new ATNConfig({\n          semanticContext: SemanticContext.NONE\n        }, c);\n        dup.add(c);\n      }\n\n      configs = dup;\n    } // now we have combined contexts for configs with dissimilar preds\n\n  } // pure SLL or combined SLL+LL mode parsing\n\n\n  var altsets = PredictionMode.getConflictingAltSubsets(configs);\n  return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n}; // Checks if any configuration in {@code configs} is in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if any configuration in {@code configs} is in a\n// {@link RuleStopState}, otherwise {@code false}\n\n\nPredictionMode.hasConfigInRuleStopState = function (configs) {\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (c.state instanceof RuleStopState) {\n      return true;\n    }\n  }\n\n  return false;\n}; // Checks if all configurations in {@code configs} are in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if all configurations in {@code configs} are in a\n// {@link RuleStopState}, otherwise {@code false}\n\n\nPredictionMode.allConfigsInRuleStopStates = function (configs) {\n  for (var i = 0; i < configs.items.length; i++) {\n    var c = configs.items[i];\n\n    if (!(c.state instanceof RuleStopState)) {\n      return false;\n    }\n  }\n\n  return true;\n}; //\n// Full LL prediction termination.\n//\n// <p>Can we stop looking ahead during ATN simulation or is there some\n// uncertainty as to which alternative we will ultimately pick, after\n// consuming more input? Even if there are partial conflicts, we might know\n// that everything is going to resolve to the same minimum alternative. That\n// means we can stop since no more lookahead will change that fact. On the\n// other hand, there might be multiple conflicts that resolve to different\n// minimums. That means we need more look ahead to decide which of those\n// alternatives we should predict.</p>\n//\n// <p>The basic idea is to split the set of configurations {@code C}, into\n// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n// non-conflicting configurations. Two configurations conflict if they have\n// identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n//\n// <p>Reduce these configuration subsets to the set of possible alternatives.\n// You can compute the alternative subsets in one pass as follows:</p>\n//\n// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n// {@code C} holding {@code s} and {@code ctx} fixed.</p>\n//\n// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n//\n// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n//\n// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n// {@code s} and {@code ctx}.</p>\n//\n// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n// the union of these alternative subsets is a singleton, then no amount of\n// more lookahead will help us. We will always pick that alternative. If,\n// however, there is more than one alternative, then we are uncertain which\n// alternative to predict and must continue looking for resolution. We may\n// or may not discover an ambiguity in the future, even if there are no\n// conflicting subsets this round.</p>\n//\n// <p>The biggest sin is to terminate early because it means we've made a\n// decision but were uncertain as to the eventual outcome. We haven't used\n// enough lookahead. On the other hand, announcing a conflict too late is no\n// big deal; you will still have the conflict. It's just inefficient. It\n// might even look until the end of file.</p>\n//\n// <p>No special consideration for semantic predicates is required because\n// predicates are evaluated on-the-fly for full LL prediction, ensuring that\n// no configuration contains a semantic context during the termination\n// check.</p>\n//\n// <p><strong>CONFLICTING CONFIGS</strong></p>\n//\n// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n// when {@code i!=j} but {@code x=x'}. Because we merge all\n// {@code (s, i, _)} configurations together, that means that there are at\n// most {@code n} configurations associated with state {@code s} for\n// {@code n} possible alternatives in the decision. The merged stacks\n// complicate the comparison of configuration contexts {@code x} and\n// {@code x'}. Sam checks to see if one is a subset of the other by calling\n// merge and checking to see if the merged result is either {@code x} or\n// {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n// is the superset, then {@code i} is the only possible prediction since the\n// others resolve to {@code min(i)} as well. However, if {@code x} is\n// associated with {@code j>i} then at least one stack configuration for\n// {@code j} is not in conflict with alternative {@code i}. The algorithm\n// should keep going, looking for more lookahead due to the uncertainty.</p>\n//\n// <p>For simplicity, I'm doing a equality check between {@code x} and\n// {@code x'} that lets the algorithm continue to consume lookahead longer\n// than necessary. The reason I like the equality is of course the\n// simplicity but also because that is the test you need to detect the\n// alternatives that are actually in conflict.</p>\n//\n// <p><strong>CONTINUE/STOP RULE</strong></p>\n//\n// <p>Continue if union of resolved alternative sets from non-conflicting and\n// conflicting alternative subsets has more than one alternative. We are\n// uncertain about which alternative to predict.</p>\n//\n// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n// alternatives are still in the running for the amount of input we've\n// consumed at this point. The conflicting sets let us to strip away\n// configurations that won't lead to more states because we resolve\n// conflicts to the configuration with a minimum alternate for the\n// conflicting set.</p>\n//\n// <p><strong>CASES</strong></p>\n//\n// <ul>\n//\n// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n//\n// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1,3}} =&gt; continue\n// </li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1}} =&gt; stop and predict 1</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n// ambiguity {@code {1,2}}</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {2}} = {@code {1,2}} =&gt; continue</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {3}} = {@code {1,3}} =&gt; continue</li>\n//\n// </ul>\n//\n// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n//\n// <p>If all states report the same conflicting set of alternatives, then we\n// know we have the exact ambiguity set.</p>\n//\n// <p><code>|A_<em>i</em>|&gt;1</code> and\n// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n//\n// <p>In other words, we continue examining lookahead until all {@code A_i}\n// have more than one alternative and all {@code A_i} are the same. If\n// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n// because the resolved set is {@code {1}}. To determine what the real\n// ambiguity is, we have to know whether the ambiguity is between one and\n// two or one and three so we keep going. We can only stop prediction when\n// we need exact ambiguity detection when the sets look like\n// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n//\n\n\nPredictionMode.resolvesToJustOneViableAlt = function (altsets) {\n  return PredictionMode.getSingleViableAlt(altsets);\n}; //\n// Determines if every alternative subset in {@code altsets} contains more\n// than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every {@link BitSet} in {@code altsets} has\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\n\n\nPredictionMode.allSubsetsConflict = function (altsets) {\n  return !PredictionMode.hasNonConflictingAltSet(altsets);\n}; //\n// Determines if any single alternative subset in {@code altsets} contains\n// exactly one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n//\n\n\nPredictionMode.hasNonConflictingAltSet = function (altsets) {\n  for (var i = 0; i < altsets.length; i++) {\n    var alts = altsets[i];\n\n    if (alts.length === 1) {\n      return true;\n    }\n  }\n\n  return false;\n}; //\n// Determines if any single alternative subset in {@code altsets} contains\n// more than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\n\n\nPredictionMode.hasConflictingAltSet = function (altsets) {\n  for (var i = 0; i < altsets.length; i++) {\n    var alts = altsets[i];\n\n    if (alts.length > 1) {\n      return true;\n    }\n  }\n\n  return false;\n}; //\n// Determines if every alternative subset in {@code altsets} is equivalent.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every member of {@code altsets} is equal to the\n// others, otherwise {@code false}\n//\n\n\nPredictionMode.allSubsetsEqual = function (altsets) {\n  var first = null;\n\n  for (var i = 0; i < altsets.length; i++) {\n    var alts = altsets[i];\n\n    if (first === null) {\n      first = alts;\n    } else if (alts !== first) {\n      return false;\n    }\n  }\n\n  return true;\n}; //\n// Returns the unique alternative predicted by all alternative subsets in\n// {@code altsets}. If no such alternative exists, this method returns\n// {@link ATN//INVALID_ALT_NUMBER}.\n//\n// @param altsets a collection of alternative subsets\n//\n\n\nPredictionMode.getUniqueAlt = function (altsets) {\n  var all = PredictionMode.getAlts(altsets);\n\n  if (all.length === 1) {\n    return all.minValue();\n  } else {\n    return ATN.INVALID_ALT_NUMBER;\n  }\n}; // Gets the complete set of represented alternatives for a collection of\n// alternative subsets. This method returns the union of each {@link BitSet}\n// in {@code altsets}.\n//\n// @param altsets a collection of alternative subsets\n// @return the set of represented alternatives in {@code altsets}\n//\n\n\nPredictionMode.getAlts = function (altsets) {\n  var all = new BitSet();\n  altsets.map(function (alts) {\n    all.or(alts);\n  });\n  return all;\n}; //\n// This function gets the conflicting alt subsets from a configuration set.\n// For each configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n\n\nPredictionMode.getConflictingAltSubsets = function (configs) {\n  var configToAlts = new Map();\n\n  configToAlts.hashFunction = function (cfg) {\n    hashStuff(cfg.state.stateNumber, cfg.context);\n  };\n\n  configToAlts.equalsFunction = function (c1, c2) {\n    return c1.state.stateNumber == c2.state.stateNumber && c1.context.equals(c2.context);\n  };\n\n  configs.items.map(function (cfg) {\n    var alts = configToAlts.get(cfg);\n\n    if (alts === null) {\n      alts = new BitSet();\n      configToAlts.put(cfg, alts);\n    }\n\n    alts.add(cfg.alt);\n  });\n  return configToAlts.getValues();\n}; //\n// Get a map from state to alt subset from a configuration set. For each\n// configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n// </pre>\n//\n\n\nPredictionMode.getStateToAltMap = function (configs) {\n  var m = new AltDict();\n  configs.items.map(function (c) {\n    var alts = m.get(c.state);\n\n    if (alts === null) {\n      alts = new BitSet();\n      m.put(c.state, alts);\n    }\n\n    alts.add(c.alt);\n  });\n  return m;\n};\n\nPredictionMode.hasStateAssociatedWithOneAlt = function (configs) {\n  var values = PredictionMode.getStateToAltMap(configs).values();\n\n  for (var i = 0; i < values.length; i++) {\n    if (values[i].length === 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nPredictionMode.getSingleViableAlt = function (altsets) {\n  var result = null;\n\n  for (var i = 0; i < altsets.length; i++) {\n    var alts = altsets[i];\n    var minAlt = alts.minValue();\n\n    if (result === null) {\n      result = minAlt;\n    } else if (result !== minAlt) {\n      // more than 1 viable alt\n      return ATN.INVALID_ALT_NUMBER;\n    }\n  }\n\n  return result;\n};\n\nexports.PredictionMode = PredictionMode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/PredictionMode.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/SemanticContext.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/SemanticContext.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n// A tree structure used to record the semantic context in which\n//  an ATN configuration is valid.  It's either a single predicate,\n//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n//\n//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n//  {@link SemanticContext} within the scope of this outer class.</p>\n//\nvar Set = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").Set;\n\nvar Hash = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").Hash;\n\nfunction SemanticContext() {\n  return this;\n}\n\nSemanticContext.prototype.hashCode = function () {\n  var hash = new Hash();\n  this.updateHashCode(hash);\n  return hash.finish();\n}; // For context independent predicates, we evaluate them without a local\n// context (i.e., null context). That way, we can evaluate them without\n// having to create proper rule-specific context during prediction (as\n// opposed to the parser, which creates them naturally). In a practical\n// sense, this avoids a cast exception from RuleContext to myruleContext.\n//\n// <p>For context dependent predicates, we must pass in a local context so that\n// references such as $arg evaluate properly as _localctx.arg. We only\n// capture context dependent predicates in the context in which we begin\n// prediction, so we passed in the outer context here in case of context\n// dependent predicate evaluation.</p>\n//\n\n\nSemanticContext.prototype.evaluate = function (parser, outerContext) {}; //\n// Evaluate the precedence predicates for the context and reduce the result.\n//\n// @param parser The parser instance.\n// @param outerContext The current parser context object.\n// @return The simplified semantic context after precedence predicates are\n// evaluated, which will be one of the following values.\n// <ul>\n// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n// precedence predicates are evaluated.</li>\n// <li>{@code null}: if the predicate simplifies to {@code false} after\n// precedence predicates are evaluated.</li>\n// <li>{@code this}: if the semantic context is not changed as a result of\n// precedence predicate evaluation.</li>\n// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n// semantic context after precedence predicates are evaluated.</li>\n// </ul>\n//\n\n\nSemanticContext.prototype.evalPrecedence = function (parser, outerContext) {\n  return this;\n};\n\nSemanticContext.andContext = function (a, b) {\n  if (a === null || a === SemanticContext.NONE) {\n    return b;\n  }\n\n  if (b === null || b === SemanticContext.NONE) {\n    return a;\n  }\n\n  var result = new AND(a, b);\n\n  if (result.opnds.length === 1) {\n    return result.opnds[0];\n  } else {\n    return result;\n  }\n};\n\nSemanticContext.orContext = function (a, b) {\n  if (a === null) {\n    return b;\n  }\n\n  if (b === null) {\n    return a;\n  }\n\n  if (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n    return SemanticContext.NONE;\n  }\n\n  var result = new OR(a, b);\n\n  if (result.opnds.length === 1) {\n    return result.opnds[0];\n  } else {\n    return result;\n  }\n};\n\nfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n  SemanticContext.call(this);\n  this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n  this.predIndex = predIndex === undefined ? -1 : predIndex;\n  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\n  return this;\n}\n\nPredicate.prototype = Object.create(SemanticContext.prototype);\nPredicate.prototype.constructor = Predicate; //The default {@link SemanticContext}, which is semantically equivalent to\n//a predicate of the form {@code {true}?}.\n//\n\nSemanticContext.NONE = new Predicate();\n\nPredicate.prototype.evaluate = function (parser, outerContext) {\n  var localctx = this.isCtxDependent ? outerContext : null;\n  return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n};\n\nPredicate.prototype.updateHashCode = function (hash) {\n  hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicate.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof Predicate)) {\n    return false;\n  } else {\n    return this.ruleIndex === other.ruleIndex && this.predIndex === other.predIndex && this.isCtxDependent === other.isCtxDependent;\n  }\n};\n\nPredicate.prototype.toString = function () {\n  return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n};\n\nfunction PrecedencePredicate(precedence) {\n  SemanticContext.call(this);\n  this.precedence = precedence === undefined ? 0 : precedence;\n}\n\nPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\nPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\nPrecedencePredicate.prototype.evaluate = function (parser, outerContext) {\n  return parser.precpred(outerContext, this.precedence);\n};\n\nPrecedencePredicate.prototype.evalPrecedence = function (parser, outerContext) {\n  if (parser.precpred(outerContext, this.precedence)) {\n    return SemanticContext.NONE;\n  } else {\n    return null;\n  }\n};\n\nPrecedencePredicate.prototype.compareTo = function (other) {\n  return this.precedence - other.precedence;\n};\n\nPrecedencePredicate.prototype.updateHashCode = function (hash) {\n  hash.update(31);\n};\n\nPrecedencePredicate.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof PrecedencePredicate)) {\n    return false;\n  } else {\n    return this.precedence === other.precedence;\n  }\n};\n\nPrecedencePredicate.prototype.toString = function () {\n  return \"{\" + this.precedence + \">=prec}?\";\n};\n\nPrecedencePredicate.filterPrecedencePredicates = function (set) {\n  var result = [];\n  set.values().map(function (context) {\n    if (context instanceof PrecedencePredicate) {\n      result.push(context);\n    }\n  });\n  return result;\n}; // A semantic context which is true whenever none of the contained contexts\n// is false.\n//\n\n\nfunction AND(a, b) {\n  SemanticContext.call(this);\n  var operands = new Set();\n\n  if (a instanceof AND) {\n    a.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(a);\n  }\n\n  if (b instanceof AND) {\n    b.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(b);\n  }\n\n  var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\n  if (precedencePredicates.length > 0) {\n    // interested in the transition with the lowest precedence\n    var reduced = null;\n    precedencePredicates.map(function (p) {\n      if (reduced === null || p.precedence < reduced.precedence) {\n        reduced = p;\n      }\n    });\n    operands.add(reduced);\n  }\n\n  this.opnds = operands.values();\n  return this;\n}\n\nAND.prototype = Object.create(SemanticContext.prototype);\nAND.prototype.constructor = AND;\n\nAND.prototype.equals = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof AND)) {\n    return false;\n  } else {\n    return this.opnds === other.opnds;\n  }\n};\n\nAND.prototype.updateHashCode = function (hash) {\n  hash.update(this.opnds, \"AND\");\n}; //\n// {@inheritDoc}\n//\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\n\n\nAND.prototype.evaluate = function (parser, outerContext) {\n  for (var i = 0; i < this.opnds.length; i++) {\n    if (!this.opnds[i].evaluate(parser, outerContext)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nAND.prototype.evalPrecedence = function (parser, outerContext) {\n  var differs = false;\n  var operands = [];\n\n  for (var i = 0; i < this.opnds.length; i++) {\n    var context = this.opnds[i];\n    var evaluated = context.evalPrecedence(parser, outerContext);\n    differs |= evaluated !== context;\n\n    if (evaluated === null) {\n      // The AND context is false if any element is false\n      return null;\n    } else if (evaluated !== SemanticContext.NONE) {\n      // Reduce the result by skipping true elements\n      operands.push(evaluated);\n    }\n  }\n\n  if (!differs) {\n    return this;\n  }\n\n  if (operands.length === 0) {\n    // all elements were true, so the AND context is true\n    return SemanticContext.NONE;\n  }\n\n  var result = null;\n  operands.map(function (o) {\n    result = result === null ? o : SemanticContext.andContext(result, o);\n  });\n  return result;\n};\n\nAND.prototype.toString = function () {\n  var s = \"\";\n  this.opnds.map(function (o) {\n    s += \"&& \" + o.toString();\n  });\n  return s.length > 3 ? s.slice(3) : s;\n}; //\n// A semantic context which is true whenever at least one of the contained\n// contexts is true.\n//\n\n\nfunction OR(a, b) {\n  SemanticContext.call(this);\n  var operands = new Set();\n\n  if (a instanceof OR) {\n    a.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(a);\n  }\n\n  if (b instanceof OR) {\n    b.opnds.map(function (o) {\n      operands.add(o);\n    });\n  } else {\n    operands.add(b);\n  }\n\n  var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\n  if (precedencePredicates.length > 0) {\n    // interested in the transition with the highest precedence\n    var s = precedencePredicates.sort(function (a, b) {\n      return a.compareTo(b);\n    });\n    var reduced = s[s.length - 1];\n    operands.add(reduced);\n  }\n\n  this.opnds = operands.values();\n  return this;\n}\n\nOR.prototype = Object.create(SemanticContext.prototype);\nOR.prototype.constructor = OR;\n\nOR.prototype.constructor = function (other) {\n  if (this === other) {\n    return true;\n  } else if (!(other instanceof OR)) {\n    return false;\n  } else {\n    return this.opnds === other.opnds;\n  }\n};\n\nOR.prototype.updateHashCode = function (hash) {\n  hash.update(this.opnds, \"OR\");\n}; // <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\n\n\nOR.prototype.evaluate = function (parser, outerContext) {\n  for (var i = 0; i < this.opnds.length; i++) {\n    if (this.opnds[i].evaluate(parser, outerContext)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nOR.prototype.evalPrecedence = function (parser, outerContext) {\n  var differs = false;\n  var operands = [];\n\n  for (var i = 0; i < this.opnds.length; i++) {\n    var context = this.opnds[i];\n    var evaluated = context.evalPrecedence(parser, outerContext);\n    differs |= evaluated !== context;\n\n    if (evaluated === SemanticContext.NONE) {\n      // The OR context is true if any element is true\n      return SemanticContext.NONE;\n    } else if (evaluated !== null) {\n      // Reduce the result by skipping false elements\n      operands.push(evaluated);\n    }\n  }\n\n  if (!differs) {\n    return this;\n  }\n\n  if (operands.length === 0) {\n    // all elements were false, so the OR context is false\n    return null;\n  }\n\n  var result = null;\n  operands.map(function (o) {\n    return result === null ? o : SemanticContext.orContext(result, o);\n  });\n  return result;\n};\n\nOR.prototype.toString = function () {\n  var s = \"\";\n  this.opnds.map(function (o) {\n    s += \"|| \" + o.toString();\n  });\n  return s.length > 3 ? s.slice(3) : s;\n};\n\nexports.SemanticContext = SemanticContext;\nexports.PrecedencePredicate = PrecedencePredicate;\nexports.Predicate = Predicate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/SemanticContext.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/Transition.js":
/*!***********************************************!*\
  !*** ./node_modules/antlr4/atn/Transition.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//  An ATN transition between any two ATN states.  Subclasses define\n//  atom, set, epsilon, action, predicate, rule transitions.\n//\n//  <p>This is a one way link.  It emanates from a state (usually via a list of\n//  transitions) and has a target state.</p>\n//\n//  <p>Since we never have to change the ATN transitions once we construct it,\n//  we can fix these transitions as specific classes. The DFA transitions\n//  on the other hand need to update the labels as it adds transitions to\n//  the states. We'll use the term Edge for the DFA to distinguish them from\n//  ATN transitions.</p>\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar IntervalSet = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").IntervalSet;\n\nvar Predicate = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").Predicate;\n\nvar PrecedencePredicate = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/atn/SemanticContext.js\").PrecedencePredicate;\n\nfunction Transition(target) {\n  // The target of this transition.\n  if (target === undefined || target === null) {\n    throw \"target cannot be null.\";\n  }\n\n  this.target = target; // Are we epsilon, action, sempred?\n\n  this.isEpsilon = false;\n  this.label = null;\n  return this;\n} // constants for serialization\n\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\nTransition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?\n\nTransition.ATOM = 5;\nTransition.ACTION = 6;\nTransition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2\n\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\nTransition.serializationNames = [\"INVALID\", \"EPSILON\", \"RANGE\", \"RULE\", \"PREDICATE\", \"ATOM\", \"ACTION\", \"SET\", \"NOT_SET\", \"WILDCARD\", \"PRECEDENCE\"];\nTransition.serializationTypes = {\n  EpsilonTransition: Transition.EPSILON,\n  RangeTransition: Transition.RANGE,\n  RuleTransition: Transition.RULE,\n  PredicateTransition: Transition.PREDICATE,\n  AtomTransition: Transition.ATOM,\n  ActionTransition: Transition.ACTION,\n  SetTransition: Transition.SET,\n  NotSetTransition: Transition.NOT_SET,\n  WildcardTransition: Transition.WILDCARD,\n  PrecedencePredicateTransition: Transition.PRECEDENCE\n}; // TODO: make all transitions sets? no, should remove set edges\n\nfunction AtomTransition(target, label) {\n  Transition.call(this, target);\n  this.label_ = label; // The token type or character value; or, signifies special label.\n\n  this.label = this.makeLabel();\n  this.serializationType = Transition.ATOM;\n  return this;\n}\n\nAtomTransition.prototype = Object.create(Transition.prototype);\nAtomTransition.prototype.constructor = AtomTransition;\n\nAtomTransition.prototype.makeLabel = function () {\n  var s = new IntervalSet();\n  s.addOne(this.label_);\n  return s;\n};\n\nAtomTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return this.label_ === symbol;\n};\n\nAtomTransition.prototype.toString = function () {\n  return this.label_;\n};\n\nfunction RuleTransition(ruleStart, ruleIndex, precedence, followState) {\n  Transition.call(this, ruleStart);\n  this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref\n\n  this.precedence = precedence;\n  this.followState = followState; // what node to begin computations following ref to rule\n\n  this.serializationType = Transition.RULE;\n  this.isEpsilon = true;\n  return this;\n}\n\nRuleTransition.prototype = Object.create(Transition.prototype);\nRuleTransition.prototype.constructor = RuleTransition;\n\nRuleTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nfunction EpsilonTransition(target, outermostPrecedenceReturn) {\n  Transition.call(this, target);\n  this.serializationType = Transition.EPSILON;\n  this.isEpsilon = true;\n  this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n  return this;\n}\n\nEpsilonTransition.prototype = Object.create(Transition.prototype);\nEpsilonTransition.prototype.constructor = EpsilonTransition;\n\nEpsilonTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nEpsilonTransition.prototype.toString = function () {\n  return \"epsilon\";\n};\n\nfunction RangeTransition(target, start, stop) {\n  Transition.call(this, target);\n  this.serializationType = Transition.RANGE;\n  this.start = start;\n  this.stop = stop;\n  this.label = this.makeLabel();\n  return this;\n}\n\nRangeTransition.prototype = Object.create(Transition.prototype);\nRangeTransition.prototype.constructor = RangeTransition;\n\nRangeTransition.prototype.makeLabel = function () {\n  var s = new IntervalSet();\n  s.addRange(this.start, this.stop);\n  return s;\n};\n\nRangeTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= this.start && symbol <= this.stop;\n};\n\nRangeTransition.prototype.toString = function () {\n  return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n};\n\nfunction AbstractPredicateTransition(target) {\n  Transition.call(this, target);\n  return this;\n}\n\nAbstractPredicateTransition.prototype = Object.create(Transition.prototype);\nAbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;\n\nfunction PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {\n  AbstractPredicateTransition.call(this, target);\n  this.serializationType = Transition.PREDICATE;\n  this.ruleIndex = ruleIndex;\n  this.predIndex = predIndex;\n  this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n\n  this.isEpsilon = true;\n  return this;\n}\n\nPredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPredicateTransition.prototype.constructor = PredicateTransition;\n\nPredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nPredicateTransition.prototype.getPredicate = function () {\n  return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicateTransition.prototype.toString = function () {\n  return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n};\n\nfunction ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {\n  Transition.call(this, target);\n  this.serializationType = Transition.ACTION;\n  this.ruleIndex = ruleIndex;\n  this.actionIndex = actionIndex === undefined ? -1 : actionIndex;\n  this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\n  this.isEpsilon = true;\n  return this;\n}\n\nActionTransition.prototype = Object.create(Transition.prototype);\nActionTransition.prototype.constructor = ActionTransition;\n\nActionTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nActionTransition.prototype.toString = function () {\n  return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n}; // A transition containing a set of values.\n\n\nfunction SetTransition(target, set) {\n  Transition.call(this, target);\n  this.serializationType = Transition.SET;\n\n  if (set !== undefined && set !== null) {\n    this.label = set;\n  } else {\n    this.label = new IntervalSet();\n    this.label.addOne(Token.INVALID_TYPE);\n  }\n\n  return this;\n}\n\nSetTransition.prototype = Object.create(Transition.prototype);\nSetTransition.prototype.constructor = SetTransition;\n\nSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return this.label.contains(symbol);\n};\n\nSetTransition.prototype.toString = function () {\n  return this.label.toString();\n};\n\nfunction NotSetTransition(target, set) {\n  SetTransition.call(this, target, set);\n  this.serializationType = Transition.NOT_SET;\n  return this;\n}\n\nNotSetTransition.prototype = Object.create(SetTransition.prototype);\nNotSetTransition.prototype.constructor = NotSetTransition;\n\nNotSetTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol && !SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);\n};\n\nNotSetTransition.prototype.toString = function () {\n  return '~' + SetTransition.prototype.toString.call(this);\n};\n\nfunction WildcardTransition(target) {\n  Transition.call(this, target);\n  this.serializationType = Transition.WILDCARD;\n  return this;\n}\n\nWildcardTransition.prototype = Object.create(Transition.prototype);\nWildcardTransition.prototype.constructor = WildcardTransition;\n\nWildcardTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n};\n\nWildcardTransition.prototype.toString = function () {\n  return \".\";\n};\n\nfunction PrecedencePredicateTransition(target, precedence) {\n  AbstractPredicateTransition.call(this, target);\n  this.serializationType = Transition.PRECEDENCE;\n  this.precedence = precedence;\n  this.isEpsilon = true;\n  return this;\n}\n\nPrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;\n\nPrecedencePredicateTransition.prototype.matches = function (symbol, minVocabSymbol, maxVocabSymbol) {\n  return false;\n};\n\nPrecedencePredicateTransition.prototype.getPredicate = function () {\n  return new PrecedencePredicate(this.precedence);\n};\n\nPrecedencePredicateTransition.prototype.toString = function () {\n  return this.precedence + \" >= _p\";\n};\n\nexports.Transition = Transition;\nexports.AtomTransition = AtomTransition;\nexports.SetTransition = SetTransition;\nexports.NotSetTransition = NotSetTransition;\nexports.RuleTransition = RuleTransition;\nexports.ActionTransition = ActionTransition;\nexports.EpsilonTransition = EpsilonTransition;\nexports.RangeTransition = RangeTransition;\nexports.WildcardTransition = WildcardTransition;\nexports.PredicateTransition = PredicateTransition;\nexports.PrecedencePredicateTransition = PrecedencePredicateTransition;\nexports.AbstractPredicateTransition = AbstractPredicateTransition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/Transition.js\n");

/***/ }),

/***/ "./node_modules/antlr4/atn/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/atn/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/atn/ATN.js\").ATN;\nexports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ \"./node_modules/antlr4/atn/ATNDeserializer.js\").ATNDeserializer;\nexports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ \"./node_modules/antlr4/atn/LexerATNSimulator.js\").LexerATNSimulator;\nexports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ \"./node_modules/antlr4/atn/ParserATNSimulator.js\").ParserATNSimulator;\nexports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"./node_modules/antlr4/atn/PredictionMode.js\").PredictionMode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2F0bi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRscjQvYXRuL2luZGV4LmpzPzVjNzQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5leHBvcnRzLkFUTiA9IHJlcXVpcmUoJy4vQVROJykuQVROO1xuZXhwb3J0cy5BVE5EZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0FUTkRlc2VyaWFsaXplcicpLkFUTkRlc2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJBVE5TaW11bGF0b3IgPSByZXF1aXJlKCcuL0xleGVyQVROU2ltdWxhdG9yJykuTGV4ZXJBVE5TaW11bGF0b3I7XG5leHBvcnRzLlBhcnNlckFUTlNpbXVsYXRvciA9IHJlcXVpcmUoJy4vUGFyc2VyQVROU2ltdWxhdG9yJykuUGFyc2VyQVROU2ltdWxhdG9yO1xuZXhwb3J0cy5QcmVkaWN0aW9uTW9kZSA9IHJlcXVpcmUoJy4vUHJlZGljdGlvbk1vZGUnKS5QcmVkaWN0aW9uTW9kZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/atn/index.js\n");

/***/ }),

/***/ "./node_modules/antlr4/dfa/DFA.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/dfa/DFA.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Set = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/Utils.js\").Set;\n\nvar DFAState = __webpack_require__(/*! ./DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").DFAState;\n\nvar StarLoopEntryState = __webpack_require__(/*! ../atn/ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").StarLoopEntryState;\n\nvar ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar DFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/dfa/DFASerializer.js\").DFASerializer;\n\nvar LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/dfa/DFASerializer.js\").LexerDFASerializer;\n\nfunction DFA(atnStartState, decision) {\n  if (decision === undefined) {\n    decision = 0;\n  } // From which ATN state did we create this DFA?\n\n\n  this.atnStartState = atnStartState;\n  this.decision = decision; // A set of all DFA states. Use {@link Map} so we can get old state back\n  // ({@link Set} only allows you to see if it's there).\n\n  this._states = new Set();\n  this.s0 = null; // {@code true} if this DFA is for a precedence decision; otherwise,\n  // {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n  // {@link //setPrecedenceDfa}.\n\n  this.precedenceDfa = false;\n\n  if (atnStartState instanceof StarLoopEntryState) {\n    if (atnStartState.isPrecedenceDecision) {\n      this.precedenceDfa = true;\n      var precedenceState = new DFAState(null, new ATNConfigSet());\n      precedenceState.edges = [];\n      precedenceState.isAcceptState = false;\n      precedenceState.requiresFullContext = false;\n      this.s0 = precedenceState;\n    }\n  }\n\n  return this;\n} // Get the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @return The start state corresponding to the specified precedence, or\n// {@code null} if no start state exists for the specified precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n\n\nDFA.prototype.getPrecedenceStartState = function (precedence) {\n  if (!this.precedenceDfa) {\n    throw \"Only precedence DFAs may contain a precedence start state.\";\n  } // s0.edges is never null for a precedence DFA\n\n\n  if (precedence < 0 || precedence >= this.s0.edges.length) {\n    return null;\n  }\n\n  return this.s0.edges[precedence] || null;\n}; // Set the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @param startState The start state corresponding to the specified\n// precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n//\n\n\nDFA.prototype.setPrecedenceStartState = function (precedence, startState) {\n  if (!this.precedenceDfa) {\n    throw \"Only precedence DFAs may contain a precedence start state.\";\n  }\n\n  if (precedence < 0) {\n    return;\n  } // synchronization on s0 here is ok. when the DFA is turned into a\n  // precedence DFA, s0 will be initialized once and not updated again\n  // s0.edges is never null for a precedence DFA\n\n\n  this.s0.edges[precedence] = startState;\n}; //\n// Sets whether this is a precedence DFA. If the specified value differs\n// from the current DFA configuration, the following actions are taken;\n// otherwise no changes are made to the current DFA.\n//\n// <ul>\n// <li>The {@link //states} map is cleared</li>\n// <li>If {@code precedenceDfa} is {@code false}, the initial state\n// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n// store the start states for individual precedence values.</li>\n// <li>The {@link //precedenceDfa} field is updated</li>\n// </ul>\n//\n// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n// {@code false}\n\n\nDFA.prototype.setPrecedenceDfa = function (precedenceDfa) {\n  if (this.precedenceDfa !== precedenceDfa) {\n    this._states = new DFAStatesSet();\n\n    if (precedenceDfa) {\n      var precedenceState = new DFAState(null, new ATNConfigSet());\n      precedenceState.edges = [];\n      precedenceState.isAcceptState = false;\n      precedenceState.requiresFullContext = false;\n      this.s0 = precedenceState;\n    } else {\n      this.s0 = null;\n    }\n\n    this.precedenceDfa = precedenceDfa;\n  }\n};\n\nObject.defineProperty(DFA.prototype, \"states\", {\n  get: function get() {\n    return this._states;\n  }\n}); // Return a list of all states in this DFA, ordered by state number.\n\nDFA.prototype.sortedStates = function () {\n  var list = this._states.values();\n\n  return list.sort(function (a, b) {\n    return a.stateNumber - b.stateNumber;\n  });\n};\n\nDFA.prototype.toString = function (literalNames, symbolicNames) {\n  literalNames = literalNames || null;\n  symbolicNames = symbolicNames || null;\n\n  if (this.s0 === null) {\n    return \"\";\n  }\n\n  var serializer = new DFASerializer(this, literalNames, symbolicNames);\n  return serializer.toString();\n};\n\nDFA.prototype.toLexerString = function () {\n  if (this.s0 === null) {\n    return \"\";\n  }\n\n  var serializer = new LexerDFASerializer(this);\n  return serializer.toString();\n};\n\nexports.DFA = DFA;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2RmYS9ERkEuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L2RmYS9ERkEuanM/Y2E4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG52YXIgU2V0ID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpLlNldDtcbnZhciBERkFTdGF0ZSA9IHJlcXVpcmUoJy4vREZBU3RhdGUnKS5ERkFTdGF0ZTtcbnZhciBTdGFyTG9vcEVudHJ5U3RhdGUgPSByZXF1aXJlKCcuLi9hdG4vQVROU3RhdGUnKS5TdGFyTG9vcEVudHJ5U3RhdGU7XG52YXIgQVROQ29uZmlnU2V0ID0gcmVxdWlyZSgnLi8uLi9hdG4vQVROQ29uZmlnU2V0JykuQVROQ29uZmlnU2V0O1xudmFyIERGQVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0RGQVNlcmlhbGl6ZXInKS5ERkFTZXJpYWxpemVyO1xudmFyIExleGVyREZBU2VyaWFsaXplciA9IHJlcXVpcmUoJy4vREZBU2VyaWFsaXplcicpLkxleGVyREZBU2VyaWFsaXplcjtcblxuXG5cbmZ1bmN0aW9uIERGQShhdG5TdGFydFN0YXRlLCBkZWNpc2lvbikge1xuXHRpZiAoZGVjaXNpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdGRlY2lzaW9uID0gMDtcblx0fVxuXHQvLyBGcm9tIHdoaWNoIEFUTiBzdGF0ZSBkaWQgd2UgY3JlYXRlIHRoaXMgREZBP1xuXHR0aGlzLmF0blN0YXJ0U3RhdGUgPSBhdG5TdGFydFN0YXRlO1xuXHR0aGlzLmRlY2lzaW9uID0gZGVjaXNpb247XG5cdC8vIEEgc2V0IG9mIGFsbCBERkEgc3RhdGVzLiBVc2Uge0BsaW5rIE1hcH0gc28gd2UgY2FuIGdldCBvbGQgc3RhdGUgYmFja1xuXHQvLyAoe0BsaW5rIFNldH0gb25seSBhbGxvd3MgeW91IHRvIHNlZSBpZiBpdCdzIHRoZXJlKS5cblx0dGhpcy5fc3RhdGVzID0gbmV3IFNldCgpO1xuXHR0aGlzLnMwID0gbnVsbDtcblx0Ly8ge0Bjb2RlIHRydWV9IGlmIHRoaXMgREZBIGlzIGZvciBhIHByZWNlZGVuY2UgZGVjaXNpb247IG90aGVyd2lzZSxcblx0Ly8ge0Bjb2RlIGZhbHNlfS4gVGhpcyBpcyB0aGUgYmFja2luZyBmaWVsZCBmb3Ige0BsaW5rIC8vaXNQcmVjZWRlbmNlRGZhfSxcblx0Ly8ge0BsaW5rIC8vc2V0UHJlY2VkZW5jZURmYX0uXG5cdHRoaXMucHJlY2VkZW5jZURmYSA9IGZhbHNlO1xuICAgIGlmIChhdG5TdGFydFN0YXRlIGluc3RhbmNlb2YgU3Rhckxvb3BFbnRyeVN0YXRlKVxuICAgIHtcbiAgICAgICAgaWYgKGF0blN0YXJ0U3RhdGUuaXNQcmVjZWRlbmNlRGVjaXNpb24pIHtcbiAgICAgICAgICAgIHRoaXMucHJlY2VkZW5jZURmYSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgcHJlY2VkZW5jZVN0YXRlID0gbmV3IERGQVN0YXRlKG51bGwsIG5ldyBBVE5Db25maWdTZXQoKSk7XG4gICAgICAgICAgICBwcmVjZWRlbmNlU3RhdGUuZWRnZXMgPSBbXTtcbiAgICAgICAgICAgIHByZWNlZGVuY2VTdGF0ZS5pc0FjY2VwdFN0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICBwcmVjZWRlbmNlU3RhdGUucmVxdWlyZXNGdWxsQ29udGV4dCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zMCA9IHByZWNlZGVuY2VTdGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblx0cmV0dXJuIHRoaXM7XG59XG5cbi8vIEdldCB0aGUgc3RhcnQgc3RhdGUgZm9yIGEgc3BlY2lmaWMgcHJlY2VkZW5jZSB2YWx1ZS5cbi8vXG4vLyBAcGFyYW0gcHJlY2VkZW5jZSBUaGUgY3VycmVudCBwcmVjZWRlbmNlLlxuLy8gQHJldHVybiBUaGUgc3RhcnQgc3RhdGUgY29ycmVzcG9uZGluZyB0byB0aGUgc3BlY2lmaWVkIHByZWNlZGVuY2UsIG9yXG4vLyB7QGNvZGUgbnVsbH0gaWYgbm8gc3RhcnQgc3RhdGUgZXhpc3RzIGZvciB0aGUgc3BlY2lmaWVkIHByZWNlZGVuY2UuXG4vL1xuLy8gQHRocm93cyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24gaWYgdGhpcyBpcyBub3QgYSBwcmVjZWRlbmNlIERGQS5cbi8vIEBzZWUgLy9pc1ByZWNlZGVuY2VEZmEoKVxuXG5ERkEucHJvdG90eXBlLmdldFByZWNlZGVuY2VTdGFydFN0YXRlID0gZnVuY3Rpb24ocHJlY2VkZW5jZSkge1xuXHRpZiAoISh0aGlzLnByZWNlZGVuY2VEZmEpKSB7XG5cdFx0dGhyb3cgKFwiT25seSBwcmVjZWRlbmNlIERGQXMgbWF5IGNvbnRhaW4gYSBwcmVjZWRlbmNlIHN0YXJ0IHN0YXRlLlwiKTtcblx0fVxuXHQvLyBzMC5lZGdlcyBpcyBuZXZlciBudWxsIGZvciBhIHByZWNlZGVuY2UgREZBXG5cdGlmIChwcmVjZWRlbmNlIDwgMCB8fCBwcmVjZWRlbmNlID49IHRoaXMuczAuZWRnZXMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0cmV0dXJuIHRoaXMuczAuZWRnZXNbcHJlY2VkZW5jZV0gfHwgbnVsbDtcbn07XG5cbi8vIFNldCB0aGUgc3RhcnQgc3RhdGUgZm9yIGEgc3BlY2lmaWMgcHJlY2VkZW5jZSB2YWx1ZS5cbi8vXG4vLyBAcGFyYW0gcHJlY2VkZW5jZSBUaGUgY3VycmVudCBwcmVjZWRlbmNlLlxuLy8gQHBhcmFtIHN0YXJ0U3RhdGUgVGhlIHN0YXJ0IHN0YXRlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZFxuLy8gcHJlY2VkZW5jZS5cbi8vXG4vLyBAdGhyb3dzIElsbGVnYWxTdGF0ZUV4Y2VwdGlvbiBpZiB0aGlzIGlzIG5vdCBhIHByZWNlZGVuY2UgREZBLlxuLy8gQHNlZSAvL2lzUHJlY2VkZW5jZURmYSgpXG4vL1xuREZBLnByb3RvdHlwZS5zZXRQcmVjZWRlbmNlU3RhcnRTdGF0ZSA9IGZ1bmN0aW9uKHByZWNlZGVuY2UsIHN0YXJ0U3RhdGUpIHtcblx0aWYgKCEodGhpcy5wcmVjZWRlbmNlRGZhKSkge1xuXHRcdHRocm93IChcIk9ubHkgcHJlY2VkZW5jZSBERkFzIG1heSBjb250YWluIGEgcHJlY2VkZW5jZSBzdGFydCBzdGF0ZS5cIik7XG5cdH1cblx0aWYgKHByZWNlZGVuY2UgPCAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gc3luY2hyb25pemF0aW9uIG9uIHMwIGhlcmUgaXMgb2suIHdoZW4gdGhlIERGQSBpcyB0dXJuZWQgaW50byBhXG5cdC8vIHByZWNlZGVuY2UgREZBLCBzMCB3aWxsIGJlIGluaXRpYWxpemVkIG9uY2UgYW5kIG5vdCB1cGRhdGVkIGFnYWluXG5cdC8vIHMwLmVkZ2VzIGlzIG5ldmVyIG51bGwgZm9yIGEgcHJlY2VkZW5jZSBERkFcblx0dGhpcy5zMC5lZGdlc1twcmVjZWRlbmNlXSA9IHN0YXJ0U3RhdGU7XG59O1xuXG4vL1xuLy8gU2V0cyB3aGV0aGVyIHRoaXMgaXMgYSBwcmVjZWRlbmNlIERGQS4gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBkaWZmZXJzXG4vLyBmcm9tIHRoZSBjdXJyZW50IERGQSBjb25maWd1cmF0aW9uLCB0aGUgZm9sbG93aW5nIGFjdGlvbnMgYXJlIHRha2VuO1xuLy8gb3RoZXJ3aXNlIG5vIGNoYW5nZXMgYXJlIG1hZGUgdG8gdGhlIGN1cnJlbnQgREZBLlxuLy9cbi8vIDx1bD5cbi8vIDxsaT5UaGUge0BsaW5rIC8vc3RhdGVzfSBtYXAgaXMgY2xlYXJlZDwvbGk+XG4vLyA8bGk+SWYge0Bjb2RlIHByZWNlZGVuY2VEZmF9IGlzIHtAY29kZSBmYWxzZX0sIHRoZSBpbml0aWFsIHN0YXRlXG4vLyB7QGxpbmsgLy9zMH0gaXMgc2V0IHRvIHtAY29kZSBudWxsfTsgb3RoZXJ3aXNlLCBpdCBpcyBpbml0aWFsaXplZCB0byBhIG5ld1xuLy8ge0BsaW5rIERGQVN0YXRlfSB3aXRoIGFuIGVtcHR5IG91dGdvaW5nIHtAbGluayBERkFTdGF0ZS8vZWRnZXN9IGFycmF5IHRvXG4vLyBzdG9yZSB0aGUgc3RhcnQgc3RhdGVzIGZvciBpbmRpdmlkdWFsIHByZWNlZGVuY2UgdmFsdWVzLjwvbGk+XG4vLyA8bGk+VGhlIHtAbGluayAvL3ByZWNlZGVuY2VEZmF9IGZpZWxkIGlzIHVwZGF0ZWQ8L2xpPlxuLy8gPC91bD5cbi8vXG4vLyBAcGFyYW0gcHJlY2VkZW5jZURmYSB7QGNvZGUgdHJ1ZX0gaWYgdGhpcyBpcyBhIHByZWNlZGVuY2UgREZBOyBvdGhlcndpc2UsXG4vLyB7QGNvZGUgZmFsc2V9XG5cbkRGQS5wcm90b3R5cGUuc2V0UHJlY2VkZW5jZURmYSA9IGZ1bmN0aW9uKHByZWNlZGVuY2VEZmEpIHtcblx0aWYgKHRoaXMucHJlY2VkZW5jZURmYSE9PXByZWNlZGVuY2VEZmEpIHtcblx0XHR0aGlzLl9zdGF0ZXMgPSBuZXcgREZBU3RhdGVzU2V0KCk7XG5cdFx0aWYgKHByZWNlZGVuY2VEZmEpIHtcblx0XHRcdHZhciBwcmVjZWRlbmNlU3RhdGUgPSBuZXcgREZBU3RhdGUobnVsbCwgbmV3IEFUTkNvbmZpZ1NldCgpKTtcblx0XHRcdHByZWNlZGVuY2VTdGF0ZS5lZGdlcyA9IFtdO1xuXHRcdFx0cHJlY2VkZW5jZVN0YXRlLmlzQWNjZXB0U3RhdGUgPSBmYWxzZTtcblx0XHRcdHByZWNlZGVuY2VTdGF0ZS5yZXF1aXJlc0Z1bGxDb250ZXh0ID0gZmFsc2U7XG5cdFx0XHR0aGlzLnMwID0gcHJlY2VkZW5jZVN0YXRlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnMwID0gbnVsbDtcblx0XHR9XG5cdFx0dGhpcy5wcmVjZWRlbmNlRGZhID0gcHJlY2VkZW5jZURmYTtcblx0fVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERGQS5wcm90b3R5cGUsIFwic3RhdGVzXCIsIHtcblx0Z2V0IDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3N0YXRlcztcblx0fVxufSk7XG5cbi8vIFJldHVybiBhIGxpc3Qgb2YgYWxsIHN0YXRlcyBpbiB0aGlzIERGQSwgb3JkZXJlZCBieSBzdGF0ZSBudW1iZXIuXG5ERkEucHJvdG90eXBlLnNvcnRlZFN0YXRlcyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgbGlzdCA9IHRoaXMuX3N0YXRlcy52YWx1ZXMoKTtcblx0cmV0dXJuIGxpc3Quc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuIGEuc3RhdGVOdW1iZXIgLSBiLnN0YXRlTnVtYmVyO1xuXHR9KTtcbn07XG5cbkRGQS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihsaXRlcmFsTmFtZXMsIHN5bWJvbGljTmFtZXMpIHtcblx0bGl0ZXJhbE5hbWVzID0gbGl0ZXJhbE5hbWVzIHx8IG51bGw7XG5cdHN5bWJvbGljTmFtZXMgPSBzeW1ib2xpY05hbWVzIHx8IG51bGw7XG5cdGlmICh0aGlzLnMwID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0dmFyIHNlcmlhbGl6ZXIgPSBuZXcgREZBU2VyaWFsaXplcih0aGlzLCBsaXRlcmFsTmFtZXMsIHN5bWJvbGljTmFtZXMpO1xuXHRyZXR1cm4gc2VyaWFsaXplci50b1N0cmluZygpO1xufTtcblxuREZBLnByb3RvdHlwZS50b0xleGVyU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdGlmICh0aGlzLnMwID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0dmFyIHNlcmlhbGl6ZXIgPSBuZXcgTGV4ZXJERkFTZXJpYWxpemVyKHRoaXMpO1xuXHRyZXR1cm4gc2VyaWFsaXplci50b1N0cmluZygpO1xufTtcblxuZXhwb3J0cy5ERkEgPSBERkE7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFBQTs7OztBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/dfa/DFA.js\n");

/***/ }),

/***/ "./node_modules/antlr4/dfa/DFASerializer.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/dfa/DFASerializer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// A DFA walker that knows how to dump them to serialized strings.#/\nfunction DFASerializer(dfa, literalNames, symbolicNames) {\n  this.dfa = dfa;\n  this.literalNames = literalNames || [];\n  this.symbolicNames = symbolicNames || [];\n  return this;\n}\n\nDFASerializer.prototype.toString = function () {\n  if (this.dfa.s0 === null) {\n    return null;\n  }\n\n  var buf = \"\";\n  var states = this.dfa.sortedStates();\n\n  for (var i = 0; i < states.length; i++) {\n    var s = states[i];\n\n    if (s.edges !== null) {\n      var n = s.edges.length;\n\n      for (var j = 0; j < n; j++) {\n        var t = s.edges[j] || null;\n\n        if (t !== null && t.stateNumber !== 0x7FFFFFFF) {\n          buf = buf.concat(this.getStateString(s));\n          buf = buf.concat(\"-\");\n          buf = buf.concat(this.getEdgeLabel(j));\n          buf = buf.concat(\"->\");\n          buf = buf.concat(this.getStateString(t));\n          buf = buf.concat('\\n');\n        }\n      }\n    }\n  }\n\n  return buf.length === 0 ? null : buf;\n};\n\nDFASerializer.prototype.getEdgeLabel = function (i) {\n  if (i === 0) {\n    return \"EOF\";\n  } else if (this.literalNames !== null || this.symbolicNames !== null) {\n    return this.literalNames[i - 1] || this.symbolicNames[i - 1];\n  } else {\n    return String.fromCharCode(i - 1);\n  }\n};\n\nDFASerializer.prototype.getStateString = function (s) {\n  var baseStateStr = (s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + (s.requiresFullContext ? \"^\" : \"\");\n\n  if (s.isAcceptState) {\n    if (s.predicates !== null) {\n      return baseStateStr + \"=>\" + s.predicates.toString();\n    } else {\n      return baseStateStr + \"=>\" + s.prediction.toString();\n    }\n  } else {\n    return baseStateStr;\n  }\n};\n\nfunction LexerDFASerializer(dfa) {\n  DFASerializer.call(this, dfa, null);\n  return this;\n}\n\nLexerDFASerializer.prototype = Object.create(DFASerializer.prototype);\nLexerDFASerializer.prototype.constructor = LexerDFASerializer;\n\nLexerDFASerializer.prototype.getEdgeLabel = function (i) {\n  return \"'\" + String.fromCharCode(i) + \"'\";\n};\n\nexports.DFASerializer = DFASerializer;\nexports.LexerDFASerializer = LexerDFASerializer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2RmYS9ERkFTZXJpYWxpemVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9kZmEvREZBU2VyaWFsaXplci5qcz9lZWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuLy8gQSBERkEgd2Fsa2VyIHRoYXQga25vd3MgaG93IHRvIGR1bXAgdGhlbSB0byBzZXJpYWxpemVkIHN0cmluZ3MuIy9cblxuXG5mdW5jdGlvbiBERkFTZXJpYWxpemVyKGRmYSwgbGl0ZXJhbE5hbWVzLCBzeW1ib2xpY05hbWVzKSB7XG5cdHRoaXMuZGZhID0gZGZhO1xuXHR0aGlzLmxpdGVyYWxOYW1lcyA9IGxpdGVyYWxOYW1lcyB8fCBbXTtcblx0dGhpcy5zeW1ib2xpY05hbWVzID0gc3ltYm9saWNOYW1lcyB8fCBbXTtcblx0cmV0dXJuIHRoaXM7XG59XG5cbkRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICBpZih0aGlzLmRmYS5zMCA9PT0gbnVsbCkge1xuICAgICAgIHJldHVybiBudWxsO1xuICAgfVxuICAgdmFyIGJ1ZiA9IFwiXCI7XG4gICB2YXIgc3RhdGVzID0gdGhpcy5kZmEuc29ydGVkU3RhdGVzKCk7XG4gICBmb3IodmFyIGk9MDtpPHN0YXRlcy5sZW5ndGg7aSsrKSB7XG4gICAgICAgdmFyIHMgPSBzdGF0ZXNbaV07XG4gICAgICAgaWYocy5lZGdlcyE9PW51bGwpIHtcbiAgICAgICAgICAgIHZhciBuID0gcy5lZGdlcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IodmFyIGo9MDtqPG47aisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSBzLmVkZ2VzW2pdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgaWYodCE9PW51bGwgJiYgdC5zdGF0ZU51bWJlciAhPT0gMHg3RkZGRkZGRikge1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KHRoaXMuZ2V0U3RhdGVTdHJpbmcocykpO1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdCh0aGlzLmdldEVkZ2VMYWJlbChqKSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQoXCItPlwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdCh0aGlzLmdldFN0YXRlU3RyaW5nKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgIH1cbiAgIH1cbiAgIHJldHVybiBidWYubGVuZ3RoPT09MCA/IG51bGwgOiBidWY7XG59O1xuXG5ERkFTZXJpYWxpemVyLnByb3RvdHlwZS5nZXRFZGdlTGFiZWwgPSBmdW5jdGlvbihpKSB7XG4gICAgaWYgKGk9PT0wKSB7XG4gICAgICAgIHJldHVybiBcIkVPRlwiO1xuICAgIH0gZWxzZSBpZih0aGlzLmxpdGVyYWxOYW1lcyAhPT1udWxsIHx8IHRoaXMuc3ltYm9saWNOYW1lcyE9PW51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbE5hbWVzW2ktMV0gfHwgdGhpcy5zeW1ib2xpY05hbWVzW2ktMV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoaS0xKTtcbiAgICB9XG59O1xuXG5ERkFTZXJpYWxpemVyLnByb3RvdHlwZS5nZXRTdGF0ZVN0cmluZyA9IGZ1bmN0aW9uKHMpIHtcbiAgICB2YXIgYmFzZVN0YXRlU3RyID0gKCBzLmlzQWNjZXB0U3RhdGUgPyBcIjpcIiA6IFwiXCIpICsgXCJzXCIgKyBzLnN0YXRlTnVtYmVyICsgKCBzLnJlcXVpcmVzRnVsbENvbnRleHQgPyBcIl5cIiA6IFwiXCIpO1xuICAgIGlmKHMuaXNBY2NlcHRTdGF0ZSkge1xuICAgICAgICBpZiAocy5wcmVkaWNhdGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZVN0YXRlU3RyICsgXCI9PlwiICsgcy5wcmVkaWNhdGVzLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZVN0YXRlU3RyICsgXCI9PlwiICsgcy5wcmVkaWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYmFzZVN0YXRlU3RyO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIExleGVyREZBU2VyaWFsaXplcihkZmEpIHtcblx0REZBU2VyaWFsaXplci5jYWxsKHRoaXMsIGRmYSwgbnVsbCk7XG5cdHJldHVybiB0aGlzO1xufVxuXG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShERkFTZXJpYWxpemVyLnByb3RvdHlwZSk7XG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGV4ZXJERkFTZXJpYWxpemVyO1xuXG5MZXhlckRGQVNlcmlhbGl6ZXIucHJvdG90eXBlLmdldEVkZ2VMYWJlbCA9IGZ1bmN0aW9uKGkpIHtcblx0cmV0dXJuIFwiJ1wiICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKSArIFwiJ1wiO1xufTtcblxuZXhwb3J0cy5ERkFTZXJpYWxpemVyID0gREZBU2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJERkFTZXJpYWxpemVyID0gTGV4ZXJERkFTZXJpYWxpemVyO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/dfa/DFASerializer.js\n");

/***/ }),

/***/ "./node_modules/antlr4/dfa/DFAState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/dfa/DFAState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\nvar ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"./node_modules/antlr4/atn/ATNConfigSet.js\").ATNConfigSet;\n\nvar Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\");\n\nvar Hash = Utils.Hash;\nvar Set = Utils.Set; // Map a predicate to a predicted alternative.///\n\nfunction PredPrediction(pred, alt) {\n  this.alt = alt;\n  this.pred = pred;\n  return this;\n}\n\nPredPrediction.prototype.toString = function () {\n  return \"(\" + this.pred + \", \" + this.alt + \")\";\n}; // A DFA state represents a set of possible ATN configurations.\n// As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n// to keep track of all possible states the ATN can be in after\n// reading each input symbol. That is to say, after reading\n// input a1a2..an, the DFA is in a state that represents the\n// subset T of the states of the ATN that are reachable from the\n// ATN's start state along some path labeled a1a2..an.\"\n// In conventional NFA&rarr;DFA conversion, therefore, the subset T\n// would be a bitset representing the set of states the\n// ATN could be in. We need to track the alt predicted by each\n// state as well, however. More importantly, we need to maintain\n// a stack of states, tracking the closure operations as they\n// jump from rule to rule, emulating rule invocations (method calls).\n// I have to add a stack to simulate the proper lookahead sequences for\n// the underlying LL grammar from which the ATN was derived.\n//\n// <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n// is both a state (ala normal conversion) and a RuleContext describing\n// the chain of rules (if any) followed to arrive at that state.</p>\n//\n// <p>A DFA state may have multiple references to a particular state,\n// but with different ATN contexts (with same or different alts)\n// meaning that state was reached via a different set of rule invocations.</p>\n// /\n\n\nfunction DFAState(stateNumber, configs) {\n  if (stateNumber === null) {\n    stateNumber = -1;\n  }\n\n  if (configs === null) {\n    configs = new ATNConfigSet();\n  }\n\n  this.stateNumber = stateNumber;\n  this.configs = configs; // {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n  // {@link Token//EOF} maps to {@code edges[0]}.\n\n  this.edges = null;\n  this.isAcceptState = false; // if accept state, what ttype do we match or alt do we predict?\n  // This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link\n  // //predicates}{@code !=null} or\n  // {@link //requiresFullContext}.\n\n  this.prediction = 0;\n  this.lexerActionExecutor = null; // Indicates that this state was created during SLL prediction that\n  // discovered a conflict between the configurations in the state. Future\n  // {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n  // full context prediction if this field is true.\n\n  this.requiresFullContext = false; // During SLL parsing, this is a list of predicates associated with the\n  // ATN configurations of the DFA state. When we have predicates,\n  // {@link //requiresFullContext} is {@code false} since full context\n  // prediction evaluates predicates\n  // on-the-fly. If this is not null, then {@link //prediction} is\n  // {@link ATN//INVALID_ALT_NUMBER}.\n  //\n  // <p>We only use these for non-{@link //requiresFullContext} but\n  // conflicting states. That\n  // means we know from the context (it's $ or we don't dip into outer\n  // context) that it's an ambiguity not a conflict.</p>\n  //\n  // <p>This list is computed by {@link\n  // ParserATNSimulator//predicateDFAState}.</p>\n\n  this.predicates = null;\n  return this;\n} // Get the set of all alts mentioned by all ATN configurations in this\n// DFA state.\n\n\nDFAState.prototype.getAltSet = function () {\n  var alts = new Set();\n\n  if (this.configs !== null) {\n    for (var i = 0; i < this.configs.length; i++) {\n      var c = this.configs[i];\n      alts.add(c.alt);\n    }\n  }\n\n  if (alts.length === 0) {\n    return null;\n  } else {\n    return alts;\n  }\n}; // Two {@link DFAState} instances are equal if their ATN configuration sets\n// are the same. This method is used to see if a state already exists.\n//\n// <p>Because the number of alternatives and number of ATN configurations are\n// finite, there is a finite number of DFA states that can be processed.\n// This is necessary to show that the algorithm terminates.</p>\n//\n// <p>Cannot test the DFA state numbers here because in\n// {@link ParserATNSimulator//addDFAState} we need to know if any other state\n// exists that has this exact set of ATN configurations. The\n// {@link //stateNumber} is irrelevant.</p>\n\n\nDFAState.prototype.equals = function (other) {\n  // compare set of ATN configurations in this set with other\n  return this === other || other instanceof DFAState && this.configs.equals(other.configs);\n};\n\nDFAState.prototype.toString = function () {\n  var s = \"\" + this.stateNumber + \":\" + this.configs;\n\n  if (this.isAcceptState) {\n    s = s + \"=>\";\n    if (this.predicates !== null) s = s + this.predicates;else s = s + this.prediction;\n  }\n\n  return s;\n};\n\nDFAState.prototype.hashCode = function () {\n  var hash = new Hash();\n  hash.update(this.configs);\n  return hash.finish();\n};\n\nexports.DFAState = DFAState;\nexports.PredPrediction = PredPrediction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/dfa/DFAState.js\n");

/***/ }),

/***/ "./node_modules/antlr4/dfa/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/dfa/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.DFA = __webpack_require__(/*! ./DFA */ \"./node_modules/antlr4/dfa/DFA.js\").DFA;\nexports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/dfa/DFASerializer.js\").DFASerializer;\nexports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/dfa/DFASerializer.js\").LexerDFASerializer;\nexports.PredPrediction = __webpack_require__(/*! ./DFAState */ \"./node_modules/antlr4/dfa/DFAState.js\").PredPrediction;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2RmYS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRscjQvZGZhL2luZGV4LmpzPzFmZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5leHBvcnRzLkRGQSA9IHJlcXVpcmUoJy4vREZBJykuREZBO1xuZXhwb3J0cy5ERkFTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9ERkFTZXJpYWxpemVyJykuREZBU2VyaWFsaXplcjtcbmV4cG9ydHMuTGV4ZXJERkFTZXJpYWxpemVyID0gcmVxdWlyZSgnLi9ERkFTZXJpYWxpemVyJykuTGV4ZXJERkFTZXJpYWxpemVyO1xuZXhwb3J0cy5QcmVkUHJlZGljdGlvbiA9IHJlcXVpcmUoJy4vREZBU3RhdGUnKS5QcmVkUHJlZGljdGlvbjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/dfa/index.js\n");

/***/ }),

/***/ "./node_modules/antlr4/error/DiagnosticErrorListener.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/error/DiagnosticErrorListener.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This implementation of {@link ANTLRErrorListener} can be used to identify\n// certain potential correctness and performance problems in grammars. \"Reports\"\n// are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n// message.\n//\n// <ul>\n// <li><b>Ambiguities</b>: These are cases where more than one path through the\n// grammar can match the input.</li>\n// <li><b>Weak context sensitivity</b>: These are cases where full-context\n// prediction resolved an SLL conflict to a unique alternative which equaled the\n// minimum alternative of the SLL conflict.</li>\n// <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n// full-context prediction resolved an SLL conflict to a unique alternative,\n// <em>and</em> the minimum alternative of the SLL conflict was found to not be\n// a truly viable alternative. Two-stage parsing cannot be used for inputs where\n// this situation occurs.</li>\n// </ul>\nvar BitSet = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\").BitSet;\n\nvar ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"./node_modules/antlr4/error/ErrorListener.js\").ErrorListener;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nfunction DiagnosticErrorListener(exactOnly) {\n  ErrorListener.call(this);\n  exactOnly = exactOnly || true; // whether all ambiguities or only exact ambiguities are reported.\n\n  this.exactOnly = exactOnly;\n  return this;\n}\n\nDiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);\nDiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;\n\nDiagnosticErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n  if (this.exactOnly && !exact) {\n    return;\n  }\n\n  var msg = \"reportAmbiguity d=\" + this.getDecisionDescription(recognizer, dfa) + \": ambigAlts=\" + this.getConflictingAlts(ambigAlts, configs) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n  recognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n  var msg = \"reportAttemptingFullContext d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n  recognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n  var msg = \"reportContextSensitivity d=\" + this.getDecisionDescription(recognizer, dfa) + \", input='\" + recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n  recognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.getDecisionDescription = function (recognizer, dfa) {\n  var decision = dfa.decision;\n  var ruleIndex = dfa.atnStartState.ruleIndex;\n  var ruleNames = recognizer.ruleNames;\n\n  if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n    return \"\" + decision;\n  }\n\n  var ruleName = ruleNames[ruleIndex] || null;\n\n  if (ruleName === null || ruleName.length === 0) {\n    return \"\" + decision;\n  }\n\n  return \"\" + decision + \" (\" + ruleName + \")\";\n}; //\n// Computes the set of conflicting or ambiguous alternatives from a\n// configuration set, if that information was not already provided by the\n// parser.\n//\n// @param reportedAlts The set of conflicting or ambiguous alternatives, as\n// reported by the parser.\n// @param configs The conflicting or ambiguous configuration set.\n// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n// returns the set of alternatives represented in {@code configs}.\n//\n\n\nDiagnosticErrorListener.prototype.getConflictingAlts = function (reportedAlts, configs) {\n  if (reportedAlts !== null) {\n    return reportedAlts;\n  }\n\n  var result = new BitSet();\n\n  for (var i = 0; i < configs.items.length; i++) {\n    result.add(configs.items[i].alt);\n  }\n\n  return \"{\" + result.values().join(\", \") + \"}\";\n};\n\nexports.DiagnosticErrorListener = DiagnosticErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2Vycm9yL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9lcnJvci9EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5qcz9lYzhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG4vKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG4vL1xuXG4vL1xuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvckxpc3RlbmVyfSBjYW4gYmUgdXNlZCB0byBpZGVudGlmeVxuLy8gY2VydGFpbiBwb3RlbnRpYWwgY29ycmVjdG5lc3MgYW5kIHBlcmZvcm1hbmNlIHByb2JsZW1zIGluIGdyYW1tYXJzLiBcIlJlcG9ydHNcIlxuLy8gYXJlIG1hZGUgYnkgY2FsbGluZyB7QGxpbmsgUGFyc2VyLy9ub3RpZnlFcnJvckxpc3RlbmVyc30gd2l0aCB0aGUgYXBwcm9wcmlhdGVcbi8vIG1lc3NhZ2UuXG4vL1xuLy8gPHVsPlxuLy8gPGxpPjxiPkFtYmlndWl0aWVzPC9iPjogVGhlc2UgYXJlIGNhc2VzIHdoZXJlIG1vcmUgdGhhbiBvbmUgcGF0aCB0aHJvdWdoIHRoZVxuLy8gZ3JhbW1hciBjYW4gbWF0Y2ggdGhlIGlucHV0LjwvbGk+XG4vLyA8bGk+PGI+V2VhayBjb250ZXh0IHNlbnNpdGl2aXR5PC9iPjogVGhlc2UgYXJlIGNhc2VzIHdoZXJlIGZ1bGwtY29udGV4dFxuLy8gcHJlZGljdGlvbiByZXNvbHZlZCBhbiBTTEwgY29uZmxpY3QgdG8gYSB1bmlxdWUgYWx0ZXJuYXRpdmUgd2hpY2ggZXF1YWxlZCB0aGVcbi8vIG1pbmltdW0gYWx0ZXJuYXRpdmUgb2YgdGhlIFNMTCBjb25mbGljdC48L2xpPlxuLy8gPGxpPjxiPlN0cm9uZyAoZm9yY2VkKSBjb250ZXh0IHNlbnNpdGl2aXR5PC9iPjogVGhlc2UgYXJlIGNhc2VzIHdoZXJlIHRoZVxuLy8gZnVsbC1jb250ZXh0IHByZWRpY3Rpb24gcmVzb2x2ZWQgYW4gU0xMIGNvbmZsaWN0IHRvIGEgdW5pcXVlIGFsdGVybmF0aXZlLFxuLy8gPGVtPmFuZDwvZW0+IHRoZSBtaW5pbXVtIGFsdGVybmF0aXZlIG9mIHRoZSBTTEwgY29uZmxpY3Qgd2FzIGZvdW5kIHRvIG5vdCBiZVxuLy8gYSB0cnVseSB2aWFibGUgYWx0ZXJuYXRpdmUuIFR3by1zdGFnZSBwYXJzaW5nIGNhbm5vdCBiZSB1c2VkIGZvciBpbnB1dHMgd2hlcmVcbi8vIHRoaXMgc2l0dWF0aW9uIG9jY3Vycy48L2xpPlxuLy8gPC91bD5cblxudmFyIEJpdFNldCA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKS5CaXRTZXQ7XG52YXIgRXJyb3JMaXN0ZW5lciA9IHJlcXVpcmUoJy4vRXJyb3JMaXN0ZW5lcicpLkVycm9yTGlzdGVuZXI7XG52YXIgSW50ZXJ2YWwgPSByZXF1aXJlKCcuLy4uL0ludGVydmFsU2V0JykuSW50ZXJ2YWw7XG5cbmZ1bmN0aW9uIERpYWdub3N0aWNFcnJvckxpc3RlbmVyKGV4YWN0T25seSkge1xuXHRFcnJvckxpc3RlbmVyLmNhbGwodGhpcyk7XG5cdGV4YWN0T25seSA9IGV4YWN0T25seSB8fCB0cnVlO1xuXHQvLyB3aGV0aGVyIGFsbCBhbWJpZ3VpdGllcyBvciBvbmx5IGV4YWN0IGFtYmlndWl0aWVzIGFyZSByZXBvcnRlZC5cblx0dGhpcy5leGFjdE9ubHkgPSBleGFjdE9ubHk7XG5cdHJldHVybiB0aGlzO1xufVxuXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yTGlzdGVuZXIucHJvdG90eXBlKTtcbkRpYWdub3N0aWNFcnJvckxpc3RlbmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpYWdub3N0aWNFcnJvckxpc3RlbmVyO1xuXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0QW1iaWd1aXR5ID0gZnVuY3Rpb24ocmVjb2duaXplciwgZGZhLFxuXHRcdHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuXHRpZiAodGhpcy5leGFjdE9ubHkgJiYgIWV4YWN0KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBtc2cgPSBcInJlcG9ydEFtYmlndWl0eSBkPVwiICtcblx0XHRcdHRoaXMuZ2V0RGVjaXNpb25EZXNjcmlwdGlvbihyZWNvZ25pemVyLCBkZmEpICtcblx0XHRcdFwiOiBhbWJpZ0FsdHM9XCIgK1xuXHRcdFx0dGhpcy5nZXRDb25mbGljdGluZ0FsdHMoYW1iaWdBbHRzLCBjb25maWdzKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiO1xuXHRyZWNvZ25pemVyLm5vdGlmeUVycm9yTGlzdGVuZXJzKG1zZyk7XG59O1xuXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0ID0gZnVuY3Rpb24oXG5cdFx0cmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuXHR2YXIgbXNnID0gXCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiO1xuXHRyZWNvZ25pemVyLm5vdGlmeUVycm9yTGlzdGVuZXJzKG1zZyk7XG59O1xuXG5EaWFnbm9zdGljRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5ID0gZnVuY3Rpb24oXG5cdFx0cmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHByZWRpY3Rpb24sIGNvbmZpZ3MpIHtcblx0dmFyIG1zZyA9IFwicmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5IGQ9XCIgK1xuXHRcdFx0dGhpcy5nZXREZWNpc2lvbkRlc2NyaXB0aW9uKHJlY29nbml6ZXIsIGRmYSkgK1xuXHRcdFx0XCIsIGlucHV0PSdcIiArXG5cdFx0XHRyZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChuZXcgSW50ZXJ2YWwoc3RhcnRJbmRleCwgc3RvcEluZGV4KSkgKyBcIidcIjtcblx0cmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2cpO1xufTtcblxuRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIucHJvdG90eXBlLmdldERlY2lzaW9uRGVzY3JpcHRpb24gPSBmdW5jdGlvbihyZWNvZ25pemVyLCBkZmEpIHtcblx0dmFyIGRlY2lzaW9uID0gZGZhLmRlY2lzaW9uO1xuXHR2YXIgcnVsZUluZGV4ID0gZGZhLmF0blN0YXJ0U3RhdGUucnVsZUluZGV4O1xuXG5cdHZhciBydWxlTmFtZXMgPSByZWNvZ25pemVyLnJ1bGVOYW1lcztcblx0aWYgKHJ1bGVJbmRleCA8IDAgfHwgcnVsZUluZGV4ID49IHJ1bGVOYW1lcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gXCJcIiArIGRlY2lzaW9uO1xuXHR9XG5cdHZhciBydWxlTmFtZSA9IHJ1bGVOYW1lc1tydWxlSW5kZXhdIHx8IG51bGw7XG5cdGlmIChydWxlTmFtZSA9PT0gbnVsbCB8fCBydWxlTmFtZS5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gXCJcIiArIGRlY2lzaW9uO1xuXHR9XG5cdHJldHVybiBcIlwiICsgZGVjaXNpb24gKyBcIiAoXCIgKyBydWxlTmFtZSArIFwiKVwiO1xufTtcblxuLy9cbi8vIENvbXB1dGVzIHRoZSBzZXQgb2YgY29uZmxpY3Rpbmcgb3IgYW1iaWd1b3VzIGFsdGVybmF0aXZlcyBmcm9tIGFcbi8vIGNvbmZpZ3VyYXRpb24gc2V0LCBpZiB0aGF0IGluZm9ybWF0aW9uIHdhcyBub3QgYWxyZWFkeSBwcm92aWRlZCBieSB0aGVcbi8vIHBhcnNlci5cbi8vXG4vLyBAcGFyYW0gcmVwb3J0ZWRBbHRzIFRoZSBzZXQgb2YgY29uZmxpY3Rpbmcgb3IgYW1iaWd1b3VzIGFsdGVybmF0aXZlcywgYXNcbi8vIHJlcG9ydGVkIGJ5IHRoZSBwYXJzZXIuXG4vLyBAcGFyYW0gY29uZmlncyBUaGUgY29uZmxpY3Rpbmcgb3IgYW1iaWd1b3VzIGNvbmZpZ3VyYXRpb24gc2V0LlxuLy8gQHJldHVybiBSZXR1cm5zIHtAY29kZSByZXBvcnRlZEFsdHN9IGlmIGl0IGlzIG5vdCB7QGNvZGUgbnVsbH0sIG90aGVyd2lzZVxuLy8gcmV0dXJucyB0aGUgc2V0IG9mIGFsdGVybmF0aXZlcyByZXByZXNlbnRlZCBpbiB7QGNvZGUgY29uZmlnc30uXG4vL1xuRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIucHJvdG90eXBlLmdldENvbmZsaWN0aW5nQWx0cyA9IGZ1bmN0aW9uKHJlcG9ydGVkQWx0cywgY29uZmlncykge1xuXHRpZiAocmVwb3J0ZWRBbHRzICE9PSBudWxsKSB7XG5cdFx0cmV0dXJuIHJlcG9ydGVkQWx0cztcblx0fVxuXHR2YXIgcmVzdWx0ID0gbmV3IEJpdFNldCgpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZ3MuaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRyZXN1bHQuYWRkKGNvbmZpZ3MuaXRlbXNbaV0uYWx0KTtcblx0fVxuXHRyZXR1cm4gXCJ7XCIgKyByZXN1bHQudmFsdWVzKCkuam9pbihcIiwgXCIpICsgXCJ9XCI7XG59O1xuXG5leHBvcnRzLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyID0gRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQUE7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/error/DiagnosticErrorListener.js\n");

/***/ }),

/***/ "./node_modules/antlr4/error/ErrorListener.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorListener.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// Provides an empty default implementation of {@link ANTLRErrorListener}. The\n// default implementation of each method does nothing, but can be overridden as\n// necessary.\nfunction ErrorListener() {\n  return this;\n}\n\nErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {};\n\nErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {};\n\nErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {};\n\nErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {};\n\nfunction ConsoleErrorListener() {\n  ErrorListener.call(this);\n  return this;\n}\n\nConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);\nConsoleErrorListener.prototype.constructor = ConsoleErrorListener; //\n// Provides a default instance of {@link ConsoleErrorListener}.\n//\n\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener(); //\n// {@inheritDoc}\n//\n// <p>\n// This implementation prints messages to {@link System//err} containing the\n// values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n// the following format.</p>\n//\n// <pre>\n// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n// </pre>\n//\n\nConsoleErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n  console.error(\"line \" + line + \":\" + column + \" \" + msg);\n};\n\nfunction ProxyErrorListener(delegates) {\n  ErrorListener.call(this);\n\n  if (delegates === null) {\n    throw \"delegates\";\n  }\n\n  this.delegates = delegates;\n  return this;\n}\n\nProxyErrorListener.prototype = Object.create(ErrorListener.prototype);\nProxyErrorListener.prototype.constructor = ProxyErrorListener;\n\nProxyErrorListener.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {\n  this.delegates.map(function (d) {\n    d.syntaxError(recognizer, offendingSymbol, line, column, msg, e);\n  });\n};\n\nProxyErrorListener.prototype.reportAmbiguity = function (recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n  this.delegates.map(function (d) {\n    d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n  });\n};\n\nProxyErrorListener.prototype.reportAttemptingFullContext = function (recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n  this.delegates.map(function (d) {\n    d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs);\n  });\n};\n\nProxyErrorListener.prototype.reportContextSensitivity = function (recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n  this.delegates.map(function (d) {\n    d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs);\n  });\n};\n\nexports.ErrorListener = ErrorListener;\nexports.ConsoleErrorListener = ConsoleErrorListener;\nexports.ProxyErrorListener = ProxyErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanM/MDQ3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vLyBQcm92aWRlcyBhbiBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBBTlRMUkVycm9yTGlzdGVuZXJ9LiBUaGVcbi8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgZWFjaCBtZXRob2QgZG9lcyBub3RoaW5nLCBidXQgY2FuIGJlIG92ZXJyaWRkZW4gYXNcbi8vIG5lY2Vzc2FyeS5cblxuZnVuY3Rpb24gRXJyb3JMaXN0ZW5lcigpIHtcblx0cmV0dXJuIHRoaXM7XG59XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLnN5bnRheEVycm9yID0gZnVuY3Rpb24ocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1zZywgZSkge1xufTtcblxuRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0QW1iaWd1aXR5ID0gZnVuY3Rpb24ocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpIHtcbn07XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dCA9IGZ1bmN0aW9uKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBjb25mbGljdGluZ0FsdHMsIGNvbmZpZ3MpIHtcbn07XG5cbkVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydENvbnRleHRTZW5zaXRpdml0eSA9IGZ1bmN0aW9uKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG59O1xuXG5mdW5jdGlvbiBDb25zb2xlRXJyb3JMaXN0ZW5lcigpIHtcblx0RXJyb3JMaXN0ZW5lci5jYWxsKHRoaXMpO1xuXHRyZXR1cm4gdGhpcztcbn1cblxuQ29uc29sZUVycm9yTGlzdGVuZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvckxpc3RlbmVyLnByb3RvdHlwZSk7XG5Db25zb2xlRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zb2xlRXJyb3JMaXN0ZW5lcjtcblxuLy9cbi8vIFByb3ZpZGVzIGEgZGVmYXVsdCBpbnN0YW5jZSBvZiB7QGxpbmsgQ29uc29sZUVycm9yTGlzdGVuZXJ9LlxuLy9cbkNvbnNvbGVFcnJvckxpc3RlbmVyLklOU1RBTkNFID0gbmV3IENvbnNvbGVFcnJvckxpc3RlbmVyKCk7XG5cbi8vXG4vLyB7QGluaGVyaXREb2N9XG4vL1xuLy8gPHA+XG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIHByaW50cyBtZXNzYWdlcyB0byB7QGxpbmsgU3lzdGVtLy9lcnJ9IGNvbnRhaW5pbmcgdGhlXG4vLyB2YWx1ZXMgb2Yge0Bjb2RlIGxpbmV9LCB7QGNvZGUgY2hhclBvc2l0aW9uSW5MaW5lfSwgYW5kIHtAY29kZSBtc2d9IHVzaW5nXG4vLyB0aGUgZm9sbG93aW5nIGZvcm1hdC48L3A+XG4vL1xuLy8gPHByZT5cbi8vIGxpbmUgPGVtPmxpbmU8L2VtPjo8ZW0+Y2hhclBvc2l0aW9uSW5MaW5lPC9lbT4gPGVtPm1zZzwvZW0+XG4vLyA8L3ByZT5cbi8vXG5Db25zb2xlRXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuc3ludGF4RXJyb3IgPSBmdW5jdGlvbihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKSB7XG4gICAgY29uc29sZS5lcnJvcihcImxpbmUgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4gKyBcIiBcIiArIG1zZyk7XG59O1xuXG5mdW5jdGlvbiBQcm94eUVycm9yTGlzdGVuZXIoZGVsZWdhdGVzKSB7XG5cdEVycm9yTGlzdGVuZXIuY2FsbCh0aGlzKTtcbiAgICBpZiAoZGVsZWdhdGVzPT09bnVsbCkge1xuICAgICAgICB0aHJvdyBcImRlbGVnYXRlc1wiO1xuICAgIH1cbiAgICB0aGlzLmRlbGVnYXRlcyA9IGRlbGVnYXRlcztcblx0cmV0dXJuIHRoaXM7XG59XG5cblByb3h5RXJyb3JMaXN0ZW5lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yTGlzdGVuZXIucHJvdG90eXBlKTtcblByb3h5RXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQcm94eUVycm9yTGlzdGVuZXI7XG5cblByb3h5RXJyb3JMaXN0ZW5lci5wcm90b3R5cGUuc3ludGF4RXJyb3IgPSBmdW5jdGlvbihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKSB7XG4gICAgdGhpcy5kZWxlZ2F0ZXMubWFwKGZ1bmN0aW9uKGQpIHsgZC5zeW50YXhFcnJvcihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKTsgfSk7XG59O1xuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydEFtYmlndWl0eSA9IGZ1bmN0aW9uKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBleGFjdCwgYW1iaWdBbHRzLCBjb25maWdzKSB7XG4gICAgdGhpcy5kZWxlZ2F0ZXMubWFwKGZ1bmN0aW9uKGQpIHsgZC5yZXBvcnRBbWJpZ3VpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpOyB9KTtcbn07XG5cblByb3h5RXJyb3JMaXN0ZW5lci5wcm90b3R5cGUucmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0ID0gZnVuY3Rpb24ocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuXHR0aGlzLmRlbGVnYXRlcy5tYXAoZnVuY3Rpb24oZCkgeyBkLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKTsgfSk7XG59O1xuXG5Qcm94eUVycm9yTGlzdGVuZXIucHJvdG90eXBlLnJlcG9ydENvbnRleHRTZW5zaXRpdml0eSA9IGZ1bmN0aW9uKHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG5cdHRoaXMuZGVsZWdhdGVzLm1hcChmdW5jdGlvbihkKSB7IGQucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKTsgfSk7XG59O1xuXG5leHBvcnRzLkVycm9yTGlzdGVuZXIgPSBFcnJvckxpc3RlbmVyO1xuZXhwb3J0cy5Db25zb2xlRXJyb3JMaXN0ZW5lciA9IENvbnNvbGVFcnJvckxpc3RlbmVyO1xuZXhwb3J0cy5Qcm94eUVycm9yTGlzdGVuZXIgPSBQcm94eUVycm9yTGlzdGVuZXI7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUFBOzs7O0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/error/ErrorListener.js\n");

/***/ }),

/***/ "./node_modules/antlr4/error/ErrorStrategy.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorStrategy.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Errors = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\");\n\nvar NoViableAltException = Errors.NoViableAltException;\nvar InputMismatchException = Errors.InputMismatchException;\nvar FailedPredicateException = Errors.FailedPredicateException;\nvar ParseCancellationException = Errors.ParseCancellationException;\n\nvar ATNState = __webpack_require__(/*! ./../atn/ATNState */ \"./node_modules/antlr4/atn/ATNState.js\").ATNState;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar IntervalSet = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").IntervalSet;\n\nfunction ErrorStrategy() {}\n\nErrorStrategy.prototype.reset = function (recognizer) {};\n\nErrorStrategy.prototype.recoverInline = function (recognizer) {};\n\nErrorStrategy.prototype.recover = function (recognizer, e) {};\n\nErrorStrategy.prototype.sync = function (recognizer) {};\n\nErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {};\n\nErrorStrategy.prototype.reportError = function (recognizer) {}; // This is the default implementation of {@link ANTLRErrorStrategy} used for\n// error reporting and recovery in ANTLR parsers.\n//\n\n\nfunction DefaultErrorStrategy() {\n  ErrorStrategy.call(this); // Indicates whether the error strategy is currently \"recovering from an\n  // error\". This is used to suppress reporting multiple error messages while\n  // attempting to recover from a detected syntax error.\n  //\n  // @see //inErrorRecoveryMode\n  //\n\n  this.errorRecoveryMode = false; // The index into the input stream where the last error occurred.\n  // This is used to prevent infinite loops where an error is found\n  // but no token is consumed during recovery...another error is found,\n  // ad nauseum. This is a failsafe mechanism to guarantee that at least\n  // one token/tree node is consumed for two errors.\n  //\n\n  this.lastErrorIndex = -1;\n  this.lastErrorStates = null;\n  return this;\n}\n\nDefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);\nDefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy; // <p>The default implementation simply calls {@link //endErrorCondition} to\n// ensure that the handler is not in error recovery mode.</p>\n\nDefaultErrorStrategy.prototype.reset = function (recognizer) {\n  this.endErrorCondition(recognizer);\n}; //\n// This method is called to enter error recovery mode when a recognition\n// exception is reported.\n//\n// @param recognizer the parser instance\n//\n\n\nDefaultErrorStrategy.prototype.beginErrorCondition = function (recognizer) {\n  this.errorRecoveryMode = true;\n};\n\nDefaultErrorStrategy.prototype.inErrorRecoveryMode = function (recognizer) {\n  return this.errorRecoveryMode;\n}; //\n// This method is called to leave error recovery mode after recovering from\n// a recognition exception.\n//\n// @param recognizer\n//\n\n\nDefaultErrorStrategy.prototype.endErrorCondition = function (recognizer) {\n  this.errorRecoveryMode = false;\n  this.lastErrorStates = null;\n  this.lastErrorIndex = -1;\n}; //\n// {@inheritDoc}\n//\n// <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n//\n\n\nDefaultErrorStrategy.prototype.reportMatch = function (recognizer) {\n  this.endErrorCondition(recognizer);\n}; //\n// {@inheritDoc}\n//\n// <p>The default implementation returns immediately if the handler is already\n// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n// and dispatches the reporting task based on the runtime type of {@code e}\n// according to the following table.</p>\n//\n// <ul>\n// <li>{@link NoViableAltException}: Dispatches the call to\n// {@link //reportNoViableAlternative}</li>\n// <li>{@link InputMismatchException}: Dispatches the call to\n// {@link //reportInputMismatch}</li>\n// <li>{@link FailedPredicateException}: Dispatches the call to\n// {@link //reportFailedPredicate}</li>\n// <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n// the exception</li>\n// </ul>\n//\n\n\nDefaultErrorStrategy.prototype.reportError = function (recognizer, e) {\n  // if we've already reported an error and have not matched a token\n  // yet successfully, don't report any errors.\n  if (this.inErrorRecoveryMode(recognizer)) {\n    return; // don't report spurious errors\n  }\n\n  this.beginErrorCondition(recognizer);\n\n  if (e instanceof NoViableAltException) {\n    this.reportNoViableAlternative(recognizer, e);\n  } else if (e instanceof InputMismatchException) {\n    this.reportInputMismatch(recognizer, e);\n  } else if (e instanceof FailedPredicateException) {\n    this.reportFailedPredicate(recognizer, e);\n  } else {\n    console.log(\"unknown recognition error type: \" + e.constructor.name);\n    console.log(e.stack);\n    recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n  }\n}; //\n// {@inheritDoc}\n//\n// <p>The default implementation resynchronizes the parser by consuming tokens\n// until we find one in the resynchronization set--loosely the set of tokens\n// that can follow the current rule.</p>\n//\n\n\nDefaultErrorStrategy.prototype.recover = function (recognizer, e) {\n  if (this.lastErrorIndex === recognizer.getInputStream().index && this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state) >= 0) {\n    // uh oh, another error at same token index and previously-visited\n    // state in ATN; must be a case where LT(1) is in the recovery\n    // token set so nothing got consumed. Consume a single token\n    // at least to prevent an infinite loop; this is a failsafe.\n    recognizer.consume();\n  }\n\n  this.lastErrorIndex = recognizer._input.index;\n\n  if (this.lastErrorStates === null) {\n    this.lastErrorStates = [];\n  }\n\n  this.lastErrorStates.push(recognizer.state);\n  var followSet = this.getErrorRecoverySet(recognizer);\n  this.consumeUntil(recognizer, followSet);\n}; // The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n// that the current lookahead symbol is consistent with what were expecting\n// at this point in the ATN. You can call this anytime but ANTLR only\n// generates code to check before subrules/loops and each iteration.\n//\n// <p>Implements Jim Idle's magic sync mechanism in closures and optional\n// subrules. E.g.,</p>\n//\n// <pre>\n// a : sync ( stuff sync )* ;\n// sync : {consume to what can follow sync} ;\n// </pre>\n//\n// At the start of a sub rule upon error, {@link //sync} performs single\n// token deletion, if possible. If it can't do that, it bails on the current\n// rule and uses the default error recovery, which consumes until the\n// resynchronization set of the current rule.\n//\n// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n// with an empty alternative), then the expected set includes what follows\n// the subrule.</p>\n//\n// <p>During loop iteration, it consumes until it sees a token that can start a\n// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n// stay in the loop as long as possible.</p>\n//\n// <p><strong>ORIGINS</strong></p>\n//\n// <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n// A single mismatch token or missing token would force the parser to bail\n// out of the entire rules surrounding the loop. So, for rule</p>\n//\n// <pre>\n// classDef : 'class' ID '{' member* '}'\n// </pre>\n//\n// input with an extra token between members would force the parser to\n// consume until it found the next class definition rather than the next\n// member definition of the current class.\n//\n// <p>This functionality cost a little bit of effort because the parser has to\n// compare token set at the start of the loop and at each iteration. If for\n// some reason speed is suffering for you, you can turn off this\n// functionality by simply overriding this method as a blank { }.</p>\n//\n\n\nDefaultErrorStrategy.prototype.sync = function (recognizer) {\n  // If already recovering, don't try to sync\n  if (this.inErrorRecoveryMode(recognizer)) {\n    return;\n  }\n\n  var s = recognizer._interp.atn.states[recognizer.state];\n  var la = recognizer.getTokenStream().LA(1); // try cheaper subset first; might get lucky. seems to shave a wee bit off\n\n  var nextTokens = recognizer.atn.nextTokens(s);\n\n  if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n    return;\n  }\n\n  switch (s.stateType) {\n    case ATNState.BLOCK_START:\n    case ATNState.STAR_BLOCK_START:\n    case ATNState.PLUS_BLOCK_START:\n    case ATNState.STAR_LOOP_ENTRY:\n      // report error and recover if possible\n      if (this.singleTokenDeletion(recognizer) !== null) {\n        return;\n      } else {\n        throw new InputMismatchException(recognizer);\n      }\n\n      break;\n\n    case ATNState.PLUS_LOOP_BACK:\n    case ATNState.STAR_LOOP_BACK:\n      this.reportUnwantedToken(recognizer);\n      var expecting = new IntervalSet();\n      expecting.addSet(recognizer.getExpectedTokens());\n      var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n      this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n      break;\n\n    default: // do nothing if we can't identify the exact kind of ATN state\n\n  }\n}; // This is called by {@link //reportError} when the exception is a\n// {@link NoViableAltException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\n\n\nDefaultErrorStrategy.prototype.reportNoViableAlternative = function (recognizer, e) {\n  var tokens = recognizer.getTokenStream();\n  var input;\n\n  if (tokens !== null) {\n    if (e.startToken.type === Token.EOF) {\n      input = \"<EOF>\";\n    } else {\n      input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n    }\n  } else {\n    input = \"<unknown input>\";\n  }\n\n  var msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n  recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n}; //\n// This is called by {@link //reportError} when the exception is an\n// {@link InputMismatchException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\n\n\nDefaultErrorStrategy.prototype.reportInputMismatch = function (recognizer, e) {\n  var msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) + \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n  recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n}; //\n// This is called by {@link //reportError} when the exception is a\n// {@link FailedPredicateException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\n\n\nDefaultErrorStrategy.prototype.reportFailedPredicate = function (recognizer, e) {\n  var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n  var msg = \"rule \" + ruleName + \" \" + e.message;\n  recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n}; // This method is called to report a syntax error which requires the removal\n// of a token from the input stream. At the time this method is called, the\n// erroneous symbol is current {@code LT(1)} symbol and has not yet been\n// removed from the input stream. When this method returns,\n// {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenDeletion} identifies\n// single-token deletion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\n\n\nDefaultErrorStrategy.prototype.reportUnwantedToken = function (recognizer) {\n  if (this.inErrorRecoveryMode(recognizer)) {\n    return;\n  }\n\n  this.beginErrorCondition(recognizer);\n  var t = recognizer.getCurrentToken();\n  var tokenName = this.getTokenErrorDisplay(t);\n  var expecting = this.getExpectedTokens(recognizer);\n  var msg = \"extraneous input \" + tokenName + \" expecting \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n  recognizer.notifyErrorListeners(msg, t, null);\n}; // This method is called to report a syntax error which requires the\n// insertion of a missing token into the input stream. At the time this\n// method is called, the missing token has not yet been inserted. When this\n// method returns, {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenInsertion} identifies\n// single-token insertion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\n\n\nDefaultErrorStrategy.prototype.reportMissingToken = function (recognizer) {\n  if (this.inErrorRecoveryMode(recognizer)) {\n    return;\n  }\n\n  this.beginErrorCondition(recognizer);\n  var t = recognizer.getCurrentToken();\n  var expecting = this.getExpectedTokens(recognizer);\n  var msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) + \" at \" + this.getTokenErrorDisplay(t);\n  recognizer.notifyErrorListeners(msg, t, null);\n}; // <p>The default implementation attempts to recover from the mismatched input\n// by using single token insertion and deletion as described below. If the\n// recovery attempt fails, this method throws an\n// {@link InputMismatchException}.</p>\n//\n// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n//\n// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n// right token, however, then assume {@code LA(1)} is some extra spurious\n// token and delete it. Then consume and return the next token (which was\n// the {@code LA(2)} token) as the successful result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenDeletion}.</p>\n//\n// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n//\n// <p>If current token (at {@code LA(1)}) is consistent with what could come\n// after the expected {@code LA(1)} token, then assume the token is missing\n// and use the parser's {@link TokenFactory} to create it on the fly. The\n// \"insertion\" is performed by returning the created token as the successful\n// result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenInsertion}.</p>\n//\n// <p><strong>EXAMPLE</strong></p>\n//\n// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n// the parser returns from the nested call to {@code expr}, it will have\n// call chain:</p>\n//\n// <pre>\n// stat &rarr; expr &rarr; atom\n// </pre>\n//\n// and it will be trying to match the {@code ')'} at this point in the\n// derivation:\n//\n// <pre>\n// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n// ^\n// </pre>\n//\n// The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n// is in the set of tokens that can follow the {@code ')'} token reference\n// in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n//\n\n\nDefaultErrorStrategy.prototype.recoverInline = function (recognizer) {\n  // SINGLE TOKEN DELETION\n  var matchedSymbol = this.singleTokenDeletion(recognizer);\n\n  if (matchedSymbol !== null) {\n    // we have deleted the extra token.\n    // now, move past ttype token as if all were ok\n    recognizer.consume();\n    return matchedSymbol;\n  } // SINGLE TOKEN INSERTION\n\n\n  if (this.singleTokenInsertion(recognizer)) {\n    return this.getMissingSymbol(recognizer);\n  } // even that didn't work; must throw the exception\n\n\n  throw new InputMismatchException(recognizer);\n}; //\n// This method implements the single-token insertion inline error recovery\n// strategy. It is called by {@link //recoverInline} if the single-token\n// deletion strategy fails to recover from the mismatched input. If this\n// method returns {@code true}, {@code recognizer} will be in error recovery\n// mode.\n//\n// <p>This method determines whether or not single-token insertion is viable by\n// checking if the {@code LA(1)} input symbol could be successfully matched\n// if it were instead the {@code LA(2)} symbol. If this method returns\n// {@code true}, the caller is responsible for creating and inserting a\n// token with the correct type to produce this behavior.</p>\n//\n// @param recognizer the parser instance\n// @return {@code true} if single-token insertion is a viable recovery\n// strategy for the current mismatched input, otherwise {@code false}\n//\n\n\nDefaultErrorStrategy.prototype.singleTokenInsertion = function (recognizer) {\n  var currentSymbolType = recognizer.getTokenStream().LA(1); // if current token is consistent with what could come after current\n  // ATN state, then we know we're missing a token; error recovery\n  // is free to conjure up and insert the missing token\n\n  var atn = recognizer._interp.atn;\n  var currentState = atn.states[recognizer.state];\n  var next = currentState.transitions[0].target;\n  var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n\n  if (expectingAtLL2.contains(currentSymbolType)) {\n    this.reportMissingToken(recognizer);\n    return true;\n  } else {\n    return false;\n  }\n}; // This method implements the single-token deletion inline error recovery\n// strategy. It is called by {@link //recoverInline} to attempt to recover\n// from mismatched input. If this method returns null, the parser and error\n// handler state will not have changed. If this method returns non-null,\n// {@code recognizer} will <em>not</em> be in error recovery mode since the\n// returned token was a successful match.\n//\n// <p>If the single-token deletion is successful, this method calls\n// {@link //reportUnwantedToken} to report the error, followed by\n// {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n// before returning {@link //reportMatch} is called to signal a successful\n// match.</p>\n//\n// @param recognizer the parser instance\n// @return the successfully matched {@link Token} instance if single-token\n// deletion successfully recovers from the mismatched input, otherwise\n// {@code null}\n//\n\n\nDefaultErrorStrategy.prototype.singleTokenDeletion = function (recognizer) {\n  var nextTokenType = recognizer.getTokenStream().LA(2);\n  var expecting = this.getExpectedTokens(recognizer);\n\n  if (expecting.contains(nextTokenType)) {\n    this.reportUnwantedToken(recognizer); // print(\"recoverFromMismatchedToken deleting \" \\\n    // + str(recognizer.getTokenStream().LT(1)) \\\n    // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n    // + \" is what we want\", file=sys.stderr)\n\n    recognizer.consume(); // simply delete extra token\n    // we want to return the token we're actually matching\n\n    var matchedSymbol = recognizer.getCurrentToken();\n    this.reportMatch(recognizer); // we know current token is correct\n\n    return matchedSymbol;\n  } else {\n    return null;\n  }\n}; // Conjure up a missing token during error recovery.\n//\n// The recognizer attempts to recover from single missing\n// symbols. But, actions might refer to that missing symbol.\n// For example, x=ID {f($x);}. The action clearly assumes\n// that there has been an identifier matched previously and that\n// $x points at that token. If that token is missing, but\n// the next token in the stream is what we want we assume that\n// this token is missing and we keep going. Because we\n// have to return some token to replace the missing token,\n// we have to conjure one up. This method gives the user control\n// over the tokens returned for missing tokens. Mostly,\n// you will want to create something special for identifier\n// tokens. For literals such as '{' and ',', the default\n// action in the parser or tree parser works. It simply creates\n// a CommonToken of the appropriate type. The text will be the token.\n// If you change what tokens must be created by the lexer,\n// override this method to create the appropriate tokens.\n//\n\n\nDefaultErrorStrategy.prototype.getMissingSymbol = function (recognizer) {\n  var currentSymbol = recognizer.getCurrentToken();\n  var expecting = this.getExpectedTokens(recognizer);\n  var expectedTokenType = expecting.first(); // get any element\n\n  var tokenText;\n\n  if (expectedTokenType === Token.EOF) {\n    tokenText = \"<missing EOF>\";\n  } else {\n    tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n  }\n\n  var current = currentSymbol;\n  var lookback = recognizer.getTokenStream().LT(-1);\n\n  if (current.type === Token.EOF && lookback !== null) {\n    current = lookback;\n  }\n\n  return recognizer.getTokenFactory().create(current.source, expectedTokenType, tokenText, Token.DEFAULT_CHANNEL, -1, -1, current.line, current.column);\n};\n\nDefaultErrorStrategy.prototype.getExpectedTokens = function (recognizer) {\n  return recognizer.getExpectedTokens();\n}; // How should a token be displayed in an error message? The default\n// is to display just the text, but during development you might\n// want to have a lot of information spit out. Override in that case\n// to use t.toString() (which, for CommonToken, dumps everything about\n// the token). This is better than forcing you to override a method in\n// your token objects because you don't have to go modify your lexer\n// so that it creates a new Java type.\n//\n\n\nDefaultErrorStrategy.prototype.getTokenErrorDisplay = function (t) {\n  if (t === null) {\n    return \"<no token>\";\n  }\n\n  var s = t.text;\n\n  if (s === null) {\n    if (t.type === Token.EOF) {\n      s = \"<EOF>\";\n    } else {\n      s = \"<\" + t.type + \">\";\n    }\n  }\n\n  return this.escapeWSAndQuote(s);\n};\n\nDefaultErrorStrategy.prototype.escapeWSAndQuote = function (s) {\n  s = s.replace(/\\n/g, \"\\\\n\");\n  s = s.replace(/\\r/g, \"\\\\r\");\n  s = s.replace(/\\t/g, \"\\\\t\");\n  return \"'\" + s + \"'\";\n}; // Compute the error recovery set for the current rule. During\n// rule invocation, the parser pushes the set of tokens that can\n// follow that rule reference on the stack; this amounts to\n// computing FIRST of what follows the rule reference in the\n// enclosing rule. See LinearApproximator.FIRST().\n// This local follow set only includes tokens\n// from within the rule; i.e., the FIRST computation done by\n// ANTLR stops at the end of a rule.\n//\n// EXAMPLE\n//\n// When you find a \"no viable alt exception\", the input is not\n// consistent with any of the alternatives for rule r. The best\n// thing to do is to consume tokens until you see something that\n// can legally follow a call to r//or* any rule that called r.\n// You don't want the exact set of viable next tokens because the\n// input might just be missing a token--you might consume the\n// rest of the input looking for one of the missing tokens.\n//\n// Consider grammar:\n//\n// a : '[' b ']'\n// | '(' b ')'\n// ;\n// b : c '^' INT ;\n// c : ID\n// | INT\n// ;\n//\n// At each rule invocation, the set of tokens that could follow\n// that rule is pushed on a stack. Here are the various\n// context-sensitive follow sets:\n//\n// FOLLOW(b1_in_a) = FIRST(']') = ']'\n// FOLLOW(b2_in_a) = FIRST(')') = ')'\n// FOLLOW(c_in_b) = FIRST('^') = '^'\n//\n// Upon erroneous input \"[]\", the call chain is\n//\n// a -> b -> c\n//\n// and, hence, the follow context stack is:\n//\n// depth follow set start of rule execution\n// 0 <EOF> a (from main())\n// 1 ']' b\n// 2 '^' c\n//\n// Notice that ')' is not included, because b would have to have\n// been called from a different context in rule a for ')' to be\n// included.\n//\n// For error recovery, we cannot consider FOLLOW(c)\n// (context-sensitive or otherwise). We need the combined set of\n// all context-sensitive FOLLOW sets--the set of all tokens that\n// could follow any reference in the call chain. We need to\n// resync to one of those tokens. Note that FOLLOW(c)='^' and if\n// we resync'd to that token, we'd consume until EOF. We need to\n// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n// In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n// not consume anything. After printing an error, rule c would\n// return normally. Rule b would not find the required '^' though.\n// At this point, it gets a mismatched token error and throws an\n// exception (since LA(1) is not in the viable following token\n// set). The rule exception handler tries to recover, but finds\n// the same recovery set and doesn't consume anything. Rule b\n// exits normally returning to rule a. Now it finds the ']' (and\n// with the successful match exits errorRecovery mode).\n//\n// So, you can see that the parser walks up the call chain looking\n// for the token that was a member of the recovery set.\n//\n// Errors are not generated in errorRecovery mode.\n//\n// ANTLR's error recovery mechanism is based upon original ideas:\n//\n// \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n//\n// and\n//\n// \"A note on error recovery in recursive descent parsers\":\n// http://portal.acm.org/citation.cfm?id=947902.947905\n//\n// Later, Josef Grosch had some good ideas:\n//\n// \"Efficient and Comfortable Error Recovery in Recursive Descent\n// Parsers\":\n// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n//\n// Like Grosch I implement context-sensitive FOLLOW sets that are combined\n// at run-time upon error to avoid overhead during parsing.\n//\n\n\nDefaultErrorStrategy.prototype.getErrorRecoverySet = function (recognizer) {\n  var atn = recognizer._interp.atn;\n  var ctx = recognizer._ctx;\n  var recoverSet = new IntervalSet();\n\n  while (ctx !== null && ctx.invokingState >= 0) {\n    // compute what follows who invoked us\n    var invokingState = atn.states[ctx.invokingState];\n    var rt = invokingState.transitions[0];\n    var follow = atn.nextTokens(rt.followState);\n    recoverSet.addSet(follow);\n    ctx = ctx.parentCtx;\n  }\n\n  recoverSet.removeOne(Token.EPSILON);\n  return recoverSet;\n}; // Consume tokens until one matches the given token set.//\n\n\nDefaultErrorStrategy.prototype.consumeUntil = function (recognizer, set) {\n  var ttype = recognizer.getTokenStream().LA(1);\n\n  while (ttype !== Token.EOF && !set.contains(ttype)) {\n    recognizer.consume();\n    ttype = recognizer.getTokenStream().LA(1);\n  }\n}; //\n// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n// by immediately canceling the parse operation with a\n// {@link ParseCancellationException}. The implementation ensures that the\n// {@link ParserRuleContext//exception} field is set for all parse tree nodes\n// that were not completed prior to encountering the error.\n//\n// <p>\n// This error strategy is useful in the following scenarios.</p>\n//\n// <ul>\n// <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n// stage of two-stage parsing to immediately terminate if an error is\n// encountered, and immediately fall back to the second stage. In addition to\n// avoiding wasted work by attempting to recover from errors here, the empty\n// implementation of {@link BailErrorStrategy//sync} improves the performance of\n// the first stage.</li>\n// <li><strong>Silent validation:</strong> When syntax errors are not being\n// reported or logged, and the parse result is simply ignored if errors occur,\n// the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n// when the result will be ignored either way.</li>\n// </ul>\n//\n// <p>\n// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n//\n// @see Parser//setErrorHandler(ANTLRErrorStrategy)\n//\n\n\nfunction BailErrorStrategy() {\n  DefaultErrorStrategy.call(this);\n  return this;\n}\n\nBailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);\nBailErrorStrategy.prototype.constructor = BailErrorStrategy; // Instead of recovering from exception {@code e}, re-throw it wrapped\n// in a {@link ParseCancellationException} so it is not caught by the\n// rule function catches. Use {@link Exception//getCause()} to get the\n// original {@link RecognitionException}.\n//\n\nBailErrorStrategy.prototype.recover = function (recognizer, e) {\n  var context = recognizer._ctx;\n\n  while (context !== null) {\n    context.exception = e;\n    context = context.parentCtx;\n  }\n\n  throw new ParseCancellationException(e);\n}; // Make sure we don't attempt to recover inline; if the parser\n// successfully recovers, it won't throw an exception.\n//\n\n\nBailErrorStrategy.prototype.recoverInline = function (recognizer) {\n  this.recover(recognizer, new InputMismatchException(recognizer));\n}; // Make sure we don't attempt to recover from problems in subrules.//\n\n\nBailErrorStrategy.prototype.sync = function (recognizer) {// pass\n};\n\nexports.BailErrorStrategy = BailErrorStrategy;\nexports.DefaultErrorStrategy = DefaultErrorStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/error/ErrorStrategy.js\n");

/***/ }),

/***/ "./node_modules/antlr4/error/Errors.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/error/Errors.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n//  3 kinds of errors: prediction errors, failed predicate errors, and\n//  mismatched input errors. In each case, the parser knows where it is\n//  in the input, where it is in the ATN, the rule invocation stack,\n//  and what kind of problem occurred.\nvar PredicateTransition = __webpack_require__(/*! ./../atn/Transition */ \"./node_modules/antlr4/atn/Transition.js\").PredicateTransition;\n\nfunction RecognitionException(params) {\n  Error.call(this);\n\n  if (!!Error.captureStackTrace) {\n    Error.captureStackTrace(this, RecognitionException);\n  } else {\n    var stack = new Error().stack;\n  }\n\n  this.message = params.message;\n  this.recognizer = params.recognizer;\n  this.input = params.input;\n  this.ctx = params.ctx; // The current {@link Token} when an error occurred. Since not all streams\n  // support accessing symbols by index, we have to track the {@link Token}\n  // instance itself.\n\n  this.offendingToken = null; // Get the ATN state number the parser was in at the time the error\n  // occurred. For {@link NoViableAltException} and\n  // {@link LexerNoViableAltException} exceptions, this is the\n  // {@link DecisionState} number. For others, it is the state whose outgoing\n  // edge we couldn't match.\n\n  this.offendingState = -1;\n\n  if (this.recognizer !== null) {\n    this.offendingState = this.recognizer.state;\n  }\n\n  return this;\n}\n\nRecognitionException.prototype = Object.create(Error.prototype);\nRecognitionException.prototype.constructor = RecognitionException; // <p>If the state number is not known, this method returns -1.</p>\n//\n// Gets the set of input symbols which could potentially follow the\n// previously matched symbol at the time this exception was thrown.\n//\n// <p>If the set of expected tokens is not known and could not be computed,\n// this method returns {@code null}.</p>\n//\n// @return The set of token types that could potentially follow the current\n// state in the ATN, or {@code null} if the information is not available.\n// /\n\nRecognitionException.prototype.getExpectedTokens = function () {\n  if (this.recognizer !== null) {\n    return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n  } else {\n    return null;\n  }\n};\n\nRecognitionException.prototype.toString = function () {\n  return this.message;\n};\n\nfunction LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {\n  RecognitionException.call(this, {\n    message: \"\",\n    recognizer: lexer,\n    input: input,\n    ctx: null\n  });\n  this.startIndex = startIndex;\n  this.deadEndConfigs = deadEndConfigs;\n  return this;\n}\n\nLexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nLexerNoViableAltException.prototype.constructor = LexerNoViableAltException;\n\nLexerNoViableAltException.prototype.toString = function () {\n  var symbol = \"\";\n\n  if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n    symbol = this.input.getText((this.startIndex, this.startIndex));\n  }\n\n  return \"LexerNoViableAltException\" + symbol;\n}; // Indicates that the parser could not decide which of two or more paths\n// to take based upon the remaining input. It tracks the starting token\n// of the offending input and also knows where the parser was\n// in the various paths when the error. Reported by reportNoViableAlternative()\n//\n\n\nfunction NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n  ctx = ctx || recognizer._ctx;\n  offendingToken = offendingToken || recognizer.getCurrentToken();\n  startToken = startToken || recognizer.getCurrentToken();\n  input = input || recognizer.getInputStream();\n  RecognitionException.call(this, {\n    message: \"\",\n    recognizer: recognizer,\n    input: input,\n    ctx: ctx\n  }); // Which configurations did we try at input.index() that couldn't match\n  // input.LT(1)?//\n\n  this.deadEndConfigs = deadEndConfigs; // The token object at the start index; the input stream might\n  // not be buffering tokens so get a reference to it. (At the\n  // time the error occurred, of course the stream needs to keep a\n  // buffer all of the tokens but later we might not have access to those.)\n\n  this.startToken = startToken;\n  this.offendingToken = offendingToken;\n}\n\nNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nNoViableAltException.prototype.constructor = NoViableAltException; // This signifies any kind of mismatched input exceptions such as\n// when the current input does not match the expected token.\n//\n\nfunction InputMismatchException(recognizer) {\n  RecognitionException.call(this, {\n    message: \"\",\n    recognizer: recognizer,\n    input: recognizer.getInputStream(),\n    ctx: recognizer._ctx\n  });\n  this.offendingToken = recognizer.getCurrentToken();\n}\n\nInputMismatchException.prototype = Object.create(RecognitionException.prototype);\nInputMismatchException.prototype.constructor = InputMismatchException; // A semantic predicate failed during validation. Validation of predicates\n// occurs when normally parsing the alternative just like matching a token.\n// Disambiguating predicate evaluation occurs when we test a predicate during\n// prediction.\n\nfunction FailedPredicateException(recognizer, predicate, message) {\n  RecognitionException.call(this, {\n    message: this.formatMessage(predicate, message || null),\n    recognizer: recognizer,\n    input: recognizer.getInputStream(),\n    ctx: recognizer._ctx\n  });\n  var s = recognizer._interp.atn.states[recognizer.state];\n  var trans = s.transitions[0];\n\n  if (trans instanceof PredicateTransition) {\n    this.ruleIndex = trans.ruleIndex;\n    this.predicateIndex = trans.predIndex;\n  } else {\n    this.ruleIndex = 0;\n    this.predicateIndex = 0;\n  }\n\n  this.predicate = predicate;\n  this.offendingToken = recognizer.getCurrentToken();\n  return this;\n}\n\nFailedPredicateException.prototype = Object.create(RecognitionException.prototype);\nFailedPredicateException.prototype.constructor = FailedPredicateException;\n\nFailedPredicateException.prototype.formatMessage = function (predicate, message) {\n  if (message !== null) {\n    return message;\n  } else {\n    return \"failed predicate: {\" + predicate + \"}?\";\n  }\n};\n\nfunction ParseCancellationException() {\n  Error.call(this);\n  Error.captureStackTrace(this, ParseCancellationException);\n  return this;\n}\n\nParseCancellationException.prototype = Object.create(Error.prototype);\nParseCancellationException.prototype.constructor = ParseCancellationException;\nexports.RecognitionException = RecognitionException;\nexports.NoViableAltException = NoViableAltException;\nexports.LexerNoViableAltException = LexerNoViableAltException;\nexports.InputMismatchException = InputMismatchException;\nexports.FailedPredicateException = FailedPredicateException;\nexports.ParseCancellationException = ParseCancellationException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2Vycm9yL0Vycm9ycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRscjQvZXJyb3IvRXJyb3JzLmpzPzI4MTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vLyBUaGUgcm9vdCBvZiB0aGUgQU5UTFIgZXhjZXB0aW9uIGhpZXJhcmNoeS4gSW4gZ2VuZXJhbCwgQU5UTFIgdHJhY2tzIGp1c3Rcbi8vICAzIGtpbmRzIG9mIGVycm9yczogcHJlZGljdGlvbiBlcnJvcnMsIGZhaWxlZCBwcmVkaWNhdGUgZXJyb3JzLCBhbmRcbi8vICBtaXNtYXRjaGVkIGlucHV0IGVycm9ycy4gSW4gZWFjaCBjYXNlLCB0aGUgcGFyc2VyIGtub3dzIHdoZXJlIGl0IGlzXG4vLyAgaW4gdGhlIGlucHV0LCB3aGVyZSBpdCBpcyBpbiB0aGUgQVROLCB0aGUgcnVsZSBpbnZvY2F0aW9uIHN0YWNrLFxuLy8gIGFuZCB3aGF0IGtpbmQgb2YgcHJvYmxlbSBvY2N1cnJlZC5cblxudmFyIFByZWRpY2F0ZVRyYW5zaXRpb24gPSByZXF1aXJlKCcuLy4uL2F0bi9UcmFuc2l0aW9uJykuUHJlZGljYXRlVHJhbnNpdGlvbjtcblxuZnVuY3Rpb24gUmVjb2duaXRpb25FeGNlcHRpb24ocGFyYW1zKSB7XG5cdEVycm9yLmNhbGwodGhpcyk7XG5cdGlmICghIUVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlY29nbml0aW9uRXhjZXB0aW9uKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcblx0fVxuXHR0aGlzLm1lc3NhZ2UgPSBwYXJhbXMubWVzc2FnZTtcbiAgICB0aGlzLnJlY29nbml6ZXIgPSBwYXJhbXMucmVjb2duaXplcjtcbiAgICB0aGlzLmlucHV0ID0gcGFyYW1zLmlucHV0O1xuICAgIHRoaXMuY3R4ID0gcGFyYW1zLmN0eDtcbiAgICAvLyBUaGUgY3VycmVudCB7QGxpbmsgVG9rZW59IHdoZW4gYW4gZXJyb3Igb2NjdXJyZWQuIFNpbmNlIG5vdCBhbGwgc3RyZWFtc1xuICAgIC8vIHN1cHBvcnQgYWNjZXNzaW5nIHN5bWJvbHMgYnkgaW5kZXgsIHdlIGhhdmUgdG8gdHJhY2sgdGhlIHtAbGluayBUb2tlbn1cbiAgICAvLyBpbnN0YW5jZSBpdHNlbGYuXG4gICAgdGhpcy5vZmZlbmRpbmdUb2tlbiA9IG51bGw7XG4gICAgLy8gR2V0IHRoZSBBVE4gc3RhdGUgbnVtYmVyIHRoZSBwYXJzZXIgd2FzIGluIGF0IHRoZSB0aW1lIHRoZSBlcnJvclxuICAgIC8vIG9jY3VycmVkLiBGb3Ige0BsaW5rIE5vVmlhYmxlQWx0RXhjZXB0aW9ufSBhbmRcbiAgICAvLyB7QGxpbmsgTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbn0gZXhjZXB0aW9ucywgdGhpcyBpcyB0aGVcbiAgICAvLyB7QGxpbmsgRGVjaXNpb25TdGF0ZX0gbnVtYmVyLiBGb3Igb3RoZXJzLCBpdCBpcyB0aGUgc3RhdGUgd2hvc2Ugb3V0Z29pbmdcbiAgICAvLyBlZGdlIHdlIGNvdWxkbid0IG1hdGNoLlxuICAgIHRoaXMub2ZmZW5kaW5nU3RhdGUgPSAtMTtcbiAgICBpZiAodGhpcy5yZWNvZ25pemVyIT09bnVsbCkge1xuICAgICAgICB0aGlzLm9mZmVuZGluZ1N0YXRlID0gdGhpcy5yZWNvZ25pemVyLnN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuUmVjb2duaXRpb25FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuUmVjb2duaXRpb25FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVjb2duaXRpb25FeGNlcHRpb247XG5cbi8vIDxwPklmIHRoZSBzdGF0ZSBudW1iZXIgaXMgbm90IGtub3duLCB0aGlzIG1ldGhvZCByZXR1cm5zIC0xLjwvcD5cblxuLy9cbi8vIEdldHMgdGhlIHNldCBvZiBpbnB1dCBzeW1ib2xzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGZvbGxvdyB0aGVcbi8vIHByZXZpb3VzbHkgbWF0Y2hlZCBzeW1ib2wgYXQgdGhlIHRpbWUgdGhpcyBleGNlcHRpb24gd2FzIHRocm93bi5cbi8vXG4vLyA8cD5JZiB0aGUgc2V0IG9mIGV4cGVjdGVkIHRva2VucyBpcyBub3Qga25vd24gYW5kIGNvdWxkIG5vdCBiZSBjb21wdXRlZCxcbi8vIHRoaXMgbWV0aG9kIHJldHVybnMge0Bjb2RlIG51bGx9LjwvcD5cbi8vXG4vLyBAcmV0dXJuIFRoZSBzZXQgb2YgdG9rZW4gdHlwZXMgdGhhdCBjb3VsZCBwb3RlbnRpYWxseSBmb2xsb3cgdGhlIGN1cnJlbnRcbi8vIHN0YXRlIGluIHRoZSBBVE4sIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbi8vIC9cblJlY29nbml0aW9uRXhjZXB0aW9uLnByb3RvdHlwZS5nZXRFeHBlY3RlZFRva2VucyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnJlY29nbml6ZXIhPT1udWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY29nbml6ZXIuYXRuLmdldEV4cGVjdGVkVG9rZW5zKHRoaXMub2ZmZW5kaW5nU3RhdGUsIHRoaXMuY3R4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5SZWNvZ25pdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xufTtcblxuZnVuY3Rpb24gTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbihsZXhlciwgaW5wdXQsIHN0YXJ0SW5kZXgsIGRlYWRFbmRDb25maWdzKSB7XG5cdFJlY29nbml0aW9uRXhjZXB0aW9uLmNhbGwodGhpcywge21lc3NhZ2U6XCJcIiwgcmVjb2duaXplcjpsZXhlciwgaW5wdXQ6aW5wdXQsIGN0eDpudWxsfSk7XG4gICAgdGhpcy5zdGFydEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB0aGlzLmRlYWRFbmRDb25maWdzID0gZGVhZEVuZENvbmZpZ3M7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbkxleGVyTm9WaWFibGVBbHRFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWNvZ25pdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uO1xuXG5MZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzeW1ib2wgPSBcIlwiO1xuICAgIGlmICh0aGlzLnN0YXJ0SW5kZXggPj0gMCAmJiB0aGlzLnN0YXJ0SW5kZXggPCB0aGlzLmlucHV0LnNpemUpIHtcbiAgICAgICAgc3ltYm9sID0gdGhpcy5pbnB1dC5nZXRUZXh0KCh0aGlzLnN0YXJ0SW5kZXgsdGhpcy5zdGFydEluZGV4KSk7XG4gICAgfVxuICAgIHJldHVybiBcIkxleGVyTm9WaWFibGVBbHRFeGNlcHRpb25cIiArIHN5bWJvbDtcbn07XG5cbi8vIEluZGljYXRlcyB0aGF0IHRoZSBwYXJzZXIgY291bGQgbm90IGRlY2lkZSB3aGljaCBvZiB0d28gb3IgbW9yZSBwYXRoc1xuLy8gdG8gdGFrZSBiYXNlZCB1cG9uIHRoZSByZW1haW5pbmcgaW5wdXQuIEl0IHRyYWNrcyB0aGUgc3RhcnRpbmcgdG9rZW5cbi8vIG9mIHRoZSBvZmZlbmRpbmcgaW5wdXQgYW5kIGFsc28ga25vd3Mgd2hlcmUgdGhlIHBhcnNlciB3YXNcbi8vIGluIHRoZSB2YXJpb3VzIHBhdGhzIHdoZW4gdGhlIGVycm9yLiBSZXBvcnRlZCBieSByZXBvcnROb1ZpYWJsZUFsdGVybmF0aXZlKClcbi8vXG5mdW5jdGlvbiBOb1ZpYWJsZUFsdEV4Y2VwdGlvbihyZWNvZ25pemVyLCBpbnB1dCwgc3RhcnRUb2tlbiwgb2ZmZW5kaW5nVG9rZW4sIGRlYWRFbmRDb25maWdzLCBjdHgpIHtcblx0Y3R4ID0gY3R4IHx8IHJlY29nbml6ZXIuX2N0eDtcblx0b2ZmZW5kaW5nVG9rZW4gPSBvZmZlbmRpbmdUb2tlbiB8fCByZWNvZ25pemVyLmdldEN1cnJlbnRUb2tlbigpO1xuXHRzdGFydFRva2VuID0gc3RhcnRUb2tlbiB8fCByZWNvZ25pemVyLmdldEN1cnJlbnRUb2tlbigpO1xuXHRpbnB1dCA9IGlucHV0IHx8IHJlY29nbml6ZXIuZ2V0SW5wdXRTdHJlYW0oKTtcblx0UmVjb2duaXRpb25FeGNlcHRpb24uY2FsbCh0aGlzLCB7bWVzc2FnZTpcIlwiLCByZWNvZ25pemVyOnJlY29nbml6ZXIsIGlucHV0OmlucHV0LCBjdHg6Y3R4fSk7XG4gICAgLy8gV2hpY2ggY29uZmlndXJhdGlvbnMgZGlkIHdlIHRyeSBhdCBpbnB1dC5pbmRleCgpIHRoYXQgY291bGRuJ3QgbWF0Y2hcblx0Ly8gaW5wdXQuTFQoMSk/Ly9cbiAgICB0aGlzLmRlYWRFbmRDb25maWdzID0gZGVhZEVuZENvbmZpZ3M7XG4gICAgLy8gVGhlIHRva2VuIG9iamVjdCBhdCB0aGUgc3RhcnQgaW5kZXg7IHRoZSBpbnB1dCBzdHJlYW0gbWlnaHRcbiAgICAvLyBub3QgYmUgYnVmZmVyaW5nIHRva2VucyBzbyBnZXQgYSByZWZlcmVuY2UgdG8gaXQuIChBdCB0aGVcbiAgICAvLyB0aW1lIHRoZSBlcnJvciBvY2N1cnJlZCwgb2YgY291cnNlIHRoZSBzdHJlYW0gbmVlZHMgdG8ga2VlcCBhXG4gICAgLy8gYnVmZmVyIGFsbCBvZiB0aGUgdG9rZW5zIGJ1dCBsYXRlciB3ZSBtaWdodCBub3QgaGF2ZSBhY2Nlc3MgdG8gdGhvc2UuKVxuICAgIHRoaXMuc3RhcnRUb2tlbiA9IHN0YXJ0VG9rZW47XG4gICAgdGhpcy5vZmZlbmRpbmdUb2tlbiA9IG9mZmVuZGluZ1Rva2VuO1xufVxuXG5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlY29nbml0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSk7XG5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBOb1ZpYWJsZUFsdEV4Y2VwdGlvbjtcblxuLy8gVGhpcyBzaWduaWZpZXMgYW55IGtpbmQgb2YgbWlzbWF0Y2hlZCBpbnB1dCBleGNlcHRpb25zIHN1Y2ggYXNcbi8vIHdoZW4gdGhlIGN1cnJlbnQgaW5wdXQgZG9lcyBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIHRva2VuLlxuLy9cbmZ1bmN0aW9uIElucHV0TWlzbWF0Y2hFeGNlcHRpb24ocmVjb2duaXplcikge1xuXHRSZWNvZ25pdGlvbkV4Y2VwdGlvbi5jYWxsKHRoaXMsIHttZXNzYWdlOlwiXCIsIHJlY29nbml6ZXI6cmVjb2duaXplciwgaW5wdXQ6cmVjb2duaXplci5nZXRJbnB1dFN0cmVhbSgpLCBjdHg6cmVjb2duaXplci5fY3R4fSk7XG4gICAgdGhpcy5vZmZlbmRpbmdUb2tlbiA9IHJlY29nbml6ZXIuZ2V0Q3VycmVudFRva2VuKCk7XG59XG5cbklucHV0TWlzbWF0Y2hFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWNvZ25pdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnB1dE1pc21hdGNoRXhjZXB0aW9uO1xuXG4vLyBBIHNlbWFudGljIHByZWRpY2F0ZSBmYWlsZWQgZHVyaW5nIHZhbGlkYXRpb24uIFZhbGlkYXRpb24gb2YgcHJlZGljYXRlc1xuLy8gb2NjdXJzIHdoZW4gbm9ybWFsbHkgcGFyc2luZyB0aGUgYWx0ZXJuYXRpdmUganVzdCBsaWtlIG1hdGNoaW5nIGEgdG9rZW4uXG4vLyBEaXNhbWJpZ3VhdGluZyBwcmVkaWNhdGUgZXZhbHVhdGlvbiBvY2N1cnMgd2hlbiB3ZSB0ZXN0IGEgcHJlZGljYXRlIGR1cmluZ1xuLy8gcHJlZGljdGlvbi5cblxuZnVuY3Rpb24gRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uKHJlY29nbml6ZXIsIHByZWRpY2F0ZSwgbWVzc2FnZSkge1xuXHRSZWNvZ25pdGlvbkV4Y2VwdGlvbi5jYWxsKHRoaXMsIHttZXNzYWdlOnRoaXMuZm9ybWF0TWVzc2FnZShwcmVkaWNhdGUsbWVzc2FnZSB8fCBudWxsKSwgcmVjb2duaXplcjpyZWNvZ25pemVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OnJlY29nbml6ZXIuZ2V0SW5wdXRTdHJlYW0oKSwgY3R4OnJlY29nbml6ZXIuX2N0eH0pO1xuICAgIHZhciBzID0gcmVjb2duaXplci5faW50ZXJwLmF0bi5zdGF0ZXNbcmVjb2duaXplci5zdGF0ZV07XG4gICAgdmFyIHRyYW5zID0gcy50cmFuc2l0aW9uc1swXTtcbiAgICBpZiAodHJhbnMgaW5zdGFuY2VvZiBQcmVkaWNhdGVUcmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gdHJhbnMucnVsZUluZGV4O1xuICAgICAgICB0aGlzLnByZWRpY2F0ZUluZGV4ID0gdHJhbnMucHJlZEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucnVsZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wcmVkaWNhdGVJbmRleCA9IDA7XG4gICAgfVxuICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgIHRoaXMub2ZmZW5kaW5nVG9rZW4gPSByZWNvZ25pemVyLmdldEN1cnJlbnRUb2tlbigpO1xuICAgIHJldHVybiB0aGlzO1xufVxuXG5GYWlsZWRQcmVkaWNhdGVFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShSZWNvZ25pdGlvbkV4Y2VwdGlvbi5wcm90b3R5cGUpO1xuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbjtcblxuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uLnByb3RvdHlwZS5mb3JtYXRNZXNzYWdlID0gZnVuY3Rpb24ocHJlZGljYXRlLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgIT09bnVsbCkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJmYWlsZWQgcHJlZGljYXRlOiB7XCIgKyBwcmVkaWNhdGUgKyBcIn0/XCI7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gUGFyc2VDYW5jZWxsYXRpb25FeGNlcHRpb24oKSB7XG5cdEVycm9yLmNhbGwodGhpcyk7XG5cdEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uKTtcblx0cmV0dXJuIHRoaXM7XG59XG5cblBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uO1xuXG5leHBvcnRzLlJlY29nbml0aW9uRXhjZXB0aW9uID0gUmVjb2duaXRpb25FeGNlcHRpb247XG5leHBvcnRzLk5vVmlhYmxlQWx0RXhjZXB0aW9uID0gTm9WaWFibGVBbHRFeGNlcHRpb247XG5leHBvcnRzLkxleGVyTm9WaWFibGVBbHRFeGNlcHRpb24gPSBMZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uO1xuZXhwb3J0cy5JbnB1dE1pc21hdGNoRXhjZXB0aW9uID0gSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbjtcbmV4cG9ydHMuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uID0gRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uO1xuZXhwb3J0cy5QYXJzZUNhbmNlbGxhdGlvbkV4Y2VwdGlvbiA9IFBhcnNlQ2FuY2VsbGF0aW9uRXhjZXB0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBREE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/error/Errors.js\n");

/***/ }),

/***/ "./node_modules/antlr4/error/index.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/error/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.RecognitionException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\").RecognitionException;\nexports.NoViableAltException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\").NoViableAltException;\nexports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\").LexerNoViableAltException;\nexports.InputMismatchException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\").InputMismatchException;\nexports.FailedPredicateException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/error/Errors.js\").FailedPredicateException;\nexports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ \"./node_modules/antlr4/error/DiagnosticErrorListener.js\").DiagnosticErrorListener;\nexports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"./node_modules/antlr4/error/ErrorStrategy.js\").BailErrorStrategy;\nexports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"./node_modules/antlr4/error/ErrorListener.js\").ErrorListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2Vycm9yL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9lcnJvci9pbmRleC5qcz8xN2NmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZXhwb3J0cy5SZWNvZ25pdGlvbkV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuUmVjb2duaXRpb25FeGNlcHRpb247XG5leHBvcnRzLk5vVmlhYmxlQWx0RXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbjtcbmV4cG9ydHMuTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuTGV4ZXJOb1ZpYWJsZUFsdEV4Y2VwdGlvbjtcbmV4cG9ydHMuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbjtcbmV4cG9ydHMuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5GYWlsZWRQcmVkaWNhdGVFeGNlcHRpb247XG5leHBvcnRzLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9EaWFnbm9zdGljRXJyb3JMaXN0ZW5lcicpLkRpYWdub3N0aWNFcnJvckxpc3RlbmVyO1xuZXhwb3J0cy5CYWlsRXJyb3JTdHJhdGVneSA9IHJlcXVpcmUoJy4vRXJyb3JTdHJhdGVneScpLkJhaWxFcnJvclN0cmF0ZWd5O1xuZXhwb3J0cy5FcnJvckxpc3RlbmVyID0gcmVxdWlyZSgnLi9FcnJvckxpc3RlbmVyJykuRXJyb3JMaXN0ZW5lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/antlr4/error/index.js\n");

/***/ }),

/***/ "./node_modules/antlr4/index.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = __webpack_require__(/*! ./atn/index */ \"./node_modules/antlr4/atn/index.js\");\nexports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ \"./node_modules/antlr4/polyfills/codepointat.js\");\nexports.dfa = __webpack_require__(/*! ./dfa/index */ \"./node_modules/antlr4/dfa/index.js\");\nexports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ \"./node_modules/antlr4/polyfills/fromcodepoint.js\");\nexports.tree = __webpack_require__(/*! ./tree/index */ \"./node_modules/antlr4/tree/index.js\");\nexports.error = __webpack_require__(/*! ./error/index */ \"./node_modules/antlr4/error/index.js\");\nexports.Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").Token;\nexports.CharStreams = __webpack_require__(/*! ./CharStreams */ \"./node_modules/antlr4/CharStreams.js\").CharStreams;\nexports.CommonToken = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/Token.js\").CommonToken;\nexports.InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/InputStream.js\").InputStream;\nexports.FileStream = __webpack_require__(/*! ./FileStream */ \"./node_modules/antlr4/FileStream.js\").FileStream;\nexports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ \"./node_modules/antlr4/CommonTokenStream.js\").CommonTokenStream;\nexports.Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/Lexer.js\").Lexer;\nexports.Parser = __webpack_require__(/*! ./Parser */ \"./node_modules/antlr4/Parser.js\").Parser;\n\nvar pc = __webpack_require__(/*! ./PredictionContext */ \"./node_modules/antlr4/PredictionContext.js\");\n\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ \"./node_modules/antlr4/ParserRuleContext.js\").ParserRuleContext;\nexports.Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\nexports.Utils = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/Utils.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9pbmRleC5qcz9lYmFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbmV4cG9ydHMuYXRuID0gcmVxdWlyZSgnLi9hdG4vaW5kZXgnKTtcbmV4cG9ydHMuY29kZXBvaW50YXQgPSByZXF1aXJlKCcuL3BvbHlmaWxscy9jb2RlcG9pbnRhdCcpO1xuZXhwb3J0cy5kZmEgPSByZXF1aXJlKCcuL2RmYS9pbmRleCcpO1xuZXhwb3J0cy5mcm9tY29kZXBvaW50ID0gcmVxdWlyZSgnLi9wb2x5ZmlsbHMvZnJvbWNvZGVwb2ludCcpO1xuZXhwb3J0cy50cmVlID0gcmVxdWlyZSgnLi90cmVlL2luZGV4Jyk7XG5leHBvcnRzLmVycm9yID0gcmVxdWlyZSgnLi9lcnJvci9pbmRleCcpO1xuZXhwb3J0cy5Ub2tlbiA9IHJlcXVpcmUoJy4vVG9rZW4nKS5Ub2tlbjtcbmV4cG9ydHMuQ2hhclN0cmVhbXMgPSByZXF1aXJlKCcuL0NoYXJTdHJlYW1zJykuQ2hhclN0cmVhbXM7XG5leHBvcnRzLkNvbW1vblRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLkNvbW1vblRva2VuO1xuZXhwb3J0cy5JbnB1dFN0cmVhbSA9IHJlcXVpcmUoJy4vSW5wdXRTdHJlYW0nKS5JbnB1dFN0cmVhbTtcbmV4cG9ydHMuRmlsZVN0cmVhbSA9IHJlcXVpcmUoJy4vRmlsZVN0cmVhbScpLkZpbGVTdHJlYW07XG5leHBvcnRzLkNvbW1vblRva2VuU3RyZWFtID0gcmVxdWlyZSgnLi9Db21tb25Ub2tlblN0cmVhbScpLkNvbW1vblRva2VuU3RyZWFtO1xuZXhwb3J0cy5MZXhlciA9IHJlcXVpcmUoJy4vTGV4ZXInKS5MZXhlcjtcbmV4cG9ydHMuUGFyc2VyID0gcmVxdWlyZSgnLi9QYXJzZXInKS5QYXJzZXI7XG52YXIgcGMgPSByZXF1aXJlKCcuL1ByZWRpY3Rpb25Db250ZXh0Jyk7XG5leHBvcnRzLlByZWRpY3Rpb25Db250ZXh0Q2FjaGUgPSBwYy5QcmVkaWN0aW9uQ29udGV4dENhY2hlO1xuZXhwb3J0cy5QYXJzZXJSdWxlQ29udGV4dCA9IHJlcXVpcmUoJy4vUGFyc2VyUnVsZUNvbnRleHQnKS5QYXJzZXJSdWxlQ29udGV4dDtcbmV4cG9ydHMuSW50ZXJ2YWwgPSByZXF1aXJlKCcuL0ludGVydmFsU2V0JykuSW50ZXJ2YWw7XG5leHBvcnRzLlV0aWxzID0gcmVxdWlyZSgnLi9VdGlscycpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/antlr4/index.js\n");

/***/ }),

/***/ "./node_modules/antlr4/polyfills/codepointat.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/polyfills/codepointat.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n  (function () {\n    'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\n    var defineProperty = function () {\n      // IE 8 only supports `Object.defineProperty` on DOM elements\n      try {\n        var object = {};\n        var $defineProperty = Object.defineProperty;\n        var result = $defineProperty(object, object, object) && $defineProperty;\n      } catch (error) {}\n\n      return result;\n    }();\n\n    var codePointAt = function codePointAt(position) {\n      if (this == null) {\n        throw TypeError();\n      }\n\n      var string = String(this);\n      var size = string.length; // `ToInteger`\n\n      var index = position ? Number(position) : 0;\n\n      if (index != index) {\n        // better `isNaN`\n        index = 0;\n      } // Account for out-of-bounds indices:\n\n\n      if (index < 0 || index >= size) {\n        return undefined;\n      } // Get the first code unit\n\n\n      var first = string.charCodeAt(index);\n      var second;\n\n      if ( // check if it’s the start of a surrogate pair\n      first >= 0xD800 && first <= 0xDBFF && // high surrogate\n      size > index + 1 // there is a next code unit\n      ) {\n          second = string.charCodeAt(index + 1);\n\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // low surrogate\n            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n          }\n        }\n\n      return first;\n    };\n\n    if (defineProperty) {\n      defineProperty(String.prototype, 'codePointAt', {\n        'value': codePointAt,\n        'configurable': true,\n        'writable': true\n      });\n    } else {\n      String.prototype.codePointAt = codePointAt;\n    }\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L3BvbHlmaWxscy9jb2RlcG9pbnRhdC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnRscjQvcG9seWZpbGxzL2NvZGVwb2ludGF0LmpzP2RmNzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIGh0dHBzOi8vbXRocy5iZS9jb2RlcG9pbnRhdCB2MC4yLjAgYnkgQG1hdGhpYXMgKi9cbmlmICghU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdCkge1xuXHQoZnVuY3Rpb24oKSB7XG5cdFx0J3VzZSBzdHJpY3QnOyAvLyBuZWVkZWQgdG8gc3VwcG9ydCBgYXBwbHlgL2BjYWxsYCB3aXRoIGB1bmRlZmluZWRgL2BudWxsYFxuXHRcdHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcblx0XHRcdC8vIElFIDggb25seSBzdXBwb3J0cyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBvbiBET00gZWxlbWVudHNcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdFx0dmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0XHRcdFx0dmFyIHJlc3VsdCA9ICRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG9iamVjdCwgb2JqZWN0KSAmJiAkZGVmaW5lUHJvcGVydHk7XG5cdFx0XHR9IGNhdGNoKGVycm9yKSB7fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KCkpO1xuXHRcdHZhciBjb2RlUG9pbnRBdCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0XHRpZiAodGhpcyA9PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IFR5cGVFcnJvcigpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcblx0XHRcdHZhciBzaXplID0gc3RyaW5nLmxlbmd0aDtcblx0XHRcdC8vIGBUb0ludGVnZXJgXG5cdFx0XHR2YXIgaW5kZXggPSBwb3NpdGlvbiA/IE51bWJlcihwb3NpdGlvbikgOiAwO1xuXHRcdFx0aWYgKGluZGV4ICE9IGluZGV4KSB7IC8vIGJldHRlciBgaXNOYU5gXG5cdFx0XHRcdGluZGV4ID0gMDtcblx0XHRcdH1cblx0XHRcdC8vIEFjY291bnQgZm9yIG91dC1vZi1ib3VuZHMgaW5kaWNlczpcblx0XHRcdGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gc2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Ly8gR2V0IHRoZSBmaXJzdCBjb2RlIHVuaXRcblx0XHRcdHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcblx0XHRcdHZhciBzZWNvbmQ7XG5cdFx0XHRpZiAoIC8vIGNoZWNrIGlmIGl04oCZcyB0aGUgc3RhcnQgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRmaXJzdCA+PSAweEQ4MDAgJiYgZmlyc3QgPD0gMHhEQkZGICYmIC8vIGhpZ2ggc3Vycm9nYXRlXG5cdFx0XHRcdHNpemUgPiBpbmRleCArIDEgLy8gdGhlcmUgaXMgYSBuZXh0IGNvZGUgdW5pdFxuXHRcdFx0KSB7XG5cdFx0XHRcdHNlY29uZCA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4ICsgMSk7XG5cdFx0XHRcdGlmIChzZWNvbmQgPj0gMHhEQzAwICYmIHNlY29uZCA8PSAweERGRkYpIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuXHRcdFx0XHRcdHJldHVybiAoZmlyc3QgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmlyc3Q7XG5cdFx0fTtcblx0XHRpZiAoZGVmaW5lUHJvcGVydHkpIHtcblx0XHRcdGRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdjb2RlUG9pbnRBdCcsIHtcblx0XHRcdFx0J3ZhbHVlJzogY29kZVBvaW50QXQsXG5cdFx0XHRcdCdjb25maWd1cmFibGUnOiB0cnVlLFxuXHRcdFx0XHQnd3JpdGFibGUnOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0U3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdCA9IGNvZGVQb2ludEF0O1xuXHRcdH1cblx0fSgpKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/polyfills/codepointat.js\n");

/***/ }),

/***/ "./node_modules/antlr4/polyfills/fromcodepoint.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/polyfills/fromcodepoint.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n  (function () {\n    var defineProperty = function () {\n      // IE 8 only supports `Object.defineProperty` on DOM elements\n      try {\n        var object = {};\n        var $defineProperty = Object.defineProperty;\n        var result = $defineProperty(object, object, object) && $defineProperty;\n      } catch (error) {}\n\n      return result;\n    }();\n\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n\n    var fromCodePoint = function fromCodePoint(_) {\n      var MAX_SIZE = 0x4000;\n      var codeUnits = [];\n      var highSurrogate;\n      var lowSurrogate;\n      var index = -1;\n      var length = arguments.length;\n\n      if (!length) {\n        return '';\n      }\n\n      var result = '';\n\n      while (++index < length) {\n        var codePoint = Number(arguments[index]);\n\n        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n        ) {\n            throw RangeError('Invalid code point: ' + codePoint);\n          }\n\n        if (codePoint <= 0xFFFF) {\n          // BMP code point\n          codeUnits.push(codePoint);\n        } else {\n          // Astral code point; split in surrogate halves\n          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          codePoint -= 0x10000;\n          highSurrogate = (codePoint >> 10) + 0xD800;\n          lowSurrogate = codePoint % 0x400 + 0xDC00;\n          codeUnits.push(highSurrogate, lowSurrogate);\n        }\n\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n          result += stringFromCharCode.apply(null, codeUnits);\n          codeUnits.length = 0;\n        }\n      }\n\n      return result;\n    };\n\n    if (defineProperty) {\n      defineProperty(String, 'fromCodePoint', {\n        'value': fromCodePoint,\n        'configurable': true,\n        'writable': true\n      });\n    } else {\n      String.fromCodePoint = fromCodePoint;\n    }\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L3BvbHlmaWxscy9mcm9tY29kZXBvaW50LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FudGxyNC9wb2x5ZmlsbHMvZnJvbWNvZGVwb2ludC5qcz9lZjBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBodHRwczovL210aHMuYmUvZnJvbWNvZGVwb2ludCB2MC4yLjEgYnkgQG1hdGhpYXMgKi9cbmlmICghU3RyaW5nLmZyb21Db2RlUG9pbnQpIHtcblx0KGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcblx0XHRcdC8vIElFIDggb25seSBzdXBwb3J0cyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBvbiBET00gZWxlbWVudHNcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdFx0dmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0XHRcdFx0dmFyIHJlc3VsdCA9ICRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG9iamVjdCwgb2JqZWN0KSAmJiAkZGVmaW5lUHJvcGVydHk7XG5cdFx0XHR9IGNhdGNoKGVycm9yKSB7fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KCkpO1xuXHRcdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXHRcdHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cdFx0dmFyIGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbihfKSB7XG5cdFx0XHR2YXIgTUFYX1NJWkUgPSAweDQwMDA7XG5cdFx0XHR2YXIgY29kZVVuaXRzID0gW107XG5cdFx0XHR2YXIgaGlnaFN1cnJvZ2F0ZTtcblx0XHRcdHZhciBsb3dTdXJyb2dhdGU7XG5cdFx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHRcdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0aWYgKCFsZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0dmFyIGNvZGVQb2ludCA9IE51bWJlcihhcmd1bWVudHNbaW5kZXhdKTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCFpc0Zpbml0ZShjb2RlUG9pbnQpIHx8IC8vIGBOYU5gLCBgK0luZmluaXR5YCwgb3IgYC1JbmZpbml0eWBcblx0XHRcdFx0XHRjb2RlUG9pbnQgPCAwIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0XHRcdGNvZGVQb2ludCA+IDB4MTBGRkZGIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0XHRcdGZsb29yKGNvZGVQb2ludCkgIT0gY29kZVBvaW50IC8vIG5vdCBhbiBpbnRlZ2VyXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludDogJyArIGNvZGVQb2ludCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNvZGVQb2ludCA8PSAweEZGRkYpIHsgLy8gQk1QIGNvZGUgcG9pbnRcblx0XHRcdFx0XHRjb2RlVW5pdHMucHVzaChjb2RlUG9pbnQpO1xuXHRcdFx0XHR9IGVsc2UgeyAvLyBBc3RyYWwgY29kZSBwb2ludDsgc3BsaXQgaW4gc3Vycm9nYXRlIGhhbHZlc1xuXHRcdFx0XHRcdC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuXHRcdFx0XHRcdGNvZGVQb2ludCAtPSAweDEwMDAwO1xuXHRcdFx0XHRcdGhpZ2hTdXJyb2dhdGUgPSAoY29kZVBvaW50ID4+IDEwKSArIDB4RDgwMDtcblx0XHRcdFx0XHRsb3dTdXJyb2dhdGUgPSAoY29kZVBvaW50ICUgMHg0MDApICsgMHhEQzAwO1xuXHRcdFx0XHRcdGNvZGVVbml0cy5wdXNoKGhpZ2hTdXJyb2dhdGUsIGxvd1N1cnJvZ2F0ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGluZGV4ICsgMSA9PSBsZW5ndGggfHwgY29kZVVuaXRzLmxlbmd0aCA+IE1BWF9TSVpFKSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZS5hcHBseShudWxsLCBjb2RlVW5pdHMpO1xuXHRcdFx0XHRcdGNvZGVVbml0cy5sZW5ndGggPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcsICdmcm9tQ29kZVBvaW50Jywge1xuXHRcdFx0XHQndmFsdWUnOiBmcm9tQ29kZVBvaW50LFxuXHRcdFx0XHQnY29uZmlndXJhYmxlJzogdHJ1ZSxcblx0XHRcdFx0J3dyaXRhYmxlJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFN0cmluZy5mcm9tQ29kZVBvaW50ID0gZnJvbUNvZGVQb2ludDtcblx0XHR9XG5cdH0oKSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/polyfills/fromcodepoint.js\n");

/***/ }),

/***/ "./node_modules/antlr4/tree/Tree.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/tree/Tree.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n// The basic notion of a tree has a parent, a payload, and a list of children.\n//  It is the most abstract interface for all the trees used by ANTLR.\n///\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar Interval = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/IntervalSet.js\").Interval;\n\nvar INVALID_INTERVAL = new Interval(-1, -2);\n\nvar Utils = __webpack_require__(/*! ../Utils.js */ \"./node_modules/antlr4/Utils.js\");\n\nfunction Tree() {\n  return this;\n}\n\nfunction SyntaxTree() {\n  Tree.call(this);\n  return this;\n}\n\nSyntaxTree.prototype = Object.create(Tree.prototype);\nSyntaxTree.prototype.constructor = SyntaxTree;\n\nfunction ParseTree() {\n  SyntaxTree.call(this);\n  return this;\n}\n\nParseTree.prototype = Object.create(SyntaxTree.prototype);\nParseTree.prototype.constructor = ParseTree;\n\nfunction RuleNode() {\n  ParseTree.call(this);\n  return this;\n}\n\nRuleNode.prototype = Object.create(ParseTree.prototype);\nRuleNode.prototype.constructor = RuleNode;\n\nfunction TerminalNode() {\n  ParseTree.call(this);\n  return this;\n}\n\nTerminalNode.prototype = Object.create(ParseTree.prototype);\nTerminalNode.prototype.constructor = TerminalNode;\n\nfunction ErrorNode() {\n  TerminalNode.call(this);\n  return this;\n}\n\nErrorNode.prototype = Object.create(TerminalNode.prototype);\nErrorNode.prototype.constructor = ErrorNode;\n\nfunction ParseTreeVisitor() {\n  return this;\n}\n\nParseTreeVisitor.prototype.visit = function (ctx) {\n  if (Array.isArray(ctx)) {\n    return ctx.map(function (child) {\n      return child.accept(this);\n    }, this);\n  } else {\n    return ctx.accept(this);\n  }\n};\n\nParseTreeVisitor.prototype.visitChildren = function (ctx) {\n  if (ctx.children) {\n    return this.visit(ctx.children);\n  } else {\n    return null;\n  }\n};\n\nParseTreeVisitor.prototype.visitTerminal = function (node) {};\n\nParseTreeVisitor.prototype.visitErrorNode = function (node) {};\n\nfunction ParseTreeListener() {\n  return this;\n}\n\nParseTreeListener.prototype.visitTerminal = function (node) {};\n\nParseTreeListener.prototype.visitErrorNode = function (node) {};\n\nParseTreeListener.prototype.enterEveryRule = function (node) {};\n\nParseTreeListener.prototype.exitEveryRule = function (node) {};\n\nfunction TerminalNodeImpl(symbol) {\n  TerminalNode.call(this);\n  this.parentCtx = null;\n  this.symbol = symbol;\n  return this;\n}\n\nTerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);\nTerminalNodeImpl.prototype.constructor = TerminalNodeImpl;\n\nTerminalNodeImpl.prototype.getChild = function (i) {\n  return null;\n};\n\nTerminalNodeImpl.prototype.getSymbol = function () {\n  return this.symbol;\n};\n\nTerminalNodeImpl.prototype.getParent = function () {\n  return this.parentCtx;\n};\n\nTerminalNodeImpl.prototype.getPayload = function () {\n  return this.symbol;\n};\n\nTerminalNodeImpl.prototype.getSourceInterval = function () {\n  if (this.symbol === null) {\n    return INVALID_INTERVAL;\n  }\n\n  var tokenIndex = this.symbol.tokenIndex;\n  return new Interval(tokenIndex, tokenIndex);\n};\n\nTerminalNodeImpl.prototype.getChildCount = function () {\n  return 0;\n};\n\nTerminalNodeImpl.prototype.accept = function (visitor) {\n  return visitor.visitTerminal(this);\n};\n\nTerminalNodeImpl.prototype.getText = function () {\n  return this.symbol.text;\n};\n\nTerminalNodeImpl.prototype.toString = function () {\n  if (this.symbol.type === Token.EOF) {\n    return \"<EOF>\";\n  } else {\n    return this.symbol.text;\n  }\n}; // Represents a token that was consumed during resynchronization\n// rather than during a valid match operation. For example,\n// we will create this kind of a node during single token insertion\n// and deletion as well as during \"consume until error recovery set\"\n// upon no viable alternative exceptions.\n\n\nfunction ErrorNodeImpl(token) {\n  TerminalNodeImpl.call(this, token);\n  return this;\n}\n\nErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);\nErrorNodeImpl.prototype.constructor = ErrorNodeImpl;\n\nErrorNodeImpl.prototype.isErrorNode = function () {\n  return true;\n};\n\nErrorNodeImpl.prototype.accept = function (visitor) {\n  return visitor.visitErrorNode(this);\n};\n\nfunction ParseTreeWalker() {\n  return this;\n}\n\nParseTreeWalker.prototype.walk = function (listener, t) {\n  var errorNode = t instanceof ErrorNode || t.isErrorNode !== undefined && t.isErrorNode();\n\n  if (errorNode) {\n    listener.visitErrorNode(t);\n  } else if (t instanceof TerminalNode) {\n    listener.visitTerminal(t);\n  } else {\n    this.enterRule(listener, t);\n\n    for (var i = 0; i < t.getChildCount(); i++) {\n      var child = t.getChild(i);\n      this.walk(listener, child);\n    }\n\n    this.exitRule(listener, t);\n  }\n}; //\n// The discovery of a rule node, involves sending two events: the generic\n// {@link ParseTreeListener//enterEveryRule} and a\n// {@link RuleContext}-specific event. First we trigger the generic and then\n// the rule specific. We to them in reverse order upon finishing the node.\n//\n\n\nParseTreeWalker.prototype.enterRule = function (listener, r) {\n  var ctx = r.getRuleContext();\n  listener.enterEveryRule(ctx);\n  ctx.enterRule(listener);\n};\n\nParseTreeWalker.prototype.exitRule = function (listener, r) {\n  var ctx = r.getRuleContext();\n  ctx.exitRule(listener);\n  listener.exitEveryRule(ctx);\n};\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\nexports.RuleNode = RuleNode;\nexports.ErrorNode = ErrorNode;\nexports.TerminalNode = TerminalNode;\nexports.ErrorNodeImpl = ErrorNodeImpl;\nexports.TerminalNodeImpl = TerminalNodeImpl;\nexports.ParseTreeListener = ParseTreeListener;\nexports.ParseTreeVisitor = ParseTreeVisitor;\nexports.ParseTreeWalker = ParseTreeWalker;\nexports.INVALID_INTERVAL = INVALID_INTERVAL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/antlr4/tree/Tree.js\n");

/***/ }),

/***/ "./node_modules/antlr4/tree/Trees.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/Trees.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/Utils.js\");\n\nvar Token = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/Token.js\").Token;\n\nvar RuleNode = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/tree/Tree.js\").RuleNode;\n\nvar ErrorNode = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/tree/Tree.js\").ErrorNode;\n\nvar TerminalNode = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/tree/Tree.js\").TerminalNode;\n\nvar ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ \"./node_modules/antlr4/ParserRuleContext.js\").ParserRuleContext;\n\nvar RuleContext = __webpack_require__(/*! ./../RuleContext */ \"./node_modules/antlr4/RuleContext.js\").RuleContext;\n\nvar INVALID_ALT_NUMBER = __webpack_require__(/*! ./../atn/ATN */ \"./node_modules/antlr4/atn/ATN.js\").INVALID_ALT_NUMBER;\n/** A set of utility routines useful for all kinds of ANTLR trees. */\n\n\nfunction Trees() {} // Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n//  node payloads to get the text for the nodes.  Detect\n//  parse trees and extract data appropriately.\n\n\nTrees.toStringTree = function (tree, ruleNames, recog) {\n  ruleNames = ruleNames || null;\n  recog = recog || null;\n\n  if (recog !== null) {\n    ruleNames = recog.ruleNames;\n  }\n\n  var s = Trees.getNodeText(tree, ruleNames);\n  s = Utils.escapeWhitespace(s, false);\n  var c = tree.getChildCount();\n\n  if (c === 0) {\n    return s;\n  }\n\n  var res = \"(\" + s + ' ';\n\n  if (c > 0) {\n    s = Trees.toStringTree(tree.getChild(0), ruleNames);\n    res = res.concat(s);\n  }\n\n  for (var i = 1; i < c; i++) {\n    s = Trees.toStringTree(tree.getChild(i), ruleNames);\n    res = res.concat(' ' + s);\n  }\n\n  res = res.concat(\")\");\n  return res;\n};\n\nTrees.getNodeText = function (t, ruleNames, recog) {\n  ruleNames = ruleNames || null;\n  recog = recog || null;\n\n  if (recog !== null) {\n    ruleNames = recog.ruleNames;\n  }\n\n  if (ruleNames !== null) {\n    if (t instanceof RuleContext) {\n      var altNumber = t.getAltNumber();\n\n      if (altNumber != INVALID_ALT_NUMBER) {\n        return ruleNames[t.ruleIndex] + \":\" + altNumber;\n      }\n\n      return ruleNames[t.ruleIndex];\n    } else if (t instanceof ErrorNode) {\n      return t.toString();\n    } else if (t instanceof TerminalNode) {\n      if (t.symbol !== null) {\n        return t.symbol.text;\n      }\n    }\n  } // no recog for rule names\n\n\n  var payload = t.getPayload();\n\n  if (payload instanceof Token) {\n    return payload.text;\n  }\n\n  return t.getPayload().toString();\n}; // Return ordered list of all children of this node\n\n\nTrees.getChildren = function (t) {\n  var list = [];\n\n  for (var i = 0; i < t.getChildCount(); i++) {\n    list.push(t.getChild(i));\n  }\n\n  return list;\n}; // Return a list of all ancestors of this node.  The first node of\n//  list is the root and the last is the parent of this node.\n//\n\n\nTrees.getAncestors = function (t) {\n  var ancestors = [];\n  t = t.getParent();\n\n  while (t !== null) {\n    ancestors = [t].concat(ancestors);\n    t = t.getParent();\n  }\n\n  return ancestors;\n};\n\nTrees.findAllTokenNodes = function (t, ttype) {\n  return Trees.findAllNodes(t, ttype, true);\n};\n\nTrees.findAllRuleNodes = function (t, ruleIndex) {\n  return Trees.findAllNodes(t, ruleIndex, false);\n};\n\nTrees.findAllNodes = function (t, index, findTokens) {\n  var nodes = [];\n\n  Trees._findAllNodes(t, index, findTokens, nodes);\n\n  return nodes;\n};\n\nTrees._findAllNodes = function (t, index, findTokens, nodes) {\n  // check this node (the root) first\n  if (findTokens && t instanceof TerminalNode) {\n    if (t.symbol.type === index) {\n      nodes.push(t);\n    }\n  } else if (!findTokens && t instanceof ParserRuleContext) {\n    if (t.ruleIndex === index) {\n      nodes.push(t);\n    }\n  } // check children\n\n\n  for (var i = 0; i < t.getChildCount(); i++) {\n    Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n  }\n};\n\nTrees.descendants = function (t) {\n  var nodes = [t];\n\n  for (var i = 0; i < t.getChildCount(); i++) {\n    nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n  }\n\n  return nodes;\n};\n\nexports.Trees = Trees;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L3RyZWUvVHJlZXMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L3RyZWUvVHJlZXMuanM/MmQzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcbnZhciBUb2tlbiA9IHJlcXVpcmUoJy4vLi4vVG9rZW4nKS5Ub2tlbjtcbnZhciBSdWxlTm9kZSA9IHJlcXVpcmUoJy4vVHJlZScpLlJ1bGVOb2RlO1xudmFyIEVycm9yTm9kZSA9IHJlcXVpcmUoJy4vVHJlZScpLkVycm9yTm9kZTtcbnZhciBUZXJtaW5hbE5vZGUgPSByZXF1aXJlKCcuL1RyZWUnKS5UZXJtaW5hbE5vZGU7XG52YXIgUGFyc2VyUnVsZUNvbnRleHQgPSByZXF1aXJlKCcuLy4uL1BhcnNlclJ1bGVDb250ZXh0JykuUGFyc2VyUnVsZUNvbnRleHQ7XG52YXIgUnVsZUNvbnRleHQgPSByZXF1aXJlKCcuLy4uL1J1bGVDb250ZXh0JykuUnVsZUNvbnRleHQ7XG52YXIgSU5WQUxJRF9BTFRfTlVNQkVSID0gcmVxdWlyZSgnLi8uLi9hdG4vQVROJykuSU5WQUxJRF9BTFRfTlVNQkVSO1xuXG5cbi8qKiBBIHNldCBvZiB1dGlsaXR5IHJvdXRpbmVzIHVzZWZ1bCBmb3IgYWxsIGtpbmRzIG9mIEFOVExSIHRyZWVzLiAqL1xuZnVuY3Rpb24gVHJlZXMoKSB7XG59XG5cbi8vIFByaW50IG91dCBhIHdob2xlIHRyZWUgaW4gTElTUCBmb3JtLiB7QGxpbmsgLy9nZXROb2RlVGV4dH0gaXMgdXNlZCBvbiB0aGVcbi8vICBub2RlIHBheWxvYWRzIHRvIGdldCB0aGUgdGV4dCBmb3IgdGhlIG5vZGVzLiAgRGV0ZWN0XG4vLyAgcGFyc2UgdHJlZXMgYW5kIGV4dHJhY3QgZGF0YSBhcHByb3ByaWF0ZWx5LlxuVHJlZXMudG9TdHJpbmdUcmVlID0gZnVuY3Rpb24odHJlZSwgcnVsZU5hbWVzLCByZWNvZykge1xuXHRydWxlTmFtZXMgPSBydWxlTmFtZXMgfHwgbnVsbDtcblx0cmVjb2cgPSByZWNvZyB8fCBudWxsO1xuICAgIGlmKHJlY29nIT09bnVsbCkge1xuICAgICAgIHJ1bGVOYW1lcyA9IHJlY29nLnJ1bGVOYW1lcztcbiAgICB9XG4gICAgdmFyIHMgPSBUcmVlcy5nZXROb2RlVGV4dCh0cmVlLCBydWxlTmFtZXMpO1xuICAgIHMgPSBVdGlscy5lc2NhcGVXaGl0ZXNwYWNlKHMsIGZhbHNlKTtcbiAgICB2YXIgYyA9IHRyZWUuZ2V0Q2hpbGRDb3VudCgpO1xuICAgIGlmKGM9PT0wKSB7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICB2YXIgcmVzID0gXCIoXCIgKyBzICsgJyAnO1xuICAgIGlmKGM+MCkge1xuICAgICAgICBzID0gVHJlZXMudG9TdHJpbmdUcmVlKHRyZWUuZ2V0Q2hpbGQoMCksIHJ1bGVOYW1lcyk7XG4gICAgICAgIHJlcyA9IHJlcy5jb25jYXQocyk7XG4gICAgfVxuICAgIGZvcih2YXIgaT0xO2k8YztpKyspIHtcbiAgICAgICAgcyA9IFRyZWVzLnRvU3RyaW5nVHJlZSh0cmVlLmdldENoaWxkKGkpLCBydWxlTmFtZXMpO1xuICAgICAgICByZXMgPSByZXMuY29uY2F0KCcgJyArIHMpO1xuICAgIH1cbiAgICByZXMgPSByZXMuY29uY2F0KFwiKVwiKTtcbiAgICByZXR1cm4gcmVzO1xufTtcblxuVHJlZXMuZ2V0Tm9kZVRleHQgPSBmdW5jdGlvbih0LCBydWxlTmFtZXMsIHJlY29nKSB7XG5cdHJ1bGVOYW1lcyA9IHJ1bGVOYW1lcyB8fCBudWxsO1xuXHRyZWNvZyA9IHJlY29nIHx8IG51bGw7XG4gICAgaWYocmVjb2chPT1udWxsKSB7XG4gICAgICAgIHJ1bGVOYW1lcyA9IHJlY29nLnJ1bGVOYW1lcztcbiAgICB9XG4gICAgaWYocnVsZU5hbWVzIT09bnVsbCkge1xuICAgICAgIGlmICh0IGluc3RhbmNlb2YgUnVsZUNvbnRleHQpIHtcbiAgICAgICAgICAgdmFyIGFsdE51bWJlciA9IHQuZ2V0QWx0TnVtYmVyKCk7XG4gICAgICAgICAgIGlmICggYWx0TnVtYmVyIT1JTlZBTElEX0FMVF9OVU1CRVIgKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gcnVsZU5hbWVzW3QucnVsZUluZGV4XStcIjpcIithbHROdW1iZXI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIHJ1bGVOYW1lc1t0LnJ1bGVJbmRleF07XG4gICAgICAgfSBlbHNlIGlmICggdCBpbnN0YW5jZW9mIEVycm9yTm9kZSkge1xuICAgICAgICAgICByZXR1cm4gdC50b1N0cmluZygpO1xuICAgICAgIH0gZWxzZSBpZih0IGluc3RhbmNlb2YgVGVybWluYWxOb2RlKSB7XG4gICAgICAgICAgIGlmKHQuc3ltYm9sIT09bnVsbCkge1xuICAgICAgICAgICAgICAgcmV0dXJuIHQuc3ltYm9sLnRleHQ7XG4gICAgICAgICAgIH1cbiAgICAgICB9XG4gICAgfVxuICAgIC8vIG5vIHJlY29nIGZvciBydWxlIG5hbWVzXG4gICAgdmFyIHBheWxvYWQgPSB0LmdldFBheWxvYWQoKTtcbiAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIFRva2VuICkge1xuICAgICAgIHJldHVybiBwYXlsb2FkLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0LmdldFBheWxvYWQoKS50b1N0cmluZygpO1xufTtcblxuXG4vLyBSZXR1cm4gb3JkZXJlZCBsaXN0IG9mIGFsbCBjaGlsZHJlbiBvZiB0aGlzIG5vZGVcblRyZWVzLmdldENoaWxkcmVuID0gZnVuY3Rpb24odCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXHRmb3IodmFyIGk9MDtpPHQuZ2V0Q2hpbGRDb3VudCgpO2krKykge1xuXHRcdGxpc3QucHVzaCh0LmdldENoaWxkKGkpKTtcblx0fVxuXHRyZXR1cm4gbGlzdDtcbn07XG5cbi8vIFJldHVybiBhIGxpc3Qgb2YgYWxsIGFuY2VzdG9ycyBvZiB0aGlzIG5vZGUuICBUaGUgZmlyc3Qgbm9kZSBvZlxuLy8gIGxpc3QgaXMgdGhlIHJvb3QgYW5kIHRoZSBsYXN0IGlzIHRoZSBwYXJlbnQgb2YgdGhpcyBub2RlLlxuLy9cblRyZWVzLmdldEFuY2VzdG9ycyA9IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgYW5jZXN0b3JzID0gW107XG4gICAgdCA9IHQuZ2V0UGFyZW50KCk7XG4gICAgd2hpbGUodCE9PW51bGwpIHtcbiAgICAgICAgYW5jZXN0b3JzID0gW3RdLmNvbmNhdChhbmNlc3RvcnMpO1xuICAgICAgICB0ID0gdC5nZXRQYXJlbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9ycztcbn07XG5cblRyZWVzLmZpbmRBbGxUb2tlbk5vZGVzID0gZnVuY3Rpb24odCwgdHR5cGUpIHtcbiAgICByZXR1cm4gVHJlZXMuZmluZEFsbE5vZGVzKHQsIHR0eXBlLCB0cnVlKTtcbn07XG5cblRyZWVzLmZpbmRBbGxSdWxlTm9kZXMgPSBmdW5jdGlvbih0LCBydWxlSW5kZXgpIHtcblx0cmV0dXJuIFRyZWVzLmZpbmRBbGxOb2Rlcyh0LCBydWxlSW5kZXgsIGZhbHNlKTtcbn07XG5cblRyZWVzLmZpbmRBbGxOb2RlcyA9IGZ1bmN0aW9uKHQsIGluZGV4LCBmaW5kVG9rZW5zKSB7XG5cdHZhciBub2RlcyA9IFtdO1xuXHRUcmVlcy5fZmluZEFsbE5vZGVzKHQsIGluZGV4LCBmaW5kVG9rZW5zLCBub2Rlcyk7XG5cdHJldHVybiBub2Rlcztcbn07XG5cblRyZWVzLl9maW5kQWxsTm9kZXMgPSBmdW5jdGlvbih0LCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpIHtcblx0Ly8gY2hlY2sgdGhpcyBub2RlICh0aGUgcm9vdCkgZmlyc3Rcblx0aWYoZmluZFRva2VucyAmJiAodCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkpIHtcblx0XHRpZih0LnN5bWJvbC50eXBlPT09aW5kZXgpIHtcblx0XHRcdG5vZGVzLnB1c2godCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYoIWZpbmRUb2tlbnMgJiYgKHQgaW5zdGFuY2VvZiBQYXJzZXJSdWxlQ29udGV4dCkpIHtcblx0XHRpZih0LnJ1bGVJbmRleD09PWluZGV4KSB7XG5cdFx0XHRub2Rlcy5wdXNoKHQpO1xuXHRcdH1cblx0fVxuXHQvLyBjaGVjayBjaGlsZHJlblxuXHRmb3IodmFyIGk9MDtpPHQuZ2V0Q2hpbGRDb3VudCgpO2krKykge1xuXHRcdFRyZWVzLl9maW5kQWxsTm9kZXModC5nZXRDaGlsZChpKSwgaW5kZXgsIGZpbmRUb2tlbnMsIG5vZGVzKTtcblx0fVxufTtcblxuVHJlZXMuZGVzY2VuZGFudHMgPSBmdW5jdGlvbih0KSB7XG5cdHZhciBub2RlcyA9IFt0XTtcbiAgICBmb3IodmFyIGk9MDtpPHQuZ2V0Q2hpbGRDb3VudCgpO2krKykge1xuICAgICAgICBub2RlcyA9IG5vZGVzLmNvbmNhdChUcmVlcy5kZXNjZW5kYW50cyh0LmdldENoaWxkKGkpKSk7XG4gICAgfVxuICAgIHJldHVybiBub2Rlcztcbn07XG5cblxuZXhwb3J0cy5UcmVlcyA9IFRyZWVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/tree/Trees.js\n");

/***/ }),

/***/ "./node_modules/antlr4/tree/index.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nvar Tree = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/tree/Tree.js\");\n\nexports.Trees = __webpack_require__(/*! ./Trees */ \"./node_modules/antlr4/tree/Trees.js\").Trees;\nexports.RuleNode = Tree.RuleNode;\nexports.ParseTreeListener = Tree.ParseTreeListener;\nexports.ParseTreeVisitor = Tree.ParseTreeVisitor;\nexports.ParseTreeWalker = Tree.ParseTreeWalker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYW50bHI0L3RyZWUvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW50bHI0L3RyZWUvaW5kZXguanM/MzY3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbnZhciBUcmVlID0gcmVxdWlyZSgnLi9UcmVlJyk7XG5leHBvcnRzLlRyZWVzID0gcmVxdWlyZSgnLi9UcmVlcycpLlRyZWVzO1xuZXhwb3J0cy5SdWxlTm9kZSA9IFRyZWUuUnVsZU5vZGU7XG5leHBvcnRzLlBhcnNlVHJlZUxpc3RlbmVyID0gVHJlZS5QYXJzZVRyZWVMaXN0ZW5lcjtcbmV4cG9ydHMuUGFyc2VUcmVlVmlzaXRvciA9IFRyZWUuUGFyc2VUcmVlVmlzaXRvcjtcbmV4cG9ydHMuUGFyc2VUcmVlV2Fsa2VyID0gVHJlZS5QYXJzZVRyZWVXYWxrZXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBS0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/antlr4/tree/index.js\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbW9jay9lbXB0eS5qcy5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/mock/empty.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/get-tokens.js":
/*!*****************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/get-tokens.js ***!
  \*****************************************************/
/*! exports provided: VtlClassname, tokenize, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VtlClassname\", function() { return VtlClassname; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenize\", function() { return tokenize; });\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\");\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _parser_vtl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-vtl */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/index.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar VtlClassname = {};\nVtlClassname.common = {\n  className: \"vtl-common\",\n  typeName: \"common\"\n};\nVtlClassname.integer = {\n  className: \"vtl-integer\",\n  typeName: \"int\"\n};\nVtlClassname[\"boolean\"] = {\n  className: \"vtl-boolean\",\n  typeName: \"boolean\"\n};\nVtlClassname.operator = {\n  className: \"vtl-operator\",\n  typeName: \"ope\"\n};\nVtlClassname.identifier = {\n  className: \"vtl-identifier\",\n  typeName: \"var\"\n};\nVtlClassname[\"function\"] = {\n  className: \"vtl-function\",\n  typeName: \"func\"\n};\nVtlClassname.keyword = {\n  className: \"vtl-keyword\",\n  typeName: \"keyword\"\n};\nVtlClassname.string = {\n  className: \"vtl-string\",\n  typeName: \"string\"\n};\nVtlClassname[\"float\"] = {\n  className: \"vtl-float\",\n  typeName: \"float\"\n};\nVtlClassname.mlComment = {\n  className: \"vtl-ml-comment\",\n  typeName: \"comment\"\n};\nVtlClassname.slComment = {\n  className: \"vtl-sl-comment\",\n  typeName: \"sl-comment\"\n};\nvar VTL_TYPES = {\n  ASSIGN: VtlClassname.operator,\n  EQUAL_THAN: VtlClassname.operator,\n  GREATER_THAN: VtlClassname.operator,\n  LESS_THAN: VtlClassname.operator,\n  GREATER_OR_EQUAL_THAN: VtlClassname.operator,\n  LESS_OR_EQUAL_THAN: VtlClassname.operator,\n  DIFFERENT_THAN: VtlClassname.operator,\n  INTEGER_CONSTANT: VtlClassname.integer,\n  STRING_CONSTANT: VtlClassname.string,\n  IDENTIFIER: VtlClassname.identifier,\n  FLOAT_CONSTANT: VtlClassname[\"float\"],\n  ML_COMMENT: VtlClassname.mlComment,\n  SL_COMMENT: VtlClassname.slComment,\n  BOOLEAN_CONSTANT: VtlClassname[\"boolean\"],\n  IF: VtlClassname.keyword,\n  THEN: VtlClassname.keyword,\n  ELSE: VtlClassname.keyword,\n  LEAD: VtlClassname[\"function\"],\n  LAST: VtlClassname[\"function\"],\n\n  /* exprAtom */\n  CHECK: VtlClassname[\"function\"],\n  CEIL: VtlClassname[\"function\"],\n  FLOOR: VtlClassname[\"function\"],\n  ABS: VtlClassname[\"function\"],\n  EXP: VtlClassname[\"function\"],\n  LN: VtlClassname[\"function\"],\n  LOG: VtlClassname[\"function\"],\n  TRUNC: VtlClassname[\"function\"],\n  POWER: VtlClassname[\"function\"],\n  SQRT: VtlClassname[\"function\"],\n  LEN: VtlClassname[\"function\"],\n  BETWEEN: VtlClassname[\"function\"],\n  TRIM: VtlClassname[\"function\"],\n  LTRIM: VtlClassname[\"function\"],\n  RTRIM: VtlClassname[\"function\"],\n  UCASE: VtlClassname[\"function\"],\n  LCASE: VtlClassname[\"function\"],\n  SUBSTR: VtlClassname[\"function\"],\n  INSTR: VtlClassname[\"function\"],\n  REPLACE: VtlClassname[\"function\"],\n  CHARSET_MATCH: VtlClassname[\"function\"],\n  ISNULL: VtlClassname[\"function\"],\n  NVL: VtlClassname[\"function\"],\n  MOD: VtlClassname[\"function\"]\n};\nvar tokenize = function tokenize(symbolicNames, lexer) {\n  return function (ligne) {\n    return function (_ref) {\n      var type = _ref.type,\n          start = _ref.start,\n          stop = _ref.stop;\n      // console.log(symbolicNames[type], ligne.substr(start, stop - start + 1));\n      var name = symbolicNames[type];\n      return _objectSpread({\n        lexerType: \"\",\n        name: name,\n        value: ligne.substr(start, stop - start + 1),\n        start: start,\n        stop: stop\n      }, getKind(name));\n    };\n  };\n};\n\nvar getKind = function getKind(type) {\n  return type in VTL_TYPES ? VTL_TYPES[type] : VtlClassname.common;\n};\n/* */\n\n\nvar getTokens = function getTokens(lines) {\n  var chars = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.InputStream(lines);\n  var lexer = new _parser_vtl__WEBPACK_IMPORTED_MODULE_1__[\"VtlLexer\"](chars);\n  lexer.removeErrorListeners();\n\n  lexer.skip = function () {};\n\n  var tokens = lexer.getAllTokens().map(tokenize(lexer.symbolicNames, lexer)(lines));\n  return tokens;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (getTokens);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYW50bHItdG9vbHMvdnRsLTIuMC1JbnNlZS9nZXQtdG9rZW5zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FudGxyLXRvb2xzL3Z0bC0yLjAtSW5zZWUvZ2V0LXRva2Vucy5qcz8yYTBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhbnRscjQgZnJvbSBcImFudGxyNFwiO1xyXG5pbXBvcnQgeyBWdGxMZXhlciB9IGZyb20gXCIuL3BhcnNlci12dGxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBWdGxDbGFzc25hbWUgPSB7fTtcclxuVnRsQ2xhc3NuYW1lLmNvbW1vbiA9IHsgY2xhc3NOYW1lOiBcInZ0bC1jb21tb25cIiwgdHlwZU5hbWU6IFwiY29tbW9uXCIgfTtcclxuVnRsQ2xhc3NuYW1lLmludGVnZXIgPSB7IGNsYXNzTmFtZTogXCJ2dGwtaW50ZWdlclwiLCB0eXBlTmFtZTogXCJpbnRcIiB9O1xyXG5WdGxDbGFzc25hbWUuYm9vbGVhbiA9IHsgY2xhc3NOYW1lOiBcInZ0bC1ib29sZWFuXCIsIHR5cGVOYW1lOiBcImJvb2xlYW5cIiB9O1xyXG5WdGxDbGFzc25hbWUub3BlcmF0b3IgPSB7IGNsYXNzTmFtZTogXCJ2dGwtb3BlcmF0b3JcIiwgdHlwZU5hbWU6IFwib3BlXCIgfTtcclxuVnRsQ2xhc3NuYW1lLmlkZW50aWZpZXIgPSB7IGNsYXNzTmFtZTogXCJ2dGwtaWRlbnRpZmllclwiLCB0eXBlTmFtZTogXCJ2YXJcIiB9O1xyXG5WdGxDbGFzc25hbWUuZnVuY3Rpb24gPSB7IGNsYXNzTmFtZTogXCJ2dGwtZnVuY3Rpb25cIiwgdHlwZU5hbWU6IFwiZnVuY1wiIH07XHJcblZ0bENsYXNzbmFtZS5rZXl3b3JkID0geyBjbGFzc05hbWU6IFwidnRsLWtleXdvcmRcIiwgdHlwZU5hbWU6IFwia2V5d29yZFwiIH07XHJcblZ0bENsYXNzbmFtZS5zdHJpbmcgPSB7IGNsYXNzTmFtZTogXCJ2dGwtc3RyaW5nXCIsIHR5cGVOYW1lOiBcInN0cmluZ1wiIH07XHJcblZ0bENsYXNzbmFtZS5mbG9hdCA9IHsgY2xhc3NOYW1lOiBcInZ0bC1mbG9hdFwiLCB0eXBlTmFtZTogXCJmbG9hdFwiIH07XHJcblZ0bENsYXNzbmFtZS5tbENvbW1lbnQgPSB7IGNsYXNzTmFtZTogXCJ2dGwtbWwtY29tbWVudFwiLCB0eXBlTmFtZTogXCJjb21tZW50XCIgfTtcclxuVnRsQ2xhc3NuYW1lLnNsQ29tbWVudCA9IHtcclxuICBjbGFzc05hbWU6IFwidnRsLXNsLWNvbW1lbnRcIixcclxuICB0eXBlTmFtZTogXCJzbC1jb21tZW50XCJcclxufTtcclxuXHJcbmNvbnN0IFZUTF9UWVBFUyA9IHtcclxuICBBU1NJR046IFZ0bENsYXNzbmFtZS5vcGVyYXRvcixcclxuICBFUVVBTF9USEFOOiBWdGxDbGFzc25hbWUub3BlcmF0b3IsXHJcbiAgR1JFQVRFUl9USEFOOiBWdGxDbGFzc25hbWUub3BlcmF0b3IsXHJcbiAgTEVTU19USEFOOiBWdGxDbGFzc25hbWUub3BlcmF0b3IsXHJcbiAgR1JFQVRFUl9PUl9FUVVBTF9USEFOOiBWdGxDbGFzc25hbWUub3BlcmF0b3IsXHJcbiAgTEVTU19PUl9FUVVBTF9USEFOOiBWdGxDbGFzc25hbWUub3BlcmF0b3IsXHJcbiAgRElGRkVSRU5UX1RIQU46IFZ0bENsYXNzbmFtZS5vcGVyYXRvcixcclxuICBJTlRFR0VSX0NPTlNUQU5UOiBWdGxDbGFzc25hbWUuaW50ZWdlcixcclxuICBTVFJJTkdfQ09OU1RBTlQ6IFZ0bENsYXNzbmFtZS5zdHJpbmcsXHJcbiAgSURFTlRJRklFUjogVnRsQ2xhc3NuYW1lLmlkZW50aWZpZXIsXHJcbiAgRkxPQVRfQ09OU1RBTlQ6IFZ0bENsYXNzbmFtZS5mbG9hdCxcclxuICBNTF9DT01NRU5UOiBWdGxDbGFzc25hbWUubWxDb21tZW50LFxyXG4gIFNMX0NPTU1FTlQ6IFZ0bENsYXNzbmFtZS5zbENvbW1lbnQsXHJcbiAgQk9PTEVBTl9DT05TVEFOVDogVnRsQ2xhc3NuYW1lLmJvb2xlYW4sXHJcblxyXG4gIElGOiBWdGxDbGFzc25hbWUua2V5d29yZCxcclxuICBUSEVOOiBWdGxDbGFzc25hbWUua2V5d29yZCxcclxuICBFTFNFOiBWdGxDbGFzc25hbWUua2V5d29yZCxcclxuXHJcbiAgTEVBRDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIExBU1Q6IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuXHJcbiAgLyogZXhwckF0b20gKi9cclxuICBDSEVDSzogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIENFSUw6IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBGTE9PUjogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIEFCUzogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIEVYUDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIExOOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgTE9HOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgVFJVTkM6IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBQT1dFUjogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIFNRUlQ6IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBMRU46IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBCRVRXRUVOOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgVFJJTTogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIExUUklNOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgUlRSSU06IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBVQ0FTRTogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIExDQVNFOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgU1VCU1RSOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgSU5TVFI6IFZ0bENsYXNzbmFtZS5mdW5jdGlvbixcclxuICBSRVBMQUNFOiBWdGxDbGFzc25hbWUuZnVuY3Rpb24sXHJcbiAgQ0hBUlNFVF9NQVRDSDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIElTTlVMTDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIE5WTDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uLFxyXG4gIE1PRDogVnRsQ2xhc3NuYW1lLmZ1bmN0aW9uXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdG9rZW5pemUgPSAoc3ltYm9saWNOYW1lcywgbGV4ZXIpID0+IGxpZ25lID0+ICh7XHJcbiAgdHlwZSxcclxuICBzdGFydCxcclxuICBzdG9wXHJcbn0pID0+IHtcclxuICAvLyBjb25zb2xlLmxvZyhzeW1ib2xpY05hbWVzW3R5cGVdLCBsaWduZS5zdWJzdHIoc3RhcnQsIHN0b3AgLSBzdGFydCArIDEpKTtcclxuICBjb25zdCBuYW1lID0gc3ltYm9saWNOYW1lc1t0eXBlXTtcclxuICByZXR1cm4ge1xyXG4gICAgbGV4ZXJUeXBlOiBcIlwiLFxyXG4gICAgbmFtZSxcclxuICAgIHZhbHVlOiBsaWduZS5zdWJzdHIoc3RhcnQsIHN0b3AgLSBzdGFydCArIDEpLFxyXG4gICAgc3RhcnQsXHJcbiAgICBzdG9wLFxyXG5cclxuICAgIC4uLmdldEtpbmQobmFtZSlcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0S2luZCA9IHR5cGUgPT5cclxuICB0eXBlIGluIFZUTF9UWVBFUyA/IFZUTF9UWVBFU1t0eXBlXSA6IFZ0bENsYXNzbmFtZS5jb21tb247XHJcblxyXG4vKiAqL1xyXG5jb25zdCBnZXRUb2tlbnMgPSBsaW5lcyA9PiB7XHJcbiAgY29uc3QgY2hhcnMgPSBuZXcgYW50bHI0LklucHV0U3RyZWFtKGxpbmVzKTtcclxuICBjb25zdCBsZXhlciA9IG5ldyBWdGxMZXhlcihjaGFycyk7XHJcblxyXG4gIGxleGVyLnJlbW92ZUVycm9yTGlzdGVuZXJzKCk7XHJcbiAgbGV4ZXIuc2tpcCA9ICgpID0+IHt9O1xyXG4gIGNvbnN0IHRva2VucyA9IGxleGVyXHJcbiAgICAuZ2V0QWxsVG9rZW5zKClcclxuICAgIC5tYXAodG9rZW5pemUobGV4ZXIuc3ltYm9saWNOYW1lcywgbGV4ZXIpKGxpbmVzKSk7XHJcblxyXG4gIHJldHVybiB0b2tlbnM7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBnZXRUb2tlbnM7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBL0NBO0FBa0RBO0FBQUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVNBO0FBaEJBO0FBQUE7QUFDQTtBQWlCQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/get-tokens.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/index.js":
/*!************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/index.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _get_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-tokens */ \"./src/antlr-tools/vtl-2.0-Insee/get-tokens.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse */ \"./src/antlr-tools/vtl-2.0-Insee/parse.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  parse: _parse__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  getTokens: _get_tokens__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYW50bHItdG9vbHMvdnRsLTIuMC1JbnNlZS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hbnRsci10b29scy92dGwtMi4wLUluc2VlL2luZGV4LmpzPzY4MGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldFRva2VucyBmcm9tICcuL2dldC10b2tlbnMnO1xyXG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7IHBhcnNlLCBnZXRUb2tlbnMgfTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/index.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parse.js":
/*!************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parse.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\");\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _parser_vtl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-vtl */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/index.js\");\n/* harmony import */ var _get_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./get-tokens */ \"./src/antlr-tools/vtl-2.0-Insee/get-tokens.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\nvar parse = function parse(code) {\n  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"start\";\n\n  try {\n    var chars = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.InputStream(code);\n    var lexer = new _parser_vtl__WEBPACK_IMPORTED_MODULE_1__[\"VtlLexer\"](chars);\n    var tokenstream = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.CommonTokenStream(lexer);\n    var parser = new _parser_vtl__WEBPACK_IMPORTED_MODULE_1__[\"VtlParser\"](tokenstream);\n    parser.buildParseTrees = true;\n    lexer.removeErrorListeners();\n    parser.removeErrorListeners();\n    var errorsListener = new VtlErrorsListener();\n    parser.addErrorListener(errorsListener);\n    var tree = level in parser ? parser[level]() : parser.start();\n    var inspector = new VtlInspector();\n    antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.ParseTreeWalker.DEFAULT.walk(inspector, tree);\n    return {\n      tokens: Object(_get_tokens__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(code),\n      errors: errorsListener.errors.map(function (_ref) {\n        var column = _ref.column,\n            line = _ref.line,\n            msg = _ref.msg;\n        return {\n          column: column,\n          line: line,\n          msg: msg\n        };\n      })\n    };\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n}; // const fillUnmapped = (tokens, source) => {\n//   return tokens.reduce(\n//     ({ stack, next }, t) => {\n//       if (t.start !== next) {\n//         return {\n//           stack: [\n//             ...stack,\n//             {\n//               name: \"UNMAPPED\",\n//               className: \"vtl-unmapped\",\n//               value: source.substr(next, t.start - next),\n//               start: next,\n//               stop: t.start - 1\n//             },\n//             t\n//           ],\n//           next: t.stop + 1\n//         };\n//       }\n//       return { stack: [...stack, t], next: t.stop + 1 };\n//     },\n//     { stack: [], next: 0 }\n//   ).stack;\n// };\n\n\nvar VtlErrorsListener = function VtlErrorsListener() {\n  _classCallCheck(this, VtlErrorsListener);\n};\n\nvar VtlInspector =\n/*#__PURE__*/\nfunction (_VtlListener) {\n  _inherits(VtlInspector, _VtlListener);\n\n  function VtlInspector() {\n    _classCallCheck(this, VtlInspector);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(VtlInspector).apply(this, arguments));\n  }\n\n  _createClass(VtlInspector, [{\n    key: \"exitExpr\",\n    value: function exitExpr(ctx) {// console.log(\"exp\", ctx.getText());\n    }\n  }, {\n    key: \"exitCeilAtom\",\n    value: function exitCeilAtom(ctx) {// console.log(ctx);\n      // console.log(\"ceil\", ctx.getText());\n      // console.log(\"ceil\", ctx.CEIL());\n      // const [args] = ctx.getText().match(/\\(.*\\)/);\n      // console.log(args);\n    }\n  }]);\n\n  return VtlInspector;\n}(_parser_vtl__WEBPACK_IMPORTED_MODULE_1__[\"VtlListener\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYW50bHItdG9vbHMvdnRsLTIuMC1JbnNlZS9wYXJzZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9hbnRsci10b29scy92dGwtMi4wLUluc2VlL3BhcnNlLmpzPzc5MzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFudGxyNCBmcm9tIFwiYW50bHI0XCI7XHJcbmltcG9ydCB7IFZ0bFBhcnNlciwgVnRsTGV4ZXIsIFZ0bExpc3RlbmVyIH0gZnJvbSBcIi4vcGFyc2VyLXZ0bFwiO1xyXG5pbXBvcnQgZ2V0VG9rZW5zIGZyb20gXCIuL2dldC10b2tlbnNcIjtcclxuXHJcbmNvbnN0IHBhcnNlID0gKGNvZGUsIGxldmVsID0gXCJzdGFydFwiKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGNoYXJzID0gbmV3IGFudGxyNC5JbnB1dFN0cmVhbShjb2RlKTtcclxuICAgIGNvbnN0IGxleGVyID0gbmV3IFZ0bExleGVyKGNoYXJzKTtcclxuICAgIGNvbnN0IHRva2Vuc3RyZWFtID0gbmV3IGFudGxyNC5Db21tb25Ub2tlblN0cmVhbShsZXhlcik7XHJcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgVnRsUGFyc2VyKHRva2Vuc3RyZWFtKTtcclxuICAgIHBhcnNlci5idWlsZFBhcnNlVHJlZXMgPSB0cnVlO1xyXG4gICAgbGV4ZXIucmVtb3ZlRXJyb3JMaXN0ZW5lcnMoKTtcclxuICAgIHBhcnNlci5yZW1vdmVFcnJvckxpc3RlbmVycygpO1xyXG4gICAgY29uc3QgZXJyb3JzTGlzdGVuZXIgPSBuZXcgVnRsRXJyb3JzTGlzdGVuZXIoKTtcclxuICAgIHBhcnNlci5hZGRFcnJvckxpc3RlbmVyKGVycm9yc0xpc3RlbmVyKTtcclxuICAgIGNvbnN0IHRyZWUgPSBsZXZlbCBpbiBwYXJzZXIgPyBwYXJzZXJbbGV2ZWxdKCkgOiBwYXJzZXIuc3RhcnQoKTtcclxuICAgIGNvbnN0IGluc3BlY3RvciA9IG5ldyBWdGxJbnNwZWN0b3IoKTtcclxuICAgIGFudGxyNC50cmVlLlBhcnNlVHJlZVdhbGtlci5ERUZBVUxULndhbGsoaW5zcGVjdG9yLCB0cmVlKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b2tlbnM6IGdldFRva2Vucyhjb2RlKSxcclxuICAgICAgZXJyb3JzOiBlcnJvcnNMaXN0ZW5lci5lcnJvcnMubWFwKCh7IGNvbHVtbiwgbGluZSwgbXNnIH0pID0+ICh7XHJcbiAgICAgICAgY29sdW1uLFxyXG4gICAgICAgIGxpbmUsXHJcbiAgICAgICAgbXNnXHJcbiAgICAgIH0pKVxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn07XHJcblxyXG4vLyBjb25zdCBmaWxsVW5tYXBwZWQgPSAodG9rZW5zLCBzb3VyY2UpID0+IHtcclxuLy8gICByZXR1cm4gdG9rZW5zLnJlZHVjZShcclxuLy8gICAgICh7IHN0YWNrLCBuZXh0IH0sIHQpID0+IHtcclxuLy8gICAgICAgaWYgKHQuc3RhcnQgIT09IG5leHQpIHtcclxuLy8gICAgICAgICByZXR1cm4ge1xyXG4vLyAgICAgICAgICAgc3RhY2s6IFtcclxuLy8gICAgICAgICAgICAgLi4uc3RhY2ssXHJcbi8vICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICBuYW1lOiBcIlVOTUFQUEVEXCIsXHJcbi8vICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInZ0bC11bm1hcHBlZFwiLFxyXG4vLyAgICAgICAgICAgICAgIHZhbHVlOiBzb3VyY2Uuc3Vic3RyKG5leHQsIHQuc3RhcnQgLSBuZXh0KSxcclxuLy8gICAgICAgICAgICAgICBzdGFydDogbmV4dCxcclxuLy8gICAgICAgICAgICAgICBzdG9wOiB0LnN0YXJ0IC0gMVxyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICB0XHJcbi8vICAgICAgICAgICBdLFxyXG4vLyAgICAgICAgICAgbmV4dDogdC5zdG9wICsgMVxyXG4vLyAgICAgICAgIH07XHJcbi8vICAgICAgIH1cclxuXHJcbi8vICAgICAgIHJldHVybiB7IHN0YWNrOiBbLi4uc3RhY2ssIHRdLCBuZXh0OiB0LnN0b3AgKyAxIH07XHJcbi8vICAgICB9LFxyXG4vLyAgICAgeyBzdGFjazogW10sIG5leHQ6IDAgfVxyXG4vLyAgICkuc3RhY2s7XHJcbi8vIH07XHJcblxyXG5jbGFzcyBWdGxFcnJvcnNMaXN0ZW5lciB7XHJcbiAgLy8gcmVwb3J0QW1iaWd1aXR5OiDGkiAocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpXHJcbiAgLy8gcmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0OiDGkiAocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncylcclxuICAvLyByZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHk6IMaSIChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgcHJlZGljdGlvbiwgY29uZmlncylcclxuICAvLyBzeW50YXhFcnJvcjogxpIgKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpXHJcbiAgLy8gY29uc3RydWN0b3I6IMaSIEVycm9yTGlzdGVuZXIoKVxyXG4gIC8vICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAvLyAgIHJlcG9ydEFtYmlndWl0eSgpIHt9XHJcbiAgLy8gICByZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQoKSB7fVxyXG4gIC8vICAgcmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KCkge31cclxuICAvLyAgIHN5bnRheEVycm9yKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpIHtcclxuICAvLyAgICAgY29uc29sZS5kZWJ1ZyhcIiVjc3ludGF4RXJyb3JcIiwgXCJjb2xvcjogcmVkO1wiLCBtc2csIGxpbmUsIGNvbHVtbik7XHJcbiAgLy8gICAgIHRoaXMuZXJyb3JzLnB1c2goeyBtc2csIGxpbmUsIGNvbHVtbiwgc3RhY2s6IGUgfSk7XHJcbiAgLy8gICB9XHJcbn1cclxuXHJcbmNsYXNzIFZ0bEluc3BlY3RvciBleHRlbmRzIFZ0bExpc3RlbmVyIHtcclxuICBleGl0RXhwcihjdHgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiZXhwXCIsIGN0eC5nZXRUZXh0KCkpO1xyXG4gIH1cclxuXHJcbiAgZXhpdENlaWxBdG9tKGN0eCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coY3R4KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY2VpbFwiLCBjdHguZ2V0VGV4dCgpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiY2VpbFwiLCBjdHguQ0VJTCgpKTtcclxuICAgIC8vIGNvbnN0IFthcmdzXSA9IGN0eC5nZXRUZXh0KCkubWF0Y2goL1xcKC4qXFwpLyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhhcmdzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBhcnNlO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFBQTtBQUZBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUVBOzs7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFYQTtBQUNBO0FBYUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parse.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlLexer.js":
/*!**************************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlLexer.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Generated from vtl-sources/Vtl-2.0-Insee/Vtl.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\");\n\nvar serializedATN = [\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964\", \"\\x02\\xFE\\u09B8\\b\\x01\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\", \"\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\", \"\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\", \"\\f\\t\\f\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\", \"\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\", \"\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\", \"\\t\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\", \"\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\", \"\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\", \"\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04\", \"*\\t*\\x04+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x04\", \"1\\t1\\x042\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x04\", \"8\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04\", \"?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04\", \"F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04\", \"M\\tM\\x04N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04\", \"T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04\", \"[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t`\\x04a\\ta\\x04\", \"b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04\", \"i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04\", \"p\\tp\\x04q\\tq\\x04r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04\", \"w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04{\\t{\\x04|\\t|\\x04}\\t}\\x04\", \"~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81\\x04\", \"\\x82\\t\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\", \"\\x85\\x04\\x86\\t\\x86\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\", \"\\x89\\t\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B\\x04\\x8C\\t\", \"\\x8C\\x04\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\", \"\\x90\\t\\x90\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\", \"\\x93\\x04\\x94\\t\\x94\\x04\\x95\\t\\x95\\x04\\x96\\t\\x96\\x04\", \"\\x97\\t\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\", \"\\x9A\\x04\\x9B\\t\\x9B\\x04\\x9C\\t\\x9C\\x04\\x9D\\t\\x9D\\x04\", \"\\x9E\\t\\x9E\\x04\\x9F\\t\\x9F\\x04\\xA0\\t\\xA0\\x04\\xA1\\t\", \"\\xA1\\x04\\xA2\\t\\xA2\\x04\\xA3\\t\\xA3\\x04\\xA4\\t\\xA4\\x04\", \"\\xA5\\t\\xA5\\x04\\xA6\\t\\xA6\\x04\\xA7\\t\\xA7\\x04\\xA8\\t\", \"\\xA8\\x04\\xA9\\t\\xA9\\x04\\xAA\\t\\xAA\\x04\\xAB\\t\\xAB\\x04\", \"\\xAC\\t\\xAC\\x04\\xAD\\t\\xAD\\x04\\xAE\\t\\xAE\\x04\\xAF\\t\", \"\\xAF\\x04\\xB0\\t\\xB0\\x04\\xB1\\t\\xB1\\x04\\xB2\\t\\xB2\\x04\", \"\\xB3\\t\\xB3\\x04\\xB4\\t\\xB4\\x04\\xB5\\t\\xB5\\x04\\xB6\\t\", \"\\xB6\\x04\\xB7\\t\\xB7\\x04\\xB8\\t\\xB8\\x04\\xB9\\t\\xB9\\x04\", \"\\xBA\\t\\xBA\\x04\\xBB\\t\\xBB\\x04\\xBC\\t\\xBC\\x04\\xBD\\t\", \"\\xBD\\x04\\xBE\\t\\xBE\\x04\\xBF\\t\\xBF\\x04\\xC0\\t\\xC0\\x04\", \"\\xC1\\t\\xC1\\x04\\xC2\\t\\xC2\\x04\\xC3\\t\\xC3\\x04\\xC4\\t\", \"\\xC4\\x04\\xC5\\t\\xC5\\x04\\xC6\\t\\xC6\\x04\\xC7\\t\\xC7\\x04\", \"\\xC8\\t\\xC8\\x04\\xC9\\t\\xC9\\x04\\xCA\\t\\xCA\\x04\\xCB\\t\", \"\\xCB\\x04\\xCC\\t\\xCC\\x04\\xCD\\t\\xCD\\x04\\xCE\\t\\xCE\\x04\", \"\\xCF\\t\\xCF\\x04\\xD0\\t\\xD0\\x04\\xD1\\t\\xD1\\x04\\xD2\\t\", \"\\xD2\\x04\\xD3\\t\\xD3\\x04\\xD4\\t\\xD4\\x04\\xD5\\t\\xD5\\x04\", \"\\xD6\\t\\xD6\\x04\\xD7\\t\\xD7\\x04\\xD8\\t\\xD8\\x04\\xD9\\t\", \"\\xD9\\x04\\xDA\\t\\xDA\\x04\\xDB\\t\\xDB\\x04\\xDC\\t\\xDC\\x04\", \"\\xDD\\t\\xDD\\x04\\xDE\\t\\xDE\\x04\\xDF\\t\\xDF\\x04\\xE0\\t\", \"\\xE0\\x04\\xE1\\t\\xE1\\x04\\xE2\\t\\xE2\\x04\\xE3\\t\\xE3\\x04\", \"\\xE4\\t\\xE4\\x04\\xE5\\t\\xE5\\x04\\xE6\\t\\xE6\\x04\\xE7\\t\", \"\\xE7\\x04\\xE8\\t\\xE8\\x04\\xE9\\t\\xE9\\x04\\xEA\\t\\xEA\\x04\", \"\\xEB\\t\\xEB\\x04\\xEC\\t\\xEC\\x04\\xED\\t\\xED\\x04\\xEE\\t\", \"\\xEE\\x04\\xEF\\t\\xEF\\x04\\xF0\\t\\xF0\\x04\\xF1\\t\\xF1\\x04\", \"\\xF2\\t\\xF2\\x04\\xF3\\t\\xF3\\x04\\xF4\\t\\xF4\\x04\\xF5\\t\", \"\\xF5\\x04\\xF6\\t\\xF6\\x04\\xF7\\t\\xF7\\x04\\xF8\\t\\xF8\\x04\", \"\\xF9\\t\\xF9\\x04\\xFA\\t\\xFA\\x04\\xFB\\t\\xFB\\x04\\xFC\\t\", \"\\xFC\\x04\\xFD\\t\\xFD\\x04\\xFE\\t\\xFE\\x04\\xFF\\t\\xFF\\x03\", \"\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\", \"\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\", \"\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\x0B\\x03\\x0B\\x03\", \"\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\", \"\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\", \"\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\", \"\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\", \"\\x10\\x03\\x11\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x13\\x03\", \"\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x15\\x03\", \"\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\", \"\\x17\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x18\\x03\", \"\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\", \"\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\", \"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\", \"\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\", \"\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\", \" \\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03!\\x03!\\x03!\\x03\", \"\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\", \"#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03$\\x03\", \"%\\x03%\\x03%\\x03%\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\", \"\\x03'\\x03(\\x03(\\x03(\\x03(\\x03)\\x03)\\x03)\\x03)\\x03\", \")\\x03)\\x03)\\x03)\\x03*\\x03*\\x03*\\x03+\\x03+\\x03+\\x03\", \"+\\x03+\\x03+\\x03+\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x03\", \",\\x03-\\x03-\\x03-\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03\", \"/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x030\\x030\\x030\\x03\", \"0\\x030\\x030\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x03\", \"1\\x031\\x031\\x032\\x032\\x032\\x032\\x032\\x033\\x033\\x03\", \"4\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x035\\x035\\x03\", \"5\\x035\\x035\\x035\\x035\\x035\\x035\\x036\\x036\\x036\\x03\", \"6\\x036\\x036\\x036\\x037\\x037\\x037\\x037\\x037\\x037\\x03\", \"8\\x038\\x038\\x038\\x038\\x038\\x038\\x038\\x038\\x038\\x03\", \"9\\x039\\x039\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03\", \";\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03\", \"<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03\", \"=\\x03=\\x03=\\x03=\\x03>\\x03>\\x03>\\x03>\\x03>\\x03?\\x03\", \"?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03\", \"@\\x03@\\x03@\\x03@\\x03@\\x03@\\x03A\\x03A\\x03A\\x03B\\x03\", \"B\\x03B\\x03B\\x03B\\x03C\\x03C\\x03C\\x03C\\x03D\\x03D\\x03\", \"D\\x03D\\x03D\\x03E\\x03E\\x03E\\x03E\\x03F\\x03F\\x03F\\x03\", \"F\\x03G\\x03G\\x03G\\x03G\\x03G\\x03G\\x03H\\x03H\\x03H\\x03\", \"H\\x03H\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03\", \"J\\x03J\\x03J\\x03J\\x03K\\x03K\\x03K\\x03K\\x03L\\x03L\\x03\", \"L\\x03M\\x03M\\x03M\\x03M\\x03N\\x03N\\x03N\\x03N\\x03N\\x03\", \"N\\x03O\\x03O\\x03O\\x03O\\x03O\\x03O\\x03P\\x03P\\x03P\\x03\", \"P\\x03P\\x03P\\x03Q\\x03Q\\x03Q\\x03Q\\x03R\\x03R\\x03R\\x03\", \"R\\x03R\\x03R\\x03R\\x03S\\x03S\\x03S\\x03T\\x03T\\x03T\\x03\", \"T\\x03T\\x03U\\x03U\\x03U\\x03U\\x03U\\x03U\\x03V\\x03V\\x03\", \"V\\x03V\\x03V\\x03V\\x03W\\x03W\\x03W\\x03W\\x03W\\x03W\\x03\", \"W\\x03X\\x03X\\x03X\\x03X\\x03Y\\x03Y\\x03Y\\x03Y\\x03Z\\x03\", \"Z\\x03Z\\x03Z\\x03Z\\x03Z\\x03Z\\x03[\\x03[\\x03[\\x03[\\x03\", \"[\\x03[\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03\", \"\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x03]\\x03]\\x03]\\x03]\\x03]\\x03\", \"]\\x03]\\x03]\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03^\\x03\", \"^\\x03^\\x03^\\x03_\\x03_\\x03_\\x03_\\x03_\\x03_\\x03_\\x03\", \"`\\x03`\\x03`\\x03`\\x03`\\x03`\\x03a\\x03a\\x03a\\x03a\\x03\", \"b\\x03b\\x03b\\x03b\\x03b\\x03c\\x03c\\x03c\\x03c\\x03c\\x03\", \"c\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03\", \"d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03d\\x03e\\x03e\\x03\", \"e\\x03e\\x03e\\x03f\\x03f\\x03f\\x03f\\x03g\\x03g\\x03g\\x03\", \"g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03g\\x03h\\x03h\\x03i\\x03\", \"i\\x03i\\x03i\\x03i\\x03i\\x03i\\x03i\\x03j\\x03j\\x03j\\x03\", \"j\\x03j\\x03j\\x03j\\x03j\\x03j\\x03j\\x03j\\x03j\\x03k\\x03\", \"k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03l\\x03l\\x03\", \"l\\x03l\\x03l\\x03m\\x03m\\x03m\\x03m\\x03m\\x03m\\x03m\\x03\", \"m\\x03m\\x03m\\x03n\\x03n\\x03n\\x03n\\x03n\\x03n\\x03n\\x03\", \"n\\x03o\\x03o\\x03o\\x03o\\x03o\\x03o\\x03o\\x03o\\x03o\\x03\", \"p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03q\\x03q\\x03q\\x03\", \"r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03r\\x03\", \"s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03s\\x03\", \"s\\x03s\\x03s\\x03t\\x03t\\x03t\\x03t\\x03t\\x03t\\x03t\\x03\", \"t\\x03u\\x03u\\x03u\\x03u\\x03u\\x03v\\x03v\\x03v\\x03v\\x03\", \"w\\x03w\\x03w\\x03w\\x03w\\x03w\\x03w\\x03w\\x03w\\x03w\\x03\", \"w\\x03w\\x03w\\x03x\\x03x\\x03x\\x03x\\x03x\\x03x\\x03y\\x03\", \"y\\x03y\\x03y\\x03y\\x03y\\x03z\\x03z\\x03z\\x03z\\x03z\\x03\", \"z\\x03{\\x03{\\x03{\\x03{\\x03{\\x03{\\x03{\\x03{\\x03|\\x03\", \"|\\x03|\\x03|\\x03|\\x03}\\x03}\\x03}\\x03}\\x03}\\x03}\\x03\", \"~\\x03~\\x03~\\x03~\\x03~\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\", \"\\x7F\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x80\\x03\", \"\\x80\\x03\\x80\\x03\\x80\\x03\\x81\\x03\\x81\\x03\\x81\\x03\", \"\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\", \"\\x81\\x03\\x81\\x03\\x82\\x03\\x82\\x03\\x82\\x03\\x82\\x03\", \"\\x82\\x03\\x82\\x03\\x82\\x03\\x82\\x03\\x82\\x03\\x82\\x03\", \"\\x82\\x03\\x82\\x03\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x03\", \"\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x03\\x84\\x03\\x84\\x03\", \"\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x03\", \"\\x84\\x03\\x85\\x03\\x85\\x03\\x85\\x03\\x85\\x03\\x85\\x03\", \"\\x85\\x03\\x86\\x03\\x86\\x03\\x86\\x03\\x86\\x03\\x86\\x03\", \"\\x86\\x03\\x86\\x03\\x87\\x03\\x87\\x03\\x87\\x03\\x87\\x03\", \"\\x87\\x03\\x87\\x03\\x87\\x03\\x88\\x03\\x88\\x03\\x88\\x03\", \"\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x03\", \"\\x88\\x03\\x88\\x03\\x88\\x03\\x89\\x03\\x89\\x03\\x89\\x03\", \"\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03\", \"\\x89\\x03\\x89\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\", \"\\x8B\\x03\\x8B\\x03\\x8B\\x03\\x8B\\x03\\x8B\\x03\\x8C\\x03\", \"\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\", \"\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\", \"\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8D\\x03\\x8D\\x03\\x8D\\x03\", \"\\x8D\\x03\\x8D\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\", \"\\x8E\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\", \"\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\", \"\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x90\\x03\\x90\\x03\", \"\\x90\\x03\\x90\\x03\\x90\\x03\\x90\\x03\\x90\\x03\\x90\\x03\", \"\\x90\\x03\\x90\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\", \"\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\", \"\\x92\\x03\\x92\\x03\\x92\\x03\\x92\\x03\\x92\\x03\\x93\\x03\", \"\\x93\\x03\\x93\\x03\\x93\\x03\\x93\\x03\\x93\\x03\\x94\\x03\", \"\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\", \"\\x94\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03\", \"\\x95\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\", \"\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\", \"\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\", \"\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\", \"\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\", \"\\x97\\x03\\x97\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\", \"\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\", \"\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x99\\x03\\x99\\x03\", \"\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\", \"\\x99\\x03\\x99\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\", \"\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9B\\x03\", \"\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\", \"\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9C\\x03\", \"\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9C\\x03\", \"\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\", \"\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9E\\x03\", \"\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9F\\x03\\x9F\\x03\", \"\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\", \"\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\xA0\\x03\\xA0\\x03\", \"\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA1\\x03\", \"\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\", \"\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\", \"\\xA2\\x03\\xA2\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\", \"\\xA3\\x03\\xA3\\x03\\xA4\\x03\\xA4\\x03\\xA4\\x03\\xA4\\x03\", \"\\xA4\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\", \"\\xA5\\x03\\xA5\\x03\\xA6\\x03\\xA6\\x03\\xA6\\x03\\xA6\\x03\", \"\\xA6\\x03\\xA6\\x03\\xA6\\x03\\xA6\\x03\\xA6\\x03\\xA7\\x03\", \"\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA8\\x03\\xA8\\x03\", \"\\xA8\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03\\xAA\\x03\\xAA\\x03\", \"\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\", \"\\xAA\\x03\\xAA\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\", \"\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAC\\x03\\xAC\\x03\\xAC\\x03\", \"\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAE\\x03\", \"\\xAE\\x03\\xAE\\x03\\xAE\\x03\\xAE\\x03\\xAF\\x03\\xAF\\x03\", \"\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x03\", \"\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xB0\\x03\\xB0\\x03\\xB0\\x03\", \"\\xB0\\x03\\xB0\\x03\\xB0\\x03\\xB0\\x03\\xB1\\x03\\xB1\\x03\", \"\\xB1\\x03\\xB1\\x03\\xB1\\x03\\xB1\\x03\\xB2\\x03\\xB2\\x03\", \"\\xB2\\x03\\xB2\\x03\\xB2\\x03\\xB2\\x03\\xB3\\x03\\xB3\\x03\", \"\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\", \"\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\", \"\\xB4\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\", \"\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB5\\x03\", \"\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\", \"\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB7\\x03\\xB7\\x03\", \"\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x03\", \"\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\", \"\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\", \"\\xB8\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\", \"\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xBA\\x03\", \"\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\", \"\\xBA\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\", \"\\xBB\\x03\\xBB\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x03\", \"\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBD\\x03\", \"\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\", \"\\xBD\\x03\\xBE\\x03\\xBE\\x03\\xBE\\x03\\xBE\\x03\\xBE\\x03\", \"\\xBE\\x03\\xBF\\x03\\xBF\\x03\\xBF\\x03\\xBF\\x03\\xBF\\x03\", \"\\xBF\\x03\\xBF\\x03\\xBF\\x03\\xC0\\x03\\xC0\\x03\\xC0\\x03\", \"\\xC0\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\", \"\\xC1\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\", \"\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\", \"\\xC2\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\", \"\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\", \"\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\", \"\\xC4\\x03\\xC4\\x03\\xC4\\x03\\xC4\\x03\\xC4\\x03\\xC4\\x03\", \"\\xC4\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\", \"\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC6\\x03\\xC6\\x03\", \"\\xC6\\x03\\xC6\\x03\\xC6\\x03\\xC6\\x03\\xC6\\x03\\xC6\\x03\", \"\\xC6\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\", \"\\xC8\\x03\\xC8\\x03\\xC8\\x03\\xC8\\x03\\xC8\\x03\\xC8\\x03\", \"\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\", \"\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\", \"\\xC9\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x03\", \"\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCB\\x03\", \"\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCC\\x03\", \"\\xCC\\x03\\xCC\\x03\\xCC\\x03\\xCC\\x03\\xCC\\x03\\xCC\\x03\", \"\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCE\\x03\", \"\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\", \"\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\", \"\\xCE\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\", \"\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\", \"\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\", \"\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x03\", \"\\xD0\\x03\\xD0\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\", \"\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\", \"\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x03\", \"\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\", \"\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\", \"\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD3\\x03\\xD3\\x03\", \"\\xD3\\x03\\xD3\\x03\\xD3\\x03\\xD3\\x03\\xD3\\x03\\xD3\\x03\", \"\\xD3\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\", \"\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD5\\x03\\xD5\\x03\", \"\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\", \"\\xD5\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\", \"\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\", \"\\xD6\\x03\\xD6\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\", \"\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\", \"\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\", \"\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\", \"\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD9\\x03\\xD9\\x03\\xD9\\x03\", \"\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xD9\\x03\", \"\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xDA\\x03\\xDA\\x03\\xDA\\x03\", \"\\xDA\\x03\\xDA\\x03\\xDA\\x03\\xDA\\x03\\xDA\\x03\\xDA\\x03\", \"\\xDA\\x03\\xDA\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\", \"\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\", \"\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDC\\x03\\xDC\\x03\\xDC\\x03\", \"\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDD\\x03\\xDD\\x03\", \"\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\", \"\\xDD\\x03\\xDD\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\", \"\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\", \"\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\", \"\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\", \"\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDF\\x03\\xDF\\x03\", \"\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\", \"\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\", \"\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\", \"\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\", \"\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\", \"\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\", \"\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\", \"\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\\xE0\\x03\", \"\\xE0\\x03\\xE0\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\", \"\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\", \"\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\", \"\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\", \"\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE2\\x03\\xE2\\x03\", \"\\xE2\\x03\\xE2\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x03\", \"\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE4\\x03\", \"\\xE4\\x05\\xE4\\u0886\\n\\xE4\\x03\\xE5\\x06\\xE5\\u0889\\n\\xE5\", \"\\r\\xE5\\x0E\\xE5\\u088A\\x03\\xE6\\x03\\xE6\\x06\\xE6\\u088F\", \"\\n\\xE6\\r\\xE6\\x0E\\xE6\\u0890\\x03\\xE7\\x06\\xE7\\u0894\\n\\xE7\", \"\\r\\xE7\\x0E\\xE7\\u0895\\x03\\xE7\\x03\\xE7\\x07\\xE7\\u089A\", \"\\n\\xE7\\f\\xE7\\x0E\\xE7\\u089D\\x0B\\xE7\\x03\\xE7\\x05\\xE7\", \"\\u08A0\\n\\xE7\\x03\\xE7\\x06\\xE7\\u08A3\\n\\xE7\\r\\xE7\\x0E\\xE7\", \"\\u08A4\\x03\\xE7\\x05\\xE7\\u08A8\\n\\xE7\\x03\\xE8\\x03\\xE8\", \"\\x05\\xE8\\u08AC\\n\\xE8\\x03\\xE8\\x06\\xE8\\u08AF\\n\\xE8\\r\\xE8\", \"\\x0E\\xE8\\u08B0\\x03\\xE9\\x03\\xE9\\x03\\xE9\\x03\\xE9\\x03\", \"\\xE9\\x03\\xE9\\x03\\xE9\\x03\\xE9\\x03\\xE9\\x05\\xE9\\u08BC\", \"\\n\\xE9\\x03\\xEA\\x03\\xEA\\x03\\xEA\\x03\\xEA\\x03\\xEA\", \"\\x03\\xEB\\x03\\xEB\\x07\\xEB\\u08C5\\n\\xEB\\f\\xEB\\x0E\\xEB\", \"\\u08C8\\x0B\\xEB\\x03\\xEB\\x03\\xEB\\x03\\xEC\\x03\\xEC\\x03\", \"\\xEC\\x07\\xEC\\u08CF\\n\\xEC\\f\\xEC\\x0E\\xEC\\u08D2\\x0B\\xEC\", \"\\x03\\xED\\x03\\xED\\x03\\xEE\\x03\\xEE\\x03\\xEE\\x03\\xEE\", \"\\x03\\xEE\\x05\\xEE\\u08DB\\n\\xEE\\x03\\xEF\\x03\\xEF\\x03\", \"\\xEF\\x05\\xEF\\u08E0\\n\\xEF\\x03\\xEF\\x03\\xEF\\x05\\xEF\", \"\\u08E4\\n\\xEF\\x03\\xF0\\x03\\xF0\\x03\\xF0\\x03\\xF0\\x03\", \"\\xF0\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x05\\xF1\\u08EE\\n\\xF1\", \"\\x03\\xF1\\x03\\xF1\\x05\\xF1\\u08F2\\n\\xF1\\x03\\xF2\\x03\", \"\\xF2\\x03\\xF2\\x05\\xF2\\u08F7\\n\\xF2\\x03\\xF2\\x03\\xF2\", \"\\x05\\xF2\\u08FB\\n\\xF2\\x03\\xF3\\x03\\xF3\\x03\\xF3\\x05\", \"\\xF3\\u0900\\n\\xF3\\x03\\xF3\\x03\\xF3\\x05\\xF3\\u0904\\n\\xF3\", \"\\x03\\xF4\\x03\\xF4\\x03\\xF4\\x05\\xF4\\u0909\\n\\xF4\\x03\", \"\\xF4\\x03\\xF4\\x05\\xF4\\u090D\\n\\xF4\\x03\\xF5\\x03\\xF5\", \"\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x05\\xF5\\u0915\\n\", \"\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x05\", \"\\xF5\\u091C\\n\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\", \"\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\", \"\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\", \"\\x03\\xF5\\x03\\xF5\\x05\\xF5\\u0930\\n\\xF5\\x03\\xF5\\x03\", \"\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\", \"\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x05\\xF5\\u093D\\n\\xF5\", \"\\x03\\xF6\\x03\\xF6\\x05\\xF6\\u0941\\n\\xF6\\x03\\xF6\\x03\", \"\\xF6\\x05\\xF6\\u0945\\n\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x05\\xF6\\u094B\\n\\xF6\\x03\\xF6\\x03\\xF6\\x05\", \"\\xF6\\u094F\\n\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x05\\xF6\\u0955\\n\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\", \"\\xF6\\x03\\xF6\\x05\\xF6\\u095C\\n\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\\x03\\xF6\", \"\\x03\\xF6\\x03\\xF6\\x05\\xF6\\u097A\\n\\xF6\\x03\\xF7\\x03\", \"\\xF7\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\", \"\\xF8\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\\xF8\\x03\", \"\\xF8\\x03\\xF8\\x03\\xF9\\x03\\xF9\\x03\\xFA\\x03\\xFA\\x03\", \"\\xFA\\x03\\xFA\\x03\\xFB\\x03\\xFB\\x03\\xFC\\x03\\xFC\\x03\", \"\\xFC\\x03\\xFC\\x07\\xFC\\u0997\\n\\xFC\\f\\xFC\\x0E\\xFC\\u099A\", \"\\x0B\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\", \"\\x03\\xFD\\x03\\xFD\\x03\\xFD\\x03\\xFD\\x07\\xFD\\u09A5\\n\", \"\\xFD\\f\\xFD\\x0E\\xFD\\u09A8\\x0B\\xFD\\x03\\xFD\\x03\\xFD\", \"\\x03\\xFD\\x03\\xFD\\x03\\xFE\\x03\\xFE\\x03\\xFE\\x03\\xFE\", \"\\x03\\xFE\\x03\\xFE\\x03\\xFE\\x05\\xFE\\u09B5\\n\\xFE\\x03\", \"\\xFF\\x03\\xFF\\x04\\u0998\\u09A6\\x02\\u0100\\x03\\x03\\x05\\x04\", \"\\x07\\x05\\t\\x06\\x0B\\x07\\r\\b\\x0F\\t\\x11\\n\\x13\\x0B\\x15\", \"\\f\\x17\\r\\x19\\x0E\\x1B\\x0F\\x1D\\x10\\x1F\\x11!\\x12#\\x13\", \"%\\x14'\\x15)\\x16+\\x17-\\x18/\\x191\\x1A3\\x1B5\\x1C7\\x1D\", \"9\\x1E;\\x1F= ?!A\\\"C#E$G%I&K'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o\", \"9q:s;u<w=y>{?}@\\x7FA\\x81B\\x83C\\x85D\\x87E\\x89F\\x8BG\\x8D\", \"H\\x8FI\\x91J\\x93K\\x95L\\x97M\\x99N\\x9BO\\x9DP\\x9FQ\\xA1\", \"R\\xA3S\\xA5T\\xA7U\\xA9V\\xABW\\xADX\\xAFY\\xB1Z\\xB3[\\xB5\", \"\\\\\\xB7]\\xB9^\\xBB_\\xBD`\\xBFa\\xC1b\\xC3c\\xC5d\\xC7e\\xC9\", \"f\\xCBg\\xCDh\\xCFi\\xD1j\\xD3k\\xD5l\\xD7m\\xD9n\\xDBo\\xDD\", \"p\\xDFq\\xE1r\\xE3s\\xE5t\\xE7u\\xE9v\\xEBw\\xEDx\\xEFy\\xF1\", \"z\\xF3{\\xF5|\\xF7}\\xF9~\\xFB\\x7F\\xFD\\x80\\xFF\\x81\\u0101\", \"\\x82\\u0103\\x83\\u0105\\x84\\u0107\\x85\\u0109\\x86\\u010B\\x87\\u010D\", \"\\x88\\u010F\\x89\\u0111\\x8A\\u0113\\x8B\\u0115\\x8C\\u0117\\x8D\\u0119\", \"\\x8E\\u011B\\x8F\\u011D\\x90\\u011F\\x91\\u0121\\x92\\u0123\\x93\\u0125\", \"\\x94\\u0127\\x95\\u0129\\x96\\u012B\\x97\\u012D\\x98\\u012F\\x99\\u0131\", \"\\x9A\\u0133\\x9B\\u0135\\x9C\\u0137\\x9D\\u0139\\x9E\\u013B\\x9F\\u013D\", \"\\xA0\\u013F\\xA1\\u0141\\xA2\\u0143\\xA3\\u0145\\xA4\\u0147\\xA5\\u0149\", \"\\xA6\\u014B\\xA7\\u014D\\xA8\\u014F\\xA9\\u0151\\xAA\\u0153\\xAB\\u0155\", \"\\xAC\\u0157\\xAD\\u0159\\xAE\\u015B\\xAF\\u015D\\xB0\\u015F\\xB1\\u0161\", \"\\xB2\\u0163\\xB3\\u0165\\xB4\\u0167\\xB5\\u0169\\xB6\\u016B\\xB7\\u016D\", \"\\xB8\\u016F\\xB9\\u0171\\xBA\\u0173\\xBB\\u0175\\xBC\\u0177\\xBD\\u0179\", \"\\xBE\\u017B\\xBF\\u017D\\xC0\\u017F\\xC1\\u0181\\xC2\\u0183\\xC3\\u0185\", \"\\xC4\\u0187\\xC5\\u0189\\xC6\\u018B\\xC7\\u018D\\xC8\\u018F\\xC9\\u0191\", \"\\xCA\\u0193\\xCB\\u0195\\xCC\\u0197\\xCD\\u0199\\xCE\\u019B\\xCF\\u019D\", \"\\xD0\\u019F\\xD1\\u01A1\\xD2\\u01A3\\xD3\\u01A5\\xD4\\u01A7\\xD5\\u01A9\", \"\\xD6\\u01AB\\xD7\\u01AD\\xD8\\u01AF\\xD9\\u01B1\\xDA\\u01B3\\xDB\\u01B5\", \"\\xDC\\u01B7\\xDD\\u01B9\\xDE\\u01BB\\xDF\\u01BD\\xE0\\u01BF\\xE1\\u01C1\", \"\\xE2\\u01C3\\xE3\\u01C5\\xE4\\u01C7\\xE5\\u01C9\\xE6\\u01CB\\xE7\\u01CD\", \"\\xE8\\u01CF\\x02\\u01D1\\xE9\\u01D3\\xEA\\u01D5\\xEB\\u01D7\\xEC\\u01D9\", \"\\xED\\u01DB\\xEE\\u01DD\\xEF\\u01DF\\xF0\\u01E1\\xF1\\u01E3\\xF2\\u01E5\", \"\\xF3\\u01E7\\xF4\\u01E9\\xF5\\u01EB\\xF6\\u01ED\\xF7\\u01EF\\xF8\\u01F1\", \"\\x02\\u01F3\\xF9\\u01F5\\xFA\\u01F7\\xFB\\u01F9\\xFC\\u01FB\\xFD\\u01FD\", \"\\xFE\\x03\\x02\\n\\x04\\x02GGgg\\x04\\x02--//\\x03\\x02$$\\x05\", \"\\x02002;aa\\b\\x02CCFFOOSSUVYY\\x04\\x02C\\\\c|\\x05\\x02\\x0B\", \"\\f\\x0E\\x0F\\\"\\\"\\b\\x02CCFFOOSSUUYY\\x02\\u09EE\\x02\\x03\\x03\", \"\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\\x03\", \"\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\x0B\\x03\", \"\\x02\\x02\\x02\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\", \"\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\\x03\", \"\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\", \"\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\", \"\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\", \"\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\", \"\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\\x02'\\x03\\x02\\x02\", \"\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\\x02\", \"\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x02\", \"1\\x03\\x02\\x02\\x02\\x023\\x03\\x02\\x02\\x02\\x025\\x03\", \"\\x02\\x02\\x02\\x027\\x03\\x02\\x02\\x02\\x029\\x03\\x02\", \"\\x02\\x02\\x02;\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\\x02\", \"\\x02\\x02?\\x03\\x02\\x02\\x02\\x02A\\x03\\x02\\x02\\x02\", \"\\x02C\\x03\\x02\\x02\\x02\\x02E\\x03\\x02\\x02\\x02\\x02\", \"G\\x03\\x02\\x02\\x02\\x02I\\x03\\x02\\x02\\x02\\x02K\\x03\", \"\\x02\\x02\\x02\\x02M\\x03\\x02\\x02\\x02\\x02O\\x03\\x02\", \"\\x02\\x02\\x02Q\\x03\\x02\\x02\\x02\\x02S\\x03\\x02\\x02\", \"\\x02\\x02U\\x03\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\\x02\", \"\\x02Y\\x03\\x02\\x02\\x02\\x02[\\x03\\x02\\x02\\x02\\x02\", \"]\\x03\\x02\\x02\\x02\\x02_\\x03\\x02\\x02\\x02\\x02a\\x03\", \"\\x02\\x02\\x02\\x02c\\x03\\x02\\x02\\x02\\x02e\\x03\\x02\", \"\\x02\\x02\\x02g\\x03\\x02\\x02\\x02\\x02i\\x03\\x02\\x02\", \"\\x02\\x02k\\x03\\x02\\x02\\x02\\x02m\\x03\\x02\\x02\\x02\", \"\\x02o\\x03\\x02\\x02\\x02\\x02q\\x03\\x02\\x02\\x02\\x02\", \"s\\x03\\x02\\x02\\x02\\x02u\\x03\\x02\\x02\\x02\\x02w\\x03\", \"\\x02\\x02\\x02\\x02y\\x03\\x02\\x02\\x02\\x02{\\x03\\x02\", \"\\x02\\x02\\x02}\\x03\\x02\\x02\\x02\\x02\\x7F\\x03\\x02\", \"\\x02\\x02\\x02\\x81\\x03\\x02\\x02\\x02\\x02\\x83\\x03\\x02\", \"\\x02\\x02\\x02\\x85\\x03\\x02\\x02\\x02\\x02\\x87\\x03\\x02\", \"\\x02\\x02\\x02\\x89\\x03\\x02\\x02\\x02\\x02\\x8B\\x03\\x02\", \"\\x02\\x02\\x02\\x8D\\x03\\x02\\x02\\x02\\x02\\x8F\\x03\\x02\", \"\\x02\\x02\\x02\\x91\\x03\\x02\\x02\\x02\\x02\\x93\\x03\\x02\", \"\\x02\\x02\\x02\\x95\\x03\\x02\\x02\\x02\\x02\\x97\\x03\\x02\", \"\\x02\\x02\\x02\\x99\\x03\\x02\\x02\\x02\\x02\\x9B\\x03\\x02\", \"\\x02\\x02\\x02\\x9D\\x03\\x02\\x02\\x02\\x02\\x9F\\x03\\x02\", \"\\x02\\x02\\x02\\xA1\\x03\\x02\\x02\\x02\\x02\\xA3\\x03\\x02\", \"\\x02\\x02\\x02\\xA5\\x03\\x02\\x02\\x02\\x02\\xA7\\x03\\x02\", \"\\x02\\x02\\x02\\xA9\\x03\\x02\\x02\\x02\\x02\\xAB\\x03\\x02\", \"\\x02\\x02\\x02\\xAD\\x03\\x02\\x02\\x02\\x02\\xAF\\x03\\x02\", \"\\x02\\x02\\x02\\xB1\\x03\\x02\\x02\\x02\\x02\\xB3\\x03\\x02\", \"\\x02\\x02\\x02\\xB5\\x03\\x02\\x02\\x02\\x02\\xB7\\x03\\x02\", \"\\x02\\x02\\x02\\xB9\\x03\\x02\\x02\\x02\\x02\\xBB\\x03\\x02\", \"\\x02\\x02\\x02\\xBD\\x03\\x02\\x02\\x02\\x02\\xBF\\x03\\x02\", \"\\x02\\x02\\x02\\xC1\\x03\\x02\\x02\\x02\\x02\\xC3\\x03\\x02\", \"\\x02\\x02\\x02\\xC5\\x03\\x02\\x02\\x02\\x02\\xC7\\x03\\x02\", \"\\x02\\x02\\x02\\xC9\\x03\\x02\\x02\\x02\\x02\\xCB\\x03\\x02\", \"\\x02\\x02\\x02\\xCD\\x03\\x02\\x02\\x02\\x02\\xCF\\x03\\x02\", \"\\x02\\x02\\x02\\xD1\\x03\\x02\\x02\\x02\\x02\\xD3\\x03\\x02\", \"\\x02\\x02\\x02\\xD5\\x03\\x02\\x02\\x02\\x02\\xD7\\x03\\x02\", \"\\x02\\x02\\x02\\xD9\\x03\\x02\\x02\\x02\\x02\\xDB\\x03\\x02\", \"\\x02\\x02\\x02\\xDD\\x03\\x02\\x02\\x02\\x02\\xDF\\x03\\x02\", \"\\x02\\x02\\x02\\xE1\\x03\\x02\\x02\\x02\\x02\\xE3\\x03\\x02\", \"\\x02\\x02\\x02\\xE5\\x03\\x02\\x02\\x02\\x02\\xE7\\x03\\x02\", \"\\x02\\x02\\x02\\xE9\\x03\\x02\\x02\\x02\\x02\\xEB\\x03\\x02\", \"\\x02\\x02\\x02\\xED\\x03\\x02\\x02\\x02\\x02\\xEF\\x03\\x02\", \"\\x02\\x02\\x02\\xF1\\x03\\x02\\x02\\x02\\x02\\xF3\\x03\\x02\", \"\\x02\\x02\\x02\\xF5\\x03\\x02\\x02\\x02\\x02\\xF7\\x03\\x02\", \"\\x02\\x02\\x02\\xF9\\x03\\x02\\x02\\x02\\x02\\xFB\\x03\\x02\", \"\\x02\\x02\\x02\\xFD\\x03\\x02\\x02\\x02\\x02\\xFF\\x03\\x02\", \"\\x02\\x02\\x02\\u0101\\x03\\x02\\x02\\x02\\x02\\u0103\\x03\\x02\", \"\\x02\\x02\\x02\\u0105\\x03\\x02\\x02\\x02\\x02\\u0107\\x03\\x02\", \"\\x02\\x02\\x02\\u0109\\x03\\x02\\x02\\x02\\x02\\u010B\\x03\\x02\", \"\\x02\\x02\\x02\\u010D\\x03\\x02\\x02\\x02\\x02\\u010F\\x03\\x02\", \"\\x02\\x02\\x02\\u0111\\x03\\x02\\x02\\x02\\x02\\u0113\\x03\\x02\", \"\\x02\\x02\\x02\\u0115\\x03\\x02\\x02\\x02\\x02\\u0117\\x03\\x02\", \"\\x02\\x02\\x02\\u0119\\x03\\x02\\x02\\x02\\x02\\u011B\\x03\\x02\", \"\\x02\\x02\\x02\\u011D\\x03\\x02\\x02\\x02\\x02\\u011F\\x03\\x02\", \"\\x02\\x02\\x02\\u0121\\x03\\x02\\x02\\x02\\x02\\u0123\\x03\\x02\", \"\\x02\\x02\\x02\\u0125\\x03\\x02\\x02\\x02\\x02\\u0127\\x03\\x02\", \"\\x02\\x02\\x02\\u0129\\x03\\x02\\x02\\x02\\x02\\u012B\\x03\\x02\", \"\\x02\\x02\\x02\\u012D\\x03\\x02\\x02\\x02\\x02\\u012F\\x03\\x02\", \"\\x02\\x02\\x02\\u0131\\x03\\x02\\x02\\x02\\x02\\u0133\\x03\\x02\", \"\\x02\\x02\\x02\\u0135\\x03\\x02\\x02\\x02\\x02\\u0137\\x03\\x02\", \"\\x02\\x02\\x02\\u0139\\x03\\x02\\x02\\x02\\x02\\u013B\\x03\\x02\", \"\\x02\\x02\\x02\\u013D\\x03\\x02\\x02\\x02\\x02\\u013F\\x03\\x02\", \"\\x02\\x02\\x02\\u0141\\x03\\x02\\x02\\x02\\x02\\u0143\\x03\\x02\", \"\\x02\\x02\\x02\\u0145\\x03\\x02\\x02\\x02\\x02\\u0147\\x03\\x02\", \"\\x02\\x02\\x02\\u0149\\x03\\x02\\x02\\x02\\x02\\u014B\\x03\\x02\", \"\\x02\\x02\\x02\\u014D\\x03\\x02\\x02\\x02\\x02\\u014F\\x03\\x02\", \"\\x02\\x02\\x02\\u0151\\x03\\x02\\x02\\x02\\x02\\u0153\\x03\\x02\", \"\\x02\\x02\\x02\\u0155\\x03\\x02\\x02\\x02\\x02\\u0157\\x03\\x02\", \"\\x02\\x02\\x02\\u0159\\x03\\x02\\x02\\x02\\x02\\u015B\\x03\\x02\", \"\\x02\\x02\\x02\\u015D\\x03\\x02\\x02\\x02\\x02\\u015F\\x03\\x02\", \"\\x02\\x02\\x02\\u0161\\x03\\x02\\x02\\x02\\x02\\u0163\\x03\\x02\", \"\\x02\\x02\\x02\\u0165\\x03\\x02\\x02\\x02\\x02\\u0167\\x03\\x02\", \"\\x02\\x02\\x02\\u0169\\x03\\x02\\x02\\x02\\x02\\u016B\\x03\\x02\", \"\\x02\\x02\\x02\\u016D\\x03\\x02\\x02\\x02\\x02\\u016F\\x03\\x02\", \"\\x02\\x02\\x02\\u0171\\x03\\x02\\x02\\x02\\x02\\u0173\\x03\\x02\", \"\\x02\\x02\\x02\\u0175\\x03\\x02\\x02\\x02\\x02\\u0177\\x03\\x02\", \"\\x02\\x02\\x02\\u0179\\x03\\x02\\x02\\x02\\x02\\u017B\\x03\\x02\", \"\\x02\\x02\\x02\\u017D\\x03\\x02\\x02\\x02\\x02\\u017F\\x03\\x02\", \"\\x02\\x02\\x02\\u0181\\x03\\x02\\x02\\x02\\x02\\u0183\\x03\\x02\", \"\\x02\\x02\\x02\\u0185\\x03\\x02\\x02\\x02\\x02\\u0187\\x03\\x02\", \"\\x02\\x02\\x02\\u0189\\x03\\x02\\x02\\x02\\x02\\u018B\\x03\\x02\", \"\\x02\\x02\\x02\\u018D\\x03\\x02\\x02\\x02\\x02\\u018F\\x03\\x02\", \"\\x02\\x02\\x02\\u0191\\x03\\x02\\x02\\x02\\x02\\u0193\\x03\\x02\", \"\\x02\\x02\\x02\\u0195\\x03\\x02\\x02\\x02\\x02\\u0197\\x03\\x02\", \"\\x02\\x02\\x02\\u0199\\x03\\x02\\x02\\x02\\x02\\u019B\\x03\\x02\", \"\\x02\\x02\\x02\\u019D\\x03\\x02\\x02\\x02\\x02\\u019F\\x03\\x02\", \"\\x02\\x02\\x02\\u01A1\\x03\\x02\\x02\\x02\\x02\\u01A3\\x03\\x02\", \"\\x02\\x02\\x02\\u01A5\\x03\\x02\\x02\\x02\\x02\\u01A7\\x03\\x02\", \"\\x02\\x02\\x02\\u01A9\\x03\\x02\\x02\\x02\\x02\\u01AB\\x03\\x02\", \"\\x02\\x02\\x02\\u01AD\\x03\\x02\\x02\\x02\\x02\\u01AF\\x03\\x02\", \"\\x02\\x02\\x02\\u01B1\\x03\\x02\\x02\\x02\\x02\\u01B3\\x03\\x02\", \"\\x02\\x02\\x02\\u01B5\\x03\\x02\\x02\\x02\\x02\\u01B7\\x03\\x02\", \"\\x02\\x02\\x02\\u01B9\\x03\\x02\\x02\\x02\\x02\\u01BB\\x03\\x02\", \"\\x02\\x02\\x02\\u01BD\\x03\\x02\\x02\\x02\\x02\\u01BF\\x03\\x02\", \"\\x02\\x02\\x02\\u01C1\\x03\\x02\\x02\\x02\\x02\\u01C3\\x03\\x02\", \"\\x02\\x02\\x02\\u01C5\\x03\\x02\\x02\\x02\\x02\\u01C7\\x03\\x02\", \"\\x02\\x02\\x02\\u01C9\\x03\\x02\\x02\\x02\\x02\\u01CB\\x03\\x02\", \"\\x02\\x02\\x02\\u01CD\\x03\\x02\\x02\\x02\\x02\\u01D1\\x03\\x02\", \"\\x02\\x02\\x02\\u01D3\\x03\\x02\\x02\\x02\\x02\\u01D5\\x03\\x02\", \"\\x02\\x02\\x02\\u01D7\\x03\\x02\\x02\\x02\\x02\\u01D9\\x03\\x02\", \"\\x02\\x02\\x02\\u01DB\\x03\\x02\\x02\\x02\\x02\\u01DD\\x03\\x02\", \"\\x02\\x02\\x02\\u01DF\\x03\\x02\\x02\\x02\\x02\\u01E1\\x03\\x02\", \"\\x02\\x02\\x02\\u01E3\\x03\\x02\\x02\\x02\\x02\\u01E5\\x03\\x02\", \"\\x02\\x02\\x02\\u01E7\\x03\\x02\\x02\\x02\\x02\\u01E9\\x03\\x02\", \"\\x02\\x02\\x02\\u01EB\\x03\\x02\\x02\\x02\\x02\\u01ED\\x03\\x02\", \"\\x02\\x02\\x02\\u01EF\\x03\\x02\\x02\\x02\\x02\\u01F3\\x03\\x02\", \"\\x02\\x02\\x02\\u01F5\\x03\\x02\\x02\\x02\\x02\\u01F7\\x03\\x02\", \"\\x02\\x02\\x02\\u01F9\\x03\\x02\\x02\\x02\\x02\\u01FB\\x03\\x02\", \"\\x02\\x02\\x02\\u01FD\\x03\\x02\\x02\\x02\\x03\\u01FF\\x03\\x02\", \"\\x02\\x02\\x05\\u0201\\x03\\x02\\x02\\x02\\x07\\u0203\\x03\\x02\", \"\\x02\\x02\\t\\u0205\\x03\\x02\\x02\\x02\\x0B\\u0207\\x03\\x02\", \"\\x02\\x02\\r\\u0209\\x03\\x02\\x02\\x02\\x0F\\u020B\\x03\\x02\", \"\\x02\\x02\\x11\\u020D\\x03\\x02\\x02\\x02\\x13\\u020F\\x03\\x02\", \"\\x02\\x02\\x15\\u0211\\x03\\x02\\x02\\x02\\x17\\u0213\\x03\\x02\", \"\\x02\\x02\\x19\\u0215\\x03\\x02\\x02\\x02\\x1B\\u0217\\x03\\x02\", \"\\x02\\x02\\x1D\\u0228\\x03\\x02\\x02\\x02\\x1F\\u022A\\x03\\x02\", \"\\x02\\x02!\\u022D\\x03\\x02\\x02\\x02#\\u022F\\x03\\x02\\x02\", \"\\x02%\\u0231\\x03\\x02\\x02\\x02'\\u0234\\x03\\x02\\x02\\x02\", \")\\u0237\\x03\\x02\\x02\\x02+\\u023A\\x03\\x02\\x02\\x02-\\u023C\", \"\\x03\\x02\\x02\\x02/\\u0241\\x03\\x02\\x02\\x021\\u0244\\x03\", \"\\x02\\x02\\x023\\u0249\\x03\\x02\\x02\\x025\\u024E\\x03\\x02\", \"\\x02\\x027\\u0254\\x03\\x02\\x02\\x029\\u0259\\x03\\x02\\x02\", \"\\x02;\\u0266\\x03\\x02\\x02\\x02=\\u0269\\x03\\x02\\x02\\x02\", \"?\\u026E\\x03\\x02\\x02\\x02A\\u0273\\x03\\x02\\x02\\x02C\\u0278\", \"\\x03\\x02\\x02\\x02E\\u0281\\x03\\x02\\x02\\x02G\\u0288\\x03\", \"\\x02\\x02\\x02I\\u028B\\x03\\x02\\x02\\x02K\\u028F\\x03\\x02\", \"\\x02\\x02M\\u0292\\x03\\x02\\x02\\x02O\\u0296\\x03\\x02\\x02\", \"\\x02Q\\u029A\\x03\\x02\\x02\\x02S\\u02A2\\x03\\x02\\x02\\x02\", \"U\\u02A5\\x03\\x02\\x02\\x02W\\u02AC\\x03\\x02\\x02\\x02Y\\u02B3\", \"\\x03\\x02\\x02\\x02[\\u02B6\\x03\\x02\\x02\\x02]\\u02BC\\x03\", \"\\x02\\x02\\x02_\\u02C1\\x03\\x02\\x02\\x02a\\u02C9\\x03\\x02\", \"\\x02\\x02c\\u02D3\\x03\\x02\\x02\\x02e\\u02D8\\x03\\x02\\x02\", \"\\x02g\\u02DA\\x03\\x02\\x02\\x02i\\u02E2\\x03\\x02\\x02\\x02\", \"k\\u02EB\\x03\\x02\\x02\\x02m\\u02F2\\x03\\x02\\x02\\x02o\\u02F8\", \"\\x03\\x02\\x02\\x02q\\u0302\\x03\\x02\\x02\\x02s\\u0305\\x03\", \"\\x02\\x02\\x02u\\u030C\\x03\\x02\\x02\\x02w\\u0316\\x03\\x02\", \"\\x02\\x02y\\u0320\\x03\\x02\\x02\\x02{\\u0324\\x03\\x02\\x02\", \"\\x02}\\u0329\\x03\\x02\\x02\\x02\\x7F\\u0334\\x03\\x02\\x02\", \"\\x02\\x81\\u033A\\x03\\x02\\x02\\x02\\x83\\u033D\\x03\\x02\\x02\", \"\\x02\\x85\\u0342\\x03\\x02\\x02\\x02\\x87\\u0346\\x03\\x02\\x02\", \"\\x02\\x89\\u034B\\x03\\x02\\x02\\x02\\x8B\\u034F\\x03\\x02\\x02\", \"\\x02\\x8D\\u0353\\x03\\x02\\x02\\x02\\x8F\\u0359\\x03\\x02\\x02\", \"\\x02\\x91\\u035E\\x03\\x02\\x02\\x02\\x93\\u0366\\x03\\x02\\x02\", \"\\x02\\x95\\u036A\\x03\\x02\\x02\\x02\\x97\\u036E\\x03\\x02\\x02\", \"\\x02\\x99\\u0371\\x03\\x02\\x02\\x02\\x9B\\u0375\\x03\\x02\\x02\", \"\\x02\\x9D\\u037B\\x03\\x02\\x02\\x02\\x9F\\u0381\\x03\\x02\\x02\", \"\\x02\\xA1\\u0387\\x03\\x02\\x02\\x02\\xA3\\u038B\\x03\\x02\\x02\", \"\\x02\\xA5\\u0392\\x03\\x02\\x02\\x02\\xA7\\u0395\\x03\\x02\\x02\", \"\\x02\\xA9\\u039A\\x03\\x02\\x02\\x02\\xAB\\u03A0\\x03\\x02\\x02\", \"\\x02\\xAD\\u03A6\\x03\\x02\\x02\\x02\\xAF\\u03AD\\x03\\x02\\x02\", \"\\x02\\xB1\\u03B1\\x03\\x02\\x02\\x02\\xB3\\u03B5\\x03\\x02\\x02\", \"\\x02\\xB5\\u03BC\\x03\\x02\\x02\\x02\\xB7\\u03C2\\x03\\x02\\x02\", \"\\x02\\xB9\\u03CD\\x03\\x02\\x02\\x02\\xBB\\u03D5\\x03\\x02\\x02\", \"\\x02\\xBD\\u03DF\\x03\\x02\\x02\\x02\\xBF\\u03E6\\x03\\x02\\x02\", \"\\x02\\xC1\\u03EC\\x03\\x02\\x02\\x02\\xC3\\u03F0\\x03\\x02\\x02\", \"\\x02\\xC5\\u03F5\\x03\\x02\\x02\\x02\\xC7\\u03FB\\x03\\x02\\x02\", \"\\x02\\xC9\\u040C\\x03\\x02\\x02\\x02\\xCB\\u0411\\x03\\x02\\x02\", \"\\x02\\xCD\\u0415\\x03\\x02\\x02\\x02\\xCF\\u041F\\x03\\x02\\x02\", \"\\x02\\xD1\\u0421\\x03\\x02\\x02\\x02\\xD3\\u0429\\x03\\x02\\x02\", \"\\x02\\xD5\\u0435\\x03\\x02\\x02\\x02\\xD7\\u043E\\x03\\x02\\x02\", \"\\x02\\xD9\\u0443\\x03\\x02\\x02\\x02\\xDB\\u044D\\x03\\x02\\x02\", \"\\x02\\xDD\\u0455\\x03\\x02\\x02\\x02\\xDF\\u045E\\x03\\x02\\x02\", \"\\x02\\xE1\\u0465\\x03\\x02\\x02\\x02\\xE3\\u0468\\x03\\x02\\x02\", \"\\x02\\xE5\\u0472\\x03\\x02\\x02\\x02\\xE7\\u047F\\x03\\x02\\x02\", \"\\x02\\xE9\\u0487\\x03\\x02\\x02\\x02\\xEB\\u048C\\x03\\x02\\x02\", \"\\x02\\xED\\u0490\\x03\\x02\\x02\\x02\\xEF\\u049D\\x03\\x02\\x02\", \"\\x02\\xF1\\u04A3\\x03\\x02\\x02\\x02\\xF3\\u04A9\\x03\\x02\\x02\", \"\\x02\\xF5\\u04AF\\x03\\x02\\x02\\x02\\xF7\\u04B7\\x03\\x02\\x02\", \"\\x02\\xF9\\u04BC\\x03\\x02\\x02\\x02\\xFB\\u04C2\\x03\\x02\\x02\", \"\\x02\\xFD\\u04C7\\x03\\x02\\x02\\x02\\xFF\\u04CB\\x03\\x02\\x02\", \"\\x02\\u0101\\u04D3\\x03\\x02\\x02\\x02\\u0103\\u04DE\\x03\\x02\\x02\", \"\\x02\\u0105\\u04EA\\x03\\x02\\x02\\x02\\u0107\\u04F2\\x03\\x02\\x02\", \"\\x02\\u0109\\u04FB\\x03\\x02\\x02\\x02\\u010B\\u0501\\x03\\x02\\x02\", \"\\x02\\u010D\\u0508\\x03\\x02\\x02\\x02\\u010F\\u050F\\x03\\x02\\x02\", \"\\x02\\u0111\\u051B\\x03\\x02\\x02\\x02\\u0113\\u0526\\x03\\x02\\x02\", \"\\x02\\u0115\\u052A\\x03\\x02\\x02\\x02\\u0117\\u052F\\x03\\x02\\x02\", \"\\x02\\u0119\\u053F\\x03\\x02\\x02\\x02\\u011B\\u0544\\x03\\x02\\x02\", \"\\x02\\u011D\\u054E\\x03\\x02\\x02\\x02\\u011F\\u0558\\x03\\x02\\x02\", \"\\x02\\u0121\\u0562\\x03\\x02\\x02\\x02\\u0123\\u056C\\x03\\x02\\x02\", \"\\x02\\u0125\\u0571\\x03\\x02\\x02\\x02\\u0127\\u0577\\x03\\x02\\x02\", \"\\x02\\u0129\\u057F\\x03\\x02\\x02\\x02\\u012B\\u0585\\x03\\x02\\x02\", \"\\x02\\u012D\\u0596\\x03\\x02\\x02\\x02\\u012F\\u05A4\\x03\\x02\\x02\", \"\\x02\\u0131\\u05B2\\x03\\x02\\x02\\x02\\u0133\\u05BC\\x03\\x02\\x02\", \"\\x02\\u0135\\u05C5\\x03\\x02\\x02\\x02\\u0137\\u05D1\\x03\\x02\\x02\", \"\\x02\\u0139\\u05DB\\x03\\x02\\x02\\x02\\u013B\\u05E3\\x03\\x02\\x02\", \"\\x02\\u013D\\u05E8\\x03\\x02\\x02\\x02\\u013F\\u05F4\\x03\\x02\\x02\", \"\\x02\\u0141\\u05FB\\x03\\x02\\x02\\x02\\u0143\\u0602\\x03\\x02\\x02\", \"\\x02\\u0145\\u060A\\x03\\x02\\x02\\x02\\u0147\\u0610\\x03\\x02\\x02\", \"\\x02\\u0149\\u0615\\x03\\x02\\x02\\x02\\u014B\\u061C\\x03\\x02\\x02\", \"\\x02\\u014D\\u0625\\x03\\x02\\x02\\x02\\u014F\\u062A\\x03\\x02\\x02\", \"\\x02\\u0151\\u062D\\x03\\x02\\x02\\x02\\u0153\\u0630\\x03\\x02\\x02\", \"\\x02\\u0155\\u063A\\x03\\x02\\x02\\x02\\u0157\\u0641\\x03\\x02\\x02\", \"\\x02\\u0159\\u0644\\x03\\x02\\x02\\x02\\u015B\\u0649\\x03\\x02\\x02\", \"\\x02\\u015D\\u064E\\x03\\x02\\x02\\x02\\u015F\\u0659\\x03\\x02\\x02\", \"\\x02\\u0161\\u0660\\x03\\x02\\x02\\x02\\u0163\\u0666\\x03\\x02\\x02\", \"\\x02\\u0165\\u066C\\x03\\x02\\x02\\x02\\u0167\\u0674\\x03\\x02\\x02\", \"\\x02\\u0169\\u067B\\x03\\x02\\x02\\x02\\u016B\\u0686\\x03\\x02\\x02\", \"\\x02\\u016D\\u0690\\x03\\x02\\x02\\x02\\u016F\\u069B\\x03\\x02\\x02\", \"\\x02\\u0171\\u06A5\\x03\\x02\\x02\\x02\\u0173\\u06AF\\x03\\x02\\x02\", \"\\x02\\u0175\\u06B7\\x03\\x02\\x02\\x02\\u0177\\u06BE\\x03\\x02\\x02\", \"\\x02\\u0179\\u06C7\\x03\\x02\\x02\\x02\\u017B\\u06CF\\x03\\x02\\x02\", \"\\x02\\u017D\\u06D5\\x03\\x02\\x02\\x02\\u017F\\u06DD\\x03\\x02\\x02\", \"\\x02\\u0181\\u06E1\\x03\\x02\\x02\\x02\\u0183\\u06E7\\x03\\x02\\x02\", \"\\x02\\u0185\\u06F3\\x03\\x02\\x02\\x02\\u0187\\u0704\\x03\\x02\\x02\", \"\\x02\\u0189\\u070B\\x03\\x02\\x02\\x02\\u018B\\u0714\\x03\\x02\\x02\", \"\\x02\\u018D\\u071D\\x03\\x02\\x02\\x02\\u018F\\u0722\\x03\\x02\\x02\", \"\\x02\\u0191\\u0728\\x03\\x02\\x02\\x02\\u0193\\u0735\\x03\\x02\\x02\", \"\\x02\\u0195\\u073F\\x03\\x02\\x02\\x02\\u0197\\u0745\\x03\\x02\\x02\", \"\\x02\\u0199\\u074C\\x03\\x02\\x02\\x02\\u019B\\u0751\\x03\\x02\\x02\", \"\\x02\\u019D\\u075F\\x03\\x02\\x02\\x02\\u019F\\u0770\\x03\\x02\\x02\", \"\\x02\\u01A1\\u0778\\x03\\x02\\x02\\x02\\u01A3\\u0788\\x03\\x02\\x02\", \"\\x02\\u01A5\\u0798\\x03\\x02\\x02\\x02\\u01A7\\u07A1\\x03\\x02\\x02\", \"\\x02\\u01A9\\u07AA\\x03\\x02\\x02\\x02\\u01AB\\u07B3\\x03\\x02\\x02\", \"\\x02\\u01AD\\u07C0\\x03\\x02\\x02\\x02\\u01AF\\u07CD\\x03\\x02\\x02\", \"\\x02\\u01B1\\u07D9\\x03\\x02\\x02\\x02\\u01B3\\u07E5\\x03\\x02\\x02\", \"\\x02\\u01B5\\u07F0\\x03\\x02\\x02\\x02\\u01B7\\u07FD\\x03\\x02\\x02\", \"\\x02\\u01B9\\u0804\\x03\\x02\\x02\\x02\\u01BB\\u080E\\x03\\x02\\x02\", \"\\x02\\u01BD\\u0828\\x03\\x02\\x02\\x02\\u01BF\\u083F\\x03\\x02\\x02\", \"\\x02\\u01C1\\u085C\\x03\\x02\\x02\\x02\\u01C3\\u0876\\x03\\x02\\x02\", \"\\x02\\u01C5\\u087A\\x03\\x02\\x02\\x02\\u01C7\\u0885\\x03\\x02\\x02\", \"\\x02\\u01C9\\u0888\\x03\\x02\\x02\\x02\\u01CB\\u088C\\x03\\x02\\x02\", \"\\x02\\u01CD\\u08A7\\x03\\x02\\x02\\x02\\u01CF\\u08A9\\x03\\x02\\x02\", \"\\x02\\u01D1\\u08BB\\x03\\x02\\x02\\x02\\u01D3\\u08BD\\x03\\x02\\x02\", \"\\x02\\u01D5\\u08C2\\x03\\x02\\x02\\x02\\u01D7\\u08CB\\x03\\x02\\x02\", \"\\x02\\u01D9\\u08D3\\x03\\x02\\x02\\x02\\u01DB\\u08DA\\x03\\x02\\x02\", \"\\x02\\u01DD\\u08E3\\x03\\x02\\x02\\x02\\u01DF\\u08E5\\x03\\x02\\x02\", \"\\x02\\u01E1\\u08F1\\x03\\x02\\x02\\x02\\u01E3\\u08FA\\x03\\x02\\x02\", \"\\x02\\u01E5\\u0903\\x03\\x02\\x02\\x02\\u01E7\\u090C\\x03\\x02\\x02\", \"\\x02\\u01E9\\u093C\\x03\\x02\\x02\\x02\\u01EB\\u0979\\x03\\x02\\x02\", \"\\x02\\u01ED\\u097B\\x03\\x02\\x02\\x02\\u01EF\\u097D\\x03\\x02\\x02\", \"\\x02\\u01F1\\u098A\\x03\\x02\\x02\\x02\\u01F3\\u098C\\x03\\x02\\x02\", \"\\x02\\u01F5\\u0990\\x03\\x02\\x02\\x02\\u01F7\\u0992\\x03\\x02\\x02\", \"\\x02\\u01F9\\u09A0\\x03\\x02\\x02\\x02\\u01FB\\u09B4\\x03\\x02\\x02\", \"\\x02\\u01FD\\u09B6\\x03\\x02\\x02\\x02\\u01FF\\u0200\\x07<\\x02\", \"\\x02\\u0200\\x04\\x03\\x02\\x02\\x02\\u0201\\u0202\\x07*\\x02\", \"\\x02\\u0202\\x06\\x03\\x02\\x02\\x02\\u0203\\u0204\\x07+\\x02\", \"\\x02\\u0204\\b\\x03\\x02\\x02\\x02\\u0205\\u0206\\x07}\\x02\\x02\", \"\\u0206\\n\\x03\\x02\\x02\\x02\\u0207\\u0208\\x07\\x7F\\x02\\x02\", \"\\u0208\\f\\x03\\x02\\x02\\x02\\u0209\\u020A\\x07]\\x02\\x02\\u020A\", \"\\x0E\\x03\\x02\\x02\\x02\\u020B\\u020C\\x07_\\x02\\x02\\u020C\", \"\\x10\\x03\\x02\\x02\\x02\\u020D\\u020E\\x07-\\x02\\x02\\u020E\", \"\\x12\\x03\\x02\\x02\\x02\\u020F\\u0210\\x07/\\x02\\x02\\u0210\", \"\\x14\\x03\\x02\\x02\\x02\\u0211\\u0212\\x07,\\x02\\x02\\u0212\", \"\\x16\\x03\\x02\\x02\\x02\\u0213\\u0214\\x071\\x02\\x02\\u0214\", \"\\x18\\x03\\x02\\x02\\x02\\u0215\\u0216\\x07.\\x02\\x02\\u0216\", \"\\x1A\\x03\\x02\\x02\\x02\\u0217\\u0218\\x07V\\x02\\x02\\u0218\", \"\\u0219\\x07Q\\x02\\x02\\u0219\\u021A\\x07F\\x02\\x02\\u021A\\u021B\", \"\\x07Q\\x02\\x02\\u021B\\u021C\\x07/\\x02\\x02\\u021C\\u021D\\x07\", \"E\\x02\\x02\\u021D\\u021E\\x07W\\x02\\x02\\u021E\\u021F\\x07U\\x02\", \"\\x02\\u021F\\u0220\\x07V\\x02\\x02\\u0220\\u0221\\x07Q\\x02\\x02\", \"\\u0221\\u0222\\x07O\\x02\\x02\\u0222\\u0223\\x07R\\x02\\x02\\u0223\", \"\\u0224\\x07K\\x02\\x02\\u0224\\u0225\\x07X\\x02\\x02\\u0225\\u0226\", \"\\x07Q\\x02\\x02\\u0226\\u0227\\x07V\\x02\\x02\\u0227\\x1C\\x03\", \"\\x02\\x02\\x02\\u0228\\u0229\\x07?\\x02\\x02\\u0229\\x1E\\x03\", \"\\x02\\x02\\x02\\u022A\\u022B\\x07>\\x02\\x02\\u022B\\u022C\\x07\", \"@\\x02\\x02\\u022C \\x03\\x02\\x02\\x02\\u022D\\u022E\\x07>\\x02\", \"\\x02\\u022E\\\"\\x03\\x02\\x02\\x02\\u022F\\u0230\\x07@\\x02\\x02\", \"\\u0230$\\x03\\x02\\x02\\x02\\u0231\\u0232\\x07>\\x02\\x02\\u0232\", \"\\u0233\\x07?\\x02\\x02\\u0233&\\x03\\x02\\x02\\x02\\u0234\\u0235\", \"\\x07@\\x02\\x02\\u0235\\u0236\\x07?\\x02\\x02\\u0236(\\x03\\x02\", \"\\x02\\x02\\u0237\\u0238\\x07<\\x02\\x02\\u0238\\u0239\\x07?\\x02\", \"\\x02\\u0239*\\x03\\x02\\x02\\x02\\u023A\\u023B\\x07%\\x02\\x02\", \"\\u023B,\\x03\\x02\\x02\\x02\\u023C\\u023D\\x07g\\x02\\x02\\u023D\", \"\\u023E\\x07x\\x02\\x02\\u023E\\u023F\\x07c\\x02\\x02\\u023F\\u0240\", \"\\x07n\\x02\\x02\\u0240.\\x03\\x02\\x02\\x02\\u0241\\u0242\\x07\", \"k\\x02\\x02\\u0242\\u0243\\x07h\\x02\\x02\\u02430\\x03\\x02\\x02\", \"\\x02\\u0244\\u0245\\x07v\\x02\\x02\\u0245\\u0246\\x07j\\x02\\x02\", \"\\u0246\\u0247\\x07g\\x02\\x02\\u0247\\u0248\\x07p\\x02\\x02\\u0248\", \"2\\x03\\x02\\x02\\x02\\u0249\\u024A\\x07g\\x02\\x02\\u024A\\u024B\", \"\\x07n\\x02\\x02\\u024B\\u024C\\x07u\\x02\\x02\\u024C\\u024D\\x07\", \"g\\x02\\x02\\u024D4\\x03\\x02\\x02\\x02\\u024E\\u024F\\x07w\\x02\", \"\\x02\\u024F\\u0250\\x07u\\x02\\x02\\u0250\\u0251\\x07k\\x02\\x02\", \"\\u0251\\u0252\\x07p\\x02\\x02\\u0252\\u0253\\x07i\\x02\\x02\\u0253\", \"6\\x03\\x02\\x02\\x02\\u0254\\u0255\\x07y\\x02\\x02\\u0255\\u0256\", \"\\x07k\\x02\\x02\\u0256\\u0257\\x07v\\x02\\x02\\u0257\\u0258\\x07\", \"j\\x02\\x02\\u02588\\x03\\x02\\x02\\x02\\u0259\\u025A\\x07e\\x02\", \"\\x02\\u025A\\u025B\\x07w\\x02\\x02\\u025B\\u025C\\x07t\\x02\\x02\", \"\\u025C\\u025D\\x07t\\x02\\x02\\u025D\\u025E\\x07g\\x02\\x02\\u025E\", \"\\u025F\\x07p\\x02\\x02\\u025F\\u0260\\x07v\\x02\\x02\\u0260\\u0261\", \"\\x07a\\x02\\x02\\u0261\\u0262\\x07f\\x02\\x02\\u0262\\u0263\\x07\", \"c\\x02\\x02\\u0263\\u0264\\x07v\\x02\\x02\\u0264\\u0265\\x07g\\x02\", \"\\x02\\u0265:\\x03\\x02\\x02\\x02\\u0266\\u0267\\x07q\\x02\\x02\", \"\\u0267\\u0268\\x07p\\x02\\x02\\u0268<\\x03\\x02\\x02\\x02\\u0269\", \"\\u026A\\x07f\\x02\\x02\\u026A\\u026B\\x07t\\x02\\x02\\u026B\\u026C\", \"\\x07q\\x02\\x02\\u026C\\u026D\\x07r\\x02\\x02\\u026D>\\x03\\x02\", \"\\x02\\x02\\u026E\\u026F\\x07m\\x02\\x02\\u026F\\u0270\\x07g\\x02\", \"\\x02\\u0270\\u0271\\x07g\\x02\\x02\\u0271\\u0272\\x07r\\x02\\x02\", \"\\u0272@\\x03\\x02\\x02\\x02\\u0273\\u0274\\x07e\\x02\\x02\\u0274\", \"\\u0275\\x07c\\x02\\x02\\u0275\\u0276\\x07n\\x02\\x02\\u0276\\u0277\", \"\\x07e\\x02\\x02\\u0277B\\x03\\x02\\x02\\x02\\u0278\\u0279\\x07\", \"c\\x02\\x02\\u0279\\u027A\\x07v\\x02\\x02\\u027A\\u027B\\x07v\\x02\", \"\\x02\\u027B\\u027C\\x07t\\x02\\x02\\u027C\\u027D\\x07e\\x02\\x02\", \"\\u027D\\u027E\\x07c\\x02\\x02\\u027E\\u027F\\x07n\\x02\\x02\\u027F\", \"\\u0280\\x07e\\x02\\x02\\u0280D\\x03\\x02\\x02\\x02\\u0281\\u0282\", \"\\x07t\\x02\\x02\\u0282\\u0283\\x07g\\x02\\x02\\u0283\\u0284\\x07\", \"p\\x02\\x02\\u0284\\u0285\\x07c\\x02\\x02\\u0285\\u0286\\x07o\\x02\", \"\\x02\\u0286\\u0287\\x07g\\x02\\x02\\u0287F\\x03\\x02\\x02\\x02\", \"\\u0288\\u0289\\x07c\\x02\\x02\\u0289\\u028A\\x07u\\x02\\x02\\u028A\", \"H\\x03\\x02\\x02\\x02\\u028B\\u028C\\x07c\\x02\\x02\\u028C\\u028D\", \"\\x07p\\x02\\x02\\u028D\\u028E\\x07f\\x02\\x02\\u028EJ\\x03\\x02\", \"\\x02\\x02\\u028F\\u0290\\x07q\\x02\\x02\\u0290\\u0291\\x07t\\x02\", \"\\x02\\u0291L\\x03\\x02\\x02\\x02\\u0292\\u0293\\x07z\\x02\\x02\", \"\\u0293\\u0294\\x07q\\x02\\x02\\u0294\\u0295\\x07t\\x02\\x02\\u0295\", \"N\\x03\\x02\\x02\\x02\\u0296\\u0297\\x07p\\x02\\x02\\u0297\\u0298\", \"\\x07q\\x02\\x02\\u0298\\u0299\\x07v\\x02\\x02\\u0299P\\x03\\x02\", \"\\x02\\x02\\u029A\\u029B\\x07d\\x02\\x02\\u029B\\u029C\\x07g\\x02\", \"\\x02\\u029C\\u029D\\x07v\\x02\\x02\\u029D\\u029E\\x07y\\x02\\x02\", \"\\u029E\\u029F\\x07g\\x02\\x02\\u029F\\u02A0\\x07g\\x02\\x02\\u02A0\", \"\\u02A1\\x07p\\x02\\x02\\u02A1R\\x03\\x02\\x02\\x02\\u02A2\\u02A3\", \"\\x07k\\x02\\x02\\u02A3\\u02A4\\x07p\\x02\\x02\\u02A4T\\x03\\x02\", \"\\x02\\x02\\u02A5\\u02A6\\x07p\\x02\\x02\\u02A6\\u02A7\\x07q\\x02\", \"\\x02\\u02A7\\u02A8\\x07v\\x02\\x02\\u02A8\\u02A9\\x07a\\x02\\x02\", \"\\u02A9\\u02AA\\x07k\\x02\\x02\\u02AA\\u02AB\\x07p\\x02\\x02\\u02AB\", \"V\\x03\\x02\\x02\\x02\\u02AC\\u02AD\\x07k\\x02\\x02\\u02AD\\u02AE\", \"\\x07u\\x02\\x02\\u02AE\\u02AF\\x07p\\x02\\x02\\u02AF\\u02B0\\x07\", \"w\\x02\\x02\\u02B0\\u02B1\\x07n\\x02\\x02\\u02B1\\u02B2\\x07n\\x02\", \"\\x02\\u02B2X\\x03\\x02\\x02\\x02\\u02B3\\u02B4\\x07g\\x02\\x02\", \"\\u02B4\\u02B5\\x07z\\x02\\x02\\u02B5Z\\x03\\x02\\x02\\x02\\u02B6\", \"\\u02B7\\x07w\\x02\\x02\\u02B7\\u02B8\\x07p\\x02\\x02\\u02B8\\u02B9\", \"\\x07k\\x02\\x02\\u02B9\\u02BA\\x07q\\x02\\x02\\u02BA\\u02BB\\x07\", \"p\\x02\\x02\\u02BB\\\\\\x03\\x02\\x02\\x02\\u02BC\\u02BD\\x07f\\x02\", \"\\x02\\u02BD\\u02BE\\x07k\\x02\\x02\\u02BE\\u02BF\\x07h\\x02\\x02\", \"\\u02BF\\u02C0\\x07h\\x02\\x02\\u02C0^\\x03\\x02\\x02\\x02\\u02C1\", \"\\u02C2\\x07u\\x02\\x02\\u02C2\\u02C3\\x07{\\x02\\x02\\u02C3\\u02C4\", \"\\x07o\\x02\\x02\\u02C4\\u02C5\\x07f\\x02\\x02\\u02C5\\u02C6\\x07\", \"k\\x02\\x02\\u02C6\\u02C7\\x07h\\x02\\x02\\u02C7\\u02C8\\x07h\\x02\", \"\\x02\\u02C8`\\x03\\x02\\x02\\x02\\u02C9\\u02CA\\x07k\\x02\\x02\", \"\\u02CA\\u02CB\\x07p\\x02\\x02\\u02CB\\u02CC\\x07v\\x02\\x02\\u02CC\", \"\\u02CD\\x07g\\x02\\x02\\u02CD\\u02CE\\x07t\\x02\\x02\\u02CE\\u02CF\", \"\\x07u\\x02\\x02\\u02CF\\u02D0\\x07g\\x02\\x02\\u02D0\\u02D1\\x07\", \"e\\x02\\x02\\u02D1\\u02D2\\x07v\\x02\\x02\\u02D2b\\x03\\x02\\x02\", \"\\x02\\u02D3\\u02D4\\x07m\\x02\\x02\\u02D4\\u02D5\\x07g\\x02\\x02\", \"\\u02D5\\u02D6\\x07{\\x02\\x02\\u02D6\\u02D7\\x07u\\x02\\x02\\u02D7\", \"d\\x03\\x02\\x02\\x02\\u02D8\\u02D9\\x07.\\x02\\x02\\u02D9f\\x03\", \"\\x02\\x02\\x02\\u02DA\\u02DB\\x07k\\x02\\x02\\u02DB\\u02DC\\x07\", \"p\\x02\\x02\\u02DC\\u02DD\\x07v\\x02\\x02\\u02DD\\u02DE\\x07{\\x02\", \"\\x02\\u02DE\\u02DF\\x07g\\x02\\x02\\u02DF\\u02E0\\x07c\\x02\\x02\", \"\\u02E0\\u02E1\\x07t\\x02\\x02\\u02E1h\\x03\\x02\\x02\\x02\\u02E2\", \"\\u02E3\\x07k\\x02\\x02\\u02E3\\u02E4\\x07p\\x02\\x02\\u02E4\\u02E5\", \"\\x07v\\x02\\x02\\u02E5\\u02E6\\x07o\\x02\\x02\\u02E6\\u02E7\\x07\", \"q\\x02\\x02\\u02E7\\u02E8\\x07p\\x02\\x02\\u02E8\\u02E9\\x07v\\x02\", \"\\x02\\u02E9\\u02EA\\x07j\\x02\\x02\\u02EAj\\x03\\x02\\x02\\x02\", \"\\u02EB\\u02EC\\x07k\\x02\\x02\\u02EC\\u02ED\\x07p\\x02\\x02\\u02ED\", \"\\u02EE\\x07v\\x02\\x02\\u02EE\\u02EF\\x07f\\x02\\x02\\u02EF\\u02F0\", \"\\x07c\\x02\\x02\\u02F0\\u02F1\\x07{\\x02\\x02\\u02F1l\\x03\\x02\", \"\\x02\\x02\\u02F2\\u02F3\\x07e\\x02\\x02\\u02F3\\u02F4\\x07j\\x02\", \"\\x02\\u02F4\\u02F5\\x07g\\x02\\x02\\u02F5\\u02F6\\x07e\\x02\\x02\", \"\\u02F6\\u02F7\\x07m\\x02\\x02\\u02F7n\\x03\\x02\\x02\\x02\\u02F8\", \"\\u02F9\\x07g\\x02\\x02\\u02F9\\u02FA\\x07z\\x02\\x02\\u02FA\\u02FB\", \"\\x07k\\x02\\x02\\u02FB\\u02FC\\x07u\\x02\\x02\\u02FC\\u02FD\\x07\", \"v\\x02\\x02\\u02FD\\u02FE\\x07u\\x02\\x02\\u02FE\\u02FF\\x07a\\x02\", \"\\x02\\u02FF\\u0300\\x07k\\x02\\x02\\u0300\\u0301\\x07p\\x02\\x02\", \"\\u0301p\\x03\\x02\\x02\\x02\\u0302\\u0303\\x07v\\x02\\x02\\u0303\", \"\\u0304\\x07q\\x02\\x02\\u0304r\\x03\\x02\\x02\\x02\\u0305\\u0306\", \"\\x07t\\x02\\x02\\u0306\\u0307\\x07g\\x02\\x02\\u0307\\u0308\\x07\", \"v\\x02\\x02\\u0308\\u0309\\x07w\\x02\\x02\\u0309\\u030A\\x07t\\x02\", \"\\x02\\u030A\\u030B\\x07p\\x02\\x02\\u030Bt\\x03\\x02\\x02\\x02\", \"\\u030C\\u030D\\x07k\\x02\\x02\\u030D\\u030E\\x07o\\x02\\x02\\u030E\", \"\\u030F\\x07d\\x02\\x02\\u030F\\u0310\\x07c\\x02\\x02\\u0310\\u0311\", \"\\x07n\\x02\\x02\\u0311\\u0312\\x07c\\x02\\x02\\u0312\\u0313\\x07\", \"p\\x02\\x02\\u0313\\u0314\\x07e\\x02\\x02\\u0314\\u0315\\x07g\\x02\", \"\\x02\\u0315v\\x03\\x02\\x02\\x02\\u0316\\u0317\\x07g\\x02\\x02\", \"\\u0317\\u0318\\x07t\\x02\\x02\\u0318\\u0319\\x07t\\x02\\x02\\u0319\", \"\\u031A\\x07q\\x02\\x02\\u031A\\u031B\\x07t\\x02\\x02\\u031B\\u031C\", \"\\x07e\\x02\\x02\\u031C\\u031D\\x07q\\x02\\x02\\u031D\\u031E\\x07\", \"f\\x02\\x02\\u031E\\u031F\\x07g\\x02\\x02\\u031Fx\\x03\\x02\\x02\", \"\\x02\\u0320\\u0321\\x07c\\x02\\x02\\u0321\\u0322\\x07n\\x02\\x02\", \"\\u0322\\u0323\\x07n\\x02\\x02\\u0323z\\x03\\x02\\x02\\x02\\u0324\", \"\\u0325\\x07c\\x02\\x02\\u0325\\u0326\\x07i\\x02\\x02\\u0326\\u0327\", \"\\x07i\\x02\\x02\\u0327\\u0328\\x07t\\x02\\x02\\u0328|\\x03\\x02\", \"\\x02\\x02\\u0329\\u032A\\x07g\\x02\\x02\\u032A\\u032B\\x07t\\x02\", \"\\x02\\u032B\\u032C\\x07t\\x02\\x02\\u032C\\u032D\\x07q\\x02\\x02\", \"\\u032D\\u032E\\x07t\\x02\\x02\\u032E\\u032F\\x07n\\x02\\x02\\u032F\", \"\\u0330\\x07g\\x02\\x02\\u0330\\u0331\\x07x\\x02\\x02\\u0331\\u0332\", \"\\x07g\\x02\\x02\\u0332\\u0333\\x07n\\x02\\x02\\u0333~\\x03\\x02\", \"\\x02\\x02\\u0334\\u0335\\x07q\\x02\\x02\\u0335\\u0336\\x07t\\x02\", \"\\x02\\u0336\\u0337\\x07f\\x02\\x02\\u0337\\u0338\\x07g\\x02\\x02\", \"\\u0338\\u0339\\x07t\\x02\\x02\\u0339\\x80\\x03\\x02\\x02\\x02\", \"\\u033A\\u033B\\x07d\\x02\\x02\\u033B\\u033C\\x07{\\x02\\x02\\u033C\", \"\\x82\\x03\\x02\\x02\\x02\\u033D\\u033E\\x07t\\x02\\x02\\u033E\", \"\\u033F\\x07c\\x02\\x02\\u033F\\u0340\\x07p\\x02\\x02\\u0340\\u0341\", \"\\x07m\\x02\\x02\\u0341\\x84\\x03\\x02\\x02\\x02\\u0342\\u0343\", \"\\x07c\\x02\\x02\\u0343\\u0344\\x07u\\x02\\x02\\u0344\\u0345\\x07\", \"e\\x02\\x02\\u0345\\x86\\x03\\x02\\x02\\x02\\u0346\\u0347\\x07\", \"f\\x02\\x02\\u0347\\u0348\\x07g\\x02\\x02\\u0348\\u0349\\x07u\\x02\", \"\\x02\\u0349\\u034A\\x07e\\x02\\x02\\u034A\\x88\\x03\\x02\\x02\", \"\\x02\\u034B\\u034C\\x07o\\x02\\x02\\u034C\\u034D\\x07k\\x02\\x02\", \"\\u034D\\u034E\\x07p\\x02\\x02\\u034E\\x8A\\x03\\x02\\x02\\x02\", \"\\u034F\\u0350\\x07o\\x02\\x02\\u0350\\u0351\\x07c\\x02\\x02\\u0351\", \"\\u0352\\x07z\\x02\\x02\\u0352\\x8C\\x03\\x02\\x02\\x02\\u0353\", \"\\u0354\\x07h\\x02\\x02\\u0354\\u0355\\x07k\\x02\\x02\\u0355\\u0356\", \"\\x07t\\x02\\x02\\u0356\\u0357\\x07u\\x02\\x02\\u0357\\u0358\\x07\", \"v\\x02\\x02\\u0358\\x8E\\x03\\x02\\x02\\x02\\u0359\\u035A\\x07\", \"n\\x02\\x02\\u035A\\u035B\\x07c\\x02\\x02\\u035B\\u035C\\x07u\\x02\", \"\\x02\\u035C\\u035D\\x07v\\x02\\x02\\u035D\\x90\\x03\\x02\\x02\", \"\\x02\\u035E\\u035F\\x07k\\x02\\x02\\u035F\\u0360\\x07p\\x02\\x02\", \"\\u0360\\u0361\\x07f\\x02\\x02\\u0361\\u0362\\x07g\\x02\\x02\\u0362\", \"\\u0363\\x07z\\x02\\x02\\u0363\\u0364\\x07q\\x02\\x02\\u0364\\u0365\", \"\\x07h\\x02\\x02\\u0365\\x92\\x03\\x02\\x02\\x02\\u0366\\u0367\", \"\\x07c\\x02\\x02\\u0367\\u0368\\x07d\\x02\\x02\\u0368\\u0369\\x07\", \"u\\x02\\x02\\u0369\\x94\\x03\\x02\\x02\\x02\\u036A\\u036B\\x07\", \"m\\x02\\x02\\u036B\\u036C\\x07g\\x02\\x02\\u036C\\u036D\\x07{\\x02\", \"\\x02\\u036D\\x96\\x03\\x02\\x02\\x02\\u036E\\u036F\\x07n\\x02\", \"\\x02\\u036F\\u0370\\x07p\\x02\\x02\\u0370\\x98\\x03\\x02\\x02\", \"\\x02\\u0371\\u0372\\x07n\\x02\\x02\\u0372\\u0373\\x07q\\x02\\x02\", \"\\u0373\\u0374\\x07i\\x02\\x02\\u0374\\x9A\\x03\\x02\\x02\\x02\", \"\\u0375\\u0376\\x07v\\x02\\x02\\u0376\\u0377\\x07t\\x02\\x02\\u0377\", \"\\u0378\\x07w\\x02\\x02\\u0378\\u0379\\x07p\\x02\\x02\\u0379\\u037A\", \"\\x07e\\x02\\x02\\u037A\\x9C\\x03\\x02\\x02\\x02\\u037B\\u037C\", \"\\x07t\\x02\\x02\\u037C\\u037D\\x07q\\x02\\x02\\u037D\\u037E\\x07\", \"w\\x02\\x02\\u037E\\u037F\\x07p\\x02\\x02\\u037F\\u0380\\x07f\\x02\", \"\\x02\\u0380\\x9E\\x03\\x02\\x02\\x02\\u0381\\u0382\\x07r\\x02\", \"\\x02\\u0382\\u0383\\x07q\\x02\\x02\\u0383\\u0384\\x07y\\x02\\x02\", \"\\u0384\\u0385\\x07g\\x02\\x02\\u0385\\u0386\\x07t\\x02\\x02\\u0386\", \"\\xA0\\x03\\x02\\x02\\x02\\u0387\\u0388\\x07o\\x02\\x02\\u0388\", \"\\u0389\\x07q\\x02\\x02\\u0389\\u038A\\x07f\\x02\\x02\\u038A\\xA2\", \"\\x03\\x02\\x02\\x02\\u038B\\u038C\\x07n\\x02\\x02\\u038C\\u038D\", \"\\x07g\\x02\\x02\\u038D\\u038E\\x07p\\x02\\x02\\u038E\\u038F\\x07\", \"i\\x02\\x02\\u038F\\u0390\\x07v\\x02\\x02\\u0390\\u0391\\x07j\\x02\", \"\\x02\\u0391\\xA4\\x03\\x02\\x02\\x02\\u0392\\u0393\\x07~\\x02\", \"\\x02\\u0393\\u0394\\x07~\\x02\\x02\\u0394\\xA6\\x03\\x02\\x02\", \"\\x02\\u0395\\u0396\\x07v\\x02\\x02\\u0396\\u0397\\x07t\\x02\\x02\", \"\\u0397\\u0398\\x07k\\x02\\x02\\u0398\\u0399\\x07o\\x02\\x02\\u0399\", \"\\xA8\\x03\\x02\\x02\\x02\\u039A\\u039B\\x07w\\x02\\x02\\u039B\", \"\\u039C\\x07r\\x02\\x02\\u039C\\u039D\\x07r\\x02\\x02\\u039D\\u039E\", \"\\x07g\\x02\\x02\\u039E\\u039F\\x07t\\x02\\x02\\u039F\\xAA\\x03\", \"\\x02\\x02\\x02\\u03A0\\u03A1\\x07n\\x02\\x02\\u03A1\\u03A2\\x07\", \"q\\x02\\x02\\u03A2\\u03A3\\x07y\\x02\\x02\\u03A3\\u03A4\\x07g\\x02\", \"\\x02\\u03A4\\u03A5\\x07t\\x02\\x02\\u03A5\\xAC\\x03\\x02\\x02\", \"\\x02\\u03A6\\u03A7\\x07u\\x02\\x02\\u03A7\\u03A8\\x07w\\x02\\x02\", \"\\u03A8\\u03A9\\x07d\\x02\\x02\\u03A9\\u03AA\\x07u\\x02\\x02\\u03AA\", \"\\u03AB\\x07v\\x02\\x02\\u03AB\\u03AC\\x07t\\x02\\x02\\u03AC\\xAE\", \"\\x03\\x02\\x02\\x02\\u03AD\\u03AE\\x07u\\x02\\x02\\u03AE\\u03AF\", \"\\x07w\\x02\\x02\\u03AF\\u03B0\\x07o\\x02\\x02\\u03B0\\xB0\\x03\", \"\\x02\\x02\\x02\\u03B1\\u03B2\\x07c\\x02\\x02\\u03B2\\u03B3\\x07\", \"x\\x02\\x02\\u03B3\\u03B4\\x07i\\x02\\x02\\u03B4\\xB2\\x03\\x02\", \"\\x02\\x02\\u03B5\\u03B6\\x07o\\x02\\x02\\u03B6\\u03B7\\x07g\\x02\", \"\\x02\\u03B7\\u03B8\\x07f\\x02\\x02\\u03B8\\u03B9\\x07k\\x02\\x02\", \"\\u03B9\\u03BA\\x07c\\x02\\x02\\u03BA\\u03BB\\x07p\\x02\\x02\\u03BB\", \"\\xB4\\x03\\x02\\x02\\x02\\u03BC\\u03BD\\x07e\\x02\\x02\\u03BD\", \"\\u03BE\\x07q\\x02\\x02\\u03BE\\u03BF\\x07w\\x02\\x02\\u03BF\\u03C0\", \"\\x07p\\x02\\x02\\u03C0\\u03C1\\x07v\\x02\\x02\\u03C1\\xB6\\x03\", \"\\x02\\x02\\x02\\u03C2\\u03C3\\x07k\\x02\\x02\\u03C3\\u03C4\\x07\", \"f\\x02\\x02\\u03C4\\u03C5\\x07g\\x02\\x02\\u03C5\\u03C6\\x07p\\x02\", \"\\x02\\u03C6\\u03C7\\x07v\\x02\\x02\\u03C7\\u03C8\\x07k\\x02\\x02\", \"\\u03C8\\u03C9\\x07h\\x02\\x02\\u03C9\\u03CA\\x07k\\x02\\x02\\u03CA\", \"\\u03CB\\x07g\\x02\\x02\\u03CB\\u03CC\\x07t\\x02\\x02\\u03CC\\xB8\", \"\\x03\\x02\\x02\\x02\\u03CD\\u03CE\\x07o\\x02\\x02\\u03CE\\u03CF\", \"\\x07g\\x02\\x02\\u03CF\\u03D0\\x07c\\x02\\x02\\u03D0\\u03D1\\x07\", \"u\\x02\\x02\\u03D1\\u03D2\\x07w\\x02\\x02\\u03D2\\u03D3\\x07t\\x02\", \"\\x02\\u03D3\\u03D4\\x07g\\x02\\x02\\u03D4\\xBA\\x03\\x02\\x02\", \"\\x02\\u03D5\\u03D6\\x07c\\x02\\x02\\u03D6\\u03D7\\x07v\\x02\\x02\", \"\\u03D7\\u03D8\\x07v\\x02\\x02\\u03D8\\u03D9\\x07t\\x02\\x02\\u03D9\", \"\\u03DA\\x07k\\x02\\x02\\u03DA\\u03DB\\x07d\\x02\\x02\\u03DB\\u03DC\", \"\\x07w\\x02\\x02\\u03DC\\u03DD\\x07v\\x02\\x02\\u03DD\\u03DE\\x07\", \"g\\x02\\x02\\u03DE\\xBC\\x03\\x02\\x02\\x02\\u03DF\\u03E0\\x07\", \"h\\x02\\x02\\u03E0\\u03E1\\x07k\\x02\\x02\\u03E1\\u03E2\\x07n\\x02\", \"\\x02\\u03E2\\u03E3\\x07v\\x02\\x02\\u03E3\\u03E4\\x07g\\x02\\x02\", \"\\u03E4\\u03E5\\x07t\\x02\\x02\\u03E5\\xBE\\x03\\x02\\x02\\x02\", \"\\u03E6\\u03E7\\x07o\\x02\\x02\\u03E7\\u03E8\\x07g\\x02\\x02\\u03E8\", \"\\u03E9\\x07t\\x02\\x02\\u03E9\\u03EA\\x07i\\x02\\x02\\u03EA\\u03EB\", \"\\x07g\\x02\\x02\\u03EB\\xC0\\x03\\x02\\x02\\x02\\u03EC\\u03ED\", \"\\x07g\\x02\\x02\\u03ED\\u03EE\\x07z\\x02\\x02\\u03EE\\u03EF\\x07\", \"r\\x02\\x02\\u03EF\\xC2\\x03\\x02\\x02\\x02\\u03F0\\u03F1\\x07\", \"t\\x02\\x02\\u03F1\\u03F2\\x07q\\x02\\x02\\u03F2\\u03F3\\x07n\\x02\", \"\\x02\\u03F3\\u03F4\\x07g\\x02\\x02\\u03F4\\xC4\\x03\\x02\\x02\", \"\\x02\\u03F5\\u03F6\\x07x\\x02\\x02\\u03F6\\u03F7\\x07k\\x02\\x02\", \"\\u03F7\\u03F8\\x07t\\x02\\x02\\u03F8\\u03F9\\x07c\\x02\\x02\\u03F9\", \"\\u03FA\\x07n\\x02\\x02\\u03FA\\xC6\\x03\\x02\\x02\\x02\\u03FB\", \"\\u03FC\\x07o\\x02\\x02\\u03FC\\u03FD\\x07c\\x02\\x02\\u03FD\\u03FE\", \"\\x07v\\x02\\x02\\u03FE\\u03FF\\x07e\\x02\\x02\\u03FF\\u0400\\x07\", \"j\\x02\\x02\\u0400\\u0401\\x07a\\x02\\x02\\u0401\\u0402\\x07e\\x02\", \"\\x02\\u0402\\u0403\\x07j\\x02\\x02\\u0403\\u0404\\x07c\\x02\\x02\", \"\\u0404\\u0405\\x07t\\x02\\x02\\u0405\\u0406\\x07c\\x02\\x02\\u0406\", \"\\u0407\\x07e\\x02\\x02\\u0407\\u0408\\x07v\\x02\\x02\\u0408\\u0409\", \"\\x07g\\x02\\x02\\u0409\\u040A\\x07t\\x02\\x02\\u040A\\u040B\\x07\", \"u\\x02\\x02\\u040B\\xC8\\x03\\x02\\x02\\x02\\u040C\\u040D\\x07\", \"v\\x02\\x02\\u040D\\u040E\\x07{\\x02\\x02\\u040E\\u040F\\x07r\\x02\", \"\\x02\\u040F\\u0410\\x07g\\x02\\x02\\u0410\\xCA\\x03\\x02\\x02\", \"\\x02\\u0411\\u0412\\x07p\\x02\\x02\\u0412\\u0413\\x07x\\x02\\x02\", \"\\u0413\\u0414\\x07n\\x02\\x02\\u0414\\xCC\\x03\\x02\\x02\\x02\", \"\\u0415\\u0416\\x07j\\x02\\x02\\u0416\\u0417\\x07k\\x02\\x02\\u0417\", \"\\u0418\\x07g\\x02\\x02\\u0418\\u0419\\x07t\\x02\\x02\\u0419\\u041A\", \"\\x07c\\x02\\x02\\u041A\\u041B\\x07t\\x02\\x02\\u041B\\u041C\\x07\", \"e\\x02\\x02\\u041C\\u041D\\x07j\\x02\\x02\\u041D\\u041E\\x07{\\x02\", \"\\x02\\u041E\\xCE\\x03\\x02\\x02\\x02\\u041F\\u0420\\x07a\\x02\", \"\\x02\\u0420\\xD0\\x03\\x02\\x02\\x02\\u0421\\u0422\\x07k\\x02\", \"\\x02\\u0422\\u0423\\x07p\\x02\\x02\\u0423\\u0424\\x07x\\x02\\x02\", \"\\u0424\\u0425\\x07c\\x02\\x02\\u0425\\u0426\\x07n\\x02\\x02\\u0426\", \"\\u0427\\x07k\\x02\\x02\\u0427\\u0428\\x07f\\x02\\x02\\u0428\\xD2\", \"\\x03\\x02\\x02\\x02\\u0429\\u042A\\x07x\\x02\\x02\\u042A\\u042B\", \"\\x07c\\x02\\x02\\u042B\\u042C\\x07n\\x02\\x02\\u042C\\u042D\\x07\", \"w\\x02\\x02\\u042D\\u042E\\x07g\\x02\\x02\\u042E\\u042F\\x07f\\x02\", \"\\x02\\u042F\\u0430\\x07q\\x02\\x02\\u0430\\u0431\\x07o\\x02\\x02\", \"\\u0431\\u0432\\x07c\\x02\\x02\\u0432\\u0433\\x07k\\x02\\x02\\u0433\", \"\\u0434\\x07p\\x02\\x02\\u0434\\xD4\\x03\\x02\\x02\\x02\\u0435\", \"\\u0436\\x07x\\x02\\x02\\u0436\\u0437\\x07c\\x02\\x02\\u0437\\u0438\", \"\\x07t\\x02\\x02\\u0438\\u0439\\x07k\\x02\\x02\\u0439\\u043A\\x07\", \"c\\x02\\x02\\u043A\\u043B\\x07d\\x02\\x02\\u043B\\u043C\\x07n\\x02\", \"\\x02\\u043C\\u043D\\x07g\\x02\\x02\\u043D\\xD6\\x03\\x02\\x02\", \"\\x02\\u043E\\u043F\\x07f\\x02\\x02\\u043F\\u0440\\x07c\\x02\\x02\", \"\\u0440\\u0441\\x07v\\x02\\x02\\u0441\\u0442\\x07c\\x02\\x02\\u0442\", \"\\xD8\\x03\\x02\\x02\\x02\\u0443\\u0444\\x07u\\x02\\x02\\u0444\", \"\\u0445\\x07v\\x02\\x02\\u0445\\u0446\\x07t\\x02\\x02\\u0446\\u0447\", \"\\x07w\\x02\\x02\\u0447\\u0448\\x07e\\x02\\x02\\u0448\\u0449\\x07\", \"v\\x02\\x02\\u0449\\u044A\\x07w\\x02\\x02\\u044A\\u044B\\x07t\\x02\", \"\\x02\\u044B\\u044C\\x07g\\x02\\x02\\u044C\\xDA\\x03\\x02\\x02\", \"\\x02\\u044D\\u044E\\x07f\\x02\\x02\\u044E\\u044F\\x07c\\x02\\x02\", \"\\u044F\\u0450\\x07v\\x02\\x02\\u0450\\u0451\\x07c\\x02\\x02\\u0451\", \"\\u0452\\x07u\\x02\\x02\\u0452\\u0453\\x07g\\x02\\x02\\u0453\\u0454\", \"\\x07v\\x02\\x02\\u0454\\xDC\\x03\\x02\\x02\\x02\\u0455\\u0456\", \"\\x07q\\x02\\x02\\u0456\\u0457\\x07r\\x02\\x02\\u0457\\u0458\\x07\", \"g\\x02\\x02\\u0458\\u0459\\x07t\\x02\\x02\\u0459\\u045A\\x07c\\x02\", \"\\x02\\u045A\\u045B\\x07v\\x02\\x02\\u045B\\u045C\\x07q\\x02\\x02\", \"\\u045C\\u045D\\x07t\\x02\\x02\\u045D\\xDE\\x03\\x02\\x02\\x02\", \"\\u045E\\u045F\\x07f\\x02\\x02\\u045F\\u0460\\x07g\\x02\\x02\\u0460\", \"\\u0461\\x07h\\x02\\x02\\u0461\\u0462\\x07k\\x02\\x02\\u0462\\u0463\", \"\\x07p\\x02\\x02\\u0463\\u0464\\x07g\\x02\\x02\\u0464\\xE0\\x03\", \"\\x02\\x02\\x02\\u0465\\u0466\\x07>\\x02\\x02\\u0466\\u0467\\x07\", \"/\\x02\\x02\\u0467\\xE2\\x03\\x02\\x02\\x02\\u0468\\u0469\\x07\", \"f\\x02\\x02\\u0469\\u046A\\x07c\\x02\\x02\\u046A\\u046B\\x07v\\x02\", \"\\x02\\u046B\\u046C\\x07c\\x02\\x02\\u046C\\u046D\\x07r\\x02\\x02\", \"\\u046D\\u046E\\x07q\\x02\\x02\\u046E\\u046F\\x07k\\x02\\x02\\u046F\", \"\\u0470\\x07p\\x02\\x02\\u0470\\u0471\\x07v\\x02\\x02\\u0471\\xE4\", \"\\x03\\x02\\x02\\x02\\u0472\\u0473\\x07j\\x02\\x02\\u0473\\u0474\", \"\\x07k\\x02\\x02\\u0474\\u0475\\x07g\\x02\\x02\\u0475\\u0476\\x07\", \"t\\x02\\x02\\u0476\\u0477\\x07c\\x02\\x02\\u0477\\u0478\\x07t\\x02\", \"\\x02\\u0478\\u0479\\x07e\\x02\\x02\\u0479\\u047A\\x07j\\x02\\x02\", \"\\u047A\\u047B\\x07k\\x02\\x02\\u047B\\u047C\\x07e\\x02\\x02\\u047C\", \"\\u047D\\x07c\\x02\\x02\\u047D\\u047E\\x07n\\x02\\x02\\u047E\\xE6\", \"\\x03\\x02\\x02\\x02\\u047F\\u0480\\x07t\\x02\\x02\\u0480\\u0481\", \"\\x07w\\x02\\x02\\u0481\\u0482\\x07n\\x02\\x02\\u0482\\u0483\\x07\", \"g\\x02\\x02\\u0483\\u0484\\x07u\\x02\\x02\\u0484\\u0485\\x07g\\x02\", \"\\x02\\u0485\\u0486\\x07v\\x02\\x02\\u0486\\xE8\\x03\\x02\\x02\", \"\\x02\\u0487\\u0488\\x07t\\x02\\x02\\u0488\\u0489\\x07w\\x02\\x02\", \"\\u0489\\u048A\\x07n\\x02\\x02\\u048A\\u048B\\x07g\\x02\\x02\\u048B\", \"\\xEA\\x03\\x02\\x02\\x02\\u048C\\u048D\\x07g\\x02\\x02\\u048D\", \"\\u048E\\x07p\\x02\\x02\\u048E\\u048F\\x07f\\x02\\x02\\u048F\\xEC\", \"\\x03\\x02\\x02\\x02\\u0490\\u0491\\x07c\\x02\\x02\\u0491\\u0492\", \"\\x07n\\x02\\x02\\u0492\\u0493\\x07v\\x02\\x02\\u0493\\u0494\\x07\", \"g\\x02\\x02\\u0494\\u0495\\x07t\\x02\\x02\\u0495\\u0496\\x07F\\x02\", \"\\x02\\u0496\\u0497\\x07c\\x02\\x02\\u0497\\u0498\\x07v\\x02\\x02\", \"\\u0498\\u0499\\x07c\\x02\\x02\\u0499\\u049A\\x07u\\x02\\x02\\u049A\", \"\\u049B\\x07g\\x02\\x02\\u049B\\u049C\\x07v\\x02\\x02\\u049C\\xEE\", \"\\x03\\x02\\x02\\x02\\u049D\\u049E\\x07n\\x02\\x02\\u049E\\u049F\", \"\\x07v\\x02\\x02\\u049F\\u04A0\\x07t\\x02\\x02\\u04A0\\u04A1\\x07\", \"k\\x02\\x02\\u04A1\\u04A2\\x07o\\x02\\x02\\u04A2\\xF0\\x03\\x02\", \"\\x02\\x02\\u04A3\\u04A4\\x07t\\x02\\x02\\u04A4\\u04A5\\x07v\\x02\", \"\\x02\\u04A5\\u04A6\\x07t\\x02\\x02\\u04A6\\u04A7\\x07k\\x02\\x02\", \"\\u04A7\\u04A8\\x07o\\x02\\x02\\u04A8\\xF2\\x03\\x02\\x02\\x02\", \"\\u04A9\\u04AA\\x07k\\x02\\x02\\u04AA\\u04AB\\x07p\\x02\\x02\\u04AB\", \"\\u04AC\\x07u\\x02\\x02\\u04AC\\u04AD\\x07v\\x02\\x02\\u04AD\\u04AE\", \"\\x07t\\x02\\x02\\u04AE\\xF4\\x03\\x02\\x02\\x02\\u04AF\\u04B0\", \"\\x07t\\x02\\x02\\u04B0\\u04B1\\x07g\\x02\\x02\\u04B1\\u04B2\\x07\", \"r\\x02\\x02\\u04B2\\u04B3\\x07n\\x02\\x02\\u04B3\\u04B4\\x07c\\x02\", \"\\x02\\u04B4\\u04B5\\x07e\\x02\\x02\\u04B5\\u04B6\\x07g\\x02\\x02\", \"\\u04B6\\xF6\\x03\\x02\\x02\\x02\\u04B7\\u04B8\\x07e\\x02\\x02\", \"\\u04B8\\u04B9\\x07g\\x02\\x02\\u04B9\\u04BA\\x07k\\x02\\x02\\u04BA\", \"\\u04BB\\x07n\\x02\\x02\\u04BB\\xF8\\x03\\x02\\x02\\x02\\u04BC\", \"\\u04BD\\x07h\\x02\\x02\\u04BD\\u04BE\\x07n\\x02\\x02\\u04BE\\u04BF\", \"\\x07q\\x02\\x02\\u04BF\\u04C0\\x07q\\x02\\x02\\u04C0\\u04C1\\x07\", \"t\\x02\\x02\\u04C1\\xFA\\x03\\x02\\x02\\x02\\u04C2\\u04C3\\x07\", \"u\\x02\\x02\\u04C3\\u04C4\\x07s\\x02\\x02\\u04C4\\u04C5\\x07t\\x02\", \"\\x02\\u04C5\\u04C6\\x07v\\x02\\x02\\u04C6\\xFC\\x03\\x02\\x02\", \"\\x02\\u04C7\\u04C8\\x07c\\x02\\x02\\u04C8\\u04C9\\x07p\\x02\\x02\", \"\\u04C9\\u04CA\\x07{\\x02\\x02\\u04CA\\xFE\\x03\\x02\\x02\\x02\", \"\\u04CB\\u04CC\\x07u\\x02\\x02\\u04CC\\u04CD\\x07g\\x02\\x02\\u04CD\", \"\\u04CE\\x07v\\x02\\x02\\u04CE\\u04CF\\x07f\\x02\\x02\\u04CF\\u04D0\", \"\\x07k\\x02\\x02\\u04D0\\u04D1\\x07h\\x02\\x02\\u04D1\\u04D2\\x07\", \"h\\x02\\x02\\u04D2\\u0100\\x03\\x02\\x02\\x02\\u04D3\\u04D4\\x07\", \"u\\x02\\x02\\u04D4\\u04D5\\x07v\\x02\\x02\\u04D5\\u04D6\\x07f\\x02\", \"\\x02\\u04D6\\u04D7\\x07f\\x02\\x02\\u04D7\\u04D8\\x07g\\x02\\x02\", \"\\u04D8\\u04D9\\x07x\\x02\\x02\\u04D9\\u04DA\\x07a\\x02\\x02\\u04DA\", \"\\u04DB\\x07r\\x02\\x02\\u04DB\\u04DC\\x07q\\x02\\x02\\u04DC\\u04DD\", \"\\x07r\\x02\\x02\\u04DD\\u0102\\x03\\x02\\x02\\x02\\u04DE\\u04DF\", \"\\x07u\\x02\\x02\\u04DF\\u04E0\\x07v\\x02\\x02\\u04E0\\u04E1\\x07\", \"f\\x02\\x02\\u04E1\\u04E2\\x07f\\x02\\x02\\u04E2\\u04E3\\x07g\\x02\", \"\\x02\\u04E3\\u04E4\\x07x\\x02\\x02\\u04E4\\u04E5\\x07a\\x02\\x02\", \"\\u04E5\\u04E6\\x07u\\x02\\x02\\u04E6\\u04E7\\x07c\\x02\\x02\\u04E7\", \"\\u04E8\\x07o\\x02\\x02\\u04E8\\u04E9\\x07r\\x02\\x02\\u04E9\\u0104\", \"\\x03\\x02\\x02\\x02\\u04EA\\u04EB\\x07x\\x02\\x02\\u04EB\\u04EC\", \"\\x07c\\x02\\x02\\u04EC\\u04ED\\x07t\\x02\\x02\\u04ED\\u04EE\\x07\", \"a\\x02\\x02\\u04EE\\u04EF\\x07r\\x02\\x02\\u04EF\\u04F0\\x07q\\x02\", \"\\x02\\u04F0\\u04F1\\x07r\\x02\\x02\\u04F1\\u0106\\x03\\x02\\x02\", \"\\x02\\u04F2\\u04F3\\x07x\\x02\\x02\\u04F3\\u04F4\\x07c\\x02\\x02\", \"\\u04F4\\u04F5\\x07t\\x02\\x02\\u04F5\\u04F6\\x07a\\x02\\x02\\u04F6\", \"\\u04F7\\x07u\\x02\\x02\\u04F7\\u04F8\\x07c\\x02\\x02\\u04F8\\u04F9\", \"\\x07o\\x02\\x02\\u04F9\\u04FA\\x07r\\x02\\x02\\u04FA\\u0108\\x03\", \"\\x02\\x02\\x02\\u04FB\\u04FC\\x07i\\x02\\x02\\u04FC\\u04FD\\x07\", \"t\\x02\\x02\\u04FD\\u04FE\\x07q\\x02\\x02\\u04FE\\u04FF\\x07w\\x02\", \"\\x02\\u04FF\\u0500\\x07r\\x02\\x02\\u0500\\u010A\\x03\\x02\\x02\", \"\\x02\\u0501\\u0502\\x07g\\x02\\x02\\u0502\\u0503\\x07z\\x02\\x02\", \"\\u0503\\u0504\\x07e\\x02\\x02\\u0504\\u0505\\x07g\\x02\\x02\\u0505\", \"\\u0506\\x07r\\x02\\x02\\u0506\\u0507\\x07v\\x02\\x02\\u0507\\u010C\", \"\\x03\\x02\\x02\\x02\\u0508\\u0509\\x07j\\x02\\x02\\u0509\\u050A\", \"\\x07c\\x02\\x02\\u050A\\u050B\\x07x\\x02\\x02\\u050B\\u050C\\x07\", \"k\\x02\\x02\\u050C\\u050D\\x07p\\x02\\x02\\u050D\\u050E\\x07i\\x02\", \"\\x02\\u050E\\u010E\\x03\\x02\\x02\\x02\\u050F\\u0510\\x07h\\x02\", \"\\x02\\u0510\\u0511\\x07k\\x02\\x02\\u0511\\u0512\\x07t\\x02\\x02\", \"\\u0512\\u0513\\x07u\\x02\\x02\\u0513\\u0514\\x07v\\x02\\x02\\u0514\", \"\\u0515\\x07a\\x02\\x02\\u0515\\u0516\\x07x\\x02\\x02\\u0516\\u0517\", \"\\x07c\\x02\\x02\\u0517\\u0518\\x07n\\x02\\x02\\u0518\\u0519\\x07\", \"w\\x02\\x02\\u0519\\u051A\\x07g\\x02\\x02\\u051A\\u0110\\x03\\x02\", \"\\x02\\x02\\u051B\\u051C\\x07n\\x02\\x02\\u051C\\u051D\\x07c\\x02\", \"\\x02\\u051D\\u051E\\x07u\\x02\\x02\\u051E\\u051F\\x07v\\x02\\x02\", \"\\u051F\\u0520\\x07a\\x02\\x02\\u0520\\u0521\\x07x\\x02\\x02\\u0521\", \"\\u0522\\x07c\\x02\\x02\\u0522\\u0523\\x07n\\x02\\x02\\u0523\\u0524\", \"\\x07w\\x02\\x02\\u0524\\u0525\\x07g\\x02\\x02\\u0525\\u0112\\x03\", \"\\x02\\x02\\x02\\u0526\\u0527\\x07n\\x02\\x02\\u0527\\u0528\\x07\", \"c\\x02\\x02\\u0528\\u0529\\x07i\\x02\\x02\\u0529\\u0114\\x03\\x02\", \"\\x02\\x02\\u052A\\u052B\\x07n\\x02\\x02\\u052B\\u052C\\x07g\\x02\", \"\\x02\\u052C\\u052D\\x07c\\x02\\x02\\u052D\\u052E\\x07f\\x02\\x02\", \"\\u052E\\u0116\\x03\\x02\\x02\\x02\\u052F\\u0530\\x07t\\x02\\x02\", \"\\u0530\\u0531\\x07c\\x02\\x02\\u0531\\u0532\\x07v\\x02\\x02\\u0532\", \"\\u0533\\x07k\\x02\\x02\\u0533\\u0534\\x07q\\x02\\x02\\u0534\\u0535\", \"\\x07a\\x02\\x02\\u0535\\u0536\\x07v\\x02\\x02\\u0536\\u0537\\x07\", \"q\\x02\\x02\\u0537\\u0538\\x07a\\x02\\x02\\u0538\\u0539\\x07t\\x02\", \"\\x02\\u0539\\u053A\\x07g\\x02\\x02\\u053A\\u053B\\x07r\\x02\\x02\", \"\\u053B\\u053C\\x07q\\x02\\x02\\u053C\\u053D\\x07t\\x02\\x02\\u053D\", \"\\u053E\\x07v\\x02\\x02\\u053E\\u0118\\x03\\x02\\x02\\x02\\u053F\", \"\\u0540\\x07q\\x02\\x02\\u0540\\u0541\\x07x\\x02\\x02\\u0541\\u0542\", \"\\x07g\\x02\\x02\\u0542\\u0543\\x07t\\x02\\x02\\u0543\\u011A\\x03\", \"\\x02\\x02\\x02\\u0544\\u0545\\x07r\\x02\\x02\\u0545\\u0546\\x07\", \"t\\x02\\x02\\u0546\\u0547\\x07g\\x02\\x02\\u0547\\u0548\\x07e\\x02\", \"\\x02\\u0548\\u0549\\x07g\\x02\\x02\\u0549\\u054A\\x07f\\x02\\x02\", \"\\u054A\\u054B\\x07k\\x02\\x02\\u054B\\u054C\\x07p\\x02\\x02\\u054C\", \"\\u054D\\x07i\\x02\\x02\\u054D\\u011C\\x03\\x02\\x02\\x02\\u054E\", \"\\u054F\\x07h\\x02\\x02\\u054F\\u0550\\x07q\\x02\\x02\\u0550\\u0551\", \"\\x07n\\x02\\x02\\u0551\\u0552\\x07n\\x02\\x02\\u0552\\u0553\\x07\", \"q\\x02\\x02\\u0553\\u0554\\x07y\\x02\\x02\\u0554\\u0555\\x07k\\x02\", \"\\x02\\u0555\\u0556\\x07p\\x02\\x02\\u0556\\u0557\\x07i\\x02\\x02\", \"\\u0557\\u011E\\x03\\x02\\x02\\x02\\u0558\\u0559\\x07w\\x02\\x02\", \"\\u0559\\u055A\\x07p\\x02\\x02\\u055A\\u055B\\x07d\\x02\\x02\\u055B\", \"\\u055C\\x07q\\x02\\x02\\u055C\\u055D\\x07w\\x02\\x02\\u055D\\u055E\", \"\\x07p\\x02\\x02\\u055E\\u055F\\x07f\\x02\\x02\\u055F\\u0560\\x07\", \"g\\x02\\x02\\u0560\\u0561\\x07f\\x02\\x02\\u0561\\u0120\\x03\\x02\", \"\\x02\\x02\\u0562\\u0563\\x07r\\x02\\x02\\u0563\\u0564\\x07c\\x02\", \"\\x02\\u0564\\u0565\\x07t\\x02\\x02\\u0565\\u0566\\x07v\\x02\\x02\", \"\\u0566\\u0567\\x07k\\x02\\x02\\u0567\\u0568\\x07v\\x02\\x02\\u0568\", \"\\u0569\\x07k\\x02\\x02\\u0569\\u056A\\x07q\\x02\\x02\\u056A\\u056B\", \"\\x07p\\x02\\x02\\u056B\\u0122\\x03\\x02\\x02\\x02\\u056C\\u056D\", \"\\x07t\\x02\\x02\\u056D\\u056E\\x07q\\x02\\x02\\u056E\\u056F\\x07\", \"y\\x02\\x02\\u056F\\u0570\\x07u\\x02\\x02\\u0570\\u0124\\x03\\x02\", \"\\x02\\x02\\u0571\\u0572\\x07t\\x02\\x02\\u0572\\u0573\\x07c\\x02\", \"\\x02\\u0573\\u0574\\x07p\\x02\\x02\\u0574\\u0575\\x07i\\x02\\x02\", \"\\u0575\\u0576\\x07g\\x02\\x02\\u0576\\u0126\\x03\\x02\\x02\\x02\", \"\\u0577\\u0578\\x07e\\x02\\x02\\u0578\\u0579\\x07w\\x02\\x02\\u0579\", \"\\u057A\\x07t\\x02\\x02\\u057A\\u057B\\x07t\\x02\\x02\\u057B\\u057C\", \"\\x07g\\x02\\x02\\u057C\\u057D\\x07p\\x02\\x02\\u057D\\u057E\\x07\", \"v\\x02\\x02\\u057E\\u0128\\x03\\x02\\x02\\x02\\u057F\\u0580\\x07\", \"x\\x02\\x02\\u0580\\u0581\\x07c\\x02\\x02\\u0581\\u0582\\x07n\\x02\", \"\\x02\\u0582\\u0583\\x07k\\x02\\x02\\u0583\\u0584\\x07f\\x02\\x02\", \"\\u0584\\u012A\\x03\\x02\\x02\\x02\\u0585\\u0586\\x07h\\x02\\x02\", \"\\u0586\\u0587\\x07k\\x02\\x02\\u0587\\u0588\\x07n\\x02\\x02\\u0588\", \"\\u0589\\x07n\\x02\\x02\\u0589\\u058A\\x07a\\x02\\x02\\u058A\\u058B\", \"\\x07v\\x02\\x02\\u058B\\u058C\\x07k\\x02\\x02\\u058C\\u058D\\x07\", \"o\\x02\\x02\\u058D\\u058E\\x07g\\x02\\x02\\u058E\\u058F\\x07a\\x02\", \"\\x02\\u058F\\u0590\\x07u\\x02\\x02\\u0590\\u0591\\x07g\\x02\\x02\", \"\\u0591\\u0592\\x07t\\x02\\x02\\u0592\\u0593\\x07k\\x02\\x02\\u0593\", \"\\u0594\\x07g\\x02\\x02\\u0594\\u0595\\x07u\\x02\\x02\\u0595\\u012C\", \"\\x03\\x02\\x02\\x02\\u0596\\u0597\\x07h\\x02\\x02\\u0597\\u0598\", \"\\x07n\\x02\\x02\\u0598\\u0599\\x07q\\x02\\x02\\u0599\\u059A\\x07\", \"y\\x02\\x02\\u059A\\u059B\\x07a\\x02\\x02\\u059B\\u059C\\x07v\\x02\", \"\\x02\\u059C\\u059D\\x07q\\x02\\x02\\u059D\\u059E\\x07a\\x02\\x02\", \"\\u059E\\u059F\\x07u\\x02\\x02\\u059F\\u05A0\\x07v\\x02\\x02\\u05A0\", \"\\u05A1\\x07q\\x02\\x02\\u05A1\\u05A2\\x07e\\x02\\x02\\u05A2\\u05A3\", \"\\x07m\\x02\\x02\\u05A3\\u012E\\x03\\x02\\x02\\x02\\u05A4\\u05A5\", \"\\x07u\\x02\\x02\\u05A5\\u05A6\\x07v\\x02\\x02\\u05A6\\u05A7\\x07\", \"q\\x02\\x02\\u05A7\\u05A8\\x07e\\x02\\x02\\u05A8\\u05A9\\x07m\\x02\", \"\\x02\\u05A9\\u05AA\\x07a\\x02\\x02\\u05AA\\u05AB\\x07v\\x02\\x02\", \"\\u05AB\\u05AC\\x07q\\x02\\x02\\u05AC\\u05AD\\x07a\\x02\\x02\\u05AD\", \"\\u05AE\\x07h\\x02\\x02\\u05AE\\u05AF\\x07n\\x02\\x02\\u05AF\\u05B0\", \"\\x07q\\x02\\x02\\u05B0\\u05B1\\x07y\\x02\\x02\\u05B1\\u0130\\x03\", \"\\x02\\x02\\x02\\u05B2\\u05B3\\x07v\\x02\\x02\\u05B3\\u05B4\\x07\", \"k\\x02\\x02\\u05B4\\u05B5\\x07o\\x02\\x02\\u05B5\\u05B6\\x07g\\x02\", \"\\x02\\u05B6\\u05B7\\x07u\\x02\\x02\\u05B7\\u05B8\\x07j\\x02\\x02\", \"\\u05B8\\u05B9\\x07k\\x02\\x02\\u05B9\\u05BA\\x07h\\x02\\x02\\u05BA\", \"\\u05BB\\x07v\\x02\\x02\\u05BB\\u0132\\x03\\x02\\x02\\x02\\u05BC\", \"\\u05BD\\x07o\\x02\\x02\\u05BD\\u05BE\\x07g\\x02\\x02\\u05BE\\u05BF\", \"\\x07c\\x02\\x02\\u05BF\\u05C0\\x07u\\x02\\x02\\u05C0\\u05C1\\x07\", \"w\\x02\\x02\\u05C1\\u05C2\\x07t\\x02\\x02\\u05C2\\u05C3\\x07g\\x02\", \"\\x02\\u05C3\\u05C4\\x07u\\x02\\x02\\u05C4\\u0134\\x03\\x02\\x02\", \"\\x02\\u05C5\\u05C6\\x07p\\x02\\x02\\u05C6\\u05C7\\x07q\\x02\\x02\", \"\\u05C7\\u05C8\\x07a\\x02\\x02\\u05C8\\u05C9\\x07o\\x02\\x02\\u05C9\", \"\\u05CA\\x07g\\x02\\x02\\u05CA\\u05CB\\x07c\\x02\\x02\\u05CB\\u05CC\", \"\\x07u\\x02\\x02\\u05CC\\u05CD\\x07w\\x02\\x02\\u05CD\\u05CE\\x07\", \"t\\x02\\x02\\u05CE\\u05CF\\x07g\\x02\\x02\\u05CF\\u05D0\\x07u\\x02\", \"\\x02\\u05D0\\u0136\\x03\\x02\\x02\\x02\\u05D1\\u05D2\\x07e\\x02\", \"\\x02\\u05D2\\u05D3\\x07q\\x02\\x02\\u05D3\\u05D4\\x07p\\x02\\x02\", \"\\u05D4\\u05D5\\x07f\\x02\\x02\\u05D5\\u05D6\\x07k\\x02\\x02\\u05D6\", \"\\u05D7\\x07v\\x02\\x02\\u05D7\\u05D8\\x07k\\x02\\x02\\u05D8\\u05D9\", \"\\x07q\\x02\\x02\\u05D9\\u05DA\\x07p\\x02\\x02\\u05DA\\u0138\\x03\", \"\\x02\\x02\\x02\\u05DB\\u05DC\\x07d\\x02\\x02\\u05DC\\u05DD\\x07\", \"q\\x02\\x02\\u05DD\\u05DE\\x07q\\x02\\x02\\u05DE\\u05DF\\x07n\\x02\", \"\\x02\\u05DF\\u05E0\\x07g\\x02\\x02\\u05E0\\u05E1\\x07c\\x02\\x02\", \"\\u05E1\\u05E2\\x07p\\x02\\x02\\u05E2\\u013A\\x03\\x02\\x02\\x02\", \"\\u05E3\\u05E4\\x07f\\x02\\x02\\u05E4\\u05E5\\x07c\\x02\\x02\\u05E5\", \"\\u05E6\\x07v\\x02\\x02\\u05E6\\u05E7\\x07g\\x02\\x02\\u05E7\\u013C\", \"\\x03\\x02\\x02\\x02\\u05E8\\u05E9\\x07v\\x02\\x02\\u05E9\\u05EA\", \"\\x07k\\x02\\x02\\u05EA\\u05EB\\x07o\\x02\\x02\\u05EB\\u05EC\\x07\", \"g\\x02\\x02\\u05EC\\u05ED\\x07a\\x02\\x02\\u05ED\\u05EE\\x07r\\x02\", \"\\x02\\u05EE\\u05EF\\x07g\\x02\\x02\\u05EF\\u05F0\\x07t\\x02\\x02\", \"\\u05F0\\u05F1\\x07k\\x02\\x02\\u05F1\\u05F2\\x07q\\x02\\x02\\u05F2\", \"\\u05F3\\x07f\\x02\\x02\\u05F3\\u013E\\x03\\x02\\x02\\x02\\u05F4\", \"\\u05F5\\x07p\\x02\\x02\\u05F5\\u05F6\\x07w\\x02\\x02\\u05F6\\u05F7\", \"\\x07o\\x02\\x02\\u05F7\\u05F8\\x07d\\x02\\x02\\u05F8\\u05F9\\x07\", \"g\\x02\\x02\\u05F9\\u05FA\\x07t\\x02\\x02\\u05FA\\u0140\\x03\\x02\", \"\\x02\\x02\\u05FB\\u05FC\\x07u\\x02\\x02\\u05FC\\u05FD\\x07v\\x02\", \"\\x02\\u05FD\\u05FE\\x07t\\x02\\x02\\u05FE\\u05FF\\x07k\\x02\\x02\", \"\\u05FF\\u0600\\x07p\\x02\\x02\\u0600\\u0601\\x07i\\x02\\x02\\u0601\", \"\\u0142\\x03\\x02\\x02\\x02\\u0602\\u0603\\x07k\\x02\\x02\\u0603\", \"\\u0604\\x07p\\x02\\x02\\u0604\\u0605\\x07v\\x02\\x02\\u0605\\u0606\", \"\\x07g\\x02\\x02\\u0606\\u0607\\x07i\\x02\\x02\\u0607\\u0608\\x07\", \"g\\x02\\x02\\u0608\\u0609\\x07t\\x02\\x02\\u0609\\u0144\\x03\\x02\", \"\\x02\\x02\\u060A\\u060B\\x07h\\x02\\x02\\u060B\\u060C\\x07n\\x02\", \"\\x02\\u060C\\u060D\\x07q\\x02\\x02\\u060D\\u060E\\x07c\\x02\\x02\", \"\\u060E\\u060F\\x07v\\x02\\x02\\u060F\\u0146\\x03\\x02\\x02\\x02\", \"\\u0610\\u0611\\x07n\\x02\\x02\\u0611\\u0612\\x07k\\x02\\x02\\u0612\", \"\\u0613\\x07u\\x02\\x02\\u0613\\u0614\\x07v\\x02\\x02\\u0614\\u0148\", \"\\x03\\x02\\x02\\x02\\u0615\\u0616\\x07t\\x02\\x02\\u0616\\u0617\", \"\\x07g\\x02\\x02\\u0617\\u0618\\x07e\\x02\\x02\\u0618\\u0619\\x07\", \"q\\x02\\x02\\u0619\\u061A\\x07t\\x02\\x02\\u061A\\u061B\\x07f\\x02\", \"\\x02\\u061B\\u014A\\x03\\x02\\x02\\x02\\u061C\\u061D\\x07t\\x02\", \"\\x02\\u061D\\u061E\\x07g\\x02\\x02\\u061E\\u061F\\x07u\\x02\\x02\", \"\\u061F\\u0620\\x07v\\x02\\x02\\u0620\\u0621\\x07t\\x02\\x02\\u0621\", \"\\u0622\\x07k\\x02\\x02\\u0622\\u0623\\x07e\\x02\\x02\\u0623\\u0624\", \"\\x07v\\x02\\x02\\u0624\\u014C\\x03\\x02\\x02\\x02\\u0625\\u0626\", \"\\x07{\\x02\\x02\\u0626\\u0627\\x07{\\x02\\x02\\u0627\\u0628\\x07\", \"{\\x02\\x02\\u0628\\u0629\\x07{\\x02\\x02\\u0629\\u014E\\x03\\x02\", \"\\x02\\x02\\u062A\\u062B\\x07o\\x02\\x02\\u062B\\u062C\\x07o\\x02\", \"\\x02\\u062C\\u0150\\x03\\x02\\x02\\x02\\u062D\\u062E\\x07f\\x02\", \"\\x02\\u062E\\u062F\\x07f\\x02\\x02\\u062F\\u0152\\x03\\x02\\x02\", \"\\x02\\u0630\\u0631\\x07o\\x02\\x02\\u0631\\u0632\\x07c\\x02\\x02\", \"\\u0632\\u0633\\x07z\\x02\\x02\\u0633\\u0634\\x07N\\x02\\x02\\u0634\", \"\\u0635\\x07g\\x02\\x02\\u0635\\u0636\\x07p\\x02\\x02\\u0636\\u0637\", \"\\x07i\\x02\\x02\\u0637\\u0638\\x07v\\x02\\x02\\u0638\\u0639\\x07\", \"j\\x02\\x02\\u0639\\u0154\\x03\\x02\\x02\\x02\\u063A\\u063B\\x07\", \"t\\x02\\x02\\u063B\\u063C\\x07g\\x02\\x02\\u063C\\u063D\\x07i\\x02\", \"\\x02\\u063D\\u063E\\x07g\\x02\\x02\\u063E\\u063F\\x07z\\x02\\x02\", \"\\u063F\\u0640\\x07r\\x02\\x02\\u0640\\u0156\\x03\\x02\\x02\\x02\", \"\\u0641\\u0642\\x07k\\x02\\x02\\u0642\\u0643\\x07u\\x02\\x02\\u0643\", \"\\u0158\\x03\\x02\\x02\\x02\\u0644\\u0645\\x07y\\x02\\x02\\u0645\", \"\\u0646\\x07j\\x02\\x02\\u0646\\u0647\\x07g\\x02\\x02\\u0647\\u0648\", \"\\x07p\\x02\\x02\\u0648\\u015A\\x03\\x02\\x02\\x02\\u0649\\u064A\", \"\\x07h\\x02\\x02\\u064A\\u064B\\x07t\\x02\\x02\\u064B\\u064C\\x07\", \"q\\x02\\x02\\u064C\\u064D\\x07o\\x02\\x02\\u064D\\u015C\\x03\\x02\", \"\\x02\\x02\\u064E\\u064F\\x07c\\x02\\x02\\u064F\\u0650\\x07i\\x02\", \"\\x02\\u0650\\u0651\\x07i\\x02\\x02\\u0651\\u0652\\x07t\\x02\\x02\", \"\\u0652\\u0653\\x07g\\x02\\x02\\u0653\\u0654\\x07i\\x02\\x02\\u0654\", \"\\u0655\\x07c\\x02\\x02\\u0655\\u0656\\x07v\\x02\\x02\\u0656\\u0657\", \"\\x07g\\x02\\x02\\u0657\\u0658\\x07u\\x02\\x02\\u0658\\u015E\\x03\", \"\\x02\\x02\\x02\\u0659\\u065A\\x07r\\x02\\x02\\u065A\\u065B\\x07\", \"q\\x02\\x02\\u065B\\u065C\\x07k\\x02\\x02\\u065C\\u065D\\x07p\\x02\", \"\\x02\\u065D\\u065E\\x07v\\x02\\x02\\u065E\\u065F\\x07u\\x02\\x02\", \"\\u065F\\u0160\\x03\\x02\\x02\\x02\\u0660\\u0661\\x07r\\x02\\x02\", \"\\u0661\\u0662\\x07q\\x02\\x02\\u0662\\u0663\\x07k\\x02\\x02\\u0663\", \"\\u0664\\x07p\\x02\\x02\\u0664\\u0665\\x07v\\x02\\x02\\u0665\\u0162\", \"\\x03\\x02\\x02\\x02\\u0666\\u0667\\x07v\\x02\\x02\\u0667\\u0668\", \"\\x07q\\x02\\x02\\u0668\\u0669\\x07v\\x02\\x02\\u0669\\u066A\\x07\", \"c\\x02\\x02\\u066A\\u066B\\x07n\\x02\\x02\\u066B\\u0164\\x03\\x02\", \"\\x02\\x02\\u066C\\u066D\\x07r\\x02\\x02\\u066D\\u066E\\x07c\\x02\", \"\\x02\\u066E\\u066F\\x07t\\x02\\x02\\u066F\\u0670\\x07v\\x02\\x02\", \"\\u0670\\u0671\\x07k\\x02\\x02\\u0671\\u0672\\x07c\\x02\\x02\\u0672\", \"\\u0673\\x07n\\x02\\x02\\u0673\\u0166\\x03\\x02\\x02\\x02\\u0674\", \"\\u0675\\x07c\\x02\\x02\\u0675\\u0676\\x07n\\x02\\x02\\u0676\\u0677\", \"\\x07y\\x02\\x02\\u0677\\u0678\\x07c\\x02\\x02\\u0678\\u0679\\x07\", \"{\\x02\\x02\\u0679\\u067A\\x07u\\x02\\x02\\u067A\\u0168\\x03\\x02\", \"\\x02\\x02\\u067B\\u067C\\x07k\\x02\\x02\\u067C\\u067D\\x07p\\x02\", \"\\x02\\u067D\\u067E\\x07p\\x02\\x02\\u067E\\u067F\\x07g\\x02\\x02\", \"\\u067F\\u0680\\x07t\\x02\\x02\\u0680\\u0681\\x07a\\x02\\x02\\u0681\", \"\\u0682\\x07l\\x02\\x02\\u0682\\u0683\\x07q\\x02\\x02\\u0683\\u0684\", \"\\x07k\\x02\\x02\\u0684\\u0685\\x07p\\x02\\x02\\u0685\\u016A\\x03\", \"\\x02\\x02\\x02\\u0686\\u0687\\x07n\\x02\\x02\\u0687\\u0688\\x07\", \"g\\x02\\x02\\u0688\\u0689\\x07h\\x02\\x02\\u0689\\u068A\\x07v\\x02\", \"\\x02\\u068A\\u068B\\x07a\\x02\\x02\\u068B\\u068C\\x07l\\x02\\x02\", \"\\u068C\\u068D\\x07q\\x02\\x02\\u068D\\u068E\\x07k\\x02\\x02\\u068E\", \"\\u068F\\x07p\\x02\\x02\\u068F\\u016C\\x03\\x02\\x02\\x02\\u0690\", \"\\u0691\\x07e\\x02\\x02\\u0691\\u0692\\x07t\\x02\\x02\\u0692\\u0693\", \"\\x07q\\x02\\x02\\u0693\\u0694\\x07u\\x02\\x02\\u0694\\u0695\\x07\", \"u\\x02\\x02\\u0695\\u0696\\x07a\\x02\\x02\\u0696\\u0697\\x07l\\x02\", \"\\x02\\u0697\\u0698\\x07q\\x02\\x02\\u0698\\u0699\\x07k\\x02\\x02\", \"\\u0699\\u069A\\x07p\\x02\\x02\\u069A\\u016E\\x03\\x02\\x02\\x02\", \"\\u069B\\u069C\\x07h\\x02\\x02\\u069C\\u069D\\x07w\\x02\\x02\\u069D\", \"\\u069E\\x07n\\x02\\x02\\u069E\\u069F\\x07n\\x02\\x02\\u069F\\u06A0\", \"\\x07a\\x02\\x02\\u06A0\\u06A1\\x07l\\x02\\x02\\u06A1\\u06A2\\x07\", \"q\\x02\\x02\\u06A2\\u06A3\\x07k\\x02\\x02\\u06A3\\u06A4\\x07p\\x02\", \"\\x02\\u06A4\\u0170\\x03\\x02\\x02\\x02\\u06A5\\u06A6\\x07o\\x02\", \"\\x02\\u06A6\\u06A7\\x07c\\x02\\x02\\u06A7\\u06A8\\x07r\\x02\\x02\", \"\\u06A8\\u06A9\\x07u\\x02\\x02\\u06A9\\u06AA\\x07a\\x02\\x02\\u06AA\", \"\\u06AB\\x07h\\x02\\x02\\u06AB\\u06AC\\x07t\\x02\\x02\\u06AC\\u06AD\", \"\\x07q\\x02\\x02\\u06AD\\u06AE\\x07o\\x02\\x02\\u06AE\\u0172\\x03\", \"\\x02\\x02\\x02\\u06AF\\u06B0\\x07o\\x02\\x02\\u06B0\\u06B1\\x07\", \"c\\x02\\x02\\u06B1\\u06B2\\x07r\\x02\\x02\\u06B2\\u06B3\\x07u\\x02\", \"\\x02\\u06B3\\u06B4\\x07a\\x02\\x02\\u06B4\\u06B5\\x07v\\x02\\x02\", \"\\u06B5\\u06B6\\x07q\\x02\\x02\\u06B6\\u0174\\x03\\x02\\x02\\x02\", \"\\u06B7\\u06B8\\x07o\\x02\\x02\\u06B8\\u06B9\\x07c\\x02\\x02\\u06B9\", \"\\u06BA\\x07r\\x02\\x02\\u06BA\\u06BB\\x07a\\x02\\x02\\u06BB\\u06BC\", \"\\x07v\\x02\\x02\\u06BC\\u06BD\\x07q\\x02\\x02\\u06BD\\u0176\\x03\", \"\\x02\\x02\\x02\\u06BE\\u06BF\\x07o\\x02\\x02\\u06BF\\u06C0\\x07\", \"c\\x02\\x02\\u06C0\\u06C1\\x07r\\x02\\x02\\u06C1\\u06C2\\x07a\\x02\", \"\\x02\\u06C2\\u06C3\\x07h\\x02\\x02\\u06C3\\u06C4\\x07t\\x02\\x02\", \"\\u06C4\\u06C5\\x07q\\x02\\x02\\u06C5\\u06C6\\x07o\\x02\\x02\\u06C6\", \"\\u0178\\x03\\x02\\x02\\x02\\u06C7\\u06C8\\x07t\\x02\\x02\\u06C8\", \"\\u06C9\\x07g\\x02\\x02\\u06C9\\u06CA\\x07v\\x02\\x02\\u06CA\\u06CB\", \"\\x07w\\x02\\x02\\u06CB\\u06CC\\x07t\\x02\\x02\\u06CC\\u06CD\\x07\", \"p\\x02\\x02\\u06CD\\u06CE\\x07u\\x02\\x02\\u06CE\\u017A\\x03\\x02\", \"\\x02\\x02\\u06CF\\u06D0\\x07r\\x02\\x02\\u06D0\\u06D1\\x07k\\x02\", \"\\x02\\u06D1\\u06D2\\x07x\\x02\\x02\\u06D2\\u06D3\\x07q\\x02\\x02\", \"\\u06D3\\u06D4\\x07v\\x02\\x02\\u06D4\\u017C\\x03\\x02\\x02\\x02\", \"\\u06D5\\u06D6\\x07w\\x02\\x02\\u06D6\\u06D7\\x07p\\x02\\x02\\u06D7\", \"\\u06D8\\x07r\\x02\\x02\\u06D8\\u06D9\\x07k\\x02\\x02\\u06D9\\u06DA\", \"\\x07x\\x02\\x02\\u06DA\\u06DB\\x07q\\x02\\x02\\u06DB\\u06DC\\x07\", \"v\\x02\\x02\\u06DC\\u017E\\x03\\x02\\x02\\x02\\u06DD\\u06DE\\x07\", \"u\\x02\\x02\\u06DE\\u06DF\\x07w\\x02\\x02\\u06DF\\u06E0\\x07d\\x02\", \"\\x02\\u06E0\\u0180\\x03\\x02\\x02\\x02\\u06E1\\u06E2\\x07c\\x02\", \"\\x02\\u06E2\\u06E3\\x07r\\x02\\x02\\u06E3\\u06E4\\x07r\\x02\\x02\", \"\\u06E4\\u06E5\\x07n\\x02\\x02\\u06E5\\u06E6\\x07{\\x02\\x02\\u06E6\", \"\\u0182\\x03\\x02\\x02\\x02\\u06E7\\u06E8\\x07e\\x02\\x02\\u06E8\", \"\\u06E9\\x07q\\x02\\x02\\u06E9\\u06EA\\x07p\\x02\\x02\\u06EA\\u06EB\", \"\\x07f\\x02\\x02\\u06EB\\u06EC\\x07k\\x02\\x02\\u06EC\\u06ED\\x07\", \"v\\x02\\x02\\u06ED\\u06EE\\x07k\\x02\\x02\\u06EE\\u06EF\\x07q\\x02\", \"\\x02\\u06EF\\u06F0\\x07p\\x02\\x02\\u06F0\\u06F1\\x07g\\x02\\x02\", \"\\u06F1\\u06F2\\x07f\\x02\\x02\\u06F2\\u0184\\x03\\x02\\x02\\x02\", \"\\u06F3\\u06F4\\x07r\\x02\\x02\\u06F4\\u06F5\\x07g\\x02\\x02\\u06F5\", \"\\u06F6\\x07t\\x02\\x02\\u06F6\\u06F7\\x07k\\x02\\x02\\u06F7\\u06F8\", \"\\x07q\\x02\\x02\\u06F8\\u06F9\\x07f\\x02\\x02\\u06F9\\u06FA\\x07\", \"a\\x02\\x02\\u06FA\\u06FB\\x07k\\x02\\x02\\u06FB\\u06FC\\x07p\\x02\", \"\\x02\\u06FC\\u06FD\\x07f\\x02\\x02\\u06FD\\u06FE\\x07k\\x02\\x02\", \"\\u06FE\\u06FF\\x07e\\x02\\x02\\u06FF\\u0700\\x07c\\x02\\x02\\u0700\", \"\\u0701\\x07v\\x02\\x02\\u0701\\u0702\\x07q\\x02\\x02\\u0702\\u0703\", \"\\x07t\\x02\\x02\\u0703\\u0186\\x03\\x02\\x02\\x02\\u0704\\u0705\", \"\\x07u\\x02\\x02\\u0705\\u0706\\x07k\\x02\\x02\\u0706\\u0707\\x07\", \"p\\x02\\x02\\u0707\\u0708\\x07i\\x02\\x02\\u0708\\u0709\\x07n\\x02\", \"\\x02\\u0709\\u070A\\x07g\\x02\\x02\\u070A\\u0188\\x03\\x02\\x02\", \"\\x02\\u070B\\u070C\\x07f\\x02\\x02\\u070C\\u070D\\x07w\\x02\\x02\", \"\\u070D\\u070E\\x07t\\x02\\x02\\u070E\\u070F\\x07c\\x02\\x02\\u070F\", \"\\u0710\\x07v\\x02\\x02\\u0710\\u0711\\x07k\\x02\\x02\\u0711\\u0712\", \"\\x07q\\x02\\x02\\u0712\\u0713\\x07p\\x02\\x02\\u0713\\u018A\\x03\", \"\\x02\\x02\\x02\\u0714\\u0715\\x07v\\x02\\x02\\u0715\\u0716\\x07\", \"k\\x02\\x02\\u0716\\u0717\\x07o\\x02\\x02\\u0717\\u0718\\x07g\\x02\", \"\\x02\\u0718\\u0719\\x07a\\x02\\x02\\u0719\\u071A\\x07c\\x02\\x02\", \"\\u071A\\u071B\\x07i\\x02\\x02\\u071B\\u071C\\x07i\\x02\\x02\\u071C\", \"\\u018C\\x03\\x02\\x02\\x02\\u071D\\u071E\\x07w\\x02\\x02\\u071E\", \"\\u071F\\x07p\\x02\\x02\\u071F\\u0720\\x07k\\x02\\x02\\u0720\\u0721\", \"\\x07v\\x02\\x02\\u0721\\u018E\\x03\\x02\\x02\\x02\\u0722\\u0723\", \"\\x07X\\x02\\x02\\u0723\\u0724\\x07c\\x02\\x02\\u0724\\u0725\\x07\", \"n\\x02\\x02\\u0725\\u0726\\x07w\\x02\\x02\\u0726\\u0727\\x07g\\x02\", \"\\x02\\u0727\\u0190\\x03\\x02\\x02\\x02\\u0728\\u0729\\x07x\\x02\", \"\\x02\\u0729\\u072A\\x07c\\x02\\x02\\u072A\\u072B\\x07n\\x02\\x02\", \"\\u072B\\u072C\\x07w\\x02\\x02\\u072C\\u072D\\x07g\\x02\\x02\\u072D\", \"\\u072E\\x07f\\x02\\x02\\u072E\\u072F\\x07q\\x02\\x02\\u072F\\u0730\", \"\\x07o\\x02\\x02\\u0730\\u0731\\x07c\\x02\\x02\\u0731\\u0732\\x07\", \"k\\x02\\x02\\u0732\\u0733\\x07p\\x02\\x02\\u0733\\u0734\\x07u\\x02\", \"\\x02\\u0734\\u0192\\x03\\x02\\x02\\x02\\u0735\\u0736\\x07x\\x02\", \"\\x02\\u0736\\u0737\\x07c\\x02\\x02\\u0737\\u0738\\x07t\\x02\\x02\", \"\\u0738\\u0739\\x07k\\x02\\x02\\u0739\\u073A\\x07c\\x02\\x02\\u073A\", \"\\u073B\\x07d\\x02\\x02\\u073B\\u073C\\x07n\\x02\\x02\\u073C\\u073D\", \"\\x07g\\x02\\x02\\u073D\\u073E\\x07u\\x02\\x02\\u073E\\u0194\\x03\", \"\\x02\\x02\\x02\\u073F\\u0740\\x07k\\x02\\x02\\u0740\\u0741\\x07\", \"p\\x02\\x02\\u0741\\u0742\\x07r\\x02\\x02\\u0742\\u0743\\x07w\\x02\", \"\\x02\\u0743\\u0744\\x07v\\x02\\x02\\u0744\\u0196\\x03\\x02\\x02\", \"\\x02\\u0745\\u0746\\x07q\\x02\\x02\\u0746\\u0747\\x07w\\x02\\x02\", \"\\u0747\\u0748\\x07v\\x02\\x02\\u0748\\u0749\\x07r\\x02\\x02\\u0749\", \"\\u074A\\x07w\\x02\\x02\\u074A\\u074B\\x07v\\x02\\x02\\u074B\\u0198\", \"\\x03\\x02\\x02\\x02\\u074C\\u074D\\x07e\\x02\\x02\\u074D\\u074E\", \"\\x07c\\x02\\x02\\u074E\\u074F\\x07u\\x02\\x02\\u074F\\u0750\\x07\", \"v\\x02\\x02\\u0750\\u019A\\x03\\x02\\x02\\x02\\u0751\\u0752\\x07\", \"t\\x02\\x02\\u0752\\u0753\\x07w\\x02\\x02\\u0753\\u0754\\x07n\\x02\", \"\\x02\\u0754\\u0755\\x07g\\x02\\x02\\u0755\\u0756\\x07a\\x02\\x02\", \"\\u0756\\u0757\\x07r\\x02\\x02\\u0757\\u0758\\x07t\\x02\\x02\\u0758\", \"\\u0759\\x07k\\x02\\x02\\u0759\\u075A\\x07q\\x02\\x02\\u075A\\u075B\", \"\\x07t\\x02\\x02\\u075B\\u075C\\x07k\\x02\\x02\\u075C\\u075D\\x07\", \"v\\x02\\x02\\u075D\\u075E\\x07{\\x02\\x02\\u075E\\u019C\\x03\\x02\", \"\\x02\\x02\\u075F\\u0760\\x07f\\x02\\x02\\u0760\\u0761\\x07c\\x02\", \"\\x02\\u0761\\u0762\\x07v\\x02\\x02\\u0762\\u0763\\x07c\\x02\\x02\", \"\\u0763\\u0764\\x07u\\x02\\x02\\u0764\\u0765\\x07g\\x02\\x02\\u0765\", \"\\u0766\\x07v\\x02\\x02\\u0766\\u0767\\x07a\\x02\\x02\\u0767\\u0768\", \"\\x07r\\x02\\x02\\u0768\\u0769\\x07t\\x02\\x02\\u0769\\u076A\\x07\", \"k\\x02\\x02\\u076A\\u076B\\x07q\\x02\\x02\\u076B\\u076C\\x07t\\x02\", \"\\x02\\u076C\\u076D\\x07k\\x02\\x02\\u076D\\u076E\\x07v\\x02\\x02\", \"\\u076E\\u076F\\x07{\\x02\\x02\\u076F\\u019E\\x03\\x02\\x02\\x02\", \"\\u0770\\u0771\\x07f\\x02\\x02\\u0771\\u0772\\x07g\\x02\\x02\\u0772\", \"\\u0773\\x07h\\x02\\x02\\u0773\\u0774\\x07c\\x02\\x02\\u0774\\u0775\", \"\\x07w\\x02\\x02\\u0775\\u0776\\x07n\\x02\\x02\\u0776\\u0777\\x07\", \"v\\x02\\x02\\u0777\\u01A0\\x03\\x02\\x02\\x02\\u0778\\u0779\\x07\", \"e\\x02\\x02\\u0779\\u077A\\x07j\\x02\\x02\\u077A\\u077B\\x07g\\x02\", \"\\x02\\u077B\\u077C\\x07e\\x02\\x02\\u077C\\u077D\\x07m\\x02\\x02\", \"\\u077D\\u077E\\x07a\\x02\\x02\\u077E\\u077F\\x07f\\x02\\x02\\u077F\", \"\\u0780\\x07c\\x02\\x02\\u0780\\u0781\\x07v\\x02\\x02\\u0781\\u0782\", \"\\x07c\\x02\\x02\\u0782\\u0783\\x07r\\x02\\x02\\u0783\\u0784\\x07\", \"q\\x02\\x02\\u0784\\u0785\\x07k\\x02\\x02\\u0785\\u0786\\x07p\\x02\", \"\\x02\\u0786\\u0787\\x07v\\x02\\x02\\u0787\\u01A2\\x03\\x02\\x02\", \"\\x02\\u0788\\u0789\\x07e\\x02\\x02\\u0789\\u078A\\x07j\\x02\\x02\", \"\\u078A\\u078B\\x07g\\x02\\x02\\u078B\\u078C\\x07e\\x02\\x02\\u078C\", \"\\u078D\\x07m\\x02\\x02\\u078D\\u078E\\x07a\\x02\\x02\\u078E\\u078F\", \"\\x07j\\x02\\x02\\u078F\\u0790\\x07k\\x02\\x02\\u0790\\u0791\\x07\", \"g\\x02\\x02\\u0791\\u0792\\x07t\\x02\\x02\\u0792\\u0793\\x07c\\x02\", \"\\x02\\u0793\\u0794\\x07t\\x02\\x02\\u0794\\u0795\\x07e\\x02\\x02\", \"\\u0795\\u0796\\x07j\\x02\\x02\\u0796\\u0797\\x07{\\x02\\x02\\u0797\", \"\\u01A4\\x03\\x02\\x02\\x02\\u0798\\u0799\\x07e\\x02\\x02\\u0799\", \"\\u079A\\x07q\\x02\\x02\\u079A\\u079B\\x07o\\x02\\x02\\u079B\\u079C\", \"\\x07r\\x02\\x02\\u079C\\u079D\\x07w\\x02\\x02\\u079D\\u079E\\x07\", \"v\\x02\\x02\\u079E\\u079F\\x07g\\x02\\x02\\u079F\\u07A0\\x07f\\x02\", \"\\x02\\u07A0\\u01A6\\x03\\x02\\x02\\x02\\u07A1\\u07A2\\x07p\\x02\", \"\\x02\\u07A2\\u07A3\\x07q\\x02\\x02\\u07A3\\u07A4\\x07p\\x02\\x02\", \"\\u07A4\\u07A5\\x07a\\x02\\x02\\u07A5\\u07A6\\x07p\\x02\\x02\\u07A6\", \"\\u07A7\\x07w\\x02\\x02\\u07A7\\u07A8\\x07n\\x02\\x02\\u07A8\\u07A9\", \"\\x07n\\x02\\x02\\u07A9\\u01A8\\x03\\x02\\x02\\x02\\u07AA\\u07AB\", \"\\x07p\\x02\\x02\\u07AB\\u07AC\\x07q\\x02\\x02\\u07AC\\u07AD\\x07\", \"p\\x02\\x02\\u07AD\\u07AE\\x07a\\x02\\x02\\u07AE\\u07AF\\x07|\\x02\", \"\\x02\\u07AF\\u07B0\\x07g\\x02\\x02\\u07B0\\u07B1\\x07t\\x02\\x02\", \"\\u07B1\\u07B2\\x07q\\x02\\x02\\u07B2\\u01AA\\x03\\x02\\x02\\x02\", \"\\u07B3\\u07B4\\x07r\\x02\\x02\\u07B4\\u07B5\\x07c\\x02\\x02\\u07B5\", \"\\u07B6\\x07t\\x02\\x02\\u07B6\\u07B7\\x07v\\x02\\x02\\u07B7\\u07B8\", \"\\x07k\\x02\\x02\\u07B8\\u07B9\\x07c\\x02\\x02\\u07B9\\u07BA\\x07\", \"n\\x02\\x02\\u07BA\\u07BB\\x07a\\x02\\x02\\u07BB\\u07BC\\x07p\\x02\", \"\\x02\\u07BC\\u07BD\\x07w\\x02\\x02\\u07BD\\u07BE\\x07n\\x02\\x02\", \"\\u07BE\\u07BF\\x07n\\x02\\x02\\u07BF\\u01AC\\x03\\x02\\x02\\x02\", \"\\u07C0\\u07C1\\x07r\\x02\\x02\\u07C1\\u07C2\\x07c\\x02\\x02\\u07C2\", \"\\u07C3\\x07t\\x02\\x02\\u07C3\\u07C4\\x07v\\x02\\x02\\u07C4\\u07C5\", \"\\x07k\\x02\\x02\\u07C5\\u07C6\\x07c\\x02\\x02\\u07C6\\u07C7\\x07\", \"n\\x02\\x02\\u07C7\\u07C8\\x07a\\x02\\x02\\u07C8\\u07C9\\x07|\\x02\", \"\\x02\\u07C9\\u07CA\\x07g\\x02\\x02\\u07CA\\u07CB\\x07t\\x02\\x02\", \"\\u07CB\\u07CC\\x07q\\x02\\x02\\u07CC\\u01AE\\x03\\x02\\x02\\x02\", \"\\u07CD\\u07CE\\x07c\\x02\\x02\\u07CE\\u07CF\\x07n\\x02\\x02\\u07CF\", \"\\u07D0\\x07y\\x02\\x02\\u07D0\\u07D1\\x07c\\x02\\x02\\u07D1\\u07D2\", \"\\x07{\\x02\\x02\\u07D2\\u07D3\\x07u\\x02\\x02\\u07D3\\u07D4\\x07\", \"a\\x02\\x02\\u07D4\\u07D5\\x07p\\x02\\x02\\u07D5\\u07D6\\x07w\\x02\", \"\\x02\\u07D6\\u07D7\\x07n\\x02\\x02\\u07D7\\u07D8\\x07n\\x02\\x02\", \"\\u07D8\\u01B0\\x03\\x02\\x02\\x02\\u07D9\\u07DA\\x07c\\x02\\x02\", \"\\u07DA\\u07DB\\x07n\\x02\\x02\\u07DB\\u07DC\\x07y\\x02\\x02\\u07DC\", \"\\u07DD\\x07c\\x02\\x02\\u07DD\\u07DE\\x07{\\x02\\x02\\u07DE\\u07DF\", \"\\x07u\\x02\\x02\\u07DF\\u07E0\\x07a\\x02\\x02\\u07E0\\u07E1\\x07\", \"|\\x02\\x02\\u07E1\\u07E2\\x07g\\x02\\x02\\u07E2\\u07E3\\x07t\\x02\", \"\\x02\\u07E3\\u07E4\\x07q\\x02\\x02\\u07E4\\u01B2\\x03\\x02\\x02\", \"\\x02\\u07E5\\u07E6\\x07e\\x02\\x02\\u07E6\\u07E7\\x07q\\x02\\x02\", \"\\u07E7\\u07E8\\x07o\\x02\\x02\\u07E8\\u07E9\\x07r\\x02\\x02\\u07E9\", \"\\u07EA\\x07q\\x02\\x02\\u07EA\\u07EB\\x07p\\x02\\x02\\u07EB\\u07EC\", \"\\x07g\\x02\\x02\\u07EC\\u07ED\\x07p\\x02\\x02\\u07ED\\u07EE\\x07\", \"v\\x02\\x02\\u07EE\\u07EF\\x07u\\x02\\x02\\u07EF\\u01B4\\x03\\x02\", \"\\x02\\x02\\u07F0\\u07F1\\x07c\\x02\\x02\\u07F1\\u07F2\\x07n\\x02\", \"\\x02\\u07F2\\u07F3\\x07n\\x02\\x02\\u07F3\\u07F4\\x07a\\x02\\x02\", \"\\u07F4\\u07F5\\x07o\\x02\\x02\\u07F5\\u07F6\\x07g\\x02\\x02\\u07F6\", \"\\u07F7\\x07c\\x02\\x02\\u07F7\\u07F8\\x07u\\x02\\x02\\u07F8\\u07F9\", \"\\x07w\\x02\\x02\\u07F9\\u07FA\\x07t\\x02\\x02\\u07FA\\u07FB\\x07\", \"g\\x02\\x02\\u07FB\\u07FC\\x07u\\x02\\x02\\u07FC\\u01B6\\x03\\x02\", \"\\x02\\x02\\u07FD\\u07FE\\x07u\\x02\\x02\\u07FE\\u07FF\\x07e\\x02\", \"\\x02\\u07FF\\u0800\\x07c\\x02\\x02\\u0800\\u0801\\x07n\\x02\\x02\", \"\\u0801\\u0802\\x07c\\x02\\x02\\u0802\\u0803\\x07t\\x02\\x02\\u0803\", \"\\u01B8\\x03\\x02\\x02\\x02\\u0804\\u0805\\x07e\\x02\\x02\\u0805\", \"\\u0806\\x07q\\x02\\x02\\u0806\\u0807\\x07o\\x02\\x02\\u0807\\u0808\", \"\\x07r\\x02\\x02\\u0808\\u0809\\x07q\\x02\\x02\\u0809\\u080A\\x07\", \"p\\x02\\x02\\u080A\\u080B\\x07g\\x02\\x02\\u080B\\u080C\\x07p\\x02\", \"\\x02\\u080C\\u080D\\x07v\\x02\\x02\\u080D\\u01BA\\x03\\x02\\x02\", \"\\x02\\u080E\\u080F\\x07f\\x02\\x02\\u080F\\u0810\\x07c\\x02\\x02\", \"\\u0810\\u0811\\x07v\\x02\\x02\\u0811\\u0812\\x07c\\x02\\x02\\u0812\", \"\\u0813\\x07r\\x02\\x02\\u0813\\u0814\\x07q\\x02\\x02\\u0814\\u0815\", \"\\x07k\\x02\\x02\\u0815\\u0816\\x07p\\x02\\x02\\u0816\\u0817\\x07\", \"v\\x02\\x02\\u0817\\u0818\\x07a\\x02\\x02\\u0818\\u0819\\x07q\\x02\", \"\\x02\\u0819\\u081A\\x07p\\x02\\x02\\u081A\\u081B\\x07a\\x02\\x02\", \"\\u081B\\u081C\\x07x\\x02\\x02\\u081C\\u081D\\x07c\\x02\\x02\\u081D\", \"\\u081E\\x07n\\x02\\x02\\u081E\\u081F\\x07w\\x02\\x02\\u081F\\u0820\", \"\\x07g\\x02\\x02\\u0820\\u0821\\x07f\\x02\\x02\\u0821\\u0822\\x07\", \"q\\x02\\x02\\u0822\\u0823\\x07o\\x02\\x02\\u0823\\u0824\\x07c\\x02\", \"\\x02\\u0824\\u0825\\x07k\\x02\\x02\\u0825\\u0826\\x07p\\x02\\x02\", \"\\u0826\\u0827\\x07u\\x02\\x02\\u0827\\u01BC\\x03\\x02\\x02\\x02\", \"\\u0828\\u0829\\x07f\\x02\\x02\\u0829\\u082A\\x07c\\x02\\x02\\u082A\", \"\\u082B\\x07v\\x02\\x02\\u082B\\u082C\\x07c\\x02\\x02\\u082C\\u082D\", \"\\x07r\\x02\\x02\\u082D\\u082E\\x07q\\x02\\x02\\u082E\\u082F\\x07\", \"k\\x02\\x02\\u082F\\u0830\\x07p\\x02\\x02\\u0830\\u0831\\x07v\\x02\", \"\\x02\\u0831\\u0832\\x07a\\x02\\x02\\u0832\\u0833\\x07q\\x02\\x02\", \"\\u0833\\u0834\\x07p\\x02\\x02\\u0834\\u0835\\x07a\\x02\\x02\\u0835\", \"\\u0836\\x07x\\x02\\x02\\u0836\\u0837\\x07c\\x02\\x02\\u0837\\u0838\", \"\\x07t\\x02\\x02\\u0838\\u0839\\x07k\\x02\\x02\\u0839\\u083A\\x07\", \"c\\x02\\x02\\u083A\\u083B\\x07d\\x02\\x02\\u083B\\u083C\\x07n\\x02\", \"\\x02\\u083C\\u083D\\x07g\\x02\\x02\\u083D\\u083E\\x07u\\x02\\x02\", \"\\u083E\\u01BE\\x03\\x02\\x02\\x02\\u083F\\u0840\\x07j\\x02\\x02\", \"\\u0840\\u0841\\x07k\\x02\\x02\\u0841\\u0842\\x07g\\x02\\x02\\u0842\", \"\\u0843\\x07t\\x02\\x02\\u0843\\u0844\\x07c\\x02\\x02\\u0844\\u0845\", \"\\x07t\\x02\\x02\\u0845\\u0846\\x07e\\x02\\x02\\u0846\\u0847\\x07\", \"j\\x02\\x02\\u0847\\u0848\\x07k\\x02\\x02\\u0848\\u0849\\x07e\\x02\", \"\\x02\\u0849\\u084A\\x07c\\x02\\x02\\u084A\\u084B\\x07n\\x02\\x02\", \"\\u084B\\u084C\\x07a\\x02\\x02\\u084C\\u084D\\x07q\\x02\\x02\\u084D\", \"\\u084E\\x07p\\x02\\x02\\u084E\\u084F\\x07a\\x02\\x02\\u084F\\u0850\", \"\\x07x\\x02\\x02\\u0850\\u0851\\x07c\\x02\\x02\\u0851\\u0852\\x07\", \"n\\x02\\x02\\u0852\\u0853\\x07w\\x02\\x02\\u0853\\u0854\\x07g\\x02\", \"\\x02\\u0854\\u0855\\x07f\\x02\\x02\\u0855\\u0856\\x07q\\x02\\x02\", \"\\u0856\\u0857\\x07o\\x02\\x02\\u0857\\u0858\\x07c\\x02\\x02\\u0858\", \"\\u0859\\x07k\\x02\\x02\\u0859\\u085A\\x07p\\x02\\x02\\u085A\\u085B\", \"\\x07u\\x02\\x02\\u085B\\u01C0\\x03\\x02\\x02\\x02\\u085C\\u085D\", \"\\x07j\\x02\\x02\\u085D\\u085E\\x07k\\x02\\x02\\u085E\\u085F\\x07\", \"g\\x02\\x02\\u085F\\u0860\\x07t\\x02\\x02\\u0860\\u0861\\x07c\\x02\", \"\\x02\\u0861\\u0862\\x07t\\x02\\x02\\u0862\\u0863\\x07e\\x02\\x02\", \"\\u0863\\u0864\\x07j\\x02\\x02\\u0864\\u0865\\x07k\\x02\\x02\\u0865\", \"\\u0866\\x07e\\x02\\x02\\u0866\\u0867\\x07c\\x02\\x02\\u0867\\u0868\", \"\\x07n\\x02\\x02\\u0868\\u0869\\x07a\\x02\\x02\\u0869\\u086A\\x07\", \"q\\x02\\x02\\u086A\\u086B\\x07p\\x02\\x02\\u086B\\u086C\\x07a\\x02\", \"\\x02\\u086C\\u086D\\x07x\\x02\\x02\\u086D\\u086E\\x07c\\x02\\x02\", \"\\u086E\\u086F\\x07t\\x02\\x02\\u086F\\u0870\\x07k\\x02\\x02\\u0870\", \"\\u0871\\x07c\\x02\\x02\\u0871\\u0872\\x07d\\x02\\x02\\u0872\\u0873\", \"\\x07n\\x02\\x02\\u0873\\u0874\\x07g\\x02\\x02\\u0874\\u0875\\x07\", \"u\\x02\\x02\\u0875\\u01C2\\x03\\x02\\x02\\x02\\u0876\\u0877\\x07\", \"u\\x02\\x02\\u0877\\u0878\\x07g\\x02\\x02\\u0878\\u0879\\x07v\\x02\", \"\\x02\\u0879\\u01C4\\x03\\x02\\x02\\x02\\u087A\\u087B\\x07n\\x02\", \"\\x02\\u087B\\u087C\\x07c\\x02\\x02\\u087C\\u087D\\x07p\\x02\\x02\", \"\\u087D\\u087E\\x07i\\x02\\x02\\u087E\\u087F\\x07w\\x02\\x02\\u087F\", \"\\u0880\\x07c\\x02\\x02\\u0880\\u0881\\x07i\\x02\\x02\\u0881\\u0882\", \"\\x07g\\x02\\x02\\u0882\\u01C6\\x03\\x02\\x02\\x02\\u0883\\u0886\", \"\\x05\\u01C9\\xE5\\x02\\u0884\\u0886\\x05\\u01CB\\xE6\\x02\\u0885\\u0883\", \"\\x03\\x02\\x02\\x02\\u0885\\u0884\\x03\\x02\\x02\\x02\\u0886\\u01C8\", \"\\x03\\x02\\x02\\x02\\u0887\\u0889\\x042;\\x02\\u0888\\u0887\\x03\", \"\\x02\\x02\\x02\\u0889\\u088A\\x03\\x02\\x02\\x02\\u088A\\u0888\\x03\", \"\\x02\\x02\\x02\\u088A\\u088B\\x03\\x02\\x02\\x02\\u088B\\u01CA\\x03\", \"\\x02\\x02\\x02\\u088C\\u088E\\x07/\\x02\\x02\\u088D\\u088F\\x04\", \"2;\\x02\\u088E\\u088D\\x03\\x02\\x02\\x02\\u088F\\u0890\\x03\\x02\", \"\\x02\\x02\\u0890\\u088E\\x03\\x02\\x02\\x02\\u0890\\u0891\\x03\\x02\", \"\\x02\\x02\\u0891\\u01CC\\x03\\x02\\x02\\x02\\u0892\\u0894\\x042\", \";\\x02\\u0893\\u0892\\x03\\x02\\x02\\x02\\u0894\\u0895\\x03\\x02\", \"\\x02\\x02\\u0895\\u0893\\x03\\x02\\x02\\x02\\u0895\\u0896\\x03\\x02\", \"\\x02\\x02\\u0896\\u0897\\x03\\x02\\x02\\x02\\u0897\\u089B\\x070\", \"\\x02\\x02\\u0898\\u089A\\x042;\\x02\\u0899\\u0898\\x03\\x02\\x02\", \"\\x02\\u089A\\u089D\\x03\\x02\\x02\\x02\\u089B\\u0899\\x03\\x02\\x02\", \"\\x02\\u089B\\u089C\\x03\\x02\\x02\\x02\\u089C\\u089F\\x03\\x02\\x02\", \"\\x02\\u089D\\u089B\\x03\\x02\\x02\\x02\\u089E\\u08A0\\x05\\u01CF\\xE8\", \"\\x02\\u089F\\u089E\\x03\\x02\\x02\\x02\\u089F\\u08A0\\x03\\x02\\x02\", \"\\x02\\u08A0\\u08A8\\x03\\x02\\x02\\x02\\u08A1\\u08A3\\x042;\\x02\", \"\\u08A2\\u08A1\\x03\\x02\\x02\\x02\\u08A3\\u08A4\\x03\\x02\\x02\\x02\", \"\\u08A4\\u08A2\\x03\\x02\\x02\\x02\\u08A4\\u08A5\\x03\\x02\\x02\\x02\", \"\\u08A5\\u08A6\\x03\\x02\\x02\\x02\\u08A6\\u08A8\\x05\\u01CF\\xE8\\x02\", \"\\u08A7\\u0893\\x03\\x02\\x02\\x02\\u08A7\\u08A2\\x03\\x02\\x02\\x02\", \"\\u08A8\\u01CE\\x03\\x02\\x02\\x02\\u08A9\\u08AB\\t\\x02\\x02\\x02\", \"\\u08AA\\u08AC\\t\\x03\\x02\\x02\\u08AB\\u08AA\\x03\\x02\\x02\\x02\", \"\\u08AB\\u08AC\\x03\\x02\\x02\\x02\\u08AC\\u08AE\\x03\\x02\\x02\\x02\", \"\\u08AD\\u08AF\\x042;\\x02\\u08AE\\u08AD\\x03\\x02\\x02\\x02\\u08AF\", \"\\u08B0\\x03\\x02\\x02\\x02\\u08B0\\u08AE\\x03\\x02\\x02\\x02\\u08B0\", \"\\u08B1\\x03\\x02\\x02\\x02\\u08B1\\u01D0\\x03\\x02\\x02\\x02\\u08B2\", \"\\u08B3\\x07v\\x02\\x02\\u08B3\\u08B4\\x07t\\x02\\x02\\u08B4\\u08B5\", \"\\x07w\\x02\\x02\\u08B5\\u08BC\\x07g\\x02\\x02\\u08B6\\u08B7\\x07\", \"h\\x02\\x02\\u08B7\\u08B8\\x07c\\x02\\x02\\u08B8\\u08B9\\x07n\\x02\", \"\\x02\\u08B9\\u08BA\\x07u\\x02\\x02\\u08BA\\u08BC\\x07g\\x02\\x02\", \"\\u08BB\\u08B2\\x03\\x02\\x02\\x02\\u08BB\\u08B6\\x03\\x02\\x02\\x02\", \"\\u08BC\\u01D2\\x03\\x02\\x02\\x02\\u08BD\\u08BE\\x07p\\x02\\x02\", \"\\u08BE\\u08BF\\x07w\\x02\\x02\\u08BF\\u08C0\\x07n\\x02\\x02\\u08C0\", \"\\u08C1\\x07n\\x02\\x02\\u08C1\\u01D4\\x03\\x02\\x02\\x02\\u08C2\", \"\\u08C6\\x07$\\x02\\x02\\u08C3\\u08C5\\n\\x04\\x02\\x02\\u08C4\\u08C3\", \"\\x03\\x02\\x02\\x02\\u08C5\\u08C8\\x03\\x02\\x02\\x02\\u08C6\\u08C4\", \"\\x03\\x02\\x02\\x02\\u08C6\\u08C7\\x03\\x02\\x02\\x02\\u08C7\\u08C9\", \"\\x03\\x02\\x02\\x02\\u08C8\\u08C6\\x03\\x02\\x02\\x02\\u08C9\\u08CA\", \"\\x07$\\x02\\x02\\u08CA\\u01D6\\x03\\x02\\x02\\x02\\u08CB\\u08D0\", \"\\x05\\u01F1\\xF9\\x02\\u08CC\\u08CF\\x05\\u01F1\\xF9\\x02\\u08CD\\u08CF\", \"\\t\\x05\\x02\\x02\\u08CE\\u08CC\\x03\\x02\\x02\\x02\\u08CE\\u08CD\", \"\\x03\\x02\\x02\\x02\\u08CF\\u08D2\\x03\\x02\\x02\\x02\\u08D0\\u08CE\", \"\\x03\\x02\\x02\\x02\\u08D0\\u08D1\\x03\\x02\\x02\\x02\\u08D1\\u01D8\", \"\\x03\\x02\\x02\\x02\\u08D2\\u08D0\\x03\\x02\\x02\\x02\\u08D3\\u08D4\", \"\\x042;\\x02\\u08D4\\u01DA\\x03\\x02\\x02\\x02\\u08D5\\u08D6\\x07\", \"2\\x02\\x02\\u08D6\\u08DB\\x05\\u01D9\\xED\\x02\\u08D7\\u08D8\\x07\", \"3\\x02\\x02\\u08D8\\u08DB\\x072\\x02\\x02\\u08D9\\u08DB\\x0434\\x02\", \"\\u08DA\\u08D5\\x03\\x02\\x02\\x02\\u08DA\\u08D7\\x03\\x02\\x02\\x02\", \"\\u08DA\\u08D9\\x03\\x02\\x02\\x02\\u08DB\\u01DC\\x03\\x02\\x02\\x02\", \"\\u08DC\\u08E0\\x0423\\x02\\u08DD\\u08DE\\x074\\x02\\x02\\u08DE\\u08E0\", \"\\x05\\u01D9\\xED\\x02\\u08DF\\u08DC\\x03\\x02\\x02\\x02\\u08DF\\u08DD\", \"\\x03\\x02\\x02\\x02\\u08E0\\u08E4\\x03\\x02\\x02\\x02\\u08E1\\u08E2\", \"\\x075\\x02\\x02\\u08E2\\u08E4\\x0423\\x02\\u08E3\\u08DF\\x03\\x02\", \"\\x02\\x02\\u08E3\\u08E1\\x03\\x02\\x02\\x02\\u08E4\\u01DE\\x03\\x02\", \"\\x02\\x02\\u08E5\\u08E6\\x05\\u01D9\\xED\\x02\\u08E6\\u08E7\\x05\\u01D9\", \"\\xED\\x02\\u08E7\\u08E8\\x05\\u01D9\\xED\\x02\\u08E8\\u08E9\\x05\\u01D9\", \"\\xED\\x02\\u08E9\\u01E0\\x03\\x02\\x02\\x02\\u08EA\\u08EE\\x042\", \"5\\x02\\u08EB\\u08EC\\x076\\x02\\x02\\u08EC\\u08EE\\x05\\u01D9\\xED\", \"\\x02\\u08ED\\u08EA\\x03\\x02\\x02\\x02\\u08ED\\u08EB\\x03\\x02\\x02\", \"\\x02\\u08EE\\u08F2\\x03\\x02\\x02\\x02\\u08EF\\u08F0\\x077\\x02\", \"\\x02\\u08F0\\u08F2\\x0425\\x02\\u08F1\\u08ED\\x03\\x02\\x02\\x02\", \"\\u08F1\\u08EF\\x03\\x02\\x02\\x02\\u08F2\\u01E2\\x03\\x02\\x02\\x02\", \"\\u08F3\\u08F7\\x072\\x02\\x02\\u08F4\\u08F5\\x073\\x02\\x02\\u08F5\", \"\\u08F7\\x05\\u01D9\\xED\\x02\\u08F6\\u08F3\\x03\\x02\\x02\\x02\\u08F6\", \"\\u08F4\\x03\\x02\\x02\\x02\\u08F7\\u08FB\\x03\\x02\\x02\\x02\\u08F8\", \"\\u08F9\\x074\\x02\\x02\\u08F9\\u08FB\\x0426\\x02\\u08FA\\u08F6\\x03\", \"\\x02\\x02\\x02\\u08FA\\u08F8\\x03\\x02\\x02\\x02\\u08FB\\u01E4\\x03\", \"\\x02\\x02\\x02\\u08FC\\u0900\\x0426\\x02\\u08FD\\u08FE\\x077\\x02\", \"\\x02\\u08FE\\u0900\\x05\\u01D9\\xED\\x02\\u08FF\\u08FC\\x03\\x02\\x02\", \"\\x02\\u08FF\\u08FD\\x03\\x02\\x02\\x02\\u0900\\u0904\\x03\\x02\\x02\", \"\\x02\\u0901\\u0902\\x078\\x02\\x02\\u0902\\u0904\\x072\\x02\\x02\", \"\\u0903\\u08FF\\x03\\x02\\x02\\x02\\u0903\\u0901\\x03\\x02\\x02\\x02\", \"\\u0904\\u01E6\\x03\\x02\\x02\\x02\\u0905\\u0909\\x0426\\x02\\u0906\", \"\\u0907\\x077\\x02\\x02\\u0907\\u0909\\x05\\u01D9\\xED\\x02\\u0908\", \"\\u0905\\x03\\x02\\x02\\x02\\u0908\\u0906\\x03\\x02\\x02\\x02\\u0909\", \"\\u090D\\x03\\x02\\x02\\x02\\u090A\\u090B\\x078\\x02\\x02\\u090B\", \"\\u090D\\x072\\x02\\x02\\u090C\\u0908\\x03\\x02\\x02\\x02\\u090C\", \"\\u090A\\x03\\x02\\x02\\x02\\u090D\\u01E8\\x03\\x02\\x02\\x02\\u090E\", \"\\u093D\\x05\\u01DF\\xF0\\x02\\u090F\\u0910\\x05\\u01DF\\xF0\\x02\\u0910\", \"\\u0911\\x07U\\x02\\x02\\u0911\\u0912\\x073\\x02\\x02\\u0912\\u0915\", \"\\x03\\x02\\x02\\x02\\u0913\\u0915\\x074\\x02\\x02\\u0914\\u090F\", \"\\x03\\x02\\x02\\x02\\u0914\\u0913\\x03\\x02\\x02\\x02\\u0915\\u093D\", \"\\x03\\x02\\x02\\x02\\u0916\\u0917\\x05\\u01DF\\xF0\\x02\\u0917\\u0918\", \"\\x07S\\x02\\x02\\u0918\\u0919\\x073\\x02\\x02\\u0919\\u091C\\x03\", \"\\x02\\x02\\x02\\u091A\\u091C\\x0446\\x02\\u091B\\u0916\\x03\\x02\", \"\\x02\\x02\\u091B\\u091A\\x03\\x02\\x02\\x02\\u091C\\u093D\\x03\\x02\", \"\\x02\\x02\\u091D\\u091E\\x05\\u01DF\\xF0\\x02\\u091E\\u091F\\x07O\", \"\\x02\\x02\\u091F\\u0920\\x05\\u01DB\\xEE\\x02\\u0920\\u093D\\x03\\x02\", \"\\x02\\x02\\u0921\\u0922\\x05\\u01DF\\xF0\\x02\\u0922\\u0923\\x07F\", \"\\x02\\x02\\u0923\\u0924\\x05\\u01DB\\xEE\\x02\\u0924\\u0925\\x05\\u01DD\", \"\\xEF\\x02\\u0925\\u093D\\x03\\x02\\x02\\x02\\u0926\\u0927\\x05\\u01DF\", \"\\xF0\\x02\\u0927\\u0928\\x07C\\x02\\x02\\u0928\\u093D\\x03\\x02\", \"\\x02\\x02\\u0929\\u092A\\x05\\u01DF\\xF0\\x02\\u092A\\u092B\\x07/\", \"\\x02\\x02\\u092B\\u092C\\x07S\\x02\\x02\\u092C\\u092D\\x073\\x02\", \"\\x02\\u092D\\u0930\\x03\\x02\\x02\\x02\\u092E\\u0930\\x0446\\x02\", \"\\u092F\\u0929\\x03\\x02\\x02\\x02\\u092F\\u092E\\x03\\x02\\x02\\x02\", \"\\u0930\\u093D\\x03\\x02\\x02\\x02\\u0931\\u0932\\x05\\u01DF\\xF0\\x02\", \"\\u0932\\u0933\\x07/\\x02\\x02\\u0933\\u0934\\x05\\u01DB\\xEE\\x02\", \"\\u0934\\u093D\\x03\\x02\\x02\\x02\\u0935\\u0936\\x05\\u01DF\\xF0\\x02\", \"\\u0936\\u0937\\x07/\\x02\\x02\\u0937\\u0938\\x05\\u01DB\\xEE\\x02\", \"\\u0938\\u0939\\x07/\\x02\\x02\\u0939\\u093A\\x05\\u01DD\\xEF\\x02\", \"\\u093A\\u093D\\x03\\x02\\x02\\x02\\u093B\\u093D\\x05\\u01DF\\xF0\\x02\", \"\\u093C\\u090E\\x03\\x02\\x02\\x02\\u093C\\u0914\\x03\\x02\\x02\\x02\", \"\\u093C\\u091B\\x03\\x02\\x02\\x02\\u093C\\u091D\\x03\\x02\\x02\\x02\", \"\\u093C\\u0921\\x03\\x02\\x02\\x02\\u093C\\u0926\\x03\\x02\\x02\\x02\", \"\\u093C\\u092F\\x03\\x02\\x02\\x02\\u093C\\u0931\\x03\\x02\\x02\\x02\", \"\\u093C\\u0935\\x03\\x02\\x02\\x02\\u093C\\u093B\\x03\\x02\\x02\\x02\", \"\\u093D\\u01EA\\x03\\x02\\x02\\x02\\u093E\\u0940\\x05\\u01DF\\xF0\\x02\", \"\\u093F\\u0941\\x07C\\x02\\x02\\u0940\\u093F\\x03\\x02\\x02\\x02\", \"\\u0940\\u0941\\x03\\x02\\x02\\x02\\u0941\\u097A\\x03\\x02\\x02\\x02\", \"\\u0942\\u0944\\x05\\u01DF\\xF0\\x02\\u0943\\u0945\\x07/\\x02\\x02\", \"\\u0944\\u0943\\x03\\x02\\x02\\x02\\u0944\\u0945\\x03\\x02\\x02\\x02\", \"\\u0945\\u0946\\x03\\x02\\x02\\x02\\u0946\\u0947\\x07U\\x02\\x02\", \"\\u0947\\u0948\\x073\\x02\\x02\\u0948\\u094B\\x03\\x02\\x02\\x02\", \"\\u0949\\u094B\\x074\\x02\\x02\\u094A\\u0942\\x03\\x02\\x02\\x02\", \"\\u094A\\u0949\\x03\\x02\\x02\\x02\\u094B\\u097A\\x03\\x02\\x02\\x02\", \"\\u094C\\u094E\\x05\\u01DF\\xF0\\x02\\u094D\\u094F\\x07/\\x02\\x02\", \"\\u094E\\u094D\\x03\\x02\\x02\\x02\\u094E\\u094F\\x03\\x02\\x02\\x02\", \"\\u094F\\u0950\\x03\\x02\\x02\\x02\\u0950\\u0951\\x07S\\x02\\x02\", \"\\u0951\\u0952\\x073\\x02\\x02\\u0952\\u0955\\x03\\x02\\x02\\x02\", \"\\u0953\\u0955\\x0446\\x02\\u0954\\u094C\\x03\\x02\\x02\\x02\\u0954\", \"\\u0953\\x03\\x02\\x02\\x02\\u0955\\u097A\\x03\\x02\\x02\\x02\\u0956\", \"\\u0957\\x05\\u01DF\\xF0\\x02\\u0957\\u0958\\x07O\\x02\\x02\\u0958\", \"\\u095C\\x03\\x02\\x02\\x02\\u0959\\u095A\\x07/\\x02\\x02\\u095A\", \"\\u095C\\x05\\u01DB\\xEE\\x02\\u095B\\u0956\\x03\\x02\\x02\\x02\\u095B\", \"\\u0959\\x03\\x02\\x02\\x02\\u095C\\u097A\\x03\\x02\\x02\\x02\\u095D\", \"\\u095E\\x05\\u01DF\\xF0\\x02\\u095E\\u095F\\x07Y\\x02\\x02\\u095F\", \"\\u0960\\x05\\u01E1\\xF1\\x02\\u0960\\u097A\\x03\\x02\\x02\\x02\\u0961\", \"\\u0962\\x05\\u01DF\\xF0\\x02\\u0962\\u0963\\x07O\\x02\\x02\\u0963\", \"\\u0964\\x05\\u01DB\\xEE\\x02\\u0964\\u0965\\x07F\\x02\\x02\\u0965\", \"\\u0966\\x05\\u01DD\\xEF\\x02\\u0966\\u097A\\x03\\x02\\x02\\x02\\u0967\", \"\\u0968\\x05\\u01DF\\xF0\\x02\\u0968\\u0969\\x07/\\x02\\x02\\u0969\", \"\\u096A\\x05\\u01DB\\xEE\\x02\\u096A\\u096B\\x07/\\x02\\x02\\u096B\", \"\\u096C\\x05\\u01DD\\xEF\\x02\\u096C\\u097A\\x03\\x02\\x02\\x02\\u096D\", \"\\u096E\\x05\\u01DD\\xEF\\x02\\u096E\\u096F\\x07/\\x02\\x02\\u096F\", \"\\u0970\\x05\\u01DB\\xEE\\x02\\u0970\\u0971\\x07/\\x02\\x02\\u0971\", \"\\u0972\\x05\\u01DF\\xF0\\x02\\u0972\\u097A\\x03\\x02\\x02\\x02\\u0973\", \"\\u0974\\x05\\u01DB\\xEE\\x02\\u0974\\u0975\\x07/\\x02\\x02\\u0975\", \"\\u0976\\x05\\u01DD\\xEF\\x02\\u0976\\u0977\\x07/\\x02\\x02\\u0977\", \"\\u0978\\x05\\u01DF\\xF0\\x02\\u0978\\u097A\\x03\\x02\\x02\\x02\\u0979\", \"\\u093E\\x03\\x02\\x02\\x02\\u0979\\u094A\\x03\\x02\\x02\\x02\\u0979\", \"\\u0954\\x03\\x02\\x02\\x02\\u0979\\u095B\\x03\\x02\\x02\\x02\\u0979\", \"\\u095D\\x03\\x02\\x02\\x02\\u0979\\u0961\\x03\\x02\\x02\\x02\\u0979\", \"\\u0967\\x03\\x02\\x02\\x02\\u0979\\u096D\\x03\\x02\\x02\\x02\\u0979\", \"\\u0973\\x03\\x02\\x02\\x02\\u097A\\u01EC\\x03\\x02\\x02\\x02\\u097B\", \"\\u097C\\t\\x06\\x02\\x02\\u097C\\u01EE\\x03\\x02\\x02\\x02\\u097D\", \"\\u097E\\x05\\u01DF\\xF0\\x02\\u097E\\u097F\\x07/\\x02\\x02\\u097F\", \"\\u0980\\x05\\u01DB\\xEE\\x02\\u0980\\u0981\\x07/\\x02\\x02\\u0981\", \"\\u0982\\x05\\u01DD\\xEF\\x02\\u0982\\u0983\\x03\\x02\\x02\\x02\\u0983\", \"\\u0984\\x071\\x02\\x02\\u0984\\u0985\\x05\\u01DF\\xF0\\x02\\u0985\", \"\\u0986\\x07/\\x02\\x02\\u0986\\u0987\\x05\\u01DB\\xEE\\x02\\u0987\", \"\\u0988\\x07/\\x02\\x02\\u0988\\u0989\\x05\\u01DD\\xEF\\x02\\u0989\", \"\\u01F0\\x03\\x02\\x02\\x02\\u098A\\u098B\\t\\x07\\x02\\x02\\u098B\", \"\\u01F2\\x03\\x02\\x02\\x02\\u098C\\u098D\\t\\b\\x02\\x02\\u098D\\u098E\", \"\\x03\\x02\\x02\\x02\\u098E\\u098F\\b\\xFA\\x02\\x02\\u098F\\u01F4\", \"\\x03\\x02\\x02\\x02\\u0990\\u0991\\x07=\\x02\\x02\\u0991\\u01F6\", \"\\x03\\x02\\x02\\x02\\u0992\\u0993\\x071\\x02\\x02\\u0993\\u0994\", \"\\x07,\\x02\\x02\\u0994\\u0998\\x03\\x02\\x02\\x02\\u0995\\u0997\", \"\\x0B\\x02\\x02\\x02\\u0996\\u0995\\x03\\x02\\x02\\x02\\u0997\\u099A\", \"\\x03\\x02\\x02\\x02\\u0998\\u0999\\x03\\x02\\x02\\x02\\u0998\\u0996\", \"\\x03\\x02\\x02\\x02\\u0999\\u099B\\x03\\x02\\x02\\x02\\u099A\\u0998\", \"\\x03\\x02\\x02\\x02\\u099B\\u099C\\x07,\\x02\\x02\\u099C\\u099D\", \"\\x071\\x02\\x02\\u099D\\u099E\\x03\\x02\\x02\\x02\\u099E\\u099F\", \"\\b\\xFC\\x02\\x02\\u099F\\u01F8\\x03\\x02\\x02\\x02\\u09A0\\u09A1\", \"\\x071\\x02\\x02\\u09A1\\u09A2\\x071\\x02\\x02\\u09A2\\u09A6\\x03\", \"\\x02\\x02\\x02\\u09A3\\u09A5\\x0B\\x02\\x02\\x02\\u09A4\\u09A3\\x03\", \"\\x02\\x02\\x02\\u09A5\\u09A8\\x03\\x02\\x02\\x02\\u09A6\\u09A7\\x03\", \"\\x02\\x02\\x02\\u09A6\\u09A4\\x03\\x02\\x02\\x02\\u09A7\\u09A9\\x03\", \"\\x02\\x02\\x02\\u09A8\\u09A6\\x03\\x02\\x02\\x02\\u09A9\\u09AA\\x07\", \"\\f\\x02\\x02\\u09AA\\u09AB\\x03\\x02\\x02\\x02\\u09AB\\u09AC\\b\\xFD\", \"\\x02\\x02\\u09AC\\u01FA\\x03\\x02\\x02\\x02\\u09AD\\u09B5\\x04>\", \"@\\x02\\u09AE\\u09AF\\x07@\\x02\\x02\\u09AF\\u09B5\\x07?\\x02\\x02\", \"\\u09B0\\u09B1\\x07>\\x02\\x02\\u09B1\\u09B5\\x07?\\x02\\x02\\u09B2\", \"\\u09B3\\x07>\\x02\\x02\\u09B3\\u09B5\\x07@\\x02\\x02\\u09B4\\u09AD\", \"\\x03\\x02\\x02\\x02\\u09B4\\u09AE\\x03\\x02\\x02\\x02\\u09B4\\u09B0\", \"\\x03\\x02\\x02\\x02\\u09B4\\u09B2\\x03\\x02\\x02\\x02\\u09B5\\u01FC\", \"\\x03\\x02\\x02\\x02\\u09B6\\u09B7\\t\\t\\x02\\x02\\u09B7\\u01FE\\x03\", \"\\x02\\x02\\x02*\\x02\\u0885\\u088A\\u0890\\u0895\\u089B\\u089F\\u08A4\", \"\\u08A7\\u08AB\\u08B0\\u08BB\\u08C6\\u08CE\\u08D0\\u08DA\\u08DF\\u08E3\\u08ED\\u08F1\", \"\\u08F6\\u08FA\\u08FF\\u0903\\u0908\\u090C\\u0914\\u091B\\u092F\\u093C\\u0940\\u0944\", \"\\u094A\\u094E\\u0954\\u095B\\u0979\\u0998\\u09A6\\u09B4\\x03\\b\\x02\\x02\"].join(\"\");\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n  return new antlr4.dfa.DFA(ds, index);\n});\n\nfunction VtlLexer(input) {\n  antlr4.Lexer.call(this, input);\n  this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n  return this;\n}\n\nVtlLexer.prototype = Object.create(antlr4.Lexer.prototype);\nVtlLexer.prototype.constructor = VtlLexer;\nObject.defineProperty(VtlLexer.prototype, \"atn\", {\n  get: function get() {\n    return atn;\n  }\n});\nVtlLexer.EOF = antlr4.Token.EOF;\nVtlLexer.T__0 = 1;\nVtlLexer.LPAREN = 2;\nVtlLexer.RPAREN = 3;\nVtlLexer.GLPAREN = 4;\nVtlLexer.GRPAREN = 5;\nVtlLexer.QLPAREN = 6;\nVtlLexer.QRPAREN = 7;\nVtlLexer.PLUS = 8;\nVtlLexer.MINUS = 9;\nVtlLexer.MUL = 10;\nVtlLexer.DIV = 11;\nVtlLexer.COMMA = 12;\nVtlLexer.CUSTOMPIVOT = 13;\nVtlLexer.EQ = 14;\nVtlLexer.NEQ = 15;\nVtlLexer.LT = 16;\nVtlLexer.MT = 17;\nVtlLexer.LE = 18;\nVtlLexer.ME = 19;\nVtlLexer.ASSIGN = 20;\nVtlLexer.MEMBERSHIP = 21;\nVtlLexer.EVAL = 22;\nVtlLexer.IF = 23;\nVtlLexer.THEN = 24;\nVtlLexer.ELSE = 25;\nVtlLexer.USING = 26;\nVtlLexer.WITH = 27;\nVtlLexer.CURRENT_DATE = 28;\nVtlLexer.ON = 29;\nVtlLexer.DROP = 30;\nVtlLexer.KEEP = 31;\nVtlLexer.CALC = 32;\nVtlLexer.ATTRCALC = 33;\nVtlLexer.RENAME = 34;\nVtlLexer.AS = 35;\nVtlLexer.AND = 36;\nVtlLexer.OR = 37;\nVtlLexer.XOR = 38;\nVtlLexer.NOT = 39;\nVtlLexer.BETWEEN = 40;\nVtlLexer.IN = 41;\nVtlLexer.NOT_IN = 42;\nVtlLexer.ISNULL = 43;\nVtlLexer.EX = 44;\nVtlLexer.UNION = 45;\nVtlLexer.DIFF = 46;\nVtlLexer.SYMDIFF = 47;\nVtlLexer.INTERSECT = 48;\nVtlLexer.KEYS = 49;\nVtlLexer.CARTESIAN_PER = 50;\nVtlLexer.INTYEAR = 51;\nVtlLexer.INTMONTH = 52;\nVtlLexer.INTDAY = 53;\nVtlLexer.CHECK = 54;\nVtlLexer.EXISTS_IN = 55;\nVtlLexer.TO = 56;\nVtlLexer.RETURN = 57;\nVtlLexer.IMBALANCE = 58;\nVtlLexer.ERRORCODE = 59;\nVtlLexer.ALL = 60;\nVtlLexer.AGGREGATE = 61;\nVtlLexer.ERRORLEVEL = 62;\nVtlLexer.ORDER = 63;\nVtlLexer.BY = 64;\nVtlLexer.RANK = 65;\nVtlLexer.ASC = 66;\nVtlLexer.DESC = 67;\nVtlLexer.MIN = 68;\nVtlLexer.MAX = 69;\nVtlLexer.FIRST = 70;\nVtlLexer.LAST = 71;\nVtlLexer.INDEXOF = 72;\nVtlLexer.ABS = 73;\nVtlLexer.KEY = 74;\nVtlLexer.LN = 75;\nVtlLexer.LOG = 76;\nVtlLexer.TRUNC = 77;\nVtlLexer.ROUND = 78;\nVtlLexer.POWER = 79;\nVtlLexer.MOD = 80;\nVtlLexer.LEN = 81;\nVtlLexer.CONCAT = 82;\nVtlLexer.TRIM = 83;\nVtlLexer.UCASE = 84;\nVtlLexer.LCASE = 85;\nVtlLexer.SUBSTR = 86;\nVtlLexer.SUM = 87;\nVtlLexer.AVG = 88;\nVtlLexer.MEDIAN = 89;\nVtlLexer.COUNT = 90;\nVtlLexer.DIMENSION = 91;\nVtlLexer.MEASURE = 92;\nVtlLexer.ATTRIBUTE = 93;\nVtlLexer.FILTER = 94;\nVtlLexer.MERGE = 95;\nVtlLexer.EXP = 96;\nVtlLexer.ROLE = 97;\nVtlLexer.VIRAL = 98;\nVtlLexer.CHARSET_MATCH = 99;\nVtlLexer.TYPE = 100;\nVtlLexer.NVL = 101;\nVtlLexer.HIERARCHY = 102;\nVtlLexer.OPTIONAL = 103;\nVtlLexer.INVALID = 104;\nVtlLexer.VALUE_DOMAIN = 105;\nVtlLexer.VARIABLE = 106;\nVtlLexer.DATA = 107;\nVtlLexer.STRUCTURE = 108;\nVtlLexer.DATASET = 109;\nVtlLexer.OPERATOR = 110;\nVtlLexer.DEFINE = 111;\nVtlLexer.PUT_SYMBOL = 112;\nVtlLexer.DATAPOINT = 113;\nVtlLexer.HIERARCHICAL = 114;\nVtlLexer.RULESET = 115;\nVtlLexer.RULE = 116;\nVtlLexer.END = 117;\nVtlLexer.ALTER_DATASET = 118;\nVtlLexer.LTRIM = 119;\nVtlLexer.RTRIM = 120;\nVtlLexer.INSTR = 121;\nVtlLexer.REPLACE = 122;\nVtlLexer.CEIL = 123;\nVtlLexer.FLOOR = 124;\nVtlLexer.SQRT = 125;\nVtlLexer.ANY = 126;\nVtlLexer.SETDIFF = 127;\nVtlLexer.STDDEV_POP = 128;\nVtlLexer.STDDEV_SAMP = 129;\nVtlLexer.VAR_POP = 130;\nVtlLexer.VAR_SAMP = 131;\nVtlLexer.GROUP = 132;\nVtlLexer.EXCEPT = 133;\nVtlLexer.HAVING = 134;\nVtlLexer.FIRST_VALUE = 135;\nVtlLexer.LAST_VALUE = 136;\nVtlLexer.LAG = 137;\nVtlLexer.LEAD = 138;\nVtlLexer.RATIO_TO_REPORT = 139;\nVtlLexer.OVER = 140;\nVtlLexer.PRECEDING = 141;\nVtlLexer.FOLLOWING = 142;\nVtlLexer.UNBOUNDED = 143;\nVtlLexer.PARTITION = 144;\nVtlLexer.ROWS = 145;\nVtlLexer.RANGE = 146;\nVtlLexer.CURRENT = 147;\nVtlLexer.VALID = 148;\nVtlLexer.FILL_TIME_SERIES = 149;\nVtlLexer.FLOW_TO_STOCK = 150;\nVtlLexer.STOCK_TO_FLOW = 151;\nVtlLexer.TIMESHIFT = 152;\nVtlLexer.MEASURES = 153;\nVtlLexer.NO_MEASURES = 154;\nVtlLexer.CONDITION = 155;\nVtlLexer.BOOLEAN = 156;\nVtlLexer.DATE = 157;\nVtlLexer.TIME_PERIOD = 158;\nVtlLexer.NUMBER = 159;\nVtlLexer.STRING = 160;\nVtlLexer.INTEGER = 161;\nVtlLexer.FLOAT = 162;\nVtlLexer.LIST = 163;\nVtlLexer.RECORD = 164;\nVtlLexer.RESTRICT = 165;\nVtlLexer.YYYY = 166;\nVtlLexer.MM = 167;\nVtlLexer.DD = 168;\nVtlLexer.MAX_LENGTH = 169;\nVtlLexer.REGEXP = 170;\nVtlLexer.IS = 171;\nVtlLexer.WHEN = 172;\nVtlLexer.FROM = 173;\nVtlLexer.AGGREGATES = 174;\nVtlLexer.POINTS = 175;\nVtlLexer.POINT = 176;\nVtlLexer.TOTAL = 177;\nVtlLexer.PARTIAL = 178;\nVtlLexer.ALWAYS = 179;\nVtlLexer.INNER_JOIN = 180;\nVtlLexer.LEFT_JOIN = 181;\nVtlLexer.CROSS_JOIN = 182;\nVtlLexer.FULL_JOIN = 183;\nVtlLexer.MAPS_FROM = 184;\nVtlLexer.MAPS_TO = 185;\nVtlLexer.MAP_TO = 186;\nVtlLexer.MAP_FROM = 187;\nVtlLexer.RETURNS = 188;\nVtlLexer.PIVOT = 189;\nVtlLexer.UNPIVOT = 190;\nVtlLexer.SUBSPACE = 191;\nVtlLexer.APPLY = 192;\nVtlLexer.CONDITIONED = 193;\nVtlLexer.PERIOD_INDICATOR = 194;\nVtlLexer.SINGLE = 195;\nVtlLexer.DURATION = 196;\nVtlLexer.TIME_AGG = 197;\nVtlLexer.UNIT = 198;\nVtlLexer.VALUE = 199;\nVtlLexer.VALUEDOMAINS = 200;\nVtlLexer.VARIABLES = 201;\nVtlLexer.INPUT = 202;\nVtlLexer.OUTPUT = 203;\nVtlLexer.CAST = 204;\nVtlLexer.RULE_PRIORITY = 205;\nVtlLexer.DATASET_PRIORITY = 206;\nVtlLexer.DEFAULT = 207;\nVtlLexer.CHECK_DATAPOINT = 208;\nVtlLexer.CHECK_HIERARCHY = 209;\nVtlLexer.COMPUTED = 210;\nVtlLexer.NON_NULL = 211;\nVtlLexer.NON_ZERO = 212;\nVtlLexer.PARTIAL_NULL = 213;\nVtlLexer.PARTIAL_ZERO = 214;\nVtlLexer.ALWAYS_NULL = 215;\nVtlLexer.ALWAYS_ZERO = 216;\nVtlLexer.COMPONENTS = 217;\nVtlLexer.ALL_MEASURES = 218;\nVtlLexer.SCALAR = 219;\nVtlLexer.COMPONENT = 220;\nVtlLexer.DATAPOINT_ON_VD = 221;\nVtlLexer.DATAPOINT_ON_VAR = 222;\nVtlLexer.HIERARCHICAL_ON_VD = 223;\nVtlLexer.HIERARCHICAL_ON_VAR = 224;\nVtlLexer.SET = 225;\nVtlLexer.LANGUAGE = 226;\nVtlLexer.INTEGER_CONSTANT = 227;\nVtlLexer.POSITIVE_CONSTANT = 228;\nVtlLexer.NEGATIVE_CONSTANT = 229;\nVtlLexer.FLOAT_CONSTANT = 230;\nVtlLexer.BOOLEAN_CONSTANT = 231;\nVtlLexer.NULL_CONSTANT = 232;\nVtlLexer.STRING_CONSTANT = 233;\nVtlLexer.IDENTIFIER = 234;\nVtlLexer.DIGITS0_9 = 235;\nVtlLexer.MONTH = 236;\nVtlLexer.DAY = 237;\nVtlLexer.YEAR = 238;\nVtlLexer.WEEK = 239;\nVtlLexer.HOURS = 240;\nVtlLexer.MINUTES = 241;\nVtlLexer.SECONDS = 242;\nVtlLexer.DATE_FORMAT = 243;\nVtlLexer.TIME_FORMAT = 244;\nVtlLexer.TIME_UNIT = 245;\nVtlLexer.TIME = 246;\nVtlLexer.WS = 247;\nVtlLexer.EOL = 248;\nVtlLexer.ML_COMMENT = 249;\nVtlLexer.SL_COMMENT = 250;\nVtlLexer.COMPARISON_OP = 251;\nVtlLexer.FREQUENCY = 252;\nVtlLexer.prototype.channelNames = [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"];\nVtlLexer.prototype.modeNames = [\"DEFAULT_MODE\"];\nVtlLexer.prototype.literalNames = [null, \"':'\", \"'('\", \"')'\", \"'{'\", \"'}'\", \"'['\", \"']'\", \"'+'\", \"'-'\", \"'*'\", \"'/'\", null, \"'TODO-CUSTOMPIVOT'\", \"'='\", \"'<>'\", \"'<'\", \"'>'\", \"'<='\", \"'>='\", \"':='\", \"'#'\", \"'eval'\", \"'if'\", \"'then'\", \"'else'\", \"'using'\", \"'with'\", \"'current_date'\", \"'on'\", \"'drop'\", \"'keep'\", \"'calc'\", \"'attrcalc'\", \"'rename'\", \"'as'\", \"'and'\", \"'or'\", \"'xor'\", \"'not'\", \"'between'\", \"'in'\", \"'not_in'\", \"'isnull'\", \"'ex'\", \"'union'\", \"'diff'\", \"'symdiff'\", \"'intersect'\", \"'keys'\", null, \"'intyear'\", \"'intmonth'\", \"'intday'\", \"'check'\", \"'exists_in'\", \"'to'\", \"'return'\", \"'imbalance'\", \"'errorcode'\", \"'all'\", \"'aggr'\", \"'errorlevel'\", \"'order'\", \"'by'\", \"'rank'\", \"'asc'\", \"'desc'\", \"'min'\", \"'max'\", \"'first'\", \"'last'\", \"'indexof'\", \"'abs'\", \"'key'\", \"'ln'\", \"'log'\", \"'trunc'\", \"'round'\", \"'power'\", \"'mod'\", \"'length'\", \"'||'\", \"'trim'\", \"'upper'\", \"'lower'\", \"'substr'\", \"'sum'\", \"'avg'\", \"'median'\", \"'count'\", \"'identifier'\", \"'measure'\", \"'attribute'\", \"'filter'\", \"'merge'\", \"'exp'\", \"'role'\", \"'viral'\", \"'match_characters'\", \"'type'\", \"'nvl'\", \"'hierarchy'\", \"'_'\", \"'invalid'\", \"'valuedomain'\", \"'variable'\", \"'data'\", \"'structure'\", \"'dataset'\", \"'operator'\", \"'define'\", \"'<-'\", \"'datapoint'\", \"'hierarchical'\", \"'ruleset'\", \"'rule'\", \"'end'\", \"'alterDataset'\", \"'ltrim'\", \"'rtrim'\", \"'instr'\", \"'replace'\", \"'ceil'\", \"'floor'\", \"'sqrt'\", \"'any'\", \"'setdiff'\", \"'stddev_pop'\", \"'stddev_samp'\", \"'var_pop'\", \"'var_samp'\", \"'group'\", \"'except'\", \"'having'\", \"'first_value'\", \"'last_value'\", \"'lag'\", \"'lead'\", \"'ratio_to_report'\", \"'over'\", \"'preceding'\", \"'following'\", \"'unbounded'\", \"'partition'\", \"'rows'\", \"'range'\", \"'current'\", \"'valid'\", \"'fill_time_series'\", \"'flow_to_stock'\", \"'stock_to_flow'\", \"'timeshift'\", \"'measures'\", \"'no_measures'\", \"'condition'\", \"'boolean'\", \"'date'\", \"'time_period'\", \"'number'\", \"'string'\", \"'integer'\", \"'float'\", \"'list'\", \"'record'\", \"'restrict'\", \"'yyyy'\", \"'mm'\", \"'dd'\", \"'maxLength'\", \"'regexp'\", \"'is'\", \"'when'\", \"'from'\", \"'aggregates'\", \"'points'\", \"'point'\", \"'total'\", \"'partial'\", \"'always'\", \"'inner_join'\", \"'left_join'\", \"'cross_join'\", \"'full_join'\", \"'maps_from'\", \"'maps_to'\", \"'map_to'\", \"'map_from'\", \"'returns'\", \"'pivot'\", \"'unpivot'\", \"'sub'\", \"'apply'\", \"'conditioned'\", \"'period_indicator'\", \"'single'\", \"'duration'\", \"'time_agg'\", \"'unit'\", \"'Value'\", \"'valuedomains'\", \"'variables'\", \"'input'\", \"'output'\", \"'cast'\", \"'rule_priority'\", \"'dataset_priority'\", \"'default'\", \"'check_datapoint'\", \"'check_hierarchy'\", \"'computed'\", \"'non_null'\", \"'non_zero'\", \"'partial_null'\", \"'partial_zero'\", \"'always_null'\", \"'always_zero'\", \"'components'\", \"'all_measures'\", \"'scalar'\", \"'component'\", \"'datapoint_on_valuedomains'\", \"'datapoint_on_variables'\", \"'hierarchical_on_valuedomains'\", \"'hierarchical_on_variables'\", \"'set'\", \"'language'\", null, null, null, null, null, \"'null'\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"';'\"];\nVtlLexer.prototype.symbolicNames = [null, null, \"LPAREN\", \"RPAREN\", \"GLPAREN\", \"GRPAREN\", \"QLPAREN\", \"QRPAREN\", \"PLUS\", \"MINUS\", \"MUL\", \"DIV\", \"COMMA\", \"CUSTOMPIVOT\", \"EQ\", \"NEQ\", \"LT\", \"MT\", \"LE\", \"ME\", \"ASSIGN\", \"MEMBERSHIP\", \"EVAL\", \"IF\", \"THEN\", \"ELSE\", \"USING\", \"WITH\", \"CURRENT_DATE\", \"ON\", \"DROP\", \"KEEP\", \"CALC\", \"ATTRCALC\", \"RENAME\", \"AS\", \"AND\", \"OR\", \"XOR\", \"NOT\", \"BETWEEN\", \"IN\", \"NOT_IN\", \"ISNULL\", \"EX\", \"UNION\", \"DIFF\", \"SYMDIFF\", \"INTERSECT\", \"KEYS\", \"CARTESIAN_PER\", \"INTYEAR\", \"INTMONTH\", \"INTDAY\", \"CHECK\", \"EXISTS_IN\", \"TO\", \"RETURN\", \"IMBALANCE\", \"ERRORCODE\", \"ALL\", \"AGGREGATE\", \"ERRORLEVEL\", \"ORDER\", \"BY\", \"RANK\", \"ASC\", \"DESC\", \"MIN\", \"MAX\", \"FIRST\", \"LAST\", \"INDEXOF\", \"ABS\", \"KEY\", \"LN\", \"LOG\", \"TRUNC\", \"ROUND\", \"POWER\", \"MOD\", \"LEN\", \"CONCAT\", \"TRIM\", \"UCASE\", \"LCASE\", \"SUBSTR\", \"SUM\", \"AVG\", \"MEDIAN\", \"COUNT\", \"DIMENSION\", \"MEASURE\", \"ATTRIBUTE\", \"FILTER\", \"MERGE\", \"EXP\", \"ROLE\", \"VIRAL\", \"CHARSET_MATCH\", \"TYPE\", \"NVL\", \"HIERARCHY\", \"OPTIONAL\", \"INVALID\", \"VALUE_DOMAIN\", \"VARIABLE\", \"DATA\", \"STRUCTURE\", \"DATASET\", \"OPERATOR\", \"DEFINE\", \"PUT_SYMBOL\", \"DATAPOINT\", \"HIERARCHICAL\", \"RULESET\", \"RULE\", \"END\", \"ALTER_DATASET\", \"LTRIM\", \"RTRIM\", \"INSTR\", \"REPLACE\", \"CEIL\", \"FLOOR\", \"SQRT\", \"ANY\", \"SETDIFF\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"VAR_POP\", \"VAR_SAMP\", \"GROUP\", \"EXCEPT\", \"HAVING\", \"FIRST_VALUE\", \"LAST_VALUE\", \"LAG\", \"LEAD\", \"RATIO_TO_REPORT\", \"OVER\", \"PRECEDING\", \"FOLLOWING\", \"UNBOUNDED\", \"PARTITION\", \"ROWS\", \"RANGE\", \"CURRENT\", \"VALID\", \"FILL_TIME_SERIES\", \"FLOW_TO_STOCK\", \"STOCK_TO_FLOW\", \"TIMESHIFT\", \"MEASURES\", \"NO_MEASURES\", \"CONDITION\", \"BOOLEAN\", \"DATE\", \"TIME_PERIOD\", \"NUMBER\", \"STRING\", \"INTEGER\", \"FLOAT\", \"LIST\", \"RECORD\", \"RESTRICT\", \"YYYY\", \"MM\", \"DD\", \"MAX_LENGTH\", \"REGEXP\", \"IS\", \"WHEN\", \"FROM\", \"AGGREGATES\", \"POINTS\", \"POINT\", \"TOTAL\", \"PARTIAL\", \"ALWAYS\", \"INNER_JOIN\", \"LEFT_JOIN\", \"CROSS_JOIN\", \"FULL_JOIN\", \"MAPS_FROM\", \"MAPS_TO\", \"MAP_TO\", \"MAP_FROM\", \"RETURNS\", \"PIVOT\", \"UNPIVOT\", \"SUBSPACE\", \"APPLY\", \"CONDITIONED\", \"PERIOD_INDICATOR\", \"SINGLE\", \"DURATION\", \"TIME_AGG\", \"UNIT\", \"VALUE\", \"VALUEDOMAINS\", \"VARIABLES\", \"INPUT\", \"OUTPUT\", \"CAST\", \"RULE_PRIORITY\", \"DATASET_PRIORITY\", \"DEFAULT\", \"CHECK_DATAPOINT\", \"CHECK_HIERARCHY\", \"COMPUTED\", \"NON_NULL\", \"NON_ZERO\", \"PARTIAL_NULL\", \"PARTIAL_ZERO\", \"ALWAYS_NULL\", \"ALWAYS_ZERO\", \"COMPONENTS\", \"ALL_MEASURES\", \"SCALAR\", \"COMPONENT\", \"DATAPOINT_ON_VD\", \"DATAPOINT_ON_VAR\", \"HIERARCHICAL_ON_VD\", \"HIERARCHICAL_ON_VAR\", \"SET\", \"LANGUAGE\", \"INTEGER_CONSTANT\", \"POSITIVE_CONSTANT\", \"NEGATIVE_CONSTANT\", \"FLOAT_CONSTANT\", \"BOOLEAN_CONSTANT\", \"NULL_CONSTANT\", \"STRING_CONSTANT\", \"IDENTIFIER\", \"DIGITS0_9\", \"MONTH\", \"DAY\", \"YEAR\", \"WEEK\", \"HOURS\", \"MINUTES\", \"SECONDS\", \"DATE_FORMAT\", \"TIME_FORMAT\", \"TIME_UNIT\", \"TIME\", \"WS\", \"EOL\", \"ML_COMMENT\", \"SL_COMMENT\", \"COMPARISON_OP\", \"FREQUENCY\"];\nVtlLexer.prototype.ruleNames = [\"T__0\", \"LPAREN\", \"RPAREN\", \"GLPAREN\", \"GRPAREN\", \"QLPAREN\", \"QRPAREN\", \"PLUS\", \"MINUS\", \"MUL\", \"DIV\", \"COMMA\", \"CUSTOMPIVOT\", \"EQ\", \"NEQ\", \"LT\", \"MT\", \"LE\", \"ME\", \"ASSIGN\", \"MEMBERSHIP\", \"EVAL\", \"IF\", \"THEN\", \"ELSE\", \"USING\", \"WITH\", \"CURRENT_DATE\", \"ON\", \"DROP\", \"KEEP\", \"CALC\", \"ATTRCALC\", \"RENAME\", \"AS\", \"AND\", \"OR\", \"XOR\", \"NOT\", \"BETWEEN\", \"IN\", \"NOT_IN\", \"ISNULL\", \"EX\", \"UNION\", \"DIFF\", \"SYMDIFF\", \"INTERSECT\", \"KEYS\", \"CARTESIAN_PER\", \"INTYEAR\", \"INTMONTH\", \"INTDAY\", \"CHECK\", \"EXISTS_IN\", \"TO\", \"RETURN\", \"IMBALANCE\", \"ERRORCODE\", \"ALL\", \"AGGREGATE\", \"ERRORLEVEL\", \"ORDER\", \"BY\", \"RANK\", \"ASC\", \"DESC\", \"MIN\", \"MAX\", \"FIRST\", \"LAST\", \"INDEXOF\", \"ABS\", \"KEY\", \"LN\", \"LOG\", \"TRUNC\", \"ROUND\", \"POWER\", \"MOD\", \"LEN\", \"CONCAT\", \"TRIM\", \"UCASE\", \"LCASE\", \"SUBSTR\", \"SUM\", \"AVG\", \"MEDIAN\", \"COUNT\", \"DIMENSION\", \"MEASURE\", \"ATTRIBUTE\", \"FILTER\", \"MERGE\", \"EXP\", \"ROLE\", \"VIRAL\", \"CHARSET_MATCH\", \"TYPE\", \"NVL\", \"HIERARCHY\", \"OPTIONAL\", \"INVALID\", \"VALUE_DOMAIN\", \"VARIABLE\", \"DATA\", \"STRUCTURE\", \"DATASET\", \"OPERATOR\", \"DEFINE\", \"PUT_SYMBOL\", \"DATAPOINT\", \"HIERARCHICAL\", \"RULESET\", \"RULE\", \"END\", \"ALTER_DATASET\", \"LTRIM\", \"RTRIM\", \"INSTR\", \"REPLACE\", \"CEIL\", \"FLOOR\", \"SQRT\", \"ANY\", \"SETDIFF\", \"STDDEV_POP\", \"STDDEV_SAMP\", \"VAR_POP\", \"VAR_SAMP\", \"GROUP\", \"EXCEPT\", \"HAVING\", \"FIRST_VALUE\", \"LAST_VALUE\", \"LAG\", \"LEAD\", \"RATIO_TO_REPORT\", \"OVER\", \"PRECEDING\", \"FOLLOWING\", \"UNBOUNDED\", \"PARTITION\", \"ROWS\", \"RANGE\", \"CURRENT\", \"VALID\", \"FILL_TIME_SERIES\", \"FLOW_TO_STOCK\", \"STOCK_TO_FLOW\", \"TIMESHIFT\", \"MEASURES\", \"NO_MEASURES\", \"CONDITION\", \"BOOLEAN\", \"DATE\", \"TIME_PERIOD\", \"NUMBER\", \"STRING\", \"INTEGER\", \"FLOAT\", \"LIST\", \"RECORD\", \"RESTRICT\", \"YYYY\", \"MM\", \"DD\", \"MAX_LENGTH\", \"REGEXP\", \"IS\", \"WHEN\", \"FROM\", \"AGGREGATES\", \"POINTS\", \"POINT\", \"TOTAL\", \"PARTIAL\", \"ALWAYS\", \"INNER_JOIN\", \"LEFT_JOIN\", \"CROSS_JOIN\", \"FULL_JOIN\", \"MAPS_FROM\", \"MAPS_TO\", \"MAP_TO\", \"MAP_FROM\", \"RETURNS\", \"PIVOT\", \"UNPIVOT\", \"SUBSPACE\", \"APPLY\", \"CONDITIONED\", \"PERIOD_INDICATOR\", \"SINGLE\", \"DURATION\", \"TIME_AGG\", \"UNIT\", \"VALUE\", \"VALUEDOMAINS\", \"VARIABLES\", \"INPUT\", \"OUTPUT\", \"CAST\", \"RULE_PRIORITY\", \"DATASET_PRIORITY\", \"DEFAULT\", \"CHECK_DATAPOINT\", \"CHECK_HIERARCHY\", \"COMPUTED\", \"NON_NULL\", \"NON_ZERO\", \"PARTIAL_NULL\", \"PARTIAL_ZERO\", \"ALWAYS_NULL\", \"ALWAYS_ZERO\", \"COMPONENTS\", \"ALL_MEASURES\", \"SCALAR\", \"COMPONENT\", \"DATAPOINT_ON_VD\", \"DATAPOINT_ON_VAR\", \"HIERARCHICAL_ON_VD\", \"HIERARCHICAL_ON_VAR\", \"SET\", \"LANGUAGE\", \"INTEGER_CONSTANT\", \"POSITIVE_CONSTANT\", \"NEGATIVE_CONSTANT\", \"FLOAT_CONSTANT\", \"FLOATEXP\", \"BOOLEAN_CONSTANT\", \"NULL_CONSTANT\", \"STRING_CONSTANT\", \"IDENTIFIER\", \"DIGITS0_9\", \"MONTH\", \"DAY\", \"YEAR\", \"WEEK\", \"HOURS\", \"MINUTES\", \"SECONDS\", \"DATE_FORMAT\", \"TIME_FORMAT\", \"TIME_UNIT\", \"TIME\", \"LETTER\", \"WS\", \"EOL\", \"ML_COMMENT\", \"SL_COMMENT\", \"COMPARISON_OP\", \"FREQUENCY\"];\nVtlLexer.prototype.grammarFileName = \"Vtl.g4\";\nexports.VtlLexer = VtlLexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlLexer.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlListener.js":
/*!*****************************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlListener.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Generated from vtl-sources/Vtl-2.0-Insee/Vtl.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\"); // This class defines a complete listener for a parse tree produced by VtlParser.\n\n\nfunction VtlListener() {\n  antlr4.tree.ParseTreeListener.call(this);\n  return this;\n}\n\nVtlListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);\nVtlListener.prototype.constructor = VtlListener; // Enter a parse tree produced by VtlParser#start.\n\nVtlListener.prototype.enterStart = function (ctx) {}; // Exit a parse tree produced by VtlParser#start.\n\n\nVtlListener.prototype.exitStart = function (ctx) {}; // Enter a parse tree produced by VtlParser#temporaryAssignment.\n\n\nVtlListener.prototype.enterTemporaryAssignment = function (ctx) {}; // Exit a parse tree produced by VtlParser#temporaryAssignment.\n\n\nVtlListener.prototype.exitTemporaryAssignment = function (ctx) {}; // Enter a parse tree produced by VtlParser#persistAssignment.\n\n\nVtlListener.prototype.enterPersistAssignment = function (ctx) {}; // Exit a parse tree produced by VtlParser#persistAssignment.\n\n\nVtlListener.prototype.exitPersistAssignment = function (ctx) {}; // Enter a parse tree produced by VtlParser#defineExpression.\n\n\nVtlListener.prototype.enterDefineExpression = function (ctx) {}; // Exit a parse tree produced by VtlParser#defineExpression.\n\n\nVtlListener.prototype.exitDefineExpression = function (ctx) {}; // Enter a parse tree produced by VtlParser#varIdExpr.\n\n\nVtlListener.prototype.enterVarIdExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#varIdExpr.\n\n\nVtlListener.prototype.exitVarIdExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#membershipExpr.\n\n\nVtlListener.prototype.enterMembershipExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#membershipExpr.\n\n\nVtlListener.prototype.exitMembershipExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#inNotInExpr.\n\n\nVtlListener.prototype.enterInNotInExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#inNotInExpr.\n\n\nVtlListener.prototype.exitInNotInExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#booleanExpr.\n\n\nVtlListener.prototype.enterBooleanExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#booleanExpr.\n\n\nVtlListener.prototype.exitBooleanExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#comparisonExpr.\n\n\nVtlListener.prototype.enterComparisonExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#comparisonExpr.\n\n\nVtlListener.prototype.exitComparisonExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#concatExpr.\n\n\nVtlListener.prototype.enterConcatExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#concatExpr.\n\n\nVtlListener.prototype.exitConcatExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#unaryExpr.\n\n\nVtlListener.prototype.enterUnaryExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#unaryExpr.\n\n\nVtlListener.prototype.exitUnaryExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#notExpr.\n\n\nVtlListener.prototype.enterNotExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#notExpr.\n\n\nVtlListener.prototype.exitNotExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#functionsExpression.\n\n\nVtlListener.prototype.enterFunctionsExpression = function (ctx) {}; // Exit a parse tree produced by VtlParser#functionsExpression.\n\n\nVtlListener.prototype.exitFunctionsExpression = function (ctx) {}; // Enter a parse tree produced by VtlParser#ifExpr.\n\n\nVtlListener.prototype.enterIfExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#ifExpr.\n\n\nVtlListener.prototype.exitIfExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#clauseExpr.\n\n\nVtlListener.prototype.enterClauseExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#clauseExpr.\n\n\nVtlListener.prototype.exitClauseExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#arithmeticExpr.\n\n\nVtlListener.prototype.enterArithmeticExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#arithmeticExpr.\n\n\nVtlListener.prototype.exitArithmeticExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#parenthesisExpr.\n\n\nVtlListener.prototype.enterParenthesisExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#parenthesisExpr.\n\n\nVtlListener.prototype.exitParenthesisExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#constantExpr.\n\n\nVtlListener.prototype.enterConstantExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#constantExpr.\n\n\nVtlListener.prototype.exitConstantExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinFunctions.\n\n\nVtlListener.prototype.enterJoinFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinFunctions.\n\n\nVtlListener.prototype.exitJoinFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#genericFunctions.\n\n\nVtlListener.prototype.enterGenericFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#genericFunctions.\n\n\nVtlListener.prototype.exitGenericFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#stringFunctions.\n\n\nVtlListener.prototype.enterStringFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#stringFunctions.\n\n\nVtlListener.prototype.exitStringFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#numericFunctions.\n\n\nVtlListener.prototype.enterNumericFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#numericFunctions.\n\n\nVtlListener.prototype.exitNumericFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#comparisonFunctions.\n\n\nVtlListener.prototype.enterComparisonFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#comparisonFunctions.\n\n\nVtlListener.prototype.exitComparisonFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#timeFunctions.\n\n\nVtlListener.prototype.enterTimeFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#timeFunctions.\n\n\nVtlListener.prototype.exitTimeFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#setFunctions.\n\n\nVtlListener.prototype.enterSetFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#setFunctions.\n\n\nVtlListener.prototype.exitSetFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#hierarchyFunctions.\n\n\nVtlListener.prototype.enterHierarchyFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#hierarchyFunctions.\n\n\nVtlListener.prototype.exitHierarchyFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#validationFunctions.\n\n\nVtlListener.prototype.enterValidationFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#validationFunctions.\n\n\nVtlListener.prototype.exitValidationFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#conditionalFunctions.\n\n\nVtlListener.prototype.enterConditionalFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#conditionalFunctions.\n\n\nVtlListener.prototype.exitConditionalFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#aggregateFunctions.\n\n\nVtlListener.prototype.enterAggregateFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#aggregateFunctions.\n\n\nVtlListener.prototype.exitAggregateFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#analyticFunctions.\n\n\nVtlListener.prototype.enterAnalyticFunctions = function (ctx) {}; // Exit a parse tree produced by VtlParser#analyticFunctions.\n\n\nVtlListener.prototype.exitAnalyticFunctions = function (ctx) {}; // Enter a parse tree produced by VtlParser#datasetClause.\n\n\nVtlListener.prototype.enterDatasetClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#datasetClause.\n\n\nVtlListener.prototype.exitDatasetClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#renameClause.\n\n\nVtlListener.prototype.enterRenameClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#renameClause.\n\n\nVtlListener.prototype.exitRenameClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#aggrClause.\n\n\nVtlListener.prototype.enterAggrClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#aggrClause.\n\n\nVtlListener.prototype.exitAggrClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#filterClause.\n\n\nVtlListener.prototype.enterFilterClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#filterClause.\n\n\nVtlListener.prototype.exitFilterClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#calcClause.\n\n\nVtlListener.prototype.enterCalcClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#calcClause.\n\n\nVtlListener.prototype.exitCalcClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#keepClause.\n\n\nVtlListener.prototype.enterKeepClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#keepClause.\n\n\nVtlListener.prototype.exitKeepClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#dropClause.\n\n\nVtlListener.prototype.enterDropClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#dropClause.\n\n\nVtlListener.prototype.exitDropClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#pivotClause.\n\n\nVtlListener.prototype.enterPivotClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#pivotClause.\n\n\nVtlListener.prototype.exitPivotClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#customPivotClause.\n\n\nVtlListener.prototype.enterCustomPivotClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#customPivotClause.\n\n\nVtlListener.prototype.exitCustomPivotClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#unipivotClause.\n\n\nVtlListener.prototype.enterUnipivotClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#unipivotClause.\n\n\nVtlListener.prototype.exitUnipivotClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#subspaceClause.\n\n\nVtlListener.prototype.enterSubspaceClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#subspaceClause.\n\n\nVtlListener.prototype.exitSubspaceClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinExpr.\n\n\nVtlListener.prototype.enterJoinExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinExpr.\n\n\nVtlListener.prototype.exitJoinExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#defOperator.\n\n\nVtlListener.prototype.enterDefOperator = function (ctx) {}; // Exit a parse tree produced by VtlParser#defOperator.\n\n\nVtlListener.prototype.exitDefOperator = function (ctx) {}; // Enter a parse tree produced by VtlParser#defDatapointRuleset.\n\n\nVtlListener.prototype.enterDefDatapointRuleset = function (ctx) {}; // Exit a parse tree produced by VtlParser#defDatapointRuleset.\n\n\nVtlListener.prototype.exitDefDatapointRuleset = function (ctx) {}; // Enter a parse tree produced by VtlParser#defHierarchical.\n\n\nVtlListener.prototype.enterDefHierarchical = function (ctx) {}; // Exit a parse tree produced by VtlParser#defHierarchical.\n\n\nVtlListener.prototype.exitDefHierarchical = function (ctx) {}; // Enter a parse tree produced by VtlParser#callFunctionAtom.\n\n\nVtlListener.prototype.enterCallFunctionAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#callFunctionAtom.\n\n\nVtlListener.prototype.exitCallFunctionAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#evalAtom.\n\n\nVtlListener.prototype.enterEvalAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#evalAtom.\n\n\nVtlListener.prototype.exitEvalAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#castExpr.\n\n\nVtlListener.prototype.enterCastExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#castExpr.\n\n\nVtlListener.prototype.exitCastExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#parameter.\n\n\nVtlListener.prototype.enterParameter = function (ctx) {}; // Exit a parse tree produced by VtlParser#parameter.\n\n\nVtlListener.prototype.exitParameter = function (ctx) {}; // Enter a parse tree produced by VtlParser#trimAtom.\n\n\nVtlListener.prototype.enterTrimAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#trimAtom.\n\n\nVtlListener.prototype.exitTrimAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#ltrimAtom.\n\n\nVtlListener.prototype.enterLtrimAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#ltrimAtom.\n\n\nVtlListener.prototype.exitLtrimAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#rtrimAtom.\n\n\nVtlListener.prototype.enterRtrimAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#rtrimAtom.\n\n\nVtlListener.prototype.exitRtrimAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#ucaseAtom.\n\n\nVtlListener.prototype.enterUcaseAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#ucaseAtom.\n\n\nVtlListener.prototype.exitUcaseAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#lcaseAtom.\n\n\nVtlListener.prototype.enterLcaseAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#lcaseAtom.\n\n\nVtlListener.prototype.exitLcaseAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#substrAtom.\n\n\nVtlListener.prototype.enterSubstrAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#substrAtom.\n\n\nVtlListener.prototype.exitSubstrAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#replaceAtom.\n\n\nVtlListener.prototype.enterReplaceAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#replaceAtom.\n\n\nVtlListener.prototype.exitReplaceAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#instrAtom.\n\n\nVtlListener.prototype.enterInstrAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#instrAtom.\n\n\nVtlListener.prototype.exitInstrAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#lenAtom.\n\n\nVtlListener.prototype.enterLenAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#lenAtom.\n\n\nVtlListener.prototype.exitLenAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#modAtom.\n\n\nVtlListener.prototype.enterModAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#modAtom.\n\n\nVtlListener.prototype.exitModAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#roundAtom.\n\n\nVtlListener.prototype.enterRoundAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#roundAtom.\n\n\nVtlListener.prototype.exitRoundAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#lnAtom.\n\n\nVtlListener.prototype.enterLnAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#lnAtom.\n\n\nVtlListener.prototype.exitLnAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#ceilAtom.\n\n\nVtlListener.prototype.enterCeilAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#ceilAtom.\n\n\nVtlListener.prototype.exitCeilAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#floorAtom.\n\n\nVtlListener.prototype.enterFloorAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#floorAtom.\n\n\nVtlListener.prototype.exitFloorAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#minAtom.\n\n\nVtlListener.prototype.enterMinAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#minAtom.\n\n\nVtlListener.prototype.exitMinAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#expAtom.\n\n\nVtlListener.prototype.enterExpAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#expAtom.\n\n\nVtlListener.prototype.exitExpAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#powerAtom.\n\n\nVtlListener.prototype.enterPowerAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#powerAtom.\n\n\nVtlListener.prototype.exitPowerAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#logAtom.\n\n\nVtlListener.prototype.enterLogAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#logAtom.\n\n\nVtlListener.prototype.exitLogAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#sqrtAtom.\n\n\nVtlListener.prototype.enterSqrtAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#sqrtAtom.\n\n\nVtlListener.prototype.exitSqrtAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#betweenAtom.\n\n\nVtlListener.prototype.enterBetweenAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#betweenAtom.\n\n\nVtlListener.prototype.exitBetweenAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#charsetMatchAtom.\n\n\nVtlListener.prototype.enterCharsetMatchAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#charsetMatchAtom.\n\n\nVtlListener.prototype.exitCharsetMatchAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#isNullAtom.\n\n\nVtlListener.prototype.enterIsNullAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#isNullAtom.\n\n\nVtlListener.prototype.exitIsNullAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#existInAtom.\n\n\nVtlListener.prototype.enterExistInAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#existInAtom.\n\n\nVtlListener.prototype.exitExistInAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#periodAtom.\n\n\nVtlListener.prototype.enterPeriodAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#periodAtom.\n\n\nVtlListener.prototype.exitPeriodAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#fillTimeAtom.\n\n\nVtlListener.prototype.enterFillTimeAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#fillTimeAtom.\n\n\nVtlListener.prototype.exitFillTimeAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#flowToStockAtom.\n\n\nVtlListener.prototype.enterFlowToStockAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#flowToStockAtom.\n\n\nVtlListener.prototype.exitFlowToStockAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#stockToFlowAtom.\n\n\nVtlListener.prototype.enterStockToFlowAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#stockToFlowAtom.\n\n\nVtlListener.prototype.exitStockToFlowAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#timeShiftAtom.\n\n\nVtlListener.prototype.enterTimeShiftAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#timeShiftAtom.\n\n\nVtlListener.prototype.exitTimeShiftAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#timeAggAtom.\n\n\nVtlListener.prototype.enterTimeAggAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#timeAggAtom.\n\n\nVtlListener.prototype.exitTimeAggAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#currentDateAtom.\n\n\nVtlListener.prototype.enterCurrentDateAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#currentDateAtom.\n\n\nVtlListener.prototype.exitCurrentDateAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#unionAtom.\n\n\nVtlListener.prototype.enterUnionAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#unionAtom.\n\n\nVtlListener.prototype.exitUnionAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#intersectAtom.\n\n\nVtlListener.prototype.enterIntersectAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#intersectAtom.\n\n\nVtlListener.prototype.exitIntersectAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#setDiffAtom.\n\n\nVtlListener.prototype.enterSetDiffAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#setDiffAtom.\n\n\nVtlListener.prototype.exitSetDiffAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#symDiffAtom.\n\n\nVtlListener.prototype.enterSymDiffAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#symDiffAtom.\n\n\nVtlListener.prototype.exitSymDiffAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#hierarchyOperators.\n\n\nVtlListener.prototype.enterHierarchyOperators = function (ctx) {}; // Exit a parse tree produced by VtlParser#hierarchyOperators.\n\n\nVtlListener.prototype.exitHierarchyOperators = function (ctx) {}; // Enter a parse tree produced by VtlParser#validateDPruleset.\n\n\nVtlListener.prototype.enterValidateDPruleset = function (ctx) {}; // Exit a parse tree produced by VtlParser#validateDPruleset.\n\n\nVtlListener.prototype.exitValidateDPruleset = function (ctx) {}; // Enter a parse tree produced by VtlParser#validateHRruleset.\n\n\nVtlListener.prototype.enterValidateHRruleset = function (ctx) {}; // Exit a parse tree produced by VtlParser#validateHRruleset.\n\n\nVtlListener.prototype.exitValidateHRruleset = function (ctx) {}; // Enter a parse tree produced by VtlParser#validationSimple.\n\n\nVtlListener.prototype.enterValidationSimple = function (ctx) {}; // Exit a parse tree produced by VtlParser#validationSimple.\n\n\nVtlListener.prototype.exitValidationSimple = function (ctx) {}; // Enter a parse tree produced by VtlParser#nvlAtom.\n\n\nVtlListener.prototype.enterNvlAtom = function (ctx) {}; // Exit a parse tree produced by VtlParser#nvlAtom.\n\n\nVtlListener.prototype.exitNvlAtom = function (ctx) {}; // Enter a parse tree produced by VtlParser#sumAggrComp.\n\n\nVtlListener.prototype.enterSumAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#sumAggrComp.\n\n\nVtlListener.prototype.exitSumAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#avgAggrComp.\n\n\nVtlListener.prototype.enterAvgAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#avgAggrComp.\n\n\nVtlListener.prototype.exitAvgAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#countAggrComp.\n\n\nVtlListener.prototype.enterCountAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#countAggrComp.\n\n\nVtlListener.prototype.exitCountAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#medianAggrComp.\n\n\nVtlListener.prototype.enterMedianAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#medianAggrComp.\n\n\nVtlListener.prototype.exitMedianAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#minAggrComp.\n\n\nVtlListener.prototype.enterMinAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#minAggrComp.\n\n\nVtlListener.prototype.exitMinAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#maxAggrComp.\n\n\nVtlListener.prototype.enterMaxAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#maxAggrComp.\n\n\nVtlListener.prototype.exitMaxAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevPopAggrComp.\n\n\nVtlListener.prototype.enterStddevPopAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevPopAggrComp.\n\n\nVtlListener.prototype.exitStddevPopAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevSampAggrComp.\n\n\nVtlListener.prototype.enterStddevSampAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevSampAggrComp.\n\n\nVtlListener.prototype.exitStddevSampAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#varPopAggrComp.\n\n\nVtlListener.prototype.enterVarPopAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#varPopAggrComp.\n\n\nVtlListener.prototype.exitVarPopAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#varSampAggrComp.\n\n\nVtlListener.prototype.enterVarSampAggrComp = function (ctx) {}; // Exit a parse tree produced by VtlParser#varSampAggrComp.\n\n\nVtlListener.prototype.exitVarSampAggrComp = function (ctx) {}; // Enter a parse tree produced by VtlParser#sumAggr.\n\n\nVtlListener.prototype.enterSumAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#sumAggr.\n\n\nVtlListener.prototype.exitSumAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#avgAggr.\n\n\nVtlListener.prototype.enterAvgAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#avgAggr.\n\n\nVtlListener.prototype.exitAvgAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#countAggr.\n\n\nVtlListener.prototype.enterCountAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#countAggr.\n\n\nVtlListener.prototype.exitCountAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#medianAggr.\n\n\nVtlListener.prototype.enterMedianAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#medianAggr.\n\n\nVtlListener.prototype.exitMedianAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#minAggr.\n\n\nVtlListener.prototype.enterMinAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#minAggr.\n\n\nVtlListener.prototype.exitMinAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#maxAggr.\n\n\nVtlListener.prototype.enterMaxAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#maxAggr.\n\n\nVtlListener.prototype.exitMaxAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevPopAggr.\n\n\nVtlListener.prototype.enterStddevPopAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevPopAggr.\n\n\nVtlListener.prototype.exitStddevPopAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevSampAggr.\n\n\nVtlListener.prototype.enterStddevSampAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevSampAggr.\n\n\nVtlListener.prototype.exitStddevSampAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#varPopAggr.\n\n\nVtlListener.prototype.enterVarPopAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#varPopAggr.\n\n\nVtlListener.prototype.exitVarPopAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#varSampAggr.\n\n\nVtlListener.prototype.enterVarSampAggr = function (ctx) {}; // Exit a parse tree produced by VtlParser#varSampAggr.\n\n\nVtlListener.prototype.exitVarSampAggr = function (ctx) {}; // Enter a parse tree produced by VtlParser#sumAn.\n\n\nVtlListener.prototype.enterSumAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#sumAn.\n\n\nVtlListener.prototype.exitSumAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#avgAn.\n\n\nVtlListener.prototype.enterAvgAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#avgAn.\n\n\nVtlListener.prototype.exitAvgAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#countAn.\n\n\nVtlListener.prototype.enterCountAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#countAn.\n\n\nVtlListener.prototype.exitCountAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#medianAn.\n\n\nVtlListener.prototype.enterMedianAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#medianAn.\n\n\nVtlListener.prototype.exitMedianAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#minAn.\n\n\nVtlListener.prototype.enterMinAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#minAn.\n\n\nVtlListener.prototype.exitMinAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#maxAn.\n\n\nVtlListener.prototype.enterMaxAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#maxAn.\n\n\nVtlListener.prototype.exitMaxAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevPopAn.\n\n\nVtlListener.prototype.enterStddevPopAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevPopAn.\n\n\nVtlListener.prototype.exitStddevPopAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#stddevSampAn.\n\n\nVtlListener.prototype.enterStddevSampAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#stddevSampAn.\n\n\nVtlListener.prototype.exitStddevSampAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#varPopAn.\n\n\nVtlListener.prototype.enterVarPopAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#varPopAn.\n\n\nVtlListener.prototype.exitVarPopAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#varSampAn.\n\n\nVtlListener.prototype.enterVarSampAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#varSampAn.\n\n\nVtlListener.prototype.exitVarSampAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#firstValueAn.\n\n\nVtlListener.prototype.enterFirstValueAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#firstValueAn.\n\n\nVtlListener.prototype.exitFirstValueAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#lastValueAn.\n\n\nVtlListener.prototype.enterLastValueAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#lastValueAn.\n\n\nVtlListener.prototype.exitLastValueAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#lagAn.\n\n\nVtlListener.prototype.enterLagAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#lagAn.\n\n\nVtlListener.prototype.exitLagAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#leadAn.\n\n\nVtlListener.prototype.enterLeadAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#leadAn.\n\n\nVtlListener.prototype.exitLeadAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#rankAn.\n\n\nVtlListener.prototype.enterRankAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#rankAn.\n\n\nVtlListener.prototype.exitRankAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#ratioToReportAn.\n\n\nVtlListener.prototype.enterRatioToReportAn = function (ctx) {}; // Exit a parse tree produced by VtlParser#ratioToReportAn.\n\n\nVtlListener.prototype.exitRatioToReportAn = function (ctx) {}; // Enter a parse tree produced by VtlParser#renameClauseItem.\n\n\nVtlListener.prototype.enterRenameClauseItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#renameClauseItem.\n\n\nVtlListener.prototype.exitRenameClauseItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#componentMembership.\n\n\nVtlListener.prototype.enterComponentMembership = function (ctx) {}; // Exit a parse tree produced by VtlParser#componentMembership.\n\n\nVtlListener.prototype.exitComponentMembership = function (ctx) {}; // Enter a parse tree produced by VtlParser#component.\n\n\nVtlListener.prototype.enterComponent = function (ctx) {}; // Exit a parse tree produced by VtlParser#component.\n\n\nVtlListener.prototype.exitComponent = function (ctx) {}; // Enter a parse tree produced by VtlParser#aggregateClause.\n\n\nVtlListener.prototype.enterAggregateClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#aggregateClause.\n\n\nVtlListener.prototype.exitAggregateClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#aggrFunctionClause.\n\n\nVtlListener.prototype.enterAggrFunctionClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#aggrFunctionClause.\n\n\nVtlListener.prototype.exitAggrFunctionClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#calcClauseItem.\n\n\nVtlListener.prototype.enterCalcClauseItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#calcClauseItem.\n\n\nVtlListener.prototype.exitCalcClauseItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#subspaceClauseItem.\n\n\nVtlListener.prototype.enterSubspaceClauseItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#subspaceClauseItem.\n\n\nVtlListener.prototype.exitSubspaceClauseItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinClauseWithoutUsing.\n\n\nVtlListener.prototype.enterJoinClauseWithoutUsing = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinClauseWithoutUsing.\n\n\nVtlListener.prototype.exitJoinClauseWithoutUsing = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinClause.\n\n\nVtlListener.prototype.enterJoinClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinClause.\n\n\nVtlListener.prototype.exitJoinClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinClauseItem.\n\n\nVtlListener.prototype.enterJoinClauseItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinClauseItem.\n\n\nVtlListener.prototype.exitJoinClauseItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinBody.\n\n\nVtlListener.prototype.enterJoinBody = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinBody.\n\n\nVtlListener.prototype.exitJoinBody = function (ctx) {}; // Enter a parse tree produced by VtlParser#joinApplyClause.\n\n\nVtlListener.prototype.enterJoinApplyClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#joinApplyClause.\n\n\nVtlListener.prototype.exitJoinApplyClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#partitionByClause.\n\n\nVtlListener.prototype.enterPartitionByClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#partitionByClause.\n\n\nVtlListener.prototype.exitPartitionByClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#orderByClause.\n\n\nVtlListener.prototype.enterOrderByClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#orderByClause.\n\n\nVtlListener.prototype.exitOrderByClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#orderByItem.\n\n\nVtlListener.prototype.enterOrderByItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#orderByItem.\n\n\nVtlListener.prototype.exitOrderByItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#windowingClause.\n\n\nVtlListener.prototype.enterWindowingClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#windowingClause.\n\n\nVtlListener.prototype.exitWindowingClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#limitClauseItem.\n\n\nVtlListener.prototype.enterLimitClauseItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#limitClauseItem.\n\n\nVtlListener.prototype.exitLimitClauseItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#groupByOrExcept.\n\n\nVtlListener.prototype.enterGroupByOrExcept = function (ctx) {}; // Exit a parse tree produced by VtlParser#groupByOrExcept.\n\n\nVtlListener.prototype.exitGroupByOrExcept = function (ctx) {}; // Enter a parse tree produced by VtlParser#groupAll.\n\n\nVtlListener.prototype.enterGroupAll = function (ctx) {}; // Exit a parse tree produced by VtlParser#groupAll.\n\n\nVtlListener.prototype.exitGroupAll = function (ctx) {}; // Enter a parse tree produced by VtlParser#havingClause.\n\n\nVtlListener.prototype.enterHavingClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#havingClause.\n\n\nVtlListener.prototype.exitHavingClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#parameterItem.\n\n\nVtlListener.prototype.enterParameterItem = function (ctx) {}; // Exit a parse tree produced by VtlParser#parameterItem.\n\n\nVtlListener.prototype.exitParameterItem = function (ctx) {}; // Enter a parse tree produced by VtlParser#outputParameterType.\n\n\nVtlListener.prototype.enterOutputParameterType = function (ctx) {}; // Exit a parse tree produced by VtlParser#outputParameterType.\n\n\nVtlListener.prototype.exitOutputParameterType = function (ctx) {}; // Enter a parse tree produced by VtlParser#inputParameterType.\n\n\nVtlListener.prototype.enterInputParameterType = function (ctx) {}; // Exit a parse tree produced by VtlParser#inputParameterType.\n\n\nVtlListener.prototype.exitInputParameterType = function (ctx) {}; // Enter a parse tree produced by VtlParser#rulesetType.\n\n\nVtlListener.prototype.enterRulesetType = function (ctx) {}; // Exit a parse tree produced by VtlParser#rulesetType.\n\n\nVtlListener.prototype.exitRulesetType = function (ctx) {}; // Enter a parse tree produced by VtlParser#scalarType.\n\n\nVtlListener.prototype.enterScalarType = function (ctx) {}; // Exit a parse tree produced by VtlParser#scalarType.\n\n\nVtlListener.prototype.exitScalarType = function (ctx) {}; // Enter a parse tree produced by VtlParser#componentType.\n\n\nVtlListener.prototype.enterComponentType = function (ctx) {}; // Exit a parse tree produced by VtlParser#componentType.\n\n\nVtlListener.prototype.exitComponentType = function (ctx) {}; // Enter a parse tree produced by VtlParser#datasetType.\n\n\nVtlListener.prototype.enterDatasetType = function (ctx) {}; // Exit a parse tree produced by VtlParser#datasetType.\n\n\nVtlListener.prototype.exitDatasetType = function (ctx) {}; // Enter a parse tree produced by VtlParser#scalarSetType.\n\n\nVtlListener.prototype.enterScalarSetType = function (ctx) {}; // Exit a parse tree produced by VtlParser#scalarSetType.\n\n\nVtlListener.prototype.exitScalarSetType = function (ctx) {}; // Enter a parse tree produced by VtlParser#dataPoint.\n\n\nVtlListener.prototype.enterDataPoint = function (ctx) {}; // Exit a parse tree produced by VtlParser#dataPoint.\n\n\nVtlListener.prototype.exitDataPoint = function (ctx) {}; // Enter a parse tree produced by VtlParser#dataPointVd.\n\n\nVtlListener.prototype.enterDataPointVd = function (ctx) {}; // Exit a parse tree produced by VtlParser#dataPointVd.\n\n\nVtlListener.prototype.exitDataPointVd = function (ctx) {}; // Enter a parse tree produced by VtlParser#dataPointVar.\n\n\nVtlListener.prototype.enterDataPointVar = function (ctx) {}; // Exit a parse tree produced by VtlParser#dataPointVar.\n\n\nVtlListener.prototype.exitDataPointVar = function (ctx) {}; // Enter a parse tree produced by VtlParser#hrRulesetType.\n\n\nVtlListener.prototype.enterHrRulesetType = function (ctx) {}; // Exit a parse tree produced by VtlParser#hrRulesetType.\n\n\nVtlListener.prototype.exitHrRulesetType = function (ctx) {}; // Enter a parse tree produced by VtlParser#hrRulesetVdType.\n\n\nVtlListener.prototype.enterHrRulesetVdType = function (ctx) {}; // Exit a parse tree produced by VtlParser#hrRulesetVdType.\n\n\nVtlListener.prototype.exitHrRulesetVdType = function (ctx) {}; // Enter a parse tree produced by VtlParser#hrRulesetVarType.\n\n\nVtlListener.prototype.enterHrRulesetVarType = function (ctx) {}; // Exit a parse tree produced by VtlParser#hrRulesetVarType.\n\n\nVtlListener.prototype.exitHrRulesetVarType = function (ctx) {}; // Enter a parse tree produced by VtlParser#valueDomainName.\n\n\nVtlListener.prototype.enterValueDomainName = function (ctx) {}; // Exit a parse tree produced by VtlParser#valueDomainName.\n\n\nVtlListener.prototype.exitValueDomainName = function (ctx) {}; // Enter a parse tree produced by VtlParser#rulesetID.\n\n\nVtlListener.prototype.enterRulesetID = function (ctx) {}; // Exit a parse tree produced by VtlParser#rulesetID.\n\n\nVtlListener.prototype.exitRulesetID = function (ctx) {}; // Enter a parse tree produced by VtlParser#rulesetSignature.\n\n\nVtlListener.prototype.enterRulesetSignature = function (ctx) {}; // Exit a parse tree produced by VtlParser#rulesetSignature.\n\n\nVtlListener.prototype.exitRulesetSignature = function (ctx) {}; // Enter a parse tree produced by VtlParser#signature.\n\n\nVtlListener.prototype.enterSignature = function (ctx) {}; // Exit a parse tree produced by VtlParser#signature.\n\n\nVtlListener.prototype.exitSignature = function (ctx) {}; // Enter a parse tree produced by VtlParser#ruleClauseDatapoint.\n\n\nVtlListener.prototype.enterRuleClauseDatapoint = function (ctx) {}; // Exit a parse tree produced by VtlParser#ruleClauseDatapoint.\n\n\nVtlListener.prototype.exitRuleClauseDatapoint = function (ctx) {}; // Enter a parse tree produced by VtlParser#ruleItemDatapoint.\n\n\nVtlListener.prototype.enterRuleItemDatapoint = function (ctx) {}; // Exit a parse tree produced by VtlParser#ruleItemDatapoint.\n\n\nVtlListener.prototype.exitRuleItemDatapoint = function (ctx) {}; // Enter a parse tree produced by VtlParser#ruleClauseHierarchical.\n\n\nVtlListener.prototype.enterRuleClauseHierarchical = function (ctx) {}; // Exit a parse tree produced by VtlParser#ruleClauseHierarchical.\n\n\nVtlListener.prototype.exitRuleClauseHierarchical = function (ctx) {}; // Enter a parse tree produced by VtlParser#ruleItemHierarchical.\n\n\nVtlListener.prototype.enterRuleItemHierarchical = function (ctx) {}; // Exit a parse tree produced by VtlParser#ruleItemHierarchical.\n\n\nVtlListener.prototype.exitRuleItemHierarchical = function (ctx) {}; // Enter a parse tree produced by VtlParser#hierRuleSignature.\n\n\nVtlListener.prototype.enterHierRuleSignature = function (ctx) {}; // Exit a parse tree produced by VtlParser#hierRuleSignature.\n\n\nVtlListener.prototype.exitHierRuleSignature = function (ctx) {}; // Enter a parse tree produced by VtlParser#valueDomainSignature.\n\n\nVtlListener.prototype.enterValueDomainSignature = function (ctx) {}; // Exit a parse tree produced by VtlParser#valueDomainSignature.\n\n\nVtlListener.prototype.exitValueDomainSignature = function (ctx) {}; // Enter a parse tree produced by VtlParser#codeItemRelation.\n\n\nVtlListener.prototype.enterCodeItemRelation = function (ctx) {}; // Exit a parse tree produced by VtlParser#codeItemRelation.\n\n\nVtlListener.prototype.exitCodeItemRelation = function (ctx) {}; // Enter a parse tree produced by VtlParser#codeItemRelationClause.\n\n\nVtlListener.prototype.enterCodeItemRelationClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#codeItemRelationClause.\n\n\nVtlListener.prototype.exitCodeItemRelationClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#conditionConstraint.\n\n\nVtlListener.prototype.enterConditionConstraint = function (ctx) {}; // Exit a parse tree produced by VtlParser#conditionConstraint.\n\n\nVtlListener.prototype.exitConditionConstraint = function (ctx) {}; // Enter a parse tree produced by VtlParser#rangeConstraint.\n\n\nVtlListener.prototype.enterRangeConstraint = function (ctx) {}; // Exit a parse tree produced by VtlParser#rangeConstraint.\n\n\nVtlListener.prototype.exitRangeConstraint = function (ctx) {}; // Enter a parse tree produced by VtlParser#compConstraint.\n\n\nVtlListener.prototype.enterCompConstraint = function (ctx) {}; // Exit a parse tree produced by VtlParser#compConstraint.\n\n\nVtlListener.prototype.exitCompConstraint = function (ctx) {}; // Enter a parse tree produced by VtlParser#multModifier.\n\n\nVtlListener.prototype.enterMultModifier = function (ctx) {}; // Exit a parse tree produced by VtlParser#multModifier.\n\n\nVtlListener.prototype.exitMultModifier = function (ctx) {}; // Enter a parse tree produced by VtlParser#validationOutput.\n\n\nVtlListener.prototype.enterValidationOutput = function (ctx) {}; // Exit a parse tree produced by VtlParser#validationOutput.\n\n\nVtlListener.prototype.exitValidationOutput = function (ctx) {}; // Enter a parse tree produced by VtlParser#validationMode.\n\n\nVtlListener.prototype.enterValidationMode = function (ctx) {}; // Exit a parse tree produced by VtlParser#validationMode.\n\n\nVtlListener.prototype.exitValidationMode = function (ctx) {}; // Enter a parse tree produced by VtlParser#conditionClause.\n\n\nVtlListener.prototype.enterConditionClause = function (ctx) {}; // Exit a parse tree produced by VtlParser#conditionClause.\n\n\nVtlListener.prototype.exitConditionClause = function (ctx) {}; // Enter a parse tree produced by VtlParser#inputMode.\n\n\nVtlListener.prototype.enterInputMode = function (ctx) {}; // Exit a parse tree produced by VtlParser#inputMode.\n\n\nVtlListener.prototype.exitInputMode = function (ctx) {}; // Enter a parse tree produced by VtlParser#imbalanceExpr.\n\n\nVtlListener.prototype.enterImbalanceExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#imbalanceExpr.\n\n\nVtlListener.prototype.exitImbalanceExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#inputModeHierarchy.\n\n\nVtlListener.prototype.enterInputModeHierarchy = function (ctx) {}; // Exit a parse tree produced by VtlParser#inputModeHierarchy.\n\n\nVtlListener.prototype.exitInputModeHierarchy = function (ctx) {}; // Enter a parse tree produced by VtlParser#outputModeHierarchy.\n\n\nVtlListener.prototype.enterOutputModeHierarchy = function (ctx) {}; // Exit a parse tree produced by VtlParser#outputModeHierarchy.\n\n\nVtlListener.prototype.exitOutputModeHierarchy = function (ctx) {}; // Enter a parse tree produced by VtlParser#alias.\n\n\nVtlListener.prototype.enterAlias = function (ctx) {}; // Exit a parse tree produced by VtlParser#alias.\n\n\nVtlListener.prototype.exitAlias = function (ctx) {}; // Enter a parse tree produced by VtlParser#varID.\n\n\nVtlListener.prototype.enterVarID = function (ctx) {}; // Exit a parse tree produced by VtlParser#varID.\n\n\nVtlListener.prototype.exitVarID = function (ctx) {}; // Enter a parse tree produced by VtlParser#componentID.\n\n\nVtlListener.prototype.enterComponentID = function (ctx) {}; // Exit a parse tree produced by VtlParser#componentID.\n\n\nVtlListener.prototype.exitComponentID = function (ctx) {}; // Enter a parse tree produced by VtlParser#lists.\n\n\nVtlListener.prototype.enterLists = function (ctx) {}; // Exit a parse tree produced by VtlParser#lists.\n\n\nVtlListener.prototype.exitLists = function (ctx) {}; // Enter a parse tree produced by VtlParser#erCode.\n\n\nVtlListener.prototype.enterErCode = function (ctx) {}; // Exit a parse tree produced by VtlParser#erCode.\n\n\nVtlListener.prototype.exitErCode = function (ctx) {}; // Enter a parse tree produced by VtlParser#erLevel.\n\n\nVtlListener.prototype.enterErLevel = function (ctx) {}; // Exit a parse tree produced by VtlParser#erLevel.\n\n\nVtlListener.prototype.exitErLevel = function (ctx) {}; // Enter a parse tree produced by VtlParser#comparisonOperand.\n\n\nVtlListener.prototype.enterComparisonOperand = function (ctx) {}; // Exit a parse tree produced by VtlParser#comparisonOperand.\n\n\nVtlListener.prototype.exitComparisonOperand = function (ctx) {}; // Enter a parse tree produced by VtlParser#optionalExpr.\n\n\nVtlListener.prototype.enterOptionalExpr = function (ctx) {}; // Exit a parse tree produced by VtlParser#optionalExpr.\n\n\nVtlListener.prototype.exitOptionalExpr = function (ctx) {}; // Enter a parse tree produced by VtlParser#componentRole.\n\n\nVtlListener.prototype.enterComponentRole = function (ctx) {}; // Exit a parse tree produced by VtlParser#componentRole.\n\n\nVtlListener.prototype.exitComponentRole = function (ctx) {}; // Enter a parse tree produced by VtlParser#viralAttribute.\n\n\nVtlListener.prototype.enterViralAttribute = function (ctx) {}; // Exit a parse tree produced by VtlParser#viralAttribute.\n\n\nVtlListener.prototype.exitViralAttribute = function (ctx) {}; // Enter a parse tree produced by VtlParser#valueDomainID.\n\n\nVtlListener.prototype.enterValueDomainID = function (ctx) {}; // Exit a parse tree produced by VtlParser#valueDomainID.\n\n\nVtlListener.prototype.exitValueDomainID = function (ctx) {}; // Enter a parse tree produced by VtlParser#operatorID.\n\n\nVtlListener.prototype.enterOperatorID = function (ctx) {}; // Exit a parse tree produced by VtlParser#operatorID.\n\n\nVtlListener.prototype.exitOperatorID = function (ctx) {}; // Enter a parse tree produced by VtlParser#routineName.\n\n\nVtlListener.prototype.enterRoutineName = function (ctx) {}; // Exit a parse tree produced by VtlParser#routineName.\n\n\nVtlListener.prototype.exitRoutineName = function (ctx) {}; // Enter a parse tree produced by VtlParser#groupKeyword.\n\n\nVtlListener.prototype.enterGroupKeyword = function (ctx) {}; // Exit a parse tree produced by VtlParser#groupKeyword.\n\n\nVtlListener.prototype.exitGroupKeyword = function (ctx) {}; // Enter a parse tree produced by VtlParser#constant.\n\n\nVtlListener.prototype.enterConstant = function (ctx) {}; // Exit a parse tree produced by VtlParser#constant.\n\n\nVtlListener.prototype.exitConstant = function (ctx) {}; // Enter a parse tree produced by VtlParser#basicScalarType.\n\n\nVtlListener.prototype.enterBasicScalarType = function (ctx) {}; // Exit a parse tree produced by VtlParser#basicScalarType.\n\n\nVtlListener.prototype.exitBasicScalarType = function (ctx) {}; // Enter a parse tree produced by VtlParser#retainType.\n\n\nVtlListener.prototype.enterRetainType = function (ctx) {}; // Exit a parse tree produced by VtlParser#retainType.\n\n\nVtlListener.prototype.exitRetainType = function (ctx) {};\n\nexports.VtlListener = VtlListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlListener.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlParser.js":
/*!***************************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlParser.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Generated from vtl-sources/Vtl-2.0-Insee/Vtl.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4=__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\");var VtlListener=__webpack_require__(/*! ./VtlListener */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlListener.js\").VtlListener;var VtlVisitor=__webpack_require__(/*! ./VtlVisitor */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlVisitor.js\").VtlVisitor;var grammarFileName=\"Vtl.g4\";var serializedATN=[\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\\u5964\",\"\\x03\\xFE\\u070E\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\",\"\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07\",\"\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\\f\\t\\f\",\"\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\",\"\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\\x04\\x14\",\"\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\",\"\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\",\"\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\",\"\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\\t#\\x04\",\"$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04\",\"+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x04\",\"2\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x04\",\"9\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04?\\t?\\x04\",\"@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04F\\tF\\x04\",\"G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04\",\"N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04\",\"U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\",\"\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t`\\x04a\\ta\\x04b\\tb\\x03\",\"\\x02\\x03\\x02\\x03\\x02\\x07\\x02\\xC8\\n\\x02\\f\\x02\\x0E\",\"\\x02\\xCB\\x0B\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\",\"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\",\"\\x03\\x03\\x05\\x03\\xD8\\n\\x03\\x03\\x04\\x03\\x04\\x03\",\"\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\",\"\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\",\"\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x05\\x04\\xED\",\"\\n\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x05\\x04\\u010E\\n\\x04\\x07\\x04\\u0110\",\"\\n\\x04\\f\\x04\\x0E\\x04\\u0113\\x0B\\x04\\x03\\x05\\x03\\x05\",\"\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\",\"\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05\\u0121\\n\",\"\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\",\"\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x05\\x06\\u012D\",\"\\n\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x07\\x07\",\"\\u0133\\n\\x07\\f\\x07\\x0E\\x07\\u0136\\x0B\\x07\\x03\\b\\x03\\b\",\"\\x03\\b\\x03\\b\\x05\\b\\u013C\\n\\b\\x05\\b\\u013E\\n\\b\\x03\\t\\x03\\t\",\"\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x07\\n\\u0147\\n\\n\\f\\n\\x0E\",\"\\n\\u014A\\x0B\\n\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x07\",\"\\x0B\\u0150\\n\\x0B\\f\\x0B\\x0E\\x0B\\u0153\\x0B\\x0B\\x03\\f\\x03\",\"\\f\\x03\\f\\x03\\f\\x07\\f\\u0159\\n\\f\\f\\f\\x0E\\f\\u015C\\x0B\\f\\x03\",\"\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\",\"\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x07\\x0E\",\"\\u016B\\n\\x0E\\f\\x0E\\x0E\\x0E\\u016E\\x0B\\x0E\\x03\\x0F\\x03\",\"\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\",\"\\x10\\x03\\x10\\x07\\x10\\u0179\\n\\x10\\f\\x10\\x0E\\x10\\u017C\",\"\\x0B\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\",\"\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\",\"\\x03\\x11\\x05\\x11\\u018A\\n\\x11\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x07\\x12\\u0193\",\"\\n\\x12\\f\\x12\\x0E\\x12\\u0196\\x0B\\x12\\x05\\x12\\u0198\\n\\x12\",\"\\x03\\x12\\x03\\x12\\x03\\x12\\x05\\x12\\u019D\\n\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\",\"\\x12\\x05\\x12\\u01BE\\n\\x12\\x03\\x13\\x03\\x13\\x03\\x13\",\"\\x03\\x13\\x03\\x13\\x07\\x13\\u01C5\\n\\x13\\f\\x13\\x0E\\x13\",\"\\u01C8\\x0B\\x13\\x05\\x13\\u01CA\\n\\x13\\x03\\x13\\x03\\x13\",\"\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\",\"\\x05\\x13\\u01D4\\n\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x05\",\"\\x13\\u01D9\\n\\x13\\x07\\x13\\u01DB\\n\\x13\\f\\x13\\x0E\\x13\\u01DE\",\"\\x0B\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x05\\x13\\u01E3\\n\",\"\\x13\\x03\\x13\\x03\\x13\\x05\\x13\\u01E7\\n\\x13\\x03\\x13\",\"\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\",\"\\x03\\x13\\x05\\x13\\u01F1\\n\\x13\\x03\\x13\\x03\\x13\\x05\",\"\\x13\\u01F5\\n\\x13\\x03\\x13\\x03\\x13\\x05\\x13\\u01F9\\n\\x13\",\"\\x03\\x14\\x03\\x14\\x03\\x14\\x05\\x14\\u01FE\\n\\x14\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x07\",\"\\x15\\u021E\\n\\x15\\f\\x15\\x0E\\x15\\u0221\\x0B\\x15\\x03\\x15\",\"\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\",\"\\x03\\x15\\x03\\x15\\x05\\x15\\u022C\\n\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x05\\x15\\u0237\\n\\x15\\x03\\x15\\x03\\x15\",\"\\x05\\x15\\u023B\\n\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\",\"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x05\\x15\\u0244\\n\\x15\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x05\\x16\\u0252\\n\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\",\"\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x05\\x16\\u025B\\n\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\",\"\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x05\\x16\\u028B\\n\",\"\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\",\"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\",\"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\",\"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\",\"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x05\\x17\\u02A9\",\"\\n\\x17\\x03\\x17\\x03\\x17\\x05\\x17\\u02AD\\n\\x17\\x03\\x18\",\"\\x03\\x18\\x03\\x18\\x05\\x18\\u02B2\\n\\x18\\x03\\x18\\x03\",\"\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x05\\x18\\u02BA\",\"\\n\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\",\"\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\",\"\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\",\"\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\",\"\\x03\\x18\\x05\\x18\\u02D4\\n\\x18\\x03\\x18\\x03\\x18\\x03\",\"\\x18\\x05\\x18\\u02D9\\n\\x18\\x05\\x18\\u02DB\\n\\x18\\x03\\x18\",\"\\x03\\x18\\x05\\x18\\u02DF\\n\\x18\\x03\\x18\\x03\\x18\\x03\",\"\\x18\\x03\\x18\\x05\\x18\\u02E5\\n\\x18\\x03\\x19\\x03\\x19\",\"\\x03\\x19\\x03\\x19\\x03\\x19\\x06\\x19\\u02EC\\n\\x19\\r\\x19\",\"\\x0E\\x19\\u02ED\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\",\"\\x19\\x03\\x19\\x03\\x19\\x06\\x19\\u02F7\\n\\x19\\r\\x19\\x0E\",\"\\x19\\u02F8\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\",\"\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\",\"\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x05\\x19\",\"\\u030B\\n\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\",\"\\x1A\\x03\\x1A\\x05\\x1A\\u0313\\n\\x1A\\x03\\x1A\\x03\\x1A\",\"\\x05\\x1A\\u0317\\n\\x1A\\x03\\x1A\\x05\\x1A\\u031A\\n\\x1A\\x03\",\"\\x1A\\x05\\x1A\\u031D\\n\\x1A\\x03\\x1A\\x05\\x1A\\u0320\\n\\x1A\",\"\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\",\"\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x07\\x1B\",\"\\u032D\\n\\x1B\\f\\x1B\\x0E\\x1B\\u0330\\x0B\\x1B\\x05\\x1B\\u0332\",\"\\n\\x1B\\x03\\x1B\\x05\\x1B\\u0335\\n\\x1B\\x03\\x1B\\x03\\x1B\",\"\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\",\"\\x05\\x1B\\u033F\\n\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u0343\",\"\\n\\x1B\\x03\\x1B\\x05\\x1B\\u0346\\n\\x1B\\x03\\x1B\\x05\\x1B\",\"\\u0349\\n\\x1B\\x03\\x1B\\x05\\x1B\\u034C\\n\\x1B\\x03\\x1B\\x03\",\"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u0354\",\"\\n\\x1B\\x03\\x1B\\x05\\x1B\\u0357\\n\\x1B\\x03\\x1B\\x05\\x1B\",\"\\u035A\\n\\x1B\\x03\\x1B\\x05\\x1B\\u035D\\n\\x1B\\x03\\x1B\\x03\",\"\\x1B\\x05\\x1B\\u0361\\n\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\",\"\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\",\"\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\",\"\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x05\\x1D\",\"\\u0377\\n\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1D\\x03\\x1D\\x05\\x1D\\u039D\\n\\x1D\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03A4\\n\\x1E\\x05\",\"\\x1E\\u03A6\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03AF\\n\\x1E\\x05\",\"\\x1E\\u03B1\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03BA\\n\\x1E\\x05\",\"\\x1E\\u03BC\\n\\x1E\\x05\\x1E\\u03BE\\n\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03C6\\n\",\"\\x1E\\x05\\x1E\\u03C8\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03D1\\n\",\"\\x1E\\x05\\x1E\\u03D3\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03DC\\n\",\"\\x1E\\x05\\x1E\\u03DE\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03E7\\n\",\"\\x1E\\x05\\x1E\\u03E9\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03F2\\n\",\"\\x1E\\x05\\x1E\\u03F4\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u03FD\\n\",\"\\x1E\\x05\\x1E\\u03FF\\n\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\",\"\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u0408\\n\",\"\\x1E\\x05\\x1E\\u040A\\n\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\",\"\\u040E\\n\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x05\\x1F\\u0416\\n\\x1F\\x03\\x1F\\x05\\x1F\",\"\\u0419\\n\\x1F\\x03\\x1F\\x05\\x1F\\u041C\\n\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x05\\x1F\\u0427\\n\\x1F\\x03\\x1F\\x05\\x1F\",\"\\u042A\\n\\x1F\\x03\\x1F\\x05\\x1F\\u042D\\n\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u0435\",\"\\n\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u043A\\n\\x1F\",\"\\x03\\x1F\\x05\\x1F\\u043D\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0440\",\"\\n\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u044A\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u044D\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0450\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u045B\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u045E\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0461\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u046C\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u046F\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0472\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u047D\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u0480\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0483\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u048E\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u0491\\n\\x1F\\x03\\x1F\\x05\\x1F\\u0494\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u049F\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u04A2\\n\\x1F\\x03\\x1F\\x05\\x1F\\u04A5\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u04B0\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u04B3\\n\\x1F\\x03\\x1F\\x05\\x1F\\u04B6\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u04C1\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u04C4\\n\\x1F\\x03\\x1F\\x05\\x1F\\u04C7\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u04D2\\n\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u04D5\\n\\x1F\\x03\\x1F\\x05\\x1F\\u04D8\\n\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u04E3\\n\\x1F\\x05\",\"\\x1F\\u04E5\\n\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\",\"\\u04EA\\n\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x05\\x1F\\u04F7\\n\\x1F\\x05\\x1F\\u04F9\\n\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u04FE\\n\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\",\"\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u050A\\n\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x05\\x1F\\u051A\\n\\x1F\\x03 \\x03 \\x03 \\x03 \\x03\",\"!\\x03!\\x03!\\x03!\\x03!\\x05!\\u0525\\n!\\x03\\\"\\x03\\\"\\x03\",\"\\\"\\x07\\\"\\u052A\\n\\\"\\f\\\"\\x0E\\\"\\u052D\\x0B\\\"\\x03#\\x05#\\u0530\\n\",\"#\\x03#\\x03#\\x03#\\x03#\\x03$\\x05$\\u0537\\n$\\x03$\\x03$\\x03\",\"$\\x03$\\x03%\\x03%\\x03%\\x03%\\x03&\\x03&\\x03&\\x07&\\u0544\",\"\\n&\\f&\\x0E&\\u0547\\x0B&\\x03'\\x03'\\x03'\\x07'\\u054C\\n'\",\"\\f'\\x0E'\\u054F\\x0B'\\x03'\\x03'\\x03'\\x03'\\x07'\\u0555\",\"\\n'\\f'\\x0E'\\u0558\\x0B'\\x05'\\u055A\\n'\\x03(\\x03(\\x03\",\"(\\x05(\\u055F\\n(\\x03)\\x05)\\u0562\\n)\\x03)\\x03)\\x03)\\x05\",\")\\u0567\\n)\\x03)\\x03)\\x05)\\u056B\\n)\\x03)\\x05)\\u056E\\n)\\x03\",\"*\\x03*\\x03*\\x03+\\x03+\\x03+\\x03+\\x03+\\x07+\\u0578\\n+\\f\",\"+\\x0E+\\u057B\\x0B+\\x03,\\x03,\\x03,\\x03,\\x03,\\x07,\\u0582\",\"\\n,\\f,\\x0E,\\u0585\\x0B,\\x03-\\x03-\\x05-\\u0589\\n-\\x03.\\x03\",\".\\x03.\\x05.\\u058E\\n.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03/\\x03\",\"/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x05\",\"/\\u05A0\\n/\\x030\\x030\\x030\\x030\\x070\\u05A6\\n0\\f0\\x0E0\\u05A9\",\"\\x0B0\\x030\\x030\\x030\\x050\\u05AE\\n0\\x031\\x031\\x031\\x03\",\"2\\x032\\x032\\x032\\x052\\u05B7\\n2\\x033\\x033\\x033\\x053\\u05BC\",\"\\n3\\x034\\x034\\x034\\x034\\x034\\x054\\u05C3\\n4\\x035\\x03\",\"5\\x035\\x055\\u05C8\\n5\\x036\\x036\\x056\\u05CC\\n6\\x036\\x05\",\"6\\u05CF\\n6\\x036\\x056\\u05D2\\n6\\x036\\x056\\u05D5\\n6\\x037\\x03\",\"7\\x037\\x037\\x037\\x057\\u05DC\\n7\\x038\\x038\\x038\\x038\\x03\",\"8\\x078\\u05E3\\n8\\f8\\x0E8\\u05E6\\x0B8\\x038\\x038\\x058\\u05EA\",\"\\n8\\x039\\x039\\x039\\x039\\x039\\x059\\u05F1\\n9\\x03:\\x03\",\":\\x03:\\x03:\\x03:\\x03:\\x07:\\u05F9\\n:\\f:\\x0E:\\u05FC\\x0B\",\":\\x03:\\x03:\\x05:\\u0600\\n:\\x03:\\x03:\\x03:\\x03:\\x03:\\x07\",\":\\u0607\\n:\\f:\\x0E:\\u060A\\x0B:\\x03:\\x03:\\x05:\\u060E\\n:\\x05\",\":\\u0610\\n:\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x07\",\";\\u061A\\n;\\f;\\x0E;\\u061D\\x0B;\\x03;\\x03;\\x05;\\u0621\\n;\\x03\",\";\\x05;\\u0624\\n;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x07\",\";\\u062D\\n;\\f;\\x0E;\\u0630\\x0B;\\x03;\\x03;\\x05;\\u0634\\n;\\x03\",\";\\x03;\\x05;\\u0638\\n;\\x05;\\u063A\\n;\\x03<\\x03<\\x03=\\x03\",\"=\\x03>\\x03>\\x03>\\x03>\\x07>\\u0644\\n>\\f>\\x0E>\\u0647\\x0B\",\">\\x03?\\x03?\\x03?\\x05?\\u064C\\n?\\x03@\\x03@\\x03@\\x07@\\u0651\",\"\\n@\\f@\\x0E@\\u0654\\x0B@\\x03A\\x03A\\x05A\\u0658\\nA\\x03A\\x03\",\"A\\x03A\\x03A\\x05A\\u065E\\nA\\x03A\\x03A\\x05A\\u0662\\nA\\x03\",\"A\\x05A\\u0665\\nA\\x03B\\x03B\\x03B\\x07B\\u066A\\nB\\fB\\x0EB\\u066D\",\"\\x0BB\\x03C\\x03C\\x05C\\u0671\\nC\\x03C\\x03C\\x05C\\u0675\\nC\",\"\\x03C\\x05C\\u0678\\nC\\x03D\\x03D\\x03D\\x05D\\u067D\\nD\\x03D\",\"\\x03D\\x03D\\x03E\\x03E\\x03E\\x07E\\u0685\\nE\\fE\\x0EE\\u0688\",\"\\x0BE\\x03F\\x03F\\x03F\\x03F\\x05F\\u068E\\nF\\x03F\\x03F\\x05\",\"F\\u0692\\nF\\x03F\\x03F\\x07F\\u0696\\nF\\fF\\x0EF\\u0699\\x0BF\\x03\",\"G\\x05G\\u069C\\nG\\x03G\\x03G\\x03G\\x03G\\x03G\\x05G\\u06A3\\n\",\"G\\x03H\\x03H\\x03H\\x03H\\x03H\\x03H\\x03H\\x03H\\x07H\\u06AD\",\"\\nH\\fH\\x0EH\\u06B0\\x0BH\\x03H\\x03H\\x05H\\u06B4\\nH\\x03I\\x03\",\"I\\x03I\\x05I\\u06B9\\nI\\x03J\\x03J\\x05J\\u06BD\\nJ\\x03K\\x03\",\"K\\x03L\\x03L\\x03M\\x03M\\x03M\\x03M\\x07M\\u06C7\\nM\\fM\\x0E\",\"M\\u06CA\\x0BM\\x03N\\x03N\\x03O\\x03O\\x03O\\x03P\\x03P\\x03\",\"Q\\x03Q\\x03R\\x03R\\x03S\\x03S\\x03T\\x03T\\x03U\\x03U\\x03\",\"U\\x03U\\x07U\\u06DF\\nU\\fU\\x0EU\\u06E2\\x0BU\\x03U\\x03U\\x03\",\"V\\x03V\\x03V\\x03W\\x03W\\x03W\\x03X\\x03X\\x03Y\\x03Y\\x05\",\"Y\\u06F0\\nY\\x03Z\\x03Z\\x03Z\\x03Z\\x03Z\\x05Z\\u06F7\\nZ\\x03\",\"[\\x03[\\x03[\\x03\\\\\\x03\\\\\\x03]\\x03]\\x03^\\x03^\\x03_\\x03\",\"_\\x03_\\x03_\\x05_\\u0706\\n_\\x03`\\x03`\\x03a\\x03a\\x03b\\x03\",\"b\\x03b\\x02\\x03\\x06c\\x02\\x04\\x06\\b\\n\\f\\x0E\\x10\\x12\",\"\\x14\\x16\\x18\\x1A\\x1C\\x1E \\\"$&(*,.02468:<>@BDFHJLNPRTVXZ\",\"\\\\^`bdfhjlnprtvxz|~\\x80\\x82\\x84\\x86\\x88\\x8A\\x8C\\x8E\",\"\\x90\\x92\\x94\\x96\\x98\\x9A\\x9C\\x9E\\xA0\\xA2\\xA4\\xA6\",\"\\xA8\\xAA\\xAC\\xAE\\xB0\\xB2\\xB4\\xB6\\xB8\\xBA\\xBC\\xBE\",\"\\xC0\\xC2\\x02\\x18\\x03\\x02\\n\\x0B\\x03\\x02\\f\\r\\x03\\x02\",\"'(\\x03\\x02+,\\x03\\x02\\xB6\\xB7\\x03\\x02\\xB8\\xB9\\x04\",\"\\x02>>\\xC5\\xC5\\x04\\x02ii\\xEB\\xEB\\x03\\x02HI\\x04\\x02\",\">>jj\\x03\\x02DE\\x03\\x02kl\\x04\\x02\\n\\n\\f\\f\\x05\\x02>>j\",\"j\\xDC\\xDC\\x03\\x02\\xD5\\xDA\\x04\\x02oo\\xD0\\xD0\\x05\",\"\\x02oovv\\xCF\\xCF\\x04\\x02>>\\xD4\\xD4\\x03\\x02\\x10\\x15\",\"\\x04\\x02\\xE5\\xE5\\xE8\\xEB\\x06\\x02\\x9E\\xA3\\xC6\\xC6\",\"\\xDD\\xDD\\xF8\\xF8\\x04\\x02>>\\xE9\\xE9\\x02\\u07E9\\x02\",\"\\xC9\\x03\\x02\\x02\\x02\\x04\\xD7\\x03\\x02\\x02\\x02\\x06\",\"\\xEC\\x03\\x02\\x02\\x02\\b\\u0120\\x03\\x02\\x02\\x02\\n\\u012C\",\"\\x03\\x02\\x02\\x02\\f\\u012E\\x03\\x02\\x02\\x02\\x0E\\u0137\",\"\\x03\\x02\\x02\\x02\\x10\\u013F\\x03\\x02\\x02\\x02\\x12\\u0142\",\"\\x03\\x02\\x02\\x02\\x14\\u014B\\x03\\x02\\x02\\x02\\x16\\u0154\",\"\\x03\\x02\\x02\\x02\\x18\\u015D\\x03\\x02\\x02\\x02\\x1A\\u0162\",\"\\x03\\x02\\x02\\x02\\x1C\\u016F\\x03\\x02\\x02\\x02\\x1E\\u0174\",\"\\x03\\x02\\x02\\x02 \\u0189\\x03\\x02\\x02\\x02\\\"\\u01BD\\x03\",\"\\x02\\x02\\x02$\\u01F8\\x03\\x02\\x02\\x02&\\u01FD\\x03\\x02\",\"\\x02\\x02(\\u0243\\x03\\x02\\x02\\x02*\\u028A\\x03\\x02\\x02\",\"\\x02,\\u02AC\\x03\\x02\\x02\\x02.\\u02E4\\x03\\x02\\x02\\x02\",\"0\\u030A\\x03\\x02\\x02\\x022\\u030C\\x03\\x02\\x02\\x024\\u0360\",\"\\x03\\x02\\x02\\x026\\u0362\\x03\\x02\\x02\\x028\\u039C\\x03\",\"\\x02\\x02\\x02:\\u040D\\x03\\x02\\x02\\x02<\\u0519\\x03\\x02\",\"\\x02\\x02>\\u051B\\x03\\x02\\x02\\x02@\\u0524\\x03\\x02\\x02\",\"\\x02B\\u0526\\x03\\x02\\x02\\x02D\\u052F\\x03\\x02\\x02\\x02\",\"F\\u0536\\x03\\x02\\x02\\x02H\\u053C\\x03\\x02\\x02\\x02J\\u0540\",\"\\x03\\x02\\x02\\x02L\\u0548\\x03\\x02\\x02\\x02N\\u055B\\x03\",\"\\x02\\x02\\x02P\\u0561\\x03\\x02\\x02\\x02R\\u056F\\x03\\x02\",\"\\x02\\x02T\\u0572\\x03\\x02\\x02\\x02V\\u057C\\x03\\x02\\x02\",\"\\x02X\\u0586\\x03\\x02\\x02\\x02Z\\u058D\\x03\\x02\\x02\\x02\",\"\\\\\\u059F\\x03\\x02\\x02\\x02^\\u05AD\\x03\\x02\\x02\\x02`\\u05AF\",\"\\x03\\x02\\x02\\x02b\\u05B2\\x03\\x02\\x02\\x02d\\u05BB\\x03\",\"\\x02\\x02\\x02f\\u05C2\\x03\\x02\\x02\\x02h\\u05C7\\x03\\x02\",\"\\x02\\x02j\\u05CB\\x03\\x02\\x02\\x02l\\u05D6\\x03\\x02\\x02\",\"\\x02n\\u05DD\\x03\\x02\\x02\\x02p\\u05EB\\x03\\x02\\x02\\x02\",\"r\\u060F\\x03\\x02\\x02\\x02t\\u0639\\x03\\x02\\x02\\x02v\\u063B\",\"\\x03\\x02\\x02\\x02x\\u063D\\x03\\x02\\x02\\x02z\\u063F\\x03\",\"\\x02\\x02\\x02|\\u0648\\x03\\x02\\x02\\x02~\\u064D\\x03\\x02\",\"\\x02\\x02\\x80\\u0657\\x03\\x02\\x02\\x02\\x82\\u0666\\x03\\x02\",\"\\x02\\x02\\x84\\u0670\\x03\\x02\\x02\\x02\\x86\\u0679\\x03\\x02\",\"\\x02\\x02\\x88\\u0681\\x03\\x02\\x02\\x02\\x8A\\u068D\\x03\\x02\",\"\\x02\\x02\\x8C\\u069B\\x03\\x02\\x02\\x02\\x8E\\u06B3\\x03\\x02\",\"\\x02\\x02\\x90\\u06B5\\x03\\x02\\x02\\x02\\x92\\u06BA\\x03\\x02\",\"\\x02\\x02\\x94\\u06BE\\x03\\x02\\x02\\x02\\x96\\u06C0\\x03\\x02\",\"\\x02\\x02\\x98\\u06C2\\x03\\x02\\x02\\x02\\x9A\\u06CB\\x03\\x02\",\"\\x02\\x02\\x9C\\u06CD\\x03\\x02\\x02\\x02\\x9E\\u06D0\\x03\\x02\",\"\\x02\\x02\\xA0\\u06D2\\x03\\x02\\x02\\x02\\xA2\\u06D4\\x03\\x02\",\"\\x02\\x02\\xA4\\u06D6\\x03\\x02\\x02\\x02\\xA6\\u06D8\\x03\\x02\",\"\\x02\\x02\\xA8\\u06DA\\x03\\x02\\x02\\x02\\xAA\\u06E5\\x03\\x02\",\"\\x02\\x02\\xAC\\u06E8\\x03\\x02\\x02\\x02\\xAE\\u06EB\\x03\\x02\",\"\\x02\\x02\\xB0\\u06EF\\x03\\x02\\x02\\x02\\xB2\\u06F6\\x03\\x02\",\"\\x02\\x02\\xB4\\u06F8\\x03\\x02\\x02\\x02\\xB6\\u06FB\\x03\\x02\",\"\\x02\\x02\\xB8\\u06FD\\x03\\x02\\x02\\x02\\xBA\\u06FF\\x03\\x02\",\"\\x02\\x02\\xBC\\u0705\\x03\\x02\\x02\\x02\\xBE\\u0707\\x03\\x02\",\"\\x02\\x02\\xC0\\u0709\\x03\\x02\\x02\\x02\\xC2\\u070B\\x03\\x02\",\"\\x02\\x02\\xC4\\xC5\\x05\\x04\\x03\\x02\\xC5\\xC6\\x07\\xFA\",\"\\x02\\x02\\xC6\\xC8\\x03\\x02\\x02\\x02\\xC7\\xC4\\x03\\x02\",\"\\x02\\x02\\xC8\\xCB\\x03\\x02\\x02\\x02\\xC9\\xC7\\x03\\x02\",\"\\x02\\x02\\xC9\\xCA\\x03\\x02\\x02\\x02\\xCA\\xCC\\x03\\x02\",\"\\x02\\x02\\xCB\\xC9\\x03\\x02\\x02\\x02\\xCC\\xCD\\x07\\x02\",\"\\x02\\x03\\xCD\\x03\\x03\\x02\\x02\\x02\\xCE\\xCF\\x05\\xA4\",\"S\\x02\\xCF\\xD0\\x07\\x16\\x02\\x02\\xD0\\xD1\\x05\\x06\",\"\\x04\\x02\\xD1\\xD8\\x03\\x02\\x02\\x02\\xD2\\xD3\\x05\\xA4\",\"S\\x02\\xD3\\xD4\\x07r\\x02\\x02\\xD4\\xD5\\x05\\x06\\x04\",\"\\x02\\xD5\\xD8\\x03\\x02\\x02\\x02\\xD6\\xD8\\x05\\\"\\x12\",\"\\x02\\xD7\\xCE\\x03\\x02\\x02\\x02\\xD7\\xD2\\x03\\x02\\x02\",\"\\x02\\xD7\\xD6\\x03\\x02\\x02\\x02\\xD8\\x05\\x03\\x02\\x02\",\"\\x02\\xD9\\xDA\\b\\x04\\x01\\x02\\xDA\\xDB\\x07\\x04\\x02\",\"\\x02\\xDB\\xDC\\x05\\x06\\x04\\x02\\xDC\\xDD\\x07\\x05\\x02\",\"\\x02\\xDD\\xED\\x03\\x02\\x02\\x02\\xDE\\xED\\x05\\b\\x05\",\"\\x02\\xDF\\xE0\\t\\x02\\x02\\x02\\xE0\\xED\\x05\\x06\\x04\",\"\\x0E\\xE1\\xE2\\x07)\\x02\\x02\\xE2\\xED\\x05\\x06\\x04\",\"\\r\\xE3\\xE4\\x07\\x19\\x02\\x02\\xE4\\xE5\\x05\\x06\\x04\",\"\\x02\\xE5\\xE6\\x07\\x1A\\x02\\x02\\xE6\\xE7\\x05\\x06\\x04\",\"\\x02\\xE7\\xE8\\x07\\x1B\\x02\\x02\\xE8\\xE9\\x05\\x06\\x04\",\"\\x05\\xE9\\xED\\x03\\x02\\x02\\x02\\xEA\\xED\\x05\\xA4S\",\"\\x02\\xEB\\xED\\x05\\xBE`\\x02\\xEC\\xD9\\x03\\x02\\x02\",\"\\x02\\xEC\\xDE\\x03\\x02\\x02\\x02\\xEC\\xDF\\x03\\x02\\x02\",\"\\x02\\xEC\\xE1\\x03\\x02\\x02\\x02\\xEC\\xE3\\x03\\x02\\x02\",\"\\x02\\xEC\\xEA\\x03\\x02\\x02\\x02\\xEC\\xEB\\x03\\x02\\x02\",\"\\x02\\xED\\u0111\\x03\\x02\\x02\\x02\\xEE\\xEF\\f\\f\\x02\\x02\",\"\\xEF\\xF0\\t\\x03\\x02\\x02\\xF0\\u0110\\x05\\x06\\x04\\r\\xF1\",\"\\xF2\\f\\x0B\\x02\\x02\\xF2\\xF3\\t\\x02\\x02\\x02\\xF3\\u0110\",\"\\x05\\x06\\x04\\f\\xF4\\xF5\\f\\n\\x02\\x02\\xF5\\xF6\\x07T\",\"\\x02\\x02\\xF6\\u0110\\x05\\x06\\x04\\x0B\\xF7\\xF8\\f\\t\\x02\",\"\\x02\\xF8\\xF9\\x05\\xAEX\\x02\\xF9\\xFA\\x05\\x06\\x04\",\"\\n\\xFA\\u0110\\x03\\x02\\x02\\x02\\xFB\\xFC\\f\\x07\\x02\\x02\",\"\\xFC\\xFD\\x07&\\x02\\x02\\xFD\\u0110\\x05\\x06\\x04\\b\\xFE\",\"\\xFF\\f\\x06\\x02\\x02\\xFF\\u0100\\t\\x04\\x02\\x02\\u0100\\u0110\",\"\\x05\\x06\\x04\\x07\\u0101\\u0102\\f\\x11\\x02\\x02\\u0102\\u0103\",\"\\x07\\x17\\x02\\x02\\u0103\\u0110\\x05\\xA6T\\x02\\u0104\\u0105\",\"\\f\\x10\\x02\\x02\\u0105\\u0106\\x07\\b\\x02\\x02\\u0106\\u0107\\x05\",\"\\n\\x06\\x02\\u0107\\u0108\\x07\\t\\x02\\x02\\u0108\\u0110\\x03\\x02\",\"\\x02\\x02\\u0109\\u010A\\f\\b\\x02\\x02\\u010A\\u010D\\t\\x05\\x02\\x02\",\"\\u010B\\u010E\\x05\\xA8U\\x02\\u010C\\u010E\\x05\\xB6\\\\\\x02\\u010D\",\"\\u010B\\x03\\x02\\x02\\x02\\u010D\\u010C\\x03\\x02\\x02\\x02\\u010E\",\"\\u0110\\x03\\x02\\x02\\x02\\u010F\\xEE\\x03\\x02\\x02\\x02\\u010F\",\"\\xF1\\x03\\x02\\x02\\x02\\u010F\\xF4\\x03\\x02\\x02\\x02\\u010F\",\"\\xF7\\x03\\x02\\x02\\x02\\u010F\\xFB\\x03\\x02\\x02\\x02\\u010F\",\"\\xFE\\x03\\x02\\x02\\x02\\u010F\\u0101\\x03\\x02\\x02\\x02\\u010F\",\"\\u0104\\x03\\x02\\x02\\x02\\u010F\\u0109\\x03\\x02\\x02\\x02\\u0110\",\"\\u0113\\x03\\x02\\x02\\x02\\u0111\\u010F\\x03\\x02\\x02\\x02\\u0111\",\"\\u0112\\x03\\x02\\x02\\x02\\u0112\\x07\\x03\\x02\\x02\\x02\\u0113\",\"\\u0111\\x03\\x02\\x02\\x02\\u0114\\u0121\\x05 \\x11\\x02\\u0115\",\"\\u0121\\x05$\\x13\\x02\\u0116\\u0121\\x05(\\x15\\x02\\u0117\\u0121\",\"\\x05*\\x16\\x02\\u0118\\u0121\\x05,\\x17\\x02\\u0119\\u0121\\x05\",\".\\x18\\x02\\u011A\\u0121\\x050\\x19\\x02\\u011B\\u0121\\x052\\x1A\",\"\\x02\\u011C\\u0121\\x054\\x1B\\x02\\u011D\\u0121\\x056\\x1C\\x02\",\"\\u011E\\u0121\\x05:\\x1E\\x02\\u011F\\u0121\\x05<\\x1F\\x02\\u0120\",\"\\u0114\\x03\\x02\\x02\\x02\\u0120\\u0115\\x03\\x02\\x02\\x02\\u0120\",\"\\u0116\\x03\\x02\\x02\\x02\\u0120\\u0117\\x03\\x02\\x02\\x02\\u0120\",\"\\u0118\\x03\\x02\\x02\\x02\\u0120\\u0119\\x03\\x02\\x02\\x02\\u0120\",\"\\u011A\\x03\\x02\\x02\\x02\\u0120\\u011B\\x03\\x02\\x02\\x02\\u0120\",\"\\u011C\\x03\\x02\\x02\\x02\\u0120\\u011D\\x03\\x02\\x02\\x02\\u0120\",\"\\u011E\\x03\\x02\\x02\\x02\\u0120\\u011F\\x03\\x02\\x02\\x02\\u0121\",\"\\t\\x03\\x02\\x02\\x02\\u0122\\u012D\\x05\\f\\x07\\x02\\u0123\\u012D\",\"\\x05\\x0E\\b\\x02\\u0124\\u012D\\x05\\x10\\t\\x02\\u0125\\u012D\\x05\",\"\\x12\\n\\x02\\u0126\\u012D\\x05\\x14\\x0B\\x02\\u0127\\u012D\\x05\",\"\\x16\\f\\x02\\u0128\\u012D\\x05\\x18\\r\\x02\\u0129\\u012D\\x05\\x1A\",\"\\x0E\\x02\\u012A\\u012D\\x05\\x1C\\x0F\\x02\\u012B\\u012D\\x05\\x1E\",\"\\x10\\x02\\u012C\\u0122\\x03\\x02\\x02\\x02\\u012C\\u0123\\x03\\x02\",\"\\x02\\x02\\u012C\\u0124\\x03\\x02\\x02\\x02\\u012C\\u0125\\x03\\x02\",\"\\x02\\x02\\u012C\\u0126\\x03\\x02\\x02\\x02\\u012C\\u0127\\x03\\x02\",\"\\x02\\x02\\u012C\\u0128\\x03\\x02\\x02\\x02\\u012C\\u0129\\x03\\x02\",\"\\x02\\x02\\u012C\\u012A\\x03\\x02\\x02\\x02\\u012C\\u012B\\x03\\x02\",\"\\x02\\x02\\u012D\\x0B\\x03\\x02\\x02\\x02\\u012E\\u012F\\x07$\",\"\\x02\\x02\\u012F\\u0134\\x05> \\x02\\u0130\\u0131\\x07\\x0E\\x02\",\"\\x02\\u0131\\u0133\\x05> \\x02\\u0132\\u0130\\x03\\x02\\x02\\x02\",\"\\u0133\\u0136\\x03\\x02\\x02\\x02\\u0134\\u0132\\x03\\x02\\x02\\x02\",\"\\u0134\\u0135\\x03\\x02\\x02\\x02\\u0135\\r\\x03\\x02\\x02\\x02\",\"\\u0136\\u0134\\x03\\x02\\x02\\x02\\u0137\\u0138\\x07?\\x02\\x02\",\"\\u0138\\u013D\\x05B\\\"\\x02\\u0139\\u013B\\x05^0\\x02\\u013A\\u013C\\x05\",\"`1\\x02\\u013B\\u013A\\x03\\x02\\x02\\x02\\u013B\\u013C\\x03\\x02\",\"\\x02\\x02\\u013C\\u013E\\x03\\x02\\x02\\x02\\u013D\\u0139\\x03\\x02\",\"\\x02\\x02\\u013D\\u013E\\x03\\x02\\x02\\x02\\u013E\\x0F\\x03\\x02\",\"\\x02\\x02\\u013F\\u0140\\x07`\\x02\\x02\\u0140\\u0141\\x05\\x06\",\"\\x04\\x02\\u0141\\x11\\x03\\x02\\x02\\x02\\u0142\\u0143\\x07\\\"\",\"\\x02\\x02\\u0143\\u0148\\x05F$\\x02\\u0144\\u0145\\x07\\x0E\\x02\",\"\\x02\\u0145\\u0147\\x05F$\\x02\\u0146\\u0144\\x03\\x02\\x02\\x02\",\"\\u0147\\u014A\\x03\\x02\\x02\\x02\\u0148\\u0146\\x03\\x02\\x02\\x02\",\"\\u0148\\u0149\\x03\\x02\\x02\\x02\\u0149\\x13\\x03\\x02\\x02\\x02\",\"\\u014A\\u0148\\x03\\x02\\x02\\x02\\u014B\\u014C\\x07!\\x02\\x02\",\"\\u014C\\u0151\\x05@!\\x02\\u014D\\u014E\\x07\\x0E\\x02\\x02\\u014E\",\"\\u0150\\x05@!\\x02\\u014F\\u014D\\x03\\x02\\x02\\x02\\u0150\\u0153\",\"\\x03\\x02\\x02\\x02\\u0151\\u014F\\x03\\x02\\x02\\x02\\u0151\\u0152\",\"\\x03\\x02\\x02\\x02\\u0152\\x15\\x03\\x02\\x02\\x02\\u0153\\u0151\",\"\\x03\\x02\\x02\\x02\\u0154\\u0155\\x07 \\x02\\x02\\u0155\\u015A\",\"\\x05@!\\x02\\u0156\\u0157\\x07\\x0E\\x02\\x02\\u0157\\u0159\\x05\",\"@!\\x02\\u0158\\u0156\\x03\\x02\\x02\\x02\\u0159\\u015C\\x03\\x02\",\"\\x02\\x02\\u015A\\u0158\\x03\\x02\\x02\\x02\\u015A\\u015B\\x03\\x02\",\"\\x02\\x02\\u015B\\x17\\x03\\x02\\x02\\x02\\u015C\\u015A\\x03\\x02\",\"\\x02\\x02\\u015D\\u015E\\x07\\xBF\\x02\\x02\\u015E\\u015F\\x05\\xA6\",\"T\\x02\\u015F\\u0160\\x07\\x0E\\x02\\x02\\u0160\\u0161\\x05\\xA6\",\"T\\x02\\u0161\\x19\\x03\\x02\\x02\\x02\\u0162\\u0163\\x07\\x0F\",\"\\x02\\x02\\u0163\\u0164\\x05\\xA6T\\x02\\u0164\\u0165\\x07\\x0E\",\"\\x02\\x02\\u0165\\u0166\\x05\\xA6T\\x02\\u0166\\u0167\\x07+\\x02\",\"\\x02\\u0167\\u016C\\x05\\xBE`\\x02\\u0168\\u0169\\x07\\x0E\\x02\",\"\\x02\\u0169\\u016B\\x05\\xBE`\\x02\\u016A\\u0168\\x03\\x02\\x02\",\"\\x02\\u016B\\u016E\\x03\\x02\\x02\\x02\\u016C\\u016A\\x03\\x02\\x02\",\"\\x02\\u016C\\u016D\\x03\\x02\\x02\\x02\\u016D\\x1B\\x03\\x02\\x02\",\"\\x02\\u016E\\u016C\\x03\\x02\\x02\\x02\\u016F\\u0170\\x07\\xC0\\x02\",\"\\x02\\u0170\\u0171\\x05\\xA6T\\x02\\u0171\\u0172\\x07\\x0E\\x02\",\"\\x02\\u0172\\u0173\\x05\\xA6T\\x02\\u0173\\x1D\\x03\\x02\\x02\",\"\\x02\\u0174\\u0175\\x07\\xC1\\x02\\x02\\u0175\\u017A\\x05H%\\x02\",\"\\u0176\\u0177\\x07\\x0E\\x02\\x02\\u0177\\u0179\\x05H%\\x02\\u0178\",\"\\u0176\\x03\\x02\\x02\\x02\\u0179\\u017C\\x03\\x02\\x02\\x02\\u017A\",\"\\u0178\\x03\\x02\\x02\\x02\\u017A\\u017B\\x03\\x02\\x02\\x02\\u017B\",\"\\x1F\\x03\\x02\\x02\\x02\\u017C\\u017A\\x03\\x02\\x02\\x02\\u017D\",\"\\u017E\\t\\x06\\x02\\x02\\u017E\\u017F\\x07\\x04\\x02\\x02\\u017F\",\"\\u0180\\x05L'\\x02\\u0180\\u0181\\x05P)\\x02\\u0181\\u0182\\x07\\x05\",\"\\x02\\x02\\u0182\\u018A\\x03\\x02\\x02\\x02\\u0183\\u0184\\t\\x07\",\"\\x02\\x02\\u0184\\u0185\\x07\\x04\\x02\\x02\\u0185\\u0186\\x05J\",\"&\\x02\\u0186\\u0187\\x05P)\\x02\\u0187\\u0188\\x07\\x05\\x02\\x02\",\"\\u0188\\u018A\\x03\\x02\\x02\\x02\\u0189\\u017D\\x03\\x02\\x02\\x02\",\"\\u0189\\u0183\\x03\\x02\\x02\\x02\\u018A!\\x03\\x02\\x02\\x02\",\"\\u018B\\u018C\\x07q\\x02\\x02\\u018C\\u018D\\x07p\\x02\\x02\\u018D\",\"\\u018E\\x05\\xB8]\\x02\\u018E\\u0197\\x07\\x04\\x02\\x02\\u018F\",\"\\u0194\\x05b2\\x02\\u0190\\u0191\\x07\\x0E\\x02\\x02\\u0191\\u0193\",\"\\x05b2\\x02\\u0192\\u0190\\x03\\x02\\x02\\x02\\u0193\\u0196\\x03\",\"\\x02\\x02\\x02\\u0194\\u0192\\x03\\x02\\x02\\x02\\u0194\\u0195\\x03\",\"\\x02\\x02\\x02\\u0195\\u0198\\x03\\x02\\x02\\x02\\u0196\\u0194\\x03\",\"\\x02\\x02\\x02\\u0197\\u018F\\x03\\x02\\x02\\x02\\u0197\\u0198\\x03\",\"\\x02\\x02\\x02\\u0198\\u0199\\x03\\x02\\x02\\x02\\u0199\\u019C\\x07\",\"\\x05\\x02\\x02\\u019A\\u019B\\x07\\xBE\\x02\\x02\\u019B\\u019D\\x05\",\"d3\\x02\\u019C\\u019A\\x03\\x02\\x02\\x02\\u019C\\u019D\\x03\\x02\",\"\\x02\\x02\\u019D\\u019E\\x03\\x02\\x02\\x02\\u019E\\u019F\\x07\\xAD\",\"\\x02\\x02\\u019F\\u01A0\\x05\\x06\\x04\\x02\\u01A0\\u01A1\\x07w\",\"\\x02\\x02\\u01A1\\u01A2\\x07p\\x02\\x02\\u01A2\\u01BE\\x03\\x02\",\"\\x02\\x02\\u01A3\\u01A4\\x07q\\x02\\x02\\u01A4\\u01A5\\x07s\\x02\",\"\\x02\\u01A5\\u01A6\\x07u\\x02\\x02\\u01A6\\u01A7\\x05x=\\x02\\u01A7\",\"\\u01A8\\x07\\x04\\x02\\x02\\u01A8\\u01A9\\x05z>\\x02\\u01A9\\u01AA\",\"\\x07\\x05\\x02\\x02\\u01AA\\u01AB\\x07\\xAD\\x02\\x02\\u01AB\\u01AC\",\"\\x05~@\\x02\\u01AC\\u01AD\\x07w\\x02\\x02\\u01AD\\u01AE\\x07s\\x02\",\"\\x02\\u01AE\\u01AF\\x07u\\x02\\x02\\u01AF\\u01BE\\x03\\x02\\x02\",\"\\x02\\u01B0\\u01B1\\x07q\\x02\\x02\\u01B1\\u01B2\\x07t\\x02\\x02\",\"\\u01B2\\u01B3\\x07u\\x02\\x02\\u01B3\\u01B4\\x05x=\\x02\\u01B4\\u01B5\",\"\\x07\\x04\\x02\\x02\\u01B5\\u01B6\\x05\\x86D\\x02\\u01B6\\u01B7\",\"\\x07\\x05\\x02\\x02\\u01B7\\u01B8\\x07\\xAD\\x02\\x02\\u01B8\\u01B9\",\"\\x05\\x82B\\x02\\u01B9\\u01BA\\x07w\\x02\\x02\\u01BA\\u01BB\\x07\",\"t\\x02\\x02\\u01BB\\u01BC\\x07u\\x02\\x02\\u01BC\\u01BE\\x03\\x02\",\"\\x02\\x02\\u01BD\\u018B\\x03\\x02\\x02\\x02\\u01BD\\u01A3\\x03\\x02\",\"\\x02\\x02\\u01BD\\u01B0\\x03\\x02\\x02\\x02\\u01BE#\\x03\\x02\",\"\\x02\\x02\\u01BF\\u01C0\\x05\\xB8]\\x02\\u01C0\\u01C9\\x07\\x04\",\"\\x02\\x02\\u01C1\\u01C6\\x05&\\x14\\x02\\u01C2\\u01C3\\x07\\x0E\",\"\\x02\\x02\\u01C3\\u01C5\\x05&\\x14\\x02\\u01C4\\u01C2\\x03\\x02\",\"\\x02\\x02\\u01C5\\u01C8\\x03\\x02\\x02\\x02\\u01C6\\u01C4\\x03\\x02\",\"\\x02\\x02\\u01C6\\u01C7\\x03\\x02\\x02\\x02\\u01C7\\u01CA\\x03\\x02\",\"\\x02\\x02\\u01C8\\u01C6\\x03\\x02\\x02\\x02\\u01C9\\u01C1\\x03\\x02\",\"\\x02\\x02\\u01C9\\u01CA\\x03\\x02\\x02\\x02\\u01CA\\u01CB\\x03\\x02\",\"\\x02\\x02\\u01CB\\u01CC\\x07\\x05\\x02\\x02\\u01CC\\u01F9\\x03\\x02\",\"\\x02\\x02\\u01CD\\u01CE\\x07\\x18\\x02\\x02\\u01CE\\u01CF\\x07\\x04\",\"\\x02\\x02\\u01CF\\u01D0\\x05\\xBA^\\x02\\u01D0\\u01D3\\x07\\x04\",\"\\x02\\x02\\u01D1\\u01D4\\x05\\xA6T\\x02\\u01D2\\u01D4\\x05\\xBE\",\"`\\x02\\u01D3\\u01D1\\x03\\x02\\x02\\x02\\u01D3\\u01D2\\x03\\x02\",\"\\x02\\x02\\u01D3\\u01D4\\x03\\x02\\x02\\x02\\u01D4\\u01DC\\x03\\x02\",\"\\x02\\x02\\u01D5\\u01D8\\x07\\x0E\\x02\\x02\\u01D6\\u01D9\\x05\\xA6\",\"T\\x02\\u01D7\\u01D9\\x05\\xBE`\\x02\\u01D8\\u01D6\\x03\\x02\\x02\",\"\\x02\\u01D8\\u01D7\\x03\\x02\\x02\\x02\\u01D9\\u01DB\\x03\\x02\\x02\",\"\\x02\\u01DA\\u01D5\\x03\\x02\\x02\\x02\\u01DB\\u01DE\\x03\\x02\\x02\",\"\\x02\\u01DC\\u01DA\\x03\\x02\\x02\\x02\\u01DC\\u01DD\\x03\\x02\\x02\",\"\\x02\\u01DD\\u01DF\\x03\\x02\\x02\\x02\\u01DE\\u01DC\\x03\\x02\\x02\",\"\\x02\\u01DF\\u01E2\\x07\\x05\\x02\\x02\\u01E0\\u01E1\\x07\\xE4\\x02\",\"\\x02\\u01E1\\u01E3\\x07\\xEB\\x02\\x02\\u01E2\\u01E0\\x03\\x02\\x02\",\"\\x02\\u01E2\\u01E3\\x03\\x02\\x02\\x02\\u01E3\\u01E6\\x03\\x02\\x02\",\"\\x02\\u01E4\\u01E5\\x07\\xBE\\x02\\x02\\u01E5\\u01E7\\x05d3\\x02\",\"\\u01E6\\u01E4\\x03\\x02\\x02\\x02\\u01E6\\u01E7\\x03\\x02\\x02\\x02\",\"\\u01E7\\u01E8\\x03\\x02\\x02\\x02\\u01E8\\u01E9\\x07\\x05\\x02\\x02\",\"\\u01E9\\u01F9\\x03\\x02\\x02\\x02\\u01EA\\u01EB\\x07\\xCE\\x02\\x02\",\"\\u01EB\\u01EC\\x07\\x04\\x02\\x02\\u01EC\\u01ED\\x05\\x06\\x04\\x02\",\"\\u01ED\\u01F0\\x07\\x0E\\x02\\x02\\u01EE\\u01F1\\x05\\xC0a\\x02\",\"\\u01EF\\u01F1\\x05v<\\x02\\u01F0\\u01EE\\x03\\x02\\x02\\x02\\u01F0\",\"\\u01EF\\x03\\x02\\x02\\x02\\u01F1\\u01F4\\x03\\x02\\x02\\x02\\u01F2\",\"\\u01F3\\x07\\x0E\\x02\\x02\\u01F3\\u01F5\\x07\\xEB\\x02\\x02\\u01F4\",\"\\u01F2\\x03\\x02\\x02\\x02\\u01F4\\u01F5\\x03\\x02\\x02\\x02\\u01F5\",\"\\u01F6\\x03\\x02\\x02\\x02\\u01F6\\u01F7\\x07\\x05\\x02\\x02\\u01F7\",\"\\u01F9\\x03\\x02\\x02\\x02\\u01F8\\u01BF\\x03\\x02\\x02\\x02\\u01F8\",\"\\u01CD\\x03\\x02\\x02\\x02\\u01F8\\u01EA\\x03\\x02\\x02\\x02\\u01F9\",\"%\\x03\\x02\\x02\\x02\\u01FA\\u01FE\\x05\\xA4S\\x02\\u01FB\\u01FE\",\"\\x05\\xBE`\\x02\\u01FC\\u01FE\\x07i\\x02\\x02\\u01FD\\u01FA\\x03\",\"\\x02\\x02\\x02\\u01FD\\u01FB\\x03\\x02\\x02\\x02\\u01FD\\u01FC\\x03\",\"\\x02\\x02\\x02\\u01FE'\\x03\\x02\\x02\\x02\\u01FF\\u0200\\x07\",\"U\\x02\\x02\\u0200\\u0201\\x07\\x04\\x02\\x02\\u0201\\u0202\\x05\",\"\\x06\\x04\\x02\\u0202\\u0203\\x07\\x05\\x02\\x02\\u0203\\u0244\\x03\",\"\\x02\\x02\\x02\\u0204\\u0205\\x07y\\x02\\x02\\u0205\\u0206\\x07\",\"\\x04\\x02\\x02\\u0206\\u0207\\x05\\x06\\x04\\x02\\u0207\\u0208\\x07\",\"\\x05\\x02\\x02\\u0208\\u0244\\x03\\x02\\x02\\x02\\u0209\\u020A\\x07\",\"z\\x02\\x02\\u020A\\u020B\\x07\\x04\\x02\\x02\\u020B\\u020C\\x05\",\"\\x06\\x04\\x02\\u020C\\u020D\\x07\\x05\\x02\\x02\\u020D\\u0244\\x03\",\"\\x02\\x02\\x02\\u020E\\u020F\\x07V\\x02\\x02\\u020F\\u0210\\x07\",\"\\x04\\x02\\x02\\u0210\\u0211\\x05\\x06\\x04\\x02\\u0211\\u0212\\x07\",\"\\x05\\x02\\x02\\u0212\\u0244\\x03\\x02\\x02\\x02\\u0213\\u0214\\x07\",\"W\\x02\\x02\\u0214\\u0215\\x07\\x04\\x02\\x02\\u0215\\u0216\\x05\",\"\\x06\\x04\\x02\\u0216\\u0217\\x07\\x05\\x02\\x02\\u0217\\u0244\\x03\",\"\\x02\\x02\\x02\\u0218\\u0219\\x07X\\x02\\x02\\u0219\\u021A\\x07\",\"\\x04\\x02\\x02\\u021A\\u021F\\x05\\x06\\x04\\x02\\u021B\\u021C\\x07\",\"\\x0E\\x02\\x02\\u021C\\u021E\\x05\\xB0Y\\x02\\u021D\\u021B\\x03\",\"\\x02\\x02\\x02\\u021E\\u0221\\x03\\x02\\x02\\x02\\u021F\\u021D\\x03\",\"\\x02\\x02\\x02\\u021F\\u0220\\x03\\x02\\x02\\x02\\u0220\\u0222\\x03\",\"\\x02\\x02\\x02\\u0221\\u021F\\x03\\x02\\x02\\x02\\u0222\\u0223\\x07\",\"\\x05\\x02\\x02\\u0223\\u0244\\x03\\x02\\x02\\x02\\u0224\\u0225\\x07\",\"|\\x02\\x02\\u0225\\u0226\\x07\\x04\\x02\\x02\\u0226\\u0227\\x05\",\"\\x06\\x04\\x02\\u0227\\u0228\\x07\\x0E\\x02\\x02\\u0228\\u022B\\x05\",\"\\x06\\x04\\x02\\u0229\\u022A\\x07\\x0E\\x02\\x02\\u022A\\u022C\\x05\",\"\\xB0Y\\x02\\u022B\\u0229\\x03\\x02\\x02\\x02\\u022B\\u022C\\x03\",\"\\x02\\x02\\x02\\u022C\\u022D\\x03\\x02\\x02\\x02\\u022D\\u022E\\x07\",\"\\x05\\x02\\x02\\u022E\\u0244\\x03\\x02\\x02\\x02\\u022F\\u0230\\x07\",\"{\\x02\\x02\\u0230\\u0231\\x07\\x04\\x02\\x02\\u0231\\u0232\\x05\",\"\\x06\\x04\\x02\\u0232\\u0233\\x07\\x0E\\x02\\x02\\u0233\\u0236\\x05\",\"\\x06\\x04\\x02\\u0234\\u0235\\x07\\x0E\\x02\\x02\\u0235\\u0237\\x05\",\"\\xB0Y\\x02\\u0236\\u0234\\x03\\x02\\x02\\x02\\u0236\\u0237\\x03\",\"\\x02\\x02\\x02\\u0237\\u023A\\x03\\x02\\x02\\x02\\u0238\\u0239\\x07\",\"\\x0E\\x02\\x02\\u0239\\u023B\\x05\\xB0Y\\x02\\u023A\\u0238\\x03\",\"\\x02\\x02\\x02\\u023A\\u023B\\x03\\x02\\x02\\x02\\u023B\\u023C\\x03\",\"\\x02\\x02\\x02\\u023C\\u023D\\x07\\x05\\x02\\x02\\u023D\\u0244\\x03\",\"\\x02\\x02\\x02\\u023E\\u023F\\x07S\\x02\\x02\\u023F\\u0240\\x07\",\"\\x04\\x02\\x02\\u0240\\u0241\\x05\\x06\\x04\\x02\\u0241\\u0242\\x07\",\"\\x05\\x02\\x02\\u0242\\u0244\\x03\\x02\\x02\\x02\\u0243\\u01FF\\x03\",\"\\x02\\x02\\x02\\u0243\\u0204\\x03\\x02\\x02\\x02\\u0243\\u0209\\x03\",\"\\x02\\x02\\x02\\u0243\\u020E\\x03\\x02\\x02\\x02\\u0243\\u0213\\x03\",\"\\x02\\x02\\x02\\u0243\\u0218\\x03\\x02\\x02\\x02\\u0243\\u0224\\x03\",\"\\x02\\x02\\x02\\u0243\\u022F\\x03\\x02\\x02\\x02\\u0243\\u023E\\x03\",\"\\x02\\x02\\x02\\u0244)\\x03\\x02\\x02\\x02\\u0245\\u0246\\x07\",\"R\\x02\\x02\\u0246\\u0247\\x07\\x04\\x02\\x02\\u0247\\u0248\\x05\",\"\\x06\\x04\\x02\\u0248\\u0249\\x07\\x0E\\x02\\x02\\u0249\\u024A\\x05\",\"\\x06\\x04\\x02\\u024A\\u024B\\x07\\x05\\x02\\x02\\u024B\\u028B\\x03\",\"\\x02\\x02\\x02\\u024C\\u024D\\x07P\\x02\\x02\\u024D\\u024E\\x07\",\"\\x04\\x02\\x02\\u024E\\u0251\\x05\\x06\\x04\\x02\\u024F\\u0250\\x07\",\"\\x0E\\x02\\x02\\u0250\\u0252\\x05\\xB0Y\\x02\\u0251\\u024F\\x03\",\"\\x02\\x02\\x02\\u0251\\u0252\\x03\\x02\\x02\\x02\\u0252\\u0253\\x03\",\"\\x02\\x02\\x02\\u0253\\u0254\\x07\\x05\\x02\\x02\\u0254\\u028B\\x03\",\"\\x02\\x02\\x02\\u0255\\u0256\\x07O\\x02\\x02\\u0256\\u0257\\x07\",\"\\x04\\x02\\x02\\u0257\\u025A\\x05\\x06\\x04\\x02\\u0258\\u0259\\x07\",\"\\x0E\\x02\\x02\\u0259\\u025B\\x05\\xB0Y\\x02\\u025A\\u0258\\x03\",\"\\x02\\x02\\x02\\u025A\\u025B\\x03\\x02\\x02\\x02\\u025B\\u025C\\x03\",\"\\x02\\x02\\x02\\u025C\\u025D\\x07\\x05\\x02\\x02\\u025D\\u028B\\x03\",\"\\x02\\x02\\x02\\u025E\\u025F\\x07}\\x02\\x02\\u025F\\u0260\\x07\",\"\\x04\\x02\\x02\\u0260\\u0261\\x05\\x06\\x04\\x02\\u0261\\u0262\\x07\",\"\\x05\\x02\\x02\\u0262\\u028B\\x03\\x02\\x02\\x02\\u0263\\u0264\\x07\",\"~\\x02\\x02\\u0264\\u0265\\x07\\x04\\x02\\x02\\u0265\\u0266\\x05\",\"\\x06\\x04\\x02\\u0266\\u0267\\x07\\x05\\x02\\x02\\u0267\\u028B\\x03\",\"\\x02\\x02\\x02\\u0268\\u0269\\x07K\\x02\\x02\\u0269\\u026A\\x07\",\"\\x04\\x02\\x02\\u026A\\u026B\\x05\\x06\\x04\\x02\\u026B\\u026C\\x07\",\"\\x05\\x02\\x02\\u026C\\u028B\\x03\\x02\\x02\\x02\\u026D\\u026E\\x07\",\"b\\x02\\x02\\u026E\\u026F\\x07\\x04\\x02\\x02\\u026F\\u0270\\x05\",\"\\x06\\x04\\x02\\u0270\\u0271\\x07\\x05\\x02\\x02\\u0271\\u028B\\x03\",\"\\x02\\x02\\x02\\u0272\\u0273\\x07M\\x02\\x02\\u0273\\u0274\\x07\",\"\\x04\\x02\\x02\\u0274\\u0275\\x05\\x06\\x04\\x02\\u0275\\u0276\\x07\",\"\\x05\\x02\\x02\\u0276\\u028B\\x03\\x02\\x02\\x02\\u0277\\u0278\\x07\",\"Q\\x02\\x02\\u0278\\u0279\\x07\\x04\\x02\\x02\\u0279\\u027A\\x05\",\"\\x06\\x04\\x02\\u027A\\u027B\\x07\\x0E\\x02\\x02\\u027B\\u027C\\x05\",\"\\x06\\x04\\x02\\u027C\\u027D\\x07\\x05\\x02\\x02\\u027D\\u028B\\x03\",\"\\x02\\x02\\x02\\u027E\\u027F\\x07N\\x02\\x02\\u027F\\u0280\\x07\",\"\\x04\\x02\\x02\\u0280\\u0281\\x05\\x06\\x04\\x02\\u0281\\u0282\\x07\",\"\\x0E\\x02\\x02\\u0282\\u0283\\x05\\x06\\x04\\x02\\u0283\\u0284\\x07\",\"\\x05\\x02\\x02\\u0284\\u028B\\x03\\x02\\x02\\x02\\u0285\\u0286\\x07\",\"\\x7F\\x02\\x02\\u0286\\u0287\\x07\\x04\\x02\\x02\\u0287\\u0288\\x05\",\"\\x06\\x04\\x02\\u0288\\u0289\\x07\\x05\\x02\\x02\\u0289\\u028B\\x03\",\"\\x02\\x02\\x02\\u028A\\u0245\\x03\\x02\\x02\\x02\\u028A\\u024C\\x03\",\"\\x02\\x02\\x02\\u028A\\u0255\\x03\\x02\\x02\\x02\\u028A\\u025E\\x03\",\"\\x02\\x02\\x02\\u028A\\u0263\\x03\\x02\\x02\\x02\\u028A\\u0268\\x03\",\"\\x02\\x02\\x02\\u028A\\u026D\\x03\\x02\\x02\\x02\\u028A\\u0272\\x03\",\"\\x02\\x02\\x02\\u028A\\u0277\\x03\\x02\\x02\\x02\\u028A\\u027E\\x03\",\"\\x02\\x02\\x02\\u028A\\u0285\\x03\\x02\\x02\\x02\\u028B+\\x03\",\"\\x02\\x02\\x02\\u028C\\u028D\\x07*\\x02\\x02\\u028D\\u028E\\x07\",\"\\x04\\x02\\x02\\u028E\\u028F\\x05\\x06\\x04\\x02\\u028F\\u0290\\x07\",\"\\x0E\\x02\\x02\\u0290\\u0291\\x05\\x06\\x04\\x02\\u0291\\u0292\\x07\",\"\\x0E\\x02\\x02\\u0292\\u0293\\x05\\x06\\x04\\x02\\u0293\\u0294\\x07\",\"\\x05\\x02\\x02\\u0294\\u02AD\\x03\\x02\\x02\\x02\\u0295\\u0296\\x07\",\"e\\x02\\x02\\u0296\\u0297\\x07\\x04\\x02\\x02\\u0297\\u0298\\x05\",\"\\x06\\x04\\x02\\u0298\\u0299\\x07\\x0E\\x02\\x02\\u0299\\u029A\\x05\",\"\\x06\\x04\\x02\\u029A\\u029B\\x07\\x05\\x02\\x02\\u029B\\u02AD\\x03\",\"\\x02\\x02\\x02\\u029C\\u029D\\x07-\\x02\\x02\\u029D\\u029E\\x07\",\"\\x04\\x02\\x02\\u029E\\u029F\\x05\\x06\\x04\\x02\\u029F\\u02A0\\x07\",\"\\x05\\x02\\x02\\u02A0\\u02AD\\x03\\x02\\x02\\x02\\u02A1\\u02A2\\x07\",\"9\\x02\\x02\\u02A2\\u02A3\\x07\\x04\\x02\\x02\\u02A3\\u02A4\\x05\",\"\\x06\\x04\\x02\\u02A4\\u02A5\\x07\\x0E\\x02\\x02\\u02A5\\u02A8\\x05\",\"\\x06\\x04\\x02\\u02A6\\u02A7\\x07\\x0E\\x02\\x02\\u02A7\\u02A9\\x05\",\"\\xC2b\\x02\\u02A8\\u02A6\\x03\\x02\\x02\\x02\\u02A8\\u02A9\\x03\",\"\\x02\\x02\\x02\\u02A9\\u02AA\\x03\\x02\\x02\\x02\\u02AA\\u02AB\\x07\",\"\\x05\\x02\\x02\\u02AB\\u02AD\\x03\\x02\\x02\\x02\\u02AC\\u028C\\x03\",\"\\x02\\x02\\x02\\u02AC\\u0295\\x03\\x02\\x02\\x02\\u02AC\\u029C\\x03\",\"\\x02\\x02\\x02\\u02AC\\u02A1\\x03\\x02\\x02\\x02\\u02AD-\\x03\",\"\\x02\\x02\\x02\\u02AE\\u02AF\\x07\\xC4\\x02\\x02\\u02AF\\u02B1\\x07\",\"\\x04\\x02\\x02\\u02B0\\u02B2\\x05\\x06\\x04\\x02\\u02B1\\u02B0\\x03\",\"\\x02\\x02\\x02\\u02B1\\u02B2\\x03\\x02\\x02\\x02\\u02B2\\u02B3\\x03\",\"\\x02\\x02\\x02\\u02B3\\u02E5\\x07\\x05\\x02\\x02\\u02B4\\u02B5\\x07\",\"\\x97\\x02\\x02\\u02B5\\u02B6\\x07\\x04\\x02\\x02\\u02B6\\u02B9\\x05\",\"\\x06\\x04\\x02\\u02B7\\u02B8\\x07\\x0E\\x02\\x02\\u02B8\\u02BA\\t\",\"\\b\\x02\\x02\\u02B9\\u02B7\\x03\\x02\\x02\\x02\\u02B9\\u02BA\\x03\",\"\\x02\\x02\\x02\\u02BA\\u02BB\\x03\\x02\\x02\\x02\\u02BB\\u02BC\\x07\",\"\\x05\\x02\\x02\\u02BC\\u02E5\\x03\\x02\\x02\\x02\\u02BD\\u02BE\\x07\",\"\\x98\\x02\\x02\\u02BE\\u02BF\\x07\\x04\\x02\\x02\\u02BF\\u02C0\\x05\",\"\\x06\\x04\\x02\\u02C0\\u02C1\\x07\\x05\\x02\\x02\\u02C1\\u02E5\\x03\",\"\\x02\\x02\\x02\\u02C2\\u02C3\\x07\\x99\\x02\\x02\\u02C3\\u02C4\\x07\",\"\\x04\\x02\\x02\\u02C4\\u02C5\\x05\\x06\\x04\\x02\\u02C5\\u02C6\\x07\",\"\\x05\\x02\\x02\\u02C6\\u02E5\\x03\\x02\\x02\\x02\\u02C7\\u02C8\\x07\",\"\\x9A\\x02\\x02\\u02C8\\u02C9\\x07\\x04\\x02\\x02\\u02C9\\u02CA\\x05\",\"\\x06\\x04\\x02\\u02CA\\u02CB\\x07\\x0E\\x02\\x02\\u02CB\\u02CC\\x07\",\"\\xE5\\x02\\x02\\u02CC\\u02CD\\x07\\x05\\x02\\x02\\u02CD\\u02E5\\x03\",\"\\x02\\x02\\x02\\u02CE\\u02CF\\x07\\xC7\\x02\\x02\\u02CF\\u02D0\\x07\",\"\\x04\\x02\\x02\\u02D0\\u02D3\\x07\\xEB\\x02\\x02\\u02D1\\u02D2\\x07\",\"\\x0E\\x02\\x02\\u02D2\\u02D4\\t\\t\\x02\\x02\\u02D3\\u02D1\\x03\\x02\",\"\\x02\\x02\\u02D3\\u02D4\\x03\\x02\\x02\\x02\\u02D4\\u02DA\\x03\\x02\",\"\\x02\\x02\\u02D5\\u02D8\\x07\\x0E\\x02\\x02\\u02D6\\u02D9\\x05\\x06\",\"\\x04\\x02\\u02D7\\u02D9\\x07i\\x02\\x02\\u02D8\\u02D6\\x03\\x02\",\"\\x02\\x02\\u02D8\\u02D7\\x03\\x02\\x02\\x02\\u02D9\\u02DB\\x03\\x02\",\"\\x02\\x02\\u02DA\\u02D5\\x03\\x02\\x02\\x02\\u02DA\\u02DB\\x03\\x02\",\"\\x02\\x02\\u02DB\\u02DE\\x03\\x02\\x02\\x02\\u02DC\\u02DD\\x07\\x0E\",\"\\x02\\x02\\u02DD\\u02DF\\t\\n\\x02\\x02\\u02DE\\u02DC\\x03\\x02\\x02\",\"\\x02\\u02DE\\u02DF\\x03\\x02\\x02\\x02\\u02DF\\u02E0\\x03\\x02\\x02\",\"\\x02\\u02E0\\u02E5\\x07\\x05\\x02\\x02\\u02E1\\u02E2\\x07\\x1E\\x02\",\"\\x02\\u02E2\\u02E3\\x07\\x04\\x02\\x02\\u02E3\\u02E5\\x07\\x05\\x02\",\"\\x02\\u02E4\\u02AE\\x03\\x02\\x02\\x02\\u02E4\\u02B4\\x03\\x02\\x02\",\"\\x02\\u02E4\\u02BD\\x03\\x02\\x02\\x02\\u02E4\\u02C2\\x03\\x02\\x02\",\"\\x02\\u02E4\\u02C7\\x03\\x02\\x02\\x02\\u02E4\\u02CE\\x03\\x02\\x02\",\"\\x02\\u02E4\\u02E1\\x03\\x02\\x02\\x02\\u02E5/\\x03\\x02\\x02\",\"\\x02\\u02E6\\u02E7\\x07/\\x02\\x02\\u02E7\\u02E8\\x07\\x04\\x02\",\"\\x02\\u02E8\\u02EB\\x05\\x06\\x04\\x02\\u02E9\\u02EA\\x07\\x0E\\x02\",\"\\x02\\u02EA\\u02EC\\x05\\x06\\x04\\x02\\u02EB\\u02E9\\x03\\x02\\x02\",\"\\x02\\u02EC\\u02ED\\x03\\x02\\x02\\x02\\u02ED\\u02EB\\x03\\x02\\x02\",\"\\x02\\u02ED\\u02EE\\x03\\x02\\x02\\x02\\u02EE\\u02EF\\x03\\x02\\x02\",\"\\x02\\u02EF\\u02F0\\x07\\x05\\x02\\x02\\u02F0\\u030B\\x03\\x02\\x02\",\"\\x02\\u02F1\\u02F2\\x072\\x02\\x02\\u02F2\\u02F3\\x07\\x04\\x02\",\"\\x02\\u02F3\\u02F6\\x05\\x06\\x04\\x02\\u02F4\\u02F5\\x07\\x0E\\x02\",\"\\x02\\u02F5\\u02F7\\x05\\x06\\x04\\x02\\u02F6\\u02F4\\x03\\x02\\x02\",\"\\x02\\u02F7\\u02F8\\x03\\x02\\x02\\x02\\u02F8\\u02F6\\x03\\x02\\x02\",\"\\x02\\u02F8\\u02F9\\x03\\x02\\x02\\x02\\u02F9\\u02FA\\x03\\x02\\x02\",\"\\x02\\u02FA\\u02FB\\x07\\x05\\x02\\x02\\u02FB\\u030B\\x03\\x02\\x02\",\"\\x02\\u02FC\\u02FD\\x07\\x81\\x02\\x02\\u02FD\\u02FE\\x07\\x04\\x02\",\"\\x02\\u02FE\\u02FF\\x05\\x06\\x04\\x02\\u02FF\\u0300\\x07\\x0E\\x02\",\"\\x02\\u0300\\u0301\\x05\\x06\\x04\\x02\\u0301\\u0302\\x07\\x05\\x02\",\"\\x02\\u0302\\u030B\\x03\\x02\\x02\\x02\\u0303\\u0304\\x071\\x02\",\"\\x02\\u0304\\u0305\\x07\\x04\\x02\\x02\\u0305\\u0306\\x05\\x06\\x04\",\"\\x02\\u0306\\u0307\\x07\\x0E\\x02\\x02\\u0307\\u0308\\x05\\x06\\x04\",\"\\x02\\u0308\\u0309\\x07\\x05\\x02\\x02\\u0309\\u030B\\x03\\x02\\x02\",\"\\x02\\u030A\\u02E6\\x03\\x02\\x02\\x02\\u030A\\u02F1\\x03\\x02\\x02\",\"\\x02\\u030A\\u02FC\\x03\\x02\\x02\\x02\\u030A\\u0303\\x03\\x02\\x02\",\"\\x02\\u030B1\\x03\\x02\\x02\\x02\\u030C\\u030D\\x07h\\x02\\x02\",\"\\u030D\\u030E\\x07\\x04\\x02\\x02\\u030E\\u030F\\x05\\x06\\x04\\x02\",\"\\u030F\\u0310\\x07\\x0E\\x02\\x02\\u0310\\u0312\\x07\\xEC\\x02\\x02\",\"\\u0311\\u0313\\x05\\x98M\\x02\\u0312\\u0311\\x03\\x02\\x02\\x02\",\"\\u0312\\u0313\\x03\\x02\\x02\\x02\\u0313\\u0316\\x03\\x02\\x02\\x02\",\"\\u0314\\u0315\\x07v\\x02\\x02\\u0315\\u0317\\x05\\xA6T\\x02\\u0316\",\"\\u0314\\x03\\x02\\x02\\x02\\u0316\\u0317\\x03\\x02\\x02\\x02\\u0317\",\"\\u0319\\x03\\x02\\x02\\x02\\u0318\\u031A\\x05\\x96L\\x02\\u0319\",\"\\u0318\\x03\\x02\\x02\\x02\\u0319\\u031A\\x03\\x02\\x02\\x02\\u031A\",\"\\u031C\\x03\\x02\\x02\\x02\\u031B\\u031D\\x05\\x9EP\\x02\\u031C\",\"\\u031B\\x03\\x02\\x02\\x02\\u031C\\u031D\\x03\\x02\\x02\\x02\\u031D\",\"\\u031F\\x03\\x02\\x02\\x02\\u031E\\u0320\\x05\\xA0Q\\x02\\u031F\",\"\\u031E\\x03\\x02\\x02\\x02\\u031F\\u0320\\x03\\x02\\x02\\x02\\u0320\",\"\\u0321\\x03\\x02\\x02\\x02\\u0321\\u0322\\x07\\x05\\x02\\x02\\u0322\",\"3\\x03\\x02\\x02\\x02\\u0323\\u0324\\x07\\xD2\\x02\\x02\\u0324\",\"\\u0325\\x07\\x04\\x02\\x02\\u0325\\u0326\\x05\\x06\\x04\\x02\\u0326\",\"\\u0327\\x07\\x0E\\x02\\x02\\u0327\\u0331\\x07\\xEC\\x02\\x02\\u0328\",\"\\u0329\\x07\\xDB\\x02\\x02\\u0329\\u032E\\x05\\xA6T\\x02\\u032A\",\"\\u032B\\x07\\x0E\\x02\\x02\\u032B\\u032D\\x05\\xA6T\\x02\\u032C\",\"\\u032A\\x03\\x02\\x02\\x02\\u032D\\u0330\\x03\\x02\\x02\\x02\\u032E\",\"\\u032C\\x03\\x02\\x02\\x02\\u032E\\u032F\\x03\\x02\\x02\\x02\\u032F\",\"\\u0332\\x03\\x02\\x02\\x02\\u0330\\u032E\\x03\\x02\\x02\\x02\\u0331\",\"\\u0328\\x03\\x02\\x02\\x02\\u0331\\u0332\\x03\\x02\\x02\\x02\\u0332\",\"\\u0334\\x03\\x02\\x02\\x02\\u0333\\u0335\\x05\\x94K\\x02\\u0334\",\"\\u0333\\x03\\x02\\x02\\x02\\u0334\\u0335\\x03\\x02\\x02\\x02\\u0335\",\"\\u0336\\x03\\x02\\x02\\x02\\u0336\\u0337\\x07\\x05\\x02\\x02\\u0337\",\"\\u0361\\x03\\x02\\x02\\x02\\u0338\\u0339\\x07\\xD3\\x02\\x02\\u0339\",\"\\u033A\\x07\\x04\\x02\\x02\\u033A\\u033B\\x05\\x06\\x04\\x02\\u033B\",\"\\u033C\\x07\\x0E\\x02\\x02\\u033C\\u033E\\x07\\xEC\\x02\\x02\\u033D\",\"\\u033F\\x05\\x98M\\x02\\u033E\\u033D\\x03\\x02\\x02\\x02\\u033E\",\"\\u033F\\x03\\x02\\x02\\x02\\u033F\\u0342\\x03\\x02\\x02\\x02\\u0340\",\"\\u0341\\x07v\\x02\\x02\\u0341\\u0343\\x05\\xA6T\\x02\\u0342\\u0340\",\"\\x03\\x02\\x02\\x02\\u0342\\u0343\\x03\\x02\\x02\\x02\\u0343\\u0345\",\"\\x03\\x02\\x02\\x02\\u0344\\u0346\\x05\\x96L\\x02\\u0345\\u0344\",\"\\x03\\x02\\x02\\x02\\u0345\\u0346\\x03\\x02\\x02\\x02\\u0346\\u0348\",\"\\x03\\x02\\x02\\x02\\u0347\\u0349\\x05\\x9AN\\x02\\u0348\\u0347\",\"\\x03\\x02\\x02\\x02\\u0348\\u0349\\x03\\x02\\x02\\x02\\u0349\\u034B\",\"\\x03\\x02\\x02\\x02\\u034A\\u034C\\x05\\x94K\\x02\\u034B\\u034A\",\"\\x03\\x02\\x02\\x02\\u034B\\u034C\\x03\\x02\\x02\\x02\\u034C\\u034D\",\"\\x03\\x02\\x02\\x02\\u034D\\u034E\\x07\\x05\\x02\\x02\\u034E\\u0361\",\"\\x03\\x02\\x02\\x02\\u034F\\u0350\\x078\\x02\\x02\\u0350\\u0351\",\"\\x07\\x04\\x02\\x02\\u0351\\u0353\\x05\\x06\\x04\\x02\\u0352\\u0354\",\"\\x05\\xAAV\\x02\\u0353\\u0352\\x03\\x02\\x02\\x02\\u0353\\u0354\",\"\\x03\\x02\\x02\\x02\\u0354\\u0356\\x03\\x02\\x02\\x02\\u0355\\u0357\",\"\\x05\\xACW\\x02\\u0356\\u0355\\x03\\x02\\x02\\x02\\u0356\\u0357\",\"\\x03\\x02\\x02\\x02\\u0357\\u0359\\x03\\x02\\x02\\x02\\u0358\\u035A\",\"\\x05\\x9CO\\x02\\u0359\\u0358\\x03\\x02\\x02\\x02\\u0359\\u035A\",\"\\x03\\x02\\x02\\x02\\u035A\\u035C\\x03\\x02\\x02\\x02\\u035B\\u035D\",\"\\t\\x0B\\x02\\x02\\u035C\\u035B\\x03\\x02\\x02\\x02\\u035C\\u035D\",\"\\x03\\x02\\x02\\x02\\u035D\\u035E\\x03\\x02\\x02\\x02\\u035E\\u035F\",\"\\x07\\x05\\x02\\x02\\u035F\\u0361\\x03\\x02\\x02\\x02\\u0360\\u0323\",\"\\x03\\x02\\x02\\x02\\u0360\\u0338\\x03\\x02\\x02\\x02\\u0360\\u034F\",\"\\x03\\x02\\x02\\x02\\u03615\\x03\\x02\\x02\\x02\\u0362\\u0363\",\"\\x07g\\x02\\x02\\u0363\\u0364\\x07\\x04\\x02\\x02\\u0364\\u0365\",\"\\x05\\x06\\x04\\x02\\u0365\\u0366\\x07\\x0E\\x02\\x02\\u0366\\u0367\",\"\\x05\\x06\\x04\\x02\\u0367\\u0368\\x07\\x05\\x02\\x02\\u03687\",\"\\x03\\x02\\x02\\x02\\u0369\\u036A\\x07Y\\x02\\x02\\u036A\\u036B\",\"\\x07\\x04\\x02\\x02\\u036B\\u036C\\x05\\x06\\x04\\x02\\u036C\\u036D\",\"\\x07\\x05\\x02\\x02\\u036D\\u039D\\x03\\x02\\x02\\x02\\u036E\\u036F\",\"\\x07Z\\x02\\x02\\u036F\\u0370\\x07\\x04\\x02\\x02\\u0370\\u0371\",\"\\x05\\x06\\x04\\x02\\u0371\\u0372\\x07\\x05\\x02\\x02\\u0372\\u039D\",\"\\x03\\x02\\x02\\x02\\u0373\\u0374\\x07\\\\\\x02\\x02\\u0374\\u0376\",\"\\x07\\x04\\x02\\x02\\u0375\\u0377\\x05\\x06\\x04\\x02\\u0376\\u0375\",\"\\x03\\x02\\x02\\x02\\u0376\\u0377\\x03\\x02\\x02\\x02\\u0377\\u0378\",\"\\x03\\x02\\x02\\x02\\u0378\\u039D\\x07\\x05\\x02\\x02\\u0379\\u037A\",\"\\x07[\\x02\\x02\\u037A\\u037B\\x07\\x04\\x02\\x02\\u037B\\u037C\",\"\\x05\\x06\\x04\\x02\\u037C\\u037D\\x07\\x05\\x02\\x02\\u037D\\u039D\",\"\\x03\\x02\\x02\\x02\\u037E\\u037F\\x07F\\x02\\x02\\u037F\\u0380\",\"\\x07\\x04\\x02\\x02\\u0380\\u0381\\x05\\x06\\x04\\x02\\u0381\\u0382\",\"\\x07\\x05\\x02\\x02\\u0382\\u039D\\x03\\x02\\x02\\x02\\u0383\\u0384\",\"\\x07G\\x02\\x02\\u0384\\u0385\\x07\\x04\\x02\\x02\\u0385\\u0386\",\"\\x05\\x06\\x04\\x02\\u0386\\u0387\\x07\\x05\\x02\\x02\\u0387\\u039D\",\"\\x03\\x02\\x02\\x02\\u0388\\u0389\\x07\\x82\\x02\\x02\\u0389\\u038A\",\"\\x07\\x04\\x02\\x02\\u038A\\u038B\\x05\\x06\\x04\\x02\\u038B\\u038C\",\"\\x07\\x05\\x02\\x02\\u038C\\u039D\\x03\\x02\\x02\\x02\\u038D\\u038E\",\"\\x07\\x83\\x02\\x02\\u038E\\u038F\\x07\\x04\\x02\\x02\\u038F\\u0390\",\"\\x05\\x06\\x04\\x02\\u0390\\u0391\\x07\\x05\\x02\\x02\\u0391\\u039D\",\"\\x03\\x02\\x02\\x02\\u0392\\u0393\\x07\\x84\\x02\\x02\\u0393\\u0394\",\"\\x07\\x04\\x02\\x02\\u0394\\u0395\\x05\\x06\\x04\\x02\\u0395\\u0396\",\"\\x07\\x05\\x02\\x02\\u0396\\u039D\\x03\\x02\\x02\\x02\\u0397\\u0398\",\"\\x07\\x85\\x02\\x02\\u0398\\u0399\\x07\\x04\\x02\\x02\\u0399\\u039A\",\"\\x05\\x06\\x04\\x02\\u039A\\u039B\\x07\\x05\\x02\\x02\\u039B\\u039D\",\"\\x03\\x02\\x02\\x02\\u039C\\u0369\\x03\\x02\\x02\\x02\\u039C\\u036E\",\"\\x03\\x02\\x02\\x02\\u039C\\u0373\\x03\\x02\\x02\\x02\\u039C\\u0379\",\"\\x03\\x02\\x02\\x02\\u039C\\u037E\\x03\\x02\\x02\\x02\\u039C\\u0383\",\"\\x03\\x02\\x02\\x02\\u039C\\u0388\\x03\\x02\\x02\\x02\\u039C\\u038D\",\"\\x03\\x02\\x02\\x02\\u039C\\u0392\\x03\\x02\\x02\\x02\\u039C\\u0397\",\"\\x03\\x02\\x02\\x02\\u039D9\\x03\\x02\\x02\\x02\\u039E\\u039F\",\"\\x07Y\\x02\\x02\\u039F\\u03A0\\x07\\x04\\x02\\x02\\u03A0\\u03A5\",\"\\x05\\x06\\x04\\x02\\u03A1\\u03A3\\x05^0\\x02\\u03A2\\u03A4\\x05\",\"`1\\x02\\u03A3\\u03A2\\x03\\x02\\x02\\x02\\u03A3\\u03A4\\x03\\x02\",\"\\x02\\x02\\u03A4\\u03A6\\x03\\x02\\x02\\x02\\u03A5\\u03A1\\x03\\x02\",\"\\x02\\x02\\u03A5\\u03A6\\x03\\x02\\x02\\x02\\u03A6\\u03A7\\x03\\x02\",\"\\x02\\x02\\u03A7\\u03A8\\x07\\x05\\x02\\x02\\u03A8\\u040E\\x03\\x02\",\"\\x02\\x02\\u03A9\\u03AA\\x07Z\\x02\\x02\\u03AA\\u03AB\\x07\\x04\",\"\\x02\\x02\\u03AB\\u03B0\\x05\\x06\\x04\\x02\\u03AC\\u03AE\\x05^\",\"0\\x02\\u03AD\\u03AF\\x05`1\\x02\\u03AE\\u03AD\\x03\\x02\\x02\\x02\",\"\\u03AE\\u03AF\\x03\\x02\\x02\\x02\\u03AF\\u03B1\\x03\\x02\\x02\\x02\",\"\\u03B0\\u03AC\\x03\\x02\\x02\\x02\\u03B0\\u03B1\\x03\\x02\\x02\\x02\",\"\\u03B1\\u03B2\\x03\\x02\\x02\\x02\\u03B2\\u03B3\\x07\\x05\\x02\\x02\",\"\\u03B3\\u040E\\x03\\x02\\x02\\x02\\u03B4\\u03B5\\x07\\\\\\x02\\x02\",\"\\u03B5\\u03BD\\x07\\x04\\x02\\x02\\u03B6\\u03BB\\x05\\x06\\x04\\x02\",\"\\u03B7\\u03B9\\x05^0\\x02\\u03B8\\u03BA\\x05`1\\x02\\u03B9\\u03B8\\x03\",\"\\x02\\x02\\x02\\u03B9\\u03BA\\x03\\x02\\x02\\x02\\u03BA\\u03BC\\x03\",\"\\x02\\x02\\x02\\u03BB\\u03B7\\x03\\x02\\x02\\x02\\u03BB\\u03BC\\x03\",\"\\x02\\x02\\x02\\u03BC\\u03BE\\x03\\x02\\x02\\x02\\u03BD\\u03B6\\x03\",\"\\x02\\x02\\x02\\u03BD\\u03BE\\x03\\x02\\x02\\x02\\u03BE\\u03BF\\x03\",\"\\x02\\x02\\x02\\u03BF\\u040E\\x07\\x05\\x02\\x02\\u03C0\\u03C1\\x07\",\"[\\x02\\x02\\u03C1\\u03C2\\x07\\x04\\x02\\x02\\u03C2\\u03C7\\x05\",\"\\x06\\x04\\x02\\u03C3\\u03C5\\x05^0\\x02\\u03C4\\u03C6\\x05`1\\x02\",\"\\u03C5\\u03C4\\x03\\x02\\x02\\x02\\u03C5\\u03C6\\x03\\x02\\x02\\x02\",\"\\u03C6\\u03C8\\x03\\x02\\x02\\x02\\u03C7\\u03C3\\x03\\x02\\x02\\x02\",\"\\u03C7\\u03C8\\x03\\x02\\x02\\x02\\u03C8\\u03C9\\x03\\x02\\x02\\x02\",\"\\u03C9\\u03CA\\x07\\x05\\x02\\x02\\u03CA\\u040E\\x03\\x02\\x02\\x02\",\"\\u03CB\\u03CC\\x07F\\x02\\x02\\u03CC\\u03CD\\x07\\x04\\x02\\x02\",\"\\u03CD\\u03D2\\x05\\x06\\x04\\x02\\u03CE\\u03D0\\x05^0\\x02\\u03CF\",\"\\u03D1\\x05`1\\x02\\u03D0\\u03CF\\x03\\x02\\x02\\x02\\u03D0\\u03D1\",\"\\x03\\x02\\x02\\x02\\u03D1\\u03D3\\x03\\x02\\x02\\x02\\u03D2\\u03CE\",\"\\x03\\x02\\x02\\x02\\u03D2\\u03D3\\x03\\x02\\x02\\x02\\u03D3\\u03D4\",\"\\x03\\x02\\x02\\x02\\u03D4\\u03D5\\x07\\x05\\x02\\x02\\u03D5\\u040E\",\"\\x03\\x02\\x02\\x02\\u03D6\\u03D7\\x07G\\x02\\x02\\u03D7\\u03D8\",\"\\x07\\x04\\x02\\x02\\u03D8\\u03DD\\x05\\x06\\x04\\x02\\u03D9\\u03DB\",\"\\x05^0\\x02\\u03DA\\u03DC\\x05`1\\x02\\u03DB\\u03DA\\x03\\x02\\x02\",\"\\x02\\u03DB\\u03DC\\x03\\x02\\x02\\x02\\u03DC\\u03DE\\x03\\x02\\x02\",\"\\x02\\u03DD\\u03D9\\x03\\x02\\x02\\x02\\u03DD\\u03DE\\x03\\x02\\x02\",\"\\x02\\u03DE\\u03DF\\x03\\x02\\x02\\x02\\u03DF\\u03E0\\x07\\x05\\x02\",\"\\x02\\u03E0\\u040E\\x03\\x02\\x02\\x02\\u03E1\\u03E2\\x07\\x82\\x02\",\"\\x02\\u03E2\\u03E3\\x07\\x04\\x02\\x02\\u03E3\\u03E8\\x05\\x06\\x04\",\"\\x02\\u03E4\\u03E6\\x05^0\\x02\\u03E5\\u03E7\\x05`1\\x02\\u03E6\\u03E5\",\"\\x03\\x02\\x02\\x02\\u03E6\\u03E7\\x03\\x02\\x02\\x02\\u03E7\\u03E9\",\"\\x03\\x02\\x02\\x02\\u03E8\\u03E4\\x03\\x02\\x02\\x02\\u03E8\\u03E9\",\"\\x03\\x02\\x02\\x02\\u03E9\\u03EA\\x03\\x02\\x02\\x02\\u03EA\\u03EB\",\"\\x07\\x05\\x02\\x02\\u03EB\\u040E\\x03\\x02\\x02\\x02\\u03EC\\u03ED\",\"\\x07\\x83\\x02\\x02\\u03ED\\u03EE\\x07\\x04\\x02\\x02\\u03EE\\u03F3\",\"\\x05\\x06\\x04\\x02\\u03EF\\u03F1\\x05^0\\x02\\u03F0\\u03F2\\x05\",\"`1\\x02\\u03F1\\u03F0\\x03\\x02\\x02\\x02\\u03F1\\u03F2\\x03\\x02\",\"\\x02\\x02\\u03F2\\u03F4\\x03\\x02\\x02\\x02\\u03F3\\u03EF\\x03\\x02\",\"\\x02\\x02\\u03F3\\u03F4\\x03\\x02\\x02\\x02\\u03F4\\u03F5\\x03\\x02\",\"\\x02\\x02\\u03F5\\u03F6\\x07\\x05\\x02\\x02\\u03F6\\u040E\\x03\\x02\",\"\\x02\\x02\\u03F7\\u03F8\\x07\\x84\\x02\\x02\\u03F8\\u03F9\\x07\\x04\",\"\\x02\\x02\\u03F9\\u03FE\\x05\\x06\\x04\\x02\\u03FA\\u03FC\\x05^\",\"0\\x02\\u03FB\\u03FD\\x05`1\\x02\\u03FC\\u03FB\\x03\\x02\\x02\\x02\",\"\\u03FC\\u03FD\\x03\\x02\\x02\\x02\\u03FD\\u03FF\\x03\\x02\\x02\\x02\",\"\\u03FE\\u03FA\\x03\\x02\\x02\\x02\\u03FE\\u03FF\\x03\\x02\\x02\\x02\",\"\\u03FF\\u0400\\x03\\x02\\x02\\x02\\u0400\\u0401\\x07\\x05\\x02\\x02\",\"\\u0401\\u040E\\x03\\x02\\x02\\x02\\u0402\\u0403\\x07\\x85\\x02\\x02\",\"\\u0403\\u0404\\x07\\x04\\x02\\x02\\u0404\\u0409\\x05\\x06\\x04\\x02\",\"\\u0405\\u0407\\x05^0\\x02\\u0406\\u0408\\x05`1\\x02\\u0407\\u0406\\x03\",\"\\x02\\x02\\x02\\u0407\\u0408\\x03\\x02\\x02\\x02\\u0408\\u040A\\x03\",\"\\x02\\x02\\x02\\u0409\\u0405\\x03\\x02\\x02\\x02\\u0409\\u040A\\x03\",\"\\x02\\x02\\x02\\u040A\\u040B\\x03\\x02\\x02\\x02\\u040B\\u040C\\x07\",\"\\x05\\x02\\x02\\u040C\\u040E\\x03\\x02\\x02\\x02\\u040D\\u039E\\x03\",\"\\x02\\x02\\x02\\u040D\\u03A9\\x03\\x02\\x02\\x02\\u040D\\u03B4\\x03\",\"\\x02\\x02\\x02\\u040D\\u03C0\\x03\\x02\\x02\\x02\\u040D\\u03CB\\x03\",\"\\x02\\x02\\x02\\u040D\\u03D6\\x03\\x02\\x02\\x02\\u040D\\u03E1\\x03\",\"\\x02\\x02\\x02\\u040D\\u03EC\\x03\\x02\\x02\\x02\\u040D\\u03F7\\x03\",\"\\x02\\x02\\x02\\u040D\\u0402\\x03\\x02\\x02\\x02\\u040E;\\x03\",\"\\x02\\x02\\x02\\u040F\\u0410\\x07Y\\x02\\x02\\u0410\\u0411\\x07\",\"\\x04\\x02\\x02\\u0411\\u0412\\x05\\x06\\x04\\x02\\u0412\\u0413\\x07\",\"\\x8E\\x02\\x02\\u0413\\u0415\\x07\\x04\\x02\\x02\\u0414\\u0416\\x05\",\"T+\\x02\\u0415\\u0414\\x03\\x02\\x02\\x02\\u0415\\u0416\\x03\\x02\",\"\\x02\\x02\\u0416\\u0418\\x03\\x02\\x02\\x02\\u0417\\u0419\\x05V\",\",\\x02\\u0418\\u0417\\x03\\x02\\x02\\x02\\u0418\\u0419\\x03\\x02\",\"\\x02\\x02\\u0419\\u041B\\x03\\x02\\x02\\x02\\u041A\\u041C\\x05Z\",\".\\x02\\u041B\\u041A\\x03\\x02\\x02\\x02\\u041B\\u041C\\x03\\x02\",\"\\x02\\x02\\u041C\\u041D\\x03\\x02\\x02\\x02\\u041D\\u041E\\x07\\x05\",\"\\x02\\x02\\u041E\\u041F\\x07\\x05\\x02\\x02\\u041F\\u051A\\x03\\x02\",\"\\x02\\x02\\u0420\\u0421\\x07Z\\x02\\x02\\u0421\\u0422\\x07\\x04\",\"\\x02\\x02\\u0422\\u0423\\x05\\x06\\x04\\x02\\u0423\\u0424\\x07\\x8E\",\"\\x02\\x02\\u0424\\u0426\\x07\\x04\\x02\\x02\\u0425\\u0427\\x05T\",\"+\\x02\\u0426\\u0425\\x03\\x02\\x02\\x02\\u0426\\u0427\\x03\\x02\",\"\\x02\\x02\\u0427\\u0429\\x03\\x02\\x02\\x02\\u0428\\u042A\\x05V\",\",\\x02\\u0429\\u0428\\x03\\x02\\x02\\x02\\u0429\\u042A\\x03\\x02\",\"\\x02\\x02\\u042A\\u042C\\x03\\x02\\x02\\x02\\u042B\\u042D\\x05Z\",\".\\x02\\u042C\\u042B\\x03\\x02\\x02\\x02\\u042C\\u042D\\x03\\x02\",\"\\x02\\x02\\u042D\\u042E\\x03\\x02\\x02\\x02\\u042E\\u042F\\x07\\x05\",\"\\x02\\x02\\u042F\\u0430\\x07\\x05\\x02\\x02\\u0430\\u051A\\x03\\x02\",\"\\x02\\x02\\u0431\\u0432\\x07\\\\\\x02\\x02\\u0432\\u0434\\x07\\x04\",\"\\x02\\x02\\u0433\\u0435\\x05\\x06\\x04\\x02\\u0434\\u0433\\x03\\x02\",\"\\x02\\x02\\u0434\\u0435\\x03\\x02\\x02\\x02\\u0435\\u0436\\x03\\x02\",\"\\x02\\x02\\u0436\\u0437\\x07\\x8E\\x02\\x02\\u0437\\u0439\\x07\\x04\",\"\\x02\\x02\\u0438\\u043A\\x05T+\\x02\\u0439\\u0438\\x03\\x02\\x02\",\"\\x02\\u0439\\u043A\\x03\\x02\\x02\\x02\\u043A\\u043C\\x03\\x02\\x02\",\"\\x02\\u043B\\u043D\\x05V,\\x02\\u043C\\u043B\\x03\\x02\\x02\\x02\",\"\\u043C\\u043D\\x03\\x02\\x02\\x02\\u043D\\u043F\\x03\\x02\\x02\\x02\",\"\\u043E\\u0440\\x05Z.\\x02\\u043F\\u043E\\x03\\x02\\x02\\x02\\u043F\",\"\\u0440\\x03\\x02\\x02\\x02\\u0440\\u0441\\x03\\x02\\x02\\x02\\u0441\",\"\\u0442\\x07\\x05\\x02\\x02\\u0442\\u051A\\x07\\x05\\x02\\x02\\u0443\",\"\\u0444\\x07[\\x02\\x02\\u0444\\u0445\\x07\\x04\\x02\\x02\\u0445\",\"\\u0446\\x05\\x06\\x04\\x02\\u0446\\u0447\\x07\\x8E\\x02\\x02\\u0447\",\"\\u0449\\x07\\x04\\x02\\x02\\u0448\\u044A\\x05T+\\x02\\u0449\\u0448\",\"\\x03\\x02\\x02\\x02\\u0449\\u044A\\x03\\x02\\x02\\x02\\u044A\\u044C\",\"\\x03\\x02\\x02\\x02\\u044B\\u044D\\x05V,\\x02\\u044C\\u044B\\x03\",\"\\x02\\x02\\x02\\u044C\\u044D\\x03\\x02\\x02\\x02\\u044D\\u044F\\x03\",\"\\x02\\x02\\x02\\u044E\\u0450\\x05Z.\\x02\\u044F\\u044E\\x03\\x02\",\"\\x02\\x02\\u044F\\u0450\\x03\\x02\\x02\\x02\\u0450\\u0451\\x03\\x02\",\"\\x02\\x02\\u0451\\u0452\\x07\\x05\\x02\\x02\\u0452\\u0453\\x07\\x05\",\"\\x02\\x02\\u0453\\u051A\\x03\\x02\\x02\\x02\\u0454\\u0455\\x07F\",\"\\x02\\x02\\u0455\\u0456\\x07\\x04\\x02\\x02\\u0456\\u0457\\x05\\x06\",\"\\x04\\x02\\u0457\\u0458\\x07\\x8E\\x02\\x02\\u0458\\u045A\\x07\\x04\",\"\\x02\\x02\\u0459\\u045B\\x05T+\\x02\\u045A\\u0459\\x03\\x02\\x02\",\"\\x02\\u045A\\u045B\\x03\\x02\\x02\\x02\\u045B\\u045D\\x03\\x02\\x02\",\"\\x02\\u045C\\u045E\\x05V,\\x02\\u045D\\u045C\\x03\\x02\\x02\\x02\",\"\\u045D\\u045E\\x03\\x02\\x02\\x02\\u045E\\u0460\\x03\\x02\\x02\\x02\",\"\\u045F\\u0461\\x05Z.\\x02\\u0460\\u045F\\x03\\x02\\x02\\x02\\u0460\",\"\\u0461\\x03\\x02\\x02\\x02\\u0461\\u0462\\x03\\x02\\x02\\x02\\u0462\",\"\\u0463\\x07\\x05\\x02\\x02\\u0463\\u0464\\x07\\x05\\x02\\x02\\u0464\",\"\\u051A\\x03\\x02\\x02\\x02\\u0465\\u0466\\x07G\\x02\\x02\\u0466\",\"\\u0467\\x07\\x04\\x02\\x02\\u0467\\u0468\\x05\\x06\\x04\\x02\\u0468\",\"\\u0469\\x07\\x8E\\x02\\x02\\u0469\\u046B\\x07\\x04\\x02\\x02\\u046A\",\"\\u046C\\x05T+\\x02\\u046B\\u046A\\x03\\x02\\x02\\x02\\u046B\\u046C\",\"\\x03\\x02\\x02\\x02\\u046C\\u046E\\x03\\x02\\x02\\x02\\u046D\\u046F\",\"\\x05V,\\x02\\u046E\\u046D\\x03\\x02\\x02\\x02\\u046E\\u046F\\x03\",\"\\x02\\x02\\x02\\u046F\\u0471\\x03\\x02\\x02\\x02\\u0470\\u0472\\x05\",\"Z.\\x02\\u0471\\u0470\\x03\\x02\\x02\\x02\\u0471\\u0472\\x03\\x02\",\"\\x02\\x02\\u0472\\u0473\\x03\\x02\\x02\\x02\\u0473\\u0474\\x07\\x05\",\"\\x02\\x02\\u0474\\u0475\\x07\\x05\\x02\\x02\\u0475\\u051A\\x03\\x02\",\"\\x02\\x02\\u0476\\u0477\\x07\\x82\\x02\\x02\\u0477\\u0478\\x07\\x04\",\"\\x02\\x02\\u0478\\u0479\\x05\\x06\\x04\\x02\\u0479\\u047A\\x07\\x8E\",\"\\x02\\x02\\u047A\\u047C\\x07\\x04\\x02\\x02\\u047B\\u047D\\x05T\",\"+\\x02\\u047C\\u047B\\x03\\x02\\x02\\x02\\u047C\\u047D\\x03\\x02\",\"\\x02\\x02\\u047D\\u047F\\x03\\x02\\x02\\x02\\u047E\\u0480\\x05V\",\",\\x02\\u047F\\u047E\\x03\\x02\\x02\\x02\\u047F\\u0480\\x03\\x02\",\"\\x02\\x02\\u0480\\u0482\\x03\\x02\\x02\\x02\\u0481\\u0483\\x05Z\",\".\\x02\\u0482\\u0481\\x03\\x02\\x02\\x02\\u0482\\u0483\\x03\\x02\",\"\\x02\\x02\\u0483\\u0484\\x03\\x02\\x02\\x02\\u0484\\u0485\\x07\\x05\",\"\\x02\\x02\\u0485\\u0486\\x07\\x05\\x02\\x02\\u0486\\u051A\\x03\\x02\",\"\\x02\\x02\\u0487\\u0488\\x07\\x83\\x02\\x02\\u0488\\u0489\\x07\\x04\",\"\\x02\\x02\\u0489\\u048A\\x05\\x06\\x04\\x02\\u048A\\u048B\\x07\\x8E\",\"\\x02\\x02\\u048B\\u048D\\x07\\x04\\x02\\x02\\u048C\\u048E\\x05T\",\"+\\x02\\u048D\\u048C\\x03\\x02\\x02\\x02\\u048D\\u048E\\x03\\x02\",\"\\x02\\x02\\u048E\\u0490\\x03\\x02\\x02\\x02\\u048F\\u0491\\x05V\",\",\\x02\\u0490\\u048F\\x03\\x02\\x02\\x02\\u0490\\u0491\\x03\\x02\",\"\\x02\\x02\\u0491\\u0493\\x03\\x02\\x02\\x02\\u0492\\u0494\\x05Z\",\".\\x02\\u0493\\u0492\\x03\\x02\\x02\\x02\\u0493\\u0494\\x03\\x02\",\"\\x02\\x02\\u0494\\u0495\\x03\\x02\\x02\\x02\\u0495\\u0496\\x07\\x05\",\"\\x02\\x02\\u0496\\u0497\\x07\\x05\\x02\\x02\\u0497\\u051A\\x03\\x02\",\"\\x02\\x02\\u0498\\u0499\\x07\\x84\\x02\\x02\\u0499\\u049A\\x07\\x04\",\"\\x02\\x02\\u049A\\u049B\\x05\\x06\\x04\\x02\\u049B\\u049C\\x07\\x8E\",\"\\x02\\x02\\u049C\\u049E\\x07\\x04\\x02\\x02\\u049D\\u049F\\x05T\",\"+\\x02\\u049E\\u049D\\x03\\x02\\x02\\x02\\u049E\\u049F\\x03\\x02\",\"\\x02\\x02\\u049F\\u04A1\\x03\\x02\\x02\\x02\\u04A0\\u04A2\\x05V\",\",\\x02\\u04A1\\u04A0\\x03\\x02\\x02\\x02\\u04A1\\u04A2\\x03\\x02\",\"\\x02\\x02\\u04A2\\u04A4\\x03\\x02\\x02\\x02\\u04A3\\u04A5\\x05Z\",\".\\x02\\u04A4\\u04A3\\x03\\x02\\x02\\x02\\u04A4\\u04A5\\x03\\x02\",\"\\x02\\x02\\u04A5\\u04A6\\x03\\x02\\x02\\x02\\u04A6\\u04A7\\x07\\x05\",\"\\x02\\x02\\u04A7\\u04A8\\x07\\x05\\x02\\x02\\u04A8\\u051A\\x03\\x02\",\"\\x02\\x02\\u04A9\\u04AA\\x07\\x85\\x02\\x02\\u04AA\\u04AB\\x07\\x04\",\"\\x02\\x02\\u04AB\\u04AC\\x05\\x06\\x04\\x02\\u04AC\\u04AD\\x07\\x8E\",\"\\x02\\x02\\u04AD\\u04AF\\x07\\x04\\x02\\x02\\u04AE\\u04B0\\x05T\",\"+\\x02\\u04AF\\u04AE\\x03\\x02\\x02\\x02\\u04AF\\u04B0\\x03\\x02\",\"\\x02\\x02\\u04B0\\u04B2\\x03\\x02\\x02\\x02\\u04B1\\u04B3\\x05V\",\",\\x02\\u04B2\\u04B1\\x03\\x02\\x02\\x02\\u04B2\\u04B3\\x03\\x02\",\"\\x02\\x02\\u04B3\\u04B5\\x03\\x02\\x02\\x02\\u04B4\\u04B6\\x05Z\",\".\\x02\\u04B5\\u04B4\\x03\\x02\\x02\\x02\\u04B5\\u04B6\\x03\\x02\",\"\\x02\\x02\\u04B6\\u04B7\\x03\\x02\\x02\\x02\\u04B7\\u04B8\\x07\\x05\",\"\\x02\\x02\\u04B8\\u04B9\\x07\\x05\\x02\\x02\\u04B9\\u051A\\x03\\x02\",\"\\x02\\x02\\u04BA\\u04BB\\x07\\x89\\x02\\x02\\u04BB\\u04BC\\x07\\x04\",\"\\x02\\x02\\u04BC\\u04BD\\x05\\x06\\x04\\x02\\u04BD\\u04BE\\x07\\x8E\",\"\\x02\\x02\\u04BE\\u04C0\\x07\\x04\\x02\\x02\\u04BF\\u04C1\\x05T\",\"+\\x02\\u04C0\\u04BF\\x03\\x02\\x02\\x02\\u04C0\\u04C1\\x03\\x02\",\"\\x02\\x02\\u04C1\\u04C3\\x03\\x02\\x02\\x02\\u04C2\\u04C4\\x05V\",\",\\x02\\u04C3\\u04C2\\x03\\x02\\x02\\x02\\u04C3\\u04C4\\x03\\x02\",\"\\x02\\x02\\u04C4\\u04C6\\x03\\x02\\x02\\x02\\u04C5\\u04C7\\x05Z\",\".\\x02\\u04C6\\u04C5\\x03\\x02\\x02\\x02\\u04C6\\u04C7\\x03\\x02\",\"\\x02\\x02\\u04C7\\u04C8\\x03\\x02\\x02\\x02\\u04C8\\u04C9\\x07\\x05\",\"\\x02\\x02\\u04C9\\u04CA\\x07\\x05\\x02\\x02\\u04CA\\u051A\\x03\\x02\",\"\\x02\\x02\\u04CB\\u04CC\\x07\\x8A\\x02\\x02\\u04CC\\u04CD\\x07\\x04\",\"\\x02\\x02\\u04CD\\u04CE\\x05\\x06\\x04\\x02\\u04CE\\u04CF\\x07\\x8E\",\"\\x02\\x02\\u04CF\\u04D1\\x07\\x04\\x02\\x02\\u04D0\\u04D2\\x05T\",\"+\\x02\\u04D1\\u04D0\\x03\\x02\\x02\\x02\\u04D1\\u04D2\\x03\\x02\",\"\\x02\\x02\\u04D2\\u04D4\\x03\\x02\\x02\\x02\\u04D3\\u04D5\\x05V\",\",\\x02\\u04D4\\u04D3\\x03\\x02\\x02\\x02\\u04D4\\u04D5\\x03\\x02\",\"\\x02\\x02\\u04D5\\u04D7\\x03\\x02\\x02\\x02\\u04D6\\u04D8\\x05Z\",\".\\x02\\u04D7\\u04D6\\x03\\x02\\x02\\x02\\u04D7\\u04D8\\x03\\x02\",\"\\x02\\x02\\u04D8\\u04D9\\x03\\x02\\x02\\x02\\u04D9\\u04DA\\x07\\x05\",\"\\x02\\x02\\u04DA\\u04DB\\x07\\x05\\x02\\x02\\u04DB\\u051A\\x03\\x02\",\"\\x02\\x02\\u04DC\\u04DD\\x07\\x8B\\x02\\x02\\u04DD\\u04DE\\x07\\x04\",\"\\x02\\x02\\u04DE\\u04E4\\x05\\x06\\x04\\x02\\u04DF\\u04E0\\x07\\x0E\",\"\\x02\\x02\\u04E0\\u04E2\\x07\\xE5\\x02\\x02\\u04E1\\u04E3\\x05\\xBE\",\"`\\x02\\u04E2\\u04E1\\x03\\x02\\x02\\x02\\u04E2\\u04E3\\x03\\x02\",\"\\x02\\x02\\u04E3\\u04E5\\x03\\x02\\x02\\x02\\u04E4\\u04DF\\x03\\x02\",\"\\x02\\x02\\u04E4\\u04E5\\x03\\x02\\x02\\x02\\u04E5\\u04E6\\x03\\x02\",\"\\x02\\x02\\u04E6\\u04E7\\x07\\x8E\\x02\\x02\\u04E7\\u04E9\\x07\\x04\",\"\\x02\\x02\\u04E8\\u04EA\\x05T+\\x02\\u04E9\\u04E8\\x03\\x02\\x02\",\"\\x02\\u04E9\\u04EA\\x03\\x02\\x02\\x02\\u04EA\\u04EB\\x03\\x02\\x02\",\"\\x02\\u04EB\\u04EC\\x05V,\\x02\\u04EC\\u04ED\\x03\\x02\\x02\\x02\",\"\\u04ED\\u04EE\\x07\\x05\\x02\\x02\\u04EE\\u04EF\\x07\\x05\\x02\\x02\",\"\\u04EF\\u051A\\x03\\x02\\x02\\x02\\u04F0\\u04F1\\x07\\x8C\\x02\\x02\",\"\\u04F1\\u04F2\\x07\\x04\\x02\\x02\\u04F2\\u04F8\\x05\\x06\\x04\\x02\",\"\\u04F3\\u04F4\\x07\\x0E\\x02\\x02\\u04F4\\u04F6\\x07\\xE5\\x02\\x02\",\"\\u04F5\\u04F7\\x05\\xBE`\\x02\\u04F6\\u04F5\\x03\\x02\\x02\\x02\",\"\\u04F6\\u04F7\\x03\\x02\\x02\\x02\\u04F7\\u04F9\\x03\\x02\\x02\\x02\",\"\\u04F8\\u04F3\\x03\\x02\\x02\\x02\\u04F8\\u04F9\\x03\\x02\\x02\\x02\",\"\\u04F9\\u04FA\\x03\\x02\\x02\\x02\\u04FA\\u04FB\\x07\\x8E\\x02\\x02\",\"\\u04FB\\u04FD\\x07\\x04\\x02\\x02\\u04FC\\u04FE\\x05T+\\x02\\u04FD\",\"\\u04FC\\x03\\x02\\x02\\x02\\u04FD\\u04FE\\x03\\x02\\x02\\x02\\u04FE\",\"\\u04FF\\x03\\x02\\x02\\x02\\u04FF\\u0500\\x05V,\\x02\\u0500\\u0501\",\"\\x03\\x02\\x02\\x02\\u0501\\u0502\\x07\\x05\\x02\\x02\\u0502\\u0503\",\"\\x07\\x05\\x02\\x02\\u0503\\u051A\\x03\\x02\\x02\\x02\\u0504\\u0505\",\"\\x07C\\x02\\x02\\u0505\\u0506\\x07\\x04\\x02\\x02\\u0506\\u0507\",\"\\x07\\x8E\\x02\\x02\\u0507\\u0509\\x07\\x04\\x02\\x02\\u0508\\u050A\",\"\\x05T+\\x02\\u0509\\u0508\\x03\\x02\\x02\\x02\\u0509\\u050A\\x03\",\"\\x02\\x02\\x02\\u050A\\u050B\\x03\\x02\\x02\\x02\\u050B\\u050C\\x05\",\"V,\\x02\\u050C\\u050D\\x03\\x02\\x02\\x02\\u050D\\u050E\\x07\\x05\",\"\\x02\\x02\\u050E\\u050F\\x07\\x05\\x02\\x02\\u050F\\u051A\\x03\\x02\",\"\\x02\\x02\\u0510\\u0511\\x07\\x8D\\x02\\x02\\u0511\\u0512\\x07\\x04\",\"\\x02\\x02\\u0512\\u0513\\x05\\x06\\x04\\x02\\u0513\\u0514\\x07\\x8E\",\"\\x02\\x02\\u0514\\u0515\\x07\\x04\\x02\\x02\\u0515\\u0516\\x05T\",\"+\\x02\\u0516\\u0517\\x07\\x05\\x02\\x02\\u0517\\u0518\\x07\\x05\",\"\\x02\\x02\\u0518\\u051A\\x03\\x02\\x02\\x02\\u0519\\u040F\\x03\\x02\",\"\\x02\\x02\\u0519\\u0420\\x03\\x02\\x02\\x02\\u0519\\u0431\\x03\\x02\",\"\\x02\\x02\\u0519\\u0443\\x03\\x02\\x02\\x02\\u0519\\u0454\\x03\\x02\",\"\\x02\\x02\\u0519\\u0465\\x03\\x02\\x02\\x02\\u0519\\u0476\\x03\\x02\",\"\\x02\\x02\\u0519\\u0487\\x03\\x02\\x02\\x02\\u0519\\u0498\\x03\\x02\",\"\\x02\\x02\\u0519\\u04A9\\x03\\x02\\x02\\x02\\u0519\\u04BA\\x03\\x02\",\"\\x02\\x02\\u0519\\u04CB\\x03\\x02\\x02\\x02\\u0519\\u04DC\\x03\\x02\",\"\\x02\\x02\\u0519\\u04F0\\x03\\x02\\x02\\x02\\u0519\\u0504\\x03\\x02\",\"\\x02\\x02\\u0519\\u0510\\x03\\x02\\x02\\x02\\u051A=\\x03\\x02\",\"\\x02\\x02\\u051B\\u051C\\x05@!\\x02\\u051C\\u051D\\x07:\\x02\\x02\",\"\\u051D\\u051E\\x05@!\\x02\\u051E?\\x03\\x02\\x02\\x02\\u051F\\u0520\",\"\\x05\\xA4S\\x02\\u0520\\u0521\\x07\\x17\\x02\\x02\\u0521\\u0522\",\"\\x05\\xA6T\\x02\\u0522\\u0525\\x03\\x02\\x02\\x02\\u0523\\u0525\",\"\\x05\\xA6T\\x02\\u0524\\u051F\\x03\\x02\\x02\\x02\\u0524\\u0523\",\"\\x03\\x02\\x02\\x02\\u0525A\\x03\\x02\\x02\\x02\\u0526\\u052B\",\"\\x05D#\\x02\\u0527\\u0528\\x07\\x0E\\x02\\x02\\u0528\\u052A\\x05\",\"D#\\x02\\u0529\\u0527\\x03\\x02\\x02\\x02\\u052A\\u052D\\x03\\x02\",\"\\x02\\x02\\u052B\\u0529\\x03\\x02\\x02\\x02\\u052B\\u052C\\x03\\x02\",\"\\x02\\x02\\u052CC\\x03\\x02\\x02\\x02\\u052D\\u052B\\x03\\x02\",\"\\x02\\x02\\u052E\\u0530\\x05\\xB2Z\\x02\\u052F\\u052E\\x03\\x02\",\"\\x02\\x02\\u052F\\u0530\\x03\\x02\\x02\\x02\\u0530\\u0531\\x03\\x02\",\"\\x02\\x02\\u0531\\u0532\\x05\\xA6T\\x02\\u0532\\u0533\\x07\\x16\",\"\\x02\\x02\\u0533\\u0534\\x058\\x1D\\x02\\u0534E\\x03\\x02\\x02\",\"\\x02\\u0535\\u0537\\x05\\xB2Z\\x02\\u0536\\u0535\\x03\\x02\\x02\",\"\\x02\\u0536\\u0537\\x03\\x02\\x02\\x02\\u0537\\u0538\\x03\\x02\\x02\",\"\\x02\\u0538\\u0539\\x05\\xA6T\\x02\\u0539\\u053A\\x07\\x16\\x02\",\"\\x02\\u053A\\u053B\\x05\\x06\\x04\\x02\\u053BG\\x03\\x02\\x02\",\"\\x02\\u053C\\u053D\\x05\\xA6T\\x02\\u053D\\u053E\\x07\\x10\\x02\",\"\\x02\\u053E\\u053F\\x05\\xBE`\\x02\\u053FI\\x03\\x02\\x02\\x02\",\"\\u0540\\u0545\\x05N(\\x02\\u0541\\u0542\\x07\\x0E\\x02\\x02\\u0542\",\"\\u0544\\x05N(\\x02\\u0543\\u0541\\x03\\x02\\x02\\x02\\u0544\\u0547\",\"\\x03\\x02\\x02\\x02\\u0545\\u0543\\x03\\x02\\x02\\x02\\u0545\\u0546\",\"\\x03\\x02\\x02\\x02\\u0546K\\x03\\x02\\x02\\x02\\u0547\\u0545\",\"\\x03\\x02\\x02\\x02\\u0548\\u054D\\x05N(\\x02\\u0549\\u054A\\x07\",\"\\x0E\\x02\\x02\\u054A\\u054C\\x05N(\\x02\\u054B\\u0549\\x03\\x02\",\"\\x02\\x02\\u054C\\u054F\\x03\\x02\\x02\\x02\\u054D\\u054B\\x03\\x02\",\"\\x02\\x02\\u054D\\u054E\\x03\\x02\\x02\\x02\\u054E\\u0559\\x03\\x02\",\"\\x02\\x02\\u054F\\u054D\\x03\\x02\\x02\\x02\\u0550\\u0551\\x07\\x1C\",\"\\x02\\x02\\u0551\\u0556\\x05\\xA6T\\x02\\u0552\\u0553\\x07\\x0E\",\"\\x02\\x02\\u0553\\u0555\\x05\\xA6T\\x02\\u0554\\u0552\\x03\\x02\",\"\\x02\\x02\\u0555\\u0558\\x03\\x02\\x02\\x02\\u0556\\u0554\\x03\\x02\",\"\\x02\\x02\\u0556\\u0557\\x03\\x02\\x02\\x02\\u0557\\u055A\\x03\\x02\",\"\\x02\\x02\\u0558\\u0556\\x03\\x02\\x02\\x02\\u0559\\u0550\\x03\\x02\",\"\\x02\\x02\\u0559\\u055A\\x03\\x02\\x02\\x02\\u055AM\\x03\\x02\",\"\\x02\\x02\\u055B\\u055E\\x05\\x06\\x04\\x02\\u055C\\u055D\\x07%\",\"\\x02\\x02\\u055D\\u055F\\x05\\xA2R\\x02\\u055E\\u055C\\x03\\x02\",\"\\x02\\x02\\u055E\\u055F\\x03\\x02\\x02\\x02\\u055FO\\x03\\x02\",\"\\x02\\x02\\u0560\\u0562\\x05\\x10\\t\\x02\\u0561\\u0560\\x03\\x02\",\"\\x02\\x02\\u0561\\u0562\\x03\\x02\\x02\\x02\\u0562\\u0566\\x03\\x02\",\"\\x02\\x02\\u0563\\u0567\\x05\\x12\\n\\x02\\u0564\\u0567\\x05R*\\x02\",\"\\u0565\\u0567\\x05\\x0E\\b\\x02\\u0566\\u0563\\x03\\x02\\x02\\x02\",\"\\u0566\\u0564\\x03\\x02\\x02\\x02\\u0566\\u0565\\x03\\x02\\x02\\x02\",\"\\u0566\\u0567\\x03\\x02\\x02\\x02\\u0567\\u056A\\x03\\x02\\x02\\x02\",\"\\u0568\\u056B\\x05\\x14\\x0B\\x02\\u0569\\u056B\\x05\\x16\\f\\x02\",\"\\u056A\\u0568\\x03\\x02\\x02\\x02\\u056A\\u0569\\x03\\x02\\x02\\x02\",\"\\u056A\\u056B\\x03\\x02\\x02\\x02\\u056B\\u056D\\x03\\x02\\x02\\x02\",\"\\u056C\\u056E\\x05\\f\\x07\\x02\\u056D\\u056C\\x03\\x02\\x02\\x02\",\"\\u056D\\u056E\\x03\\x02\\x02\\x02\\u056EQ\\x03\\x02\\x02\\x02\",\"\\u056F\\u0570\\x07\\xC2\\x02\\x02\\u0570\\u0571\\x05\\x06\\x04\\x02\",\"\\u0571S\\x03\\x02\\x02\\x02\\u0572\\u0573\\x07\\x92\\x02\\x02\",\"\\u0573\\u0574\\x07B\\x02\\x02\\u0574\\u0579\\x05\\xA6T\\x02\\u0575\",\"\\u0576\\x07\\x0E\\x02\\x02\\u0576\\u0578\\x05\\xA6T\\x02\\u0577\",\"\\u0575\\x03\\x02\\x02\\x02\\u0578\\u057B\\x03\\x02\\x02\\x02\\u0579\",\"\\u0577\\x03\\x02\\x02\\x02\\u0579\\u057A\\x03\\x02\\x02\\x02\\u057A\",\"U\\x03\\x02\\x02\\x02\\u057B\\u0579\\x03\\x02\\x02\\x02\\u057C\",\"\\u057D\\x07A\\x02\\x02\\u057D\\u057E\\x07B\\x02\\x02\\u057E\\u0583\",\"\\x05X-\\x02\\u057F\\u0580\\x07\\x0E\\x02\\x02\\u0580\\u0582\\x05\",\"X-\\x02\\u0581\\u057F\\x03\\x02\\x02\\x02\\u0582\\u0585\\x03\\x02\",\"\\x02\\x02\\u0583\\u0581\\x03\\x02\\x02\\x02\\u0583\\u0584\\x03\\x02\",\"\\x02\\x02\\u0584W\\x03\\x02\\x02\\x02\\u0585\\u0583\\x03\\x02\",\"\\x02\\x02\\u0586\\u0588\\x05\\xA6T\\x02\\u0587\\u0589\\t\\f\\x02\\x02\",\"\\u0588\\u0587\\x03\\x02\\x02\\x02\\u0588\\u0589\\x03\\x02\\x02\\x02\",\"\\u0589Y\\x03\\x02\\x02\\x02\\u058A\\u058B\\x07m\\x02\\x02\\u058B\",\"\\u058E\\x07\\xB1\\x02\\x02\\u058C\\u058E\\x07\\x94\\x02\\x02\\u058D\",\"\\u058A\\x03\\x02\\x02\\x02\\u058D\\u058C\\x03\\x02\\x02\\x02\\u058E\",\"\\u058F\\x03\\x02\\x02\\x02\\u058F\\u0590\\x07*\\x02\\x02\\u0590\",\"\\u0591\\x05\\\\/\\x02\\u0591\\u0592\\x07&\\x02\\x02\\u0592\\u0593\\x05\",\"\\\\/\\x02\\u0593[\\x03\\x02\\x02\\x02\\u0594\\u0595\\x07\\xE5\\x02\",\"\\x02\\u0595\\u05A0\\x07\\x8F\\x02\\x02\\u0596\\u0597\\x07\\xE5\\x02\",\"\\x02\\u0597\\u05A0\\x07\\x90\\x02\\x02\\u0598\\u0599\\x07\\x95\\x02\",\"\\x02\\u0599\\u059A\\x07m\\x02\\x02\\u059A\\u05A0\\x07\\xB2\\x02\",\"\\x02\\u059B\\u059C\\x07\\x91\\x02\\x02\\u059C\\u05A0\\x07\\x8F\\x02\",\"\\x02\\u059D\\u059E\\x07\\x91\\x02\\x02\\u059E\\u05A0\\x07\\x90\\x02\",\"\\x02\\u059F\\u0594\\x03\\x02\\x02\\x02\\u059F\\u0596\\x03\\x02\\x02\",\"\\x02\\u059F\\u0598\\x03\\x02\\x02\\x02\\u059F\\u059B\\x03\\x02\\x02\",\"\\x02\\u059F\\u059D\\x03\\x02\\x02\\x02\\u05A0]\\x03\\x02\\x02\",\"\\x02\\u05A1\\u05A2\\x05\\xBC_\\x02\\u05A2\\u05A7\\x05\\xA6T\\x02\",\"\\u05A3\\u05A4\\x07\\x0E\\x02\\x02\\u05A4\\u05A6\\x05\\xA6T\\x02\",\"\\u05A5\\u05A3\\x03\\x02\\x02\\x02\\u05A6\\u05A9\\x03\\x02\\x02\\x02\",\"\\u05A7\\u05A5\\x03\\x02\\x02\\x02\\u05A7\\u05A8\\x03\\x02\\x02\\x02\",\"\\u05A8\\u05AE\\x03\\x02\\x02\\x02\\u05A9\\u05A7\\x03\\x02\\x02\\x02\",\"\\u05AA\\u05AB\\x07\\x86\\x02\\x02\\u05AB\\u05AC\\x07>\\x02\\x02\",\"\\u05AC\\u05AE\\x05\\x06\\x04\\x02\\u05AD\\u05A1\\x03\\x02\\x02\\x02\",\"\\u05AD\\u05AA\\x03\\x02\\x02\\x02\\u05AE_\\x03\\x02\\x02\\x02\",\"\\u05AF\\u05B0\\x07\\x88\\x02\\x02\\u05B0\\u05B1\\x05\\x06\\x04\\x02\",\"\\u05B1a\\x03\\x02\\x02\\x02\\u05B2\\u05B3\\x05\\xA4S\\x02\\u05B3\",\"\\u05B6\\x05f4\\x02\\u05B4\\u05B5\\x07\\xD1\\x02\\x02\\u05B5\\u05B7\",\"\\x05\\xBE`\\x02\\u05B6\\u05B4\\x03\\x02\\x02\\x02\\u05B6\\u05B7\",\"\\x03\\x02\\x02\\x02\\u05B7c\\x03\\x02\\x02\\x02\\u05B8\\u05BC\",\"\\x05j6\\x02\\u05B9\\u05BC\\x05n8\\x02\\u05BA\\u05BC\\x05l7\\x02\\u05BB\",\"\\u05B8\\x03\\x02\\x02\\x02\\u05BB\\u05B9\\x03\\x02\\x02\\x02\\u05BB\",\"\\u05BA\\x03\\x02\\x02\\x02\\u05BCe\\x03\\x02\\x02\\x02\\u05BD\",\"\\u05C3\\x05j6\\x02\\u05BE\\u05C3\\x05n8\\x02\\u05BF\\u05C3\\x05p9\\x02\",\"\\u05C0\\u05C3\\x05h5\\x02\\u05C1\\u05C3\\x05l7\\x02\\u05C2\\u05BD\\x03\",\"\\x02\\x02\\x02\\u05C2\\u05BE\\x03\\x02\\x02\\x02\\u05C2\\u05BF\\x03\",\"\\x02\\x02\\x02\\u05C2\\u05C0\\x03\\x02\\x02\\x02\\u05C2\\u05C1\\x03\",\"\\x02\\x02\\x02\\u05C3g\\x03\\x02\\x02\\x02\\u05C4\\u05C8\\x07\",\"u\\x02\\x02\\u05C5\\u05C8\\x05r:\\x02\\u05C6\\u05C8\\x05t;\\x02\\u05C7\",\"\\u05C4\\x03\\x02\\x02\\x02\\u05C7\\u05C5\\x03\\x02\\x02\\x02\\u05C7\",\"\\u05C6\\x03\\x02\\x02\\x02\\u05C8i\\x03\\x02\\x02\\x02\\u05C9\",\"\\u05CC\\x05\\xC0a\\x02\\u05CA\\u05CC\\x05v<\\x02\\u05CB\\u05C9\\x03\",\"\\x02\\x02\\x02\\u05CB\\u05CA\\x03\\x02\\x02\\x02\\u05CC\\u05CE\\x03\",\"\\x02\\x02\\x02\\u05CD\\u05CF\\x05\\x8EH\\x02\\u05CE\\u05CD\\x03\",\"\\x02\\x02\\x02\\u05CE\\u05CF\\x03\\x02\\x02\\x02\\u05CF\\u05D4\\x03\",\"\\x02\\x02\\x02\\u05D0\\u05D2\\x07)\\x02\\x02\\u05D1\\u05D0\\x03\",\"\\x02\\x02\\x02\\u05D1\\u05D2\\x03\\x02\\x02\\x02\\u05D2\\u05D3\\x03\",\"\\x02\\x02\\x02\\u05D3\\u05D5\\x07\\xEA\\x02\\x02\\u05D4\\u05D1\\x03\",\"\\x02\\x02\\x02\\u05D4\\u05D5\\x03\\x02\\x02\\x02\\u05D5k\\x03\",\"\\x02\\x02\\x02\\u05D6\\u05DB\\x05\\xB2Z\\x02\\u05D7\\u05D8\\x07\",\"\\x12\\x02\\x02\\u05D8\\u05D9\\x05j6\\x02\\u05D9\\u05DA\\x07\\x13\",\"\\x02\\x02\\u05DA\\u05DC\\x03\\x02\\x02\\x02\\u05DB\\u05D7\\x03\\x02\",\"\\x02\\x02\\u05DB\\u05DC\\x03\\x02\\x02\\x02\\u05DCm\\x03\\x02\",\"\\x02\\x02\\u05DD\\u05E9\\x07o\\x02\\x02\\u05DE\\u05DF\\x07\\x06\",\"\\x02\\x02\\u05DF\\u05E4\\x05\\x90I\\x02\\u05E0\\u05E1\\x07\\x0E\",\"\\x02\\x02\\u05E1\\u05E3\\x05\\x90I\\x02\\u05E2\\u05E0\\x03\\x02\",\"\\x02\\x02\\u05E3\\u05E6\\x03\\x02\\x02\\x02\\u05E4\\u05E2\\x03\\x02\",\"\\x02\\x02\\u05E4\\u05E5\\x03\\x02\\x02\\x02\\u05E5\\u05E7\\x03\\x02\",\"\\x02\\x02\\u05E6\\u05E4\\x03\\x02\\x02\\x02\\u05E7\\u05E8\\x07\\x07\",\"\\x02\\x02\\u05E8\\u05EA\\x03\\x02\\x02\\x02\\u05E9\\u05DE\\x03\\x02\",\"\\x02\\x02\\u05E9\\u05EA\\x03\\x02\\x02\\x02\\u05EAo\\x03\\x02\",\"\\x02\\x02\\u05EB\\u05F0\\x07\\xE3\\x02\\x02\\u05EC\\u05ED\\x07\\x12\",\"\\x02\\x02\\u05ED\\u05EE\\x05j6\\x02\\u05EE\\u05EF\\x07\\x13\\x02\",\"\\x02\\u05EF\\u05F1\\x03\\x02\\x02\\x02\\u05F0\\u05EC\\x03\\x02\\x02\",\"\\x02\\u05F0\\u05F1\\x03\\x02\\x02\\x02\\u05F1q\\x03\\x02\\x02\",\"\\x02\\u05F2\\u0610\\x07s\\x02\\x02\\u05F3\\u05FF\\x07\\xDF\\x02\",\"\\x02\\u05F4\\u05F5\\x07\\x06\\x02\\x02\\u05F5\\u05FA\\x05v<\\x02\",\"\\u05F6\\u05F7\\x07\\f\\x02\\x02\\u05F7\\u05F9\\x05v<\\x02\\u05F8\\u05F6\",\"\\x03\\x02\\x02\\x02\\u05F9\\u05FC\\x03\\x02\\x02\\x02\\u05FA\\u05F8\",\"\\x03\\x02\\x02\\x02\\u05FA\\u05FB\\x03\\x02\\x02\\x02\\u05FB\\u05FD\",\"\\x03\\x02\\x02\\x02\\u05FC\\u05FA\\x03\\x02\\x02\\x02\\u05FD\\u05FE\",\"\\x07\\x07\\x02\\x02\\u05FE\\u0600\\x03\\x02\\x02\\x02\\u05FF\\u05F4\",\"\\x03\\x02\\x02\\x02\\u05FF\\u0600\\x03\\x02\\x02\\x02\\u0600\\u0610\",\"\\x03\\x02\\x02\\x02\\u0601\\u060D\\x07\\xE0\\x02\\x02\\u0602\\u0603\",\"\\x07\\x06\\x02\\x02\\u0603\\u0608\\x05\\xA4S\\x02\\u0604\\u0605\",\"\\x07\\f\\x02\\x02\\u0605\\u0607\\x05\\xA4S\\x02\\u0606\\u0604\\x03\",\"\\x02\\x02\\x02\\u0607\\u060A\\x03\\x02\\x02\\x02\\u0608\\u0606\\x03\",\"\\x02\\x02\\x02\\u0608\\u0609\\x03\\x02\\x02\\x02\\u0609\\u060B\\x03\",\"\\x02\\x02\\x02\\u060A\\u0608\\x03\\x02\\x02\\x02\\u060B\\u060C\\x07\",\"\\x07\\x02\\x02\\u060C\\u060E\\x03\\x02\\x02\\x02\\u060D\\u0602\\x03\",\"\\x02\\x02\\x02\\u060D\\u060E\\x03\\x02\\x02\\x02\\u060E\\u0610\\x03\",\"\\x02\\x02\\x02\\u060F\\u05F2\\x03\\x02\\x02\\x02\\u060F\\u05F3\\x03\",\"\\x02\\x02\\x02\\u060F\\u0601\\x03\\x02\\x02\\x02\\u0610s\\x03\",\"\\x02\\x02\\x02\\u0611\\u063A\\x07t\\x02\\x02\\u0612\\u0623\\x07\",\"\\xE1\\x02\\x02\\u0613\\u0614\\x07\\x06\\x02\\x02\\u0614\\u0620\\x07\",\"\\xEC\\x02\\x02\\u0615\\u0616\\x07\\x04\\x02\\x02\\u0616\\u061B\\x05\",\"v<\\x02\\u0617\\u0618\\x07\\f\\x02\\x02\\u0618\\u061A\\x05v<\\x02\\u0619\",\"\\u0617\\x03\\x02\\x02\\x02\\u061A\\u061D\\x03\\x02\\x02\\x02\\u061B\",\"\\u0619\\x03\\x02\\x02\\x02\\u061B\\u061C\\x03\\x02\\x02\\x02\\u061C\",\"\\u061E\\x03\\x02\\x02\\x02\\u061D\\u061B\\x03\\x02\\x02\\x02\\u061E\",\"\\u061F\\x07\\x05\\x02\\x02\\u061F\\u0621\\x03\\x02\\x02\\x02\\u0620\",\"\\u0615\\x03\\x02\\x02\\x02\\u0620\\u0621\\x03\\x02\\x02\\x02\\u0621\",\"\\u0622\\x03\\x02\\x02\\x02\\u0622\\u0624\\x07\\x07\\x02\\x02\\u0623\",\"\\u0613\\x03\\x02\\x02\\x02\\u0623\\u0624\\x03\\x02\\x02\\x02\\u0624\",\"\\u063A\\x03\\x02\\x02\\x02\\u0625\\u0637\\x07\\xE2\\x02\\x02\\u0626\",\"\\u0627\\x07\\x06\\x02\\x02\\u0627\\u0633\\x05\\xA4S\\x02\\u0628\",\"\\u0629\\x07\\x04\\x02\\x02\\u0629\\u062E\\x05\\xA4S\\x02\\u062A\",\"\\u062B\\x07\\f\\x02\\x02\\u062B\\u062D\\x05\\xA4S\\x02\\u062C\\u062A\",\"\\x03\\x02\\x02\\x02\\u062D\\u0630\\x03\\x02\\x02\\x02\\u062E\\u062C\",\"\\x03\\x02\\x02\\x02\\u062E\\u062F\\x03\\x02\\x02\\x02\\u062F\\u0631\",\"\\x03\\x02\\x02\\x02\\u0630\\u062E\\x03\\x02\\x02\\x02\\u0631\\u0632\",\"\\x07\\x05\\x02\\x02\\u0632\\u0634\\x03\\x02\\x02\\x02\\u0633\\u0628\",\"\\x03\\x02\\x02\\x02\\u0633\\u0634\\x03\\x02\\x02\\x02\\u0634\\u0635\",\"\\x03\\x02\\x02\\x02\\u0635\\u0636\\x07\\x07\\x02\\x02\\u0636\\u0638\",\"\\x03\\x02\\x02\\x02\\u0637\\u0626\\x03\\x02\\x02\\x02\\u0637\\u0638\",\"\\x03\\x02\\x02\\x02\\u0638\\u063A\\x03\\x02\\x02\\x02\\u0639\\u0611\",\"\\x03\\x02\\x02\\x02\\u0639\\u0612\\x03\\x02\\x02\\x02\\u0639\\u0625\",\"\\x03\\x02\\x02\\x02\\u063Au\\x03\\x02\\x02\\x02\\u063B\\u063C\",\"\\x07\\xEC\\x02\\x02\\u063Cw\\x03\\x02\\x02\\x02\\u063D\\u063E\",\"\\x07\\xEC\\x02\\x02\\u063Ey\\x03\\x02\\x02\\x02\\u063F\\u0640\",\"\\t\\r\\x02\\x02\\u0640\\u0645\\x05|?\\x02\\u0641\\u0642\\x07\\x0E\\x02\",\"\\x02\\u0642\\u0644\\x05|?\\x02\\u0643\\u0641\\x03\\x02\\x02\\x02\",\"\\u0644\\u0647\\x03\\x02\\x02\\x02\\u0645\\u0643\\x03\\x02\\x02\\x02\",\"\\u0645\\u0646\\x03\\x02\\x02\\x02\\u0646{\\x03\\x02\\x02\\x02\",\"\\u0647\\u0645\\x03\\x02\\x02\\x02\\u0648\\u064B\\x05\\xA4S\\x02\",\"\\u0649\\u064A\\x07%\\x02\\x02\\u064A\\u064C\\x05\\xA2R\\x02\\u064B\",\"\\u0649\\x03\\x02\\x02\\x02\\u064B\\u064C\\x03\\x02\\x02\\x02\\u064C\",\"}\\x03\\x02\\x02\\x02\\u064D\\u0652\\x05\\x80A\\x02\\u064E\\u064F\",\"\\x07\\xFA\\x02\\x02\\u064F\\u0651\\x05\\x80A\\x02\\u0650\\u064E\",\"\\x03\\x02\\x02\\x02\\u0651\\u0654\\x03\\x02\\x02\\x02\\u0652\\u0650\",\"\\x03\\x02\\x02\\x02\\u0652\\u0653\\x03\\x02\\x02\\x02\\u0653\\x7F\",\"\\x03\\x02\\x02\\x02\\u0654\\u0652\\x03\\x02\\x02\\x02\\u0655\\u0656\",\"\\x07\\xEC\\x02\\x02\\u0656\\u0658\\x07\\x03\\x02\\x02\\u0657\\u0655\",\"\\x03\\x02\\x02\\x02\\u0657\\u0658\\x03\\x02\\x02\\x02\\u0658\\u065D\",\"\\x03\\x02\\x02\\x02\\u0659\\u065A\\x07\\xAE\\x02\\x02\\u065A\\u065B\",\"\\x05\\x06\\x04\\x02\\u065B\\u065C\\x07\\x1A\\x02\\x02\\u065C\\u065E\",\"\\x03\\x02\\x02\\x02\\u065D\\u0659\\x03\\x02\\x02\\x02\\u065D\\u065E\",\"\\x03\\x02\\x02\\x02\\u065E\\u065F\\x03\\x02\\x02\\x02\\u065F\\u0661\",\"\\x05\\x06\\x04\\x02\\u0660\\u0662\\x05\\xAAV\\x02\\u0661\\u0660\",\"\\x03\\x02\\x02\\x02\\u0661\\u0662\\x03\\x02\\x02\\x02\\u0662\\u0664\",\"\\x03\\x02\\x02\\x02\\u0663\\u0665\\x05\\xACW\\x02\\u0664\\u0663\",\"\\x03\\x02\\x02\\x02\\u0664\\u0665\\x03\\x02\\x02\\x02\\u0665\\x81\",\"\\x03\\x02\\x02\\x02\\u0666\\u066B\\x05\\x84C\\x02\\u0667\\u0668\",\"\\x07\\xFA\\x02\\x02\\u0668\\u066A\\x05\\x84C\\x02\\u0669\\u0667\",\"\\x03\\x02\\x02\\x02\\u066A\\u066D\\x03\\x02\\x02\\x02\\u066B\\u0669\",\"\\x03\\x02\\x02\\x02\\u066B\\u066C\\x03\\x02\\x02\\x02\\u066C\\x83\",\"\\x03\\x02\\x02\\x02\\u066D\\u066B\\x03\\x02\\x02\\x02\\u066E\\u066F\",\"\\x07\\xEC\\x02\\x02\\u066F\\u0671\\x07\\x03\\x02\\x02\\u0670\\u066E\",\"\\x03\\x02\\x02\\x02\\u0670\\u0671\\x03\\x02\\x02\\x02\\u0671\\u0672\",\"\\x03\\x02\\x02\\x02\\u0672\\u0674\\x05\\x8AF\\x02\\u0673\\u0675\",\"\\x05\\xAAV\\x02\\u0674\\u0673\\x03\\x02\\x02\\x02\\u0674\\u0675\",\"\\x03\\x02\\x02\\x02\\u0675\\u0677\\x03\\x02\\x02\\x02\\u0676\\u0678\",\"\\x05\\xACW\\x02\\u0677\\u0676\\x03\\x02\\x02\\x02\\u0677\\u0678\",\"\\x03\\x02\\x02\\x02\\u0678\\x85\\x03\\x02\\x02\\x02\\u0679\\u067C\",\"\\t\\r\\x02\\x02\\u067A\\u067B\\x07\\x9D\\x02\\x02\\u067B\\u067D\\x05\",\"\\x88E\\x02\\u067C\\u067A\\x03\\x02\\x02\\x02\\u067C\\u067D\\x03\",\"\\x02\\x02\\x02\\u067D\\u067E\\x03\\x02\\x02\\x02\\u067E\\u067F\\x07\",\"v\\x02\\x02\\u067F\\u0680\\x07\\xEC\\x02\\x02\\u0680\\x87\\x03\",\"\\x02\\x02\\x02\\u0681\\u0686\\x05|?\\x02\\u0682\\u0683\\x07\\x0E\",\"\\x02\\x02\\u0683\\u0685\\x05|?\\x02\\u0684\\u0682\\x03\\x02\\x02\",\"\\x02\\u0685\\u0688\\x03\\x02\\x02\\x02\\u0686\\u0684\\x03\\x02\\x02\",\"\\x02\\u0686\\u0687\\x03\\x02\\x02\\x02\\u0687\\x89\\x03\\x02\\x02\",\"\\x02\\u0688\\u0686\\x03\\x02\\x02\\x02\\u0689\\u068A\\x07\\xAE\\x02\",\"\\x02\\u068A\\u068B\\x05\\x06\\x04\\x02\\u068B\\u068C\\x07\\x1A\\x02\",\"\\x02\\u068C\\u068E\\x03\\x02\\x02\\x02\\u068D\\u0689\\x03\\x02\\x02\",\"\\x02\\u068D\\u068E\\x03\\x02\\x02\\x02\\u068E\\u068F\\x03\\x02\\x02\",\"\\x02\\u068F\\u0691\\x07\\xEC\\x02\\x02\\u0690\\u0692\\x05\\xAEX\",\"\\x02\\u0691\\u0690\\x03\\x02\\x02\\x02\\u0691\\u0692\\x03\\x02\\x02\",\"\\x02\\u0692\\u0693\\x03\\x02\\x02\\x02\\u0693\\u0697\\x05\\x8CG\",\"\\x02\\u0694\\u0696\\x05\\x8CG\\x02\\u0695\\u0694\\x03\\x02\\x02\",\"\\x02\\u0696\\u0699\\x03\\x02\\x02\\x02\\u0697\\u0695\\x03\\x02\\x02\",\"\\x02\\u0697\\u0698\\x03\\x02\\x02\\x02\\u0698\\x8B\\x03\\x02\\x02\",\"\\x02\\u0699\\u0697\\x03\\x02\\x02\\x02\\u069A\\u069C\\t\\x02\\x02\",\"\\x02\\u069B\\u069A\\x03\\x02\\x02\\x02\\u069B\\u069C\\x03\\x02\\x02\",\"\\x02\\u069C\\u069D\\x03\\x02\\x02\\x02\\u069D\\u06A2\\x07\\xEC\\x02\",\"\\x02\\u069E\\u069F\\x07\\b\\x02\\x02\\u069F\\u06A0\\x05\\x06\\x04\",\"\\x02\\u06A0\\u06A1\\x07\\t\\x02\\x02\\u06A1\\u06A3\\x03\\x02\\x02\",\"\\x02\\u06A2\\u069E\\x03\\x02\\x02\\x02\\u06A2\\u06A3\\x03\\x02\\x02\",\"\\x02\\u06A3\\x8D\\x03\\x02\\x02\\x02\\u06A4\\u06A5\\x07\\b\\x02\",\"\\x02\\u06A5\\u06A6\\x05\\x06\\x04\\x02\\u06A6\\u06A7\\x07\\t\\x02\",\"\\x02\\u06A7\\u06B4\\x03\\x02\\x02\\x02\\u06A8\\u06A9\\x07\\x06\\x02\",\"\\x02\\u06A9\\u06AE\\x05\\xBE`\\x02\\u06AA\\u06AB\\x07\\x0E\\x02\",\"\\x02\\u06AB\\u06AD\\x05\\xBE`\\x02\\u06AC\\u06AA\\x03\\x02\\x02\",\"\\x02\\u06AD\\u06B0\\x03\\x02\\x02\\x02\\u06AE\\u06AC\\x03\\x02\\x02\",\"\\x02\\u06AE\\u06AF\\x03\\x02\\x02\\x02\\u06AF\\u06B1\\x03\\x02\\x02\",\"\\x02\\u06B0\\u06AE\\x03\\x02\\x02\\x02\\u06B1\\u06B2\\x07\\x07\\x02\",\"\\x02\\u06B2\\u06B4\\x03\\x02\\x02\\x02\\u06B3\\u06A4\\x03\\x02\\x02\",\"\\x02\\u06B3\\u06A8\\x03\\x02\\x02\\x02\\u06B4\\x8F\\x03\\x02\\x02\",\"\\x02\\u06B5\\u06B8\\x05l7\\x02\\u06B6\\u06B9\\x05\\xA6T\\x02\\u06B7\",\"\\u06B9\\x05\\x92J\\x02\\u06B8\\u06B6\\x03\\x02\\x02\\x02\\u06B8\",\"\\u06B7\\x03\\x02\\x02\\x02\\u06B9\\x91\\x03\\x02\\x02\\x02\\u06BA\",\"\\u06BC\\x07i\\x02\\x02\\u06BB\\u06BD\\t\\x0E\\x02\\x02\\u06BC\\u06BB\",\"\\x03\\x02\\x02\\x02\\u06BC\\u06BD\\x03\\x02\\x02\\x02\\u06BD\\x93\",\"\\x03\\x02\\x02\\x02\\u06BE\\u06BF\\t\\x0F\\x02\\x02\\u06BF\\x95\",\"\\x03\\x02\\x02\\x02\\u06C0\\u06C1\\t\\x10\\x02\\x02\\u06C1\\x97\",\"\\x03\\x02\\x02\\x02\\u06C2\\u06C3\\x07\\x9D\\x02\\x02\\u06C3\\u06C8\",\"\\x05\\xA6T\\x02\\u06C4\\u06C5\\x07\\x0E\\x02\\x02\\u06C5\\u06C7\",\"\\x05\\xA6T\\x02\\u06C6\\u06C4\\x03\\x02\\x02\\x02\\u06C7\\u06CA\",\"\\x03\\x02\\x02\\x02\\u06C8\\u06C6\\x03\\x02\\x02\\x02\\u06C8\\u06C9\",\"\\x03\\x02\\x02\\x02\\u06C9\\x99\\x03\\x02\\x02\\x02\\u06CA\\u06C8\",\"\\x03\\x02\\x02\\x02\\u06CB\\u06CC\\t\\x11\\x02\\x02\\u06CC\\x9B\",\"\\x03\\x02\\x02\\x02\\u06CD\\u06CE\\x07<\\x02\\x02\\u06CE\\u06CF\",\"\\x05\\x06\\x04\\x02\\u06CF\\x9D\\x03\\x02\\x02\\x02\\u06D0\\u06D1\",\"\\t\\x12\\x02\\x02\\u06D1\\x9F\\x03\\x02\\x02\\x02\\u06D2\\u06D3\",\"\\t\\x13\\x02\\x02\\u06D3\\xA1\\x03\\x02\\x02\\x02\\u06D4\\u06D5\",\"\\x07\\xEC\\x02\\x02\\u06D5\\xA3\\x03\\x02\\x02\\x02\\u06D6\\u06D7\",\"\\x07\\xEC\\x02\\x02\\u06D7\\xA5\\x03\\x02\\x02\\x02\\u06D8\\u06D9\",\"\\x07\\xEC\\x02\\x02\\u06D9\\xA7\\x03\\x02\\x02\\x02\\u06DA\\u06DB\",\"\\x07\\x06\\x02\\x02\\u06DB\\u06E0\\x05\\xBE`\\x02\\u06DC\\u06DD\",\"\\x07\\x0E\\x02\\x02\\u06DD\\u06DF\\x05\\xBE`\\x02\\u06DE\\u06DC\",\"\\x03\\x02\\x02\\x02\\u06DF\\u06E2\\x03\\x02\\x02\\x02\\u06E0\\u06DE\",\"\\x03\\x02\\x02\\x02\\u06E0\\u06E1\\x03\\x02\\x02\\x02\\u06E1\\u06E3\",\"\\x03\\x02\\x02\\x02\\u06E2\\u06E0\\x03\\x02\\x02\\x02\\u06E3\\u06E4\",\"\\x07\\x07\\x02\\x02\\u06E4\\xA9\\x03\\x02\\x02\\x02\\u06E5\\u06E6\",\"\\x07=\\x02\\x02\\u06E6\\u06E7\\x05\\xBE`\\x02\\u06E7\\xAB\\x03\",\"\\x02\\x02\\x02\\u06E8\\u06E9\\x07@\\x02\\x02\\u06E9\\u06EA\\x05\",\"\\xBE`\\x02\\u06EA\\xAD\\x03\\x02\\x02\\x02\\u06EB\\u06EC\\t\\x14\",\"\\x02\\x02\\u06EC\\xAF\\x03\\x02\\x02\\x02\\u06ED\\u06F0\\x05\\x06\",\"\\x04\\x02\\u06EE\\u06F0\\x07i\\x02\\x02\\u06EF\\u06ED\\x03\\x02\",\"\\x02\\x02\\u06EF\\u06EE\\x03\\x02\\x02\\x02\\u06F0\\xB1\\x03\\x02\",\"\\x02\\x02\\u06F1\\u06F7\\x07^\\x02\\x02\\u06F2\\u06F7\\x07\\xDE\",\"\\x02\\x02\\u06F3\\u06F7\\x07]\\x02\\x02\\u06F4\\u06F7\\x07_\\x02\",\"\\x02\\u06F5\\u06F7\\x05\\xB4[\\x02\\u06F6\\u06F1\\x03\\x02\\x02\",\"\\x02\\u06F6\\u06F2\\x03\\x02\\x02\\x02\\u06F6\\u06F3\\x03\\x02\\x02\",\"\\x02\\u06F6\\u06F4\\x03\\x02\\x02\\x02\\u06F6\\u06F5\\x03\\x02\\x02\",\"\\x02\\u06F7\\xB3\\x03\\x02\\x02\\x02\\u06F8\\u06F9\\x07d\\x02\",\"\\x02\\u06F9\\u06FA\\x07_\\x02\\x02\\u06FA\\xB5\\x03\\x02\\x02\",\"\\x02\\u06FB\\u06FC\\x07\\xEC\\x02\\x02\\u06FC\\xB7\\x03\\x02\\x02\",\"\\x02\\u06FD\\u06FE\\x07\\xEC\\x02\\x02\\u06FE\\xB9\\x03\\x02\\x02\",\"\\x02\\u06FF\\u0700\\x07\\xEC\\x02\\x02\\u0700\\xBB\\x03\\x02\\x02\",\"\\x02\\u0701\\u0702\\x07\\x86\\x02\\x02\\u0702\\u0706\\x07B\\x02\",\"\\x02\\u0703\\u0704\\x07\\x86\\x02\\x02\\u0704\\u0706\\x07\\x87\\x02\",\"\\x02\\u0705\\u0701\\x03\\x02\\x02\\x02\\u0705\\u0703\\x03\\x02\\x02\",\"\\x02\\u0706\\xBD\\x03\\x02\\x02\\x02\\u0707\\u0708\\t\\x15\\x02\",\"\\x02\\u0708\\xBF\\x03\\x02\\x02\\x02\\u0709\\u070A\\t\\x16\\x02\",\"\\x02\\u070A\\xC1\\x03\\x02\\x02\\x02\\u070B\\u070C\\t\\x17\\x02\",\"\\x02\\u070C\\xC3\\x03\\x02\\x02\\x02\\xD4\\xC9\\xD7\\xEC\\u010D\",\"\\u010F\\u0111\\u0120\\u012C\\u0134\\u013B\\u013D\\u0148\\u0151\\u015A\\u016C\\u017A\",\"\\u0189\\u0194\\u0197\\u019C\\u01BD\\u01C6\\u01C9\\u01D3\\u01D8\\u01DC\\u01E2\\u01E6\",\"\\u01F0\\u01F4\\u01F8\\u01FD\\u021F\\u022B\\u0236\\u023A\\u0243\\u0251\\u025A\\u028A\",\"\\u02A8\\u02AC\\u02B1\\u02B9\\u02D3\\u02D8\\u02DA\\u02DE\\u02E4\\u02ED\\u02F8\\u030A\",\"\\u0312\\u0316\\u0319\\u031C\\u031F\\u032E\\u0331\\u0334\\u033E\\u0342\\u0345\\u0348\",\"\\u034B\\u0353\\u0356\\u0359\\u035C\\u0360\\u0376\\u039C\\u03A3\\u03A5\\u03AE\\u03B0\",\"\\u03B9\\u03BB\\u03BD\\u03C5\\u03C7\\u03D0\\u03D2\\u03DB\\u03DD\\u03E6\\u03E8\\u03F1\",\"\\u03F3\\u03FC\\u03FE\\u0407\\u0409\\u040D\\u0415\\u0418\\u041B\\u0426\\u0429\\u042C\",\"\\u0434\\u0439\\u043C\\u043F\\u0449\\u044C\\u044F\\u045A\\u045D\\u0460\\u046B\\u046E\",\"\\u0471\\u047C\\u047F\\u0482\\u048D\\u0490\\u0493\\u049E\\u04A1\\u04A4\\u04AF\\u04B2\",\"\\u04B5\\u04C0\\u04C3\\u04C6\\u04D1\\u04D4\\u04D7\\u04E2\\u04E4\\u04E9\\u04F6\\u04F8\",\"\\u04FD\\u0509\\u0519\\u0524\\u052B\\u052F\\u0536\\u0545\\u054D\\u0556\\u0559\\u055E\",\"\\u0561\\u0566\\u056A\\u056D\\u0579\\u0583\\u0588\\u058D\\u059F\\u05A7\\u05AD\\u05B6\",\"\\u05BB\\u05C2\\u05C7\\u05CB\\u05CE\\u05D1\\u05D4\\u05DB\\u05E4\\u05E9\\u05F0\\u05FA\",\"\\u05FF\\u0608\\u060D\\u060F\\u061B\\u0620\\u0623\\u062E\\u0633\\u0637\\u0639\\u0645\",\"\\u064B\\u0652\\u0657\\u065D\\u0661\\u0664\\u066B\\u0670\\u0674\\u0677\\u067C\\u0686\",\"\\u068D\\u0691\\u0697\\u069B\\u06A2\\u06AE\\u06B3\\u06B8\\u06BC\\u06C8\\u06E0\\u06EF\",\"\\u06F6\\u0705\"].join(\"\");var atn=new antlr4.atn.ATNDeserializer().deserialize(serializedATN);var decisionsToDFA=atn.decisionToState.map(function(ds,index){return new antlr4.dfa.DFA(ds,index);});var sharedContextCache=new antlr4.PredictionContextCache();var literalNames=[null,\"':'\",\"'('\",\"')'\",\"'{'\",\"'}'\",\"'['\",\"']'\",\"'+'\",\"'-'\",\"'*'\",\"'/'\",null,\"'TODO-CUSTOMPIVOT'\",\"'='\",\"'<>'\",\"'<'\",\"'>'\",\"'<='\",\"'>='\",\"':='\",\"'#'\",\"'eval'\",\"'if'\",\"'then'\",\"'else'\",\"'using'\",\"'with'\",\"'current_date'\",\"'on'\",\"'drop'\",\"'keep'\",\"'calc'\",\"'attrcalc'\",\"'rename'\",\"'as'\",\"'and'\",\"'or'\",\"'xor'\",\"'not'\",\"'between'\",\"'in'\",\"'not_in'\",\"'isnull'\",\"'ex'\",\"'union'\",\"'diff'\",\"'symdiff'\",\"'intersect'\",\"'keys'\",null,\"'intyear'\",\"'intmonth'\",\"'intday'\",\"'check'\",\"'exists_in'\",\"'to'\",\"'return'\",\"'imbalance'\",\"'errorcode'\",\"'all'\",\"'aggr'\",\"'errorlevel'\",\"'order'\",\"'by'\",\"'rank'\",\"'asc'\",\"'desc'\",\"'min'\",\"'max'\",\"'first'\",\"'last'\",\"'indexof'\",\"'abs'\",\"'key'\",\"'ln'\",\"'log'\",\"'trunc'\",\"'round'\",\"'power'\",\"'mod'\",\"'length'\",\"'||'\",\"'trim'\",\"'upper'\",\"'lower'\",\"'substr'\",\"'sum'\",\"'avg'\",\"'median'\",\"'count'\",\"'identifier'\",\"'measure'\",\"'attribute'\",\"'filter'\",\"'merge'\",\"'exp'\",\"'role'\",\"'viral'\",\"'match_characters'\",\"'type'\",\"'nvl'\",\"'hierarchy'\",\"'_'\",\"'invalid'\",\"'valuedomain'\",\"'variable'\",\"'data'\",\"'structure'\",\"'dataset'\",\"'operator'\",\"'define'\",\"'<-'\",\"'datapoint'\",\"'hierarchical'\",\"'ruleset'\",\"'rule'\",\"'end'\",\"'alterDataset'\",\"'ltrim'\",\"'rtrim'\",\"'instr'\",\"'replace'\",\"'ceil'\",\"'floor'\",\"'sqrt'\",\"'any'\",\"'setdiff'\",\"'stddev_pop'\",\"'stddev_samp'\",\"'var_pop'\",\"'var_samp'\",\"'group'\",\"'except'\",\"'having'\",\"'first_value'\",\"'last_value'\",\"'lag'\",\"'lead'\",\"'ratio_to_report'\",\"'over'\",\"'preceding'\",\"'following'\",\"'unbounded'\",\"'partition'\",\"'rows'\",\"'range'\",\"'current'\",\"'valid'\",\"'fill_time_series'\",\"'flow_to_stock'\",\"'stock_to_flow'\",\"'timeshift'\",\"'measures'\",\"'no_measures'\",\"'condition'\",\"'boolean'\",\"'date'\",\"'time_period'\",\"'number'\",\"'string'\",\"'integer'\",\"'float'\",\"'list'\",\"'record'\",\"'restrict'\",\"'yyyy'\",\"'mm'\",\"'dd'\",\"'maxLength'\",\"'regexp'\",\"'is'\",\"'when'\",\"'from'\",\"'aggregates'\",\"'points'\",\"'point'\",\"'total'\",\"'partial'\",\"'always'\",\"'inner_join'\",\"'left_join'\",\"'cross_join'\",\"'full_join'\",\"'maps_from'\",\"'maps_to'\",\"'map_to'\",\"'map_from'\",\"'returns'\",\"'pivot'\",\"'unpivot'\",\"'sub'\",\"'apply'\",\"'conditioned'\",\"'period_indicator'\",\"'single'\",\"'duration'\",\"'time_agg'\",\"'unit'\",\"'Value'\",\"'valuedomains'\",\"'variables'\",\"'input'\",\"'output'\",\"'cast'\",\"'rule_priority'\",\"'dataset_priority'\",\"'default'\",\"'check_datapoint'\",\"'check_hierarchy'\",\"'computed'\",\"'non_null'\",\"'non_zero'\",\"'partial_null'\",\"'partial_zero'\",\"'always_null'\",\"'always_zero'\",\"'components'\",\"'all_measures'\",\"'scalar'\",\"'component'\",\"'datapoint_on_valuedomains'\",\"'datapoint_on_variables'\",\"'hierarchical_on_valuedomains'\",\"'hierarchical_on_variables'\",\"'set'\",\"'language'\",null,null,null,null,null,\"'null'\",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\"';'\"];var symbolicNames=[null,null,\"LPAREN\",\"RPAREN\",\"GLPAREN\",\"GRPAREN\",\"QLPAREN\",\"QRPAREN\",\"PLUS\",\"MINUS\",\"MUL\",\"DIV\",\"COMMA\",\"CUSTOMPIVOT\",\"EQ\",\"NEQ\",\"LT\",\"MT\",\"LE\",\"ME\",\"ASSIGN\",\"MEMBERSHIP\",\"EVAL\",\"IF\",\"THEN\",\"ELSE\",\"USING\",\"WITH\",\"CURRENT_DATE\",\"ON\",\"DROP\",\"KEEP\",\"CALC\",\"ATTRCALC\",\"RENAME\",\"AS\",\"AND\",\"OR\",\"XOR\",\"NOT\",\"BETWEEN\",\"IN\",\"NOT_IN\",\"ISNULL\",\"EX\",\"UNION\",\"DIFF\",\"SYMDIFF\",\"INTERSECT\",\"KEYS\",\"CARTESIAN_PER\",\"INTYEAR\",\"INTMONTH\",\"INTDAY\",\"CHECK\",\"EXISTS_IN\",\"TO\",\"RETURN\",\"IMBALANCE\",\"ERRORCODE\",\"ALL\",\"AGGREGATE\",\"ERRORLEVEL\",\"ORDER\",\"BY\",\"RANK\",\"ASC\",\"DESC\",\"MIN\",\"MAX\",\"FIRST\",\"LAST\",\"INDEXOF\",\"ABS\",\"KEY\",\"LN\",\"LOG\",\"TRUNC\",\"ROUND\",\"POWER\",\"MOD\",\"LEN\",\"CONCAT\",\"TRIM\",\"UCASE\",\"LCASE\",\"SUBSTR\",\"SUM\",\"AVG\",\"MEDIAN\",\"COUNT\",\"DIMENSION\",\"MEASURE\",\"ATTRIBUTE\",\"FILTER\",\"MERGE\",\"EXP\",\"ROLE\",\"VIRAL\",\"CHARSET_MATCH\",\"TYPE\",\"NVL\",\"HIERARCHY\",\"OPTIONAL\",\"INVALID\",\"VALUE_DOMAIN\",\"VARIABLE\",\"DATA\",\"STRUCTURE\",\"DATASET\",\"OPERATOR\",\"DEFINE\",\"PUT_SYMBOL\",\"DATAPOINT\",\"HIERARCHICAL\",\"RULESET\",\"RULE\",\"END\",\"ALTER_DATASET\",\"LTRIM\",\"RTRIM\",\"INSTR\",\"REPLACE\",\"CEIL\",\"FLOOR\",\"SQRT\",\"ANY\",\"SETDIFF\",\"STDDEV_POP\",\"STDDEV_SAMP\",\"VAR_POP\",\"VAR_SAMP\",\"GROUP\",\"EXCEPT\",\"HAVING\",\"FIRST_VALUE\",\"LAST_VALUE\",\"LAG\",\"LEAD\",\"RATIO_TO_REPORT\",\"OVER\",\"PRECEDING\",\"FOLLOWING\",\"UNBOUNDED\",\"PARTITION\",\"ROWS\",\"RANGE\",\"CURRENT\",\"VALID\",\"FILL_TIME_SERIES\",\"FLOW_TO_STOCK\",\"STOCK_TO_FLOW\",\"TIMESHIFT\",\"MEASURES\",\"NO_MEASURES\",\"CONDITION\",\"BOOLEAN\",\"DATE\",\"TIME_PERIOD\",\"NUMBER\",\"STRING\",\"INTEGER\",\"FLOAT\",\"LIST\",\"RECORD\",\"RESTRICT\",\"YYYY\",\"MM\",\"DD\",\"MAX_LENGTH\",\"REGEXP\",\"IS\",\"WHEN\",\"FROM\",\"AGGREGATES\",\"POINTS\",\"POINT\",\"TOTAL\",\"PARTIAL\",\"ALWAYS\",\"INNER_JOIN\",\"LEFT_JOIN\",\"CROSS_JOIN\",\"FULL_JOIN\",\"MAPS_FROM\",\"MAPS_TO\",\"MAP_TO\",\"MAP_FROM\",\"RETURNS\",\"PIVOT\",\"UNPIVOT\",\"SUBSPACE\",\"APPLY\",\"CONDITIONED\",\"PERIOD_INDICATOR\",\"SINGLE\",\"DURATION\",\"TIME_AGG\",\"UNIT\",\"VALUE\",\"VALUEDOMAINS\",\"VARIABLES\",\"INPUT\",\"OUTPUT\",\"CAST\",\"RULE_PRIORITY\",\"DATASET_PRIORITY\",\"DEFAULT\",\"CHECK_DATAPOINT\",\"CHECK_HIERARCHY\",\"COMPUTED\",\"NON_NULL\",\"NON_ZERO\",\"PARTIAL_NULL\",\"PARTIAL_ZERO\",\"ALWAYS_NULL\",\"ALWAYS_ZERO\",\"COMPONENTS\",\"ALL_MEASURES\",\"SCALAR\",\"COMPONENT\",\"DATAPOINT_ON_VD\",\"DATAPOINT_ON_VAR\",\"HIERARCHICAL_ON_VD\",\"HIERARCHICAL_ON_VAR\",\"SET\",\"LANGUAGE\",\"INTEGER_CONSTANT\",\"POSITIVE_CONSTANT\",\"NEGATIVE_CONSTANT\",\"FLOAT_CONSTANT\",\"BOOLEAN_CONSTANT\",\"NULL_CONSTANT\",\"STRING_CONSTANT\",\"IDENTIFIER\",\"DIGITS0_9\",\"MONTH\",\"DAY\",\"YEAR\",\"WEEK\",\"HOURS\",\"MINUTES\",\"SECONDS\",\"DATE_FORMAT\",\"TIME_FORMAT\",\"TIME_UNIT\",\"TIME\",\"WS\",\"EOL\",\"ML_COMMENT\",\"SL_COMMENT\",\"COMPARISON_OP\",\"FREQUENCY\"];var ruleNames=[\"start\",\"statement\",\"expr\",\"functions\",\"datasetClause\",\"renameClause\",\"aggrClause\",\"filterClause\",\"calcClause\",\"keepClause\",\"dropClause\",\"pivotClause\",\"customPivotClause\",\"unipivotClause\",\"subspaceClause\",\"joinOperators\",\"defOperators\",\"genericOperators\",\"parameter\",\"stringOperators\",\"numericOperators\",\"comparisonOperators\",\"timeOperators\",\"setOperators\",\"hierarchyOperators\",\"validationOperators\",\"conditionalOperators\",\"aggrOperators\",\"aggrOperatorsGrouping\",\"anFunction\",\"renameClauseItem\",\"componentClause\",\"aggregateClause\",\"aggrFunctionClause\",\"calcClauseItem\",\"subspaceClauseItem\",\"joinClauseWithoutUsing\",\"joinClause\",\"joinClauseItem\",\"joinBody\",\"joinApplyClause\",\"partitionByClause\",\"orderByClause\",\"orderByItem\",\"windowingClause\",\"limitClauseItem\",\"groupingClause\",\"havingClause\",\"parameterItem\",\"outputParameterType\",\"inputParameterType\",\"rulesetType\",\"scalarType\",\"componentType\",\"datasetType\",\"scalarSetType\",\"dpRuleset\",\"hrRuleset\",\"valueDomainName\",\"rulesetID\",\"rulesetSignature\",\"signature\",\"ruleClauseDatapoint\",\"ruleItemDatapoint\",\"ruleClauseHierarchical\",\"ruleItemHierarchical\",\"hierRuleSignature\",\"valueDomainSignature\",\"codeItemRelation\",\"codeItemRelationClause\",\"scalarTypeConstraint\",\"compConstraint\",\"multModifier\",\"validationOutput\",\"validationMode\",\"conditionClause\",\"inputMode\",\"imbalanceExpr\",\"inputModeHierarchy\",\"outputModeHierarchy\",\"alias\",\"varID\",\"componentID\",\"lists\",\"erCode\",\"erLevel\",\"comparisonOperand\",\"optionalExpr\",\"componentRole\",\"viralAttribute\",\"valueDomainID\",\"operatorID\",\"routineName\",\"groupKeyword\",\"constant\",\"basicScalarType\",\"retainType\"];function VtlParser(input){antlr4.Parser.call(this,input);this._interp=new antlr4.atn.ParserATNSimulator(this,atn,decisionsToDFA,sharedContextCache);this.ruleNames=ruleNames;this.literalNames=literalNames;this.symbolicNames=symbolicNames;return this;}VtlParser.prototype=Object.create(antlr4.Parser.prototype);VtlParser.prototype.constructor=VtlParser;Object.defineProperty(VtlParser.prototype,\"atn\",{get:function get(){return atn;}});VtlParser.EOF=antlr4.Token.EOF;VtlParser.T__0=1;VtlParser.LPAREN=2;VtlParser.RPAREN=3;VtlParser.GLPAREN=4;VtlParser.GRPAREN=5;VtlParser.QLPAREN=6;VtlParser.QRPAREN=7;VtlParser.PLUS=8;VtlParser.MINUS=9;VtlParser.MUL=10;VtlParser.DIV=11;VtlParser.COMMA=12;VtlParser.CUSTOMPIVOT=13;VtlParser.EQ=14;VtlParser.NEQ=15;VtlParser.LT=16;VtlParser.MT=17;VtlParser.LE=18;VtlParser.ME=19;VtlParser.ASSIGN=20;VtlParser.MEMBERSHIP=21;VtlParser.EVAL=22;VtlParser.IF=23;VtlParser.THEN=24;VtlParser.ELSE=25;VtlParser.USING=26;VtlParser.WITH=27;VtlParser.CURRENT_DATE=28;VtlParser.ON=29;VtlParser.DROP=30;VtlParser.KEEP=31;VtlParser.CALC=32;VtlParser.ATTRCALC=33;VtlParser.RENAME=34;VtlParser.AS=35;VtlParser.AND=36;VtlParser.OR=37;VtlParser.XOR=38;VtlParser.NOT=39;VtlParser.BETWEEN=40;VtlParser.IN=41;VtlParser.NOT_IN=42;VtlParser.ISNULL=43;VtlParser.EX=44;VtlParser.UNION=45;VtlParser.DIFF=46;VtlParser.SYMDIFF=47;VtlParser.INTERSECT=48;VtlParser.KEYS=49;VtlParser.CARTESIAN_PER=50;VtlParser.INTYEAR=51;VtlParser.INTMONTH=52;VtlParser.INTDAY=53;VtlParser.CHECK=54;VtlParser.EXISTS_IN=55;VtlParser.TO=56;VtlParser.RETURN=57;VtlParser.IMBALANCE=58;VtlParser.ERRORCODE=59;VtlParser.ALL=60;VtlParser.AGGREGATE=61;VtlParser.ERRORLEVEL=62;VtlParser.ORDER=63;VtlParser.BY=64;VtlParser.RANK=65;VtlParser.ASC=66;VtlParser.DESC=67;VtlParser.MIN=68;VtlParser.MAX=69;VtlParser.FIRST=70;VtlParser.LAST=71;VtlParser.INDEXOF=72;VtlParser.ABS=73;VtlParser.KEY=74;VtlParser.LN=75;VtlParser.LOG=76;VtlParser.TRUNC=77;VtlParser.ROUND=78;VtlParser.POWER=79;VtlParser.MOD=80;VtlParser.LEN=81;VtlParser.CONCAT=82;VtlParser.TRIM=83;VtlParser.UCASE=84;VtlParser.LCASE=85;VtlParser.SUBSTR=86;VtlParser.SUM=87;VtlParser.AVG=88;VtlParser.MEDIAN=89;VtlParser.COUNT=90;VtlParser.DIMENSION=91;VtlParser.MEASURE=92;VtlParser.ATTRIBUTE=93;VtlParser.FILTER=94;VtlParser.MERGE=95;VtlParser.EXP=96;VtlParser.ROLE=97;VtlParser.VIRAL=98;VtlParser.CHARSET_MATCH=99;VtlParser.TYPE=100;VtlParser.NVL=101;VtlParser.HIERARCHY=102;VtlParser.OPTIONAL=103;VtlParser.INVALID=104;VtlParser.VALUE_DOMAIN=105;VtlParser.VARIABLE=106;VtlParser.DATA=107;VtlParser.STRUCTURE=108;VtlParser.DATASET=109;VtlParser.OPERATOR=110;VtlParser.DEFINE=111;VtlParser.PUT_SYMBOL=112;VtlParser.DATAPOINT=113;VtlParser.HIERARCHICAL=114;VtlParser.RULESET=115;VtlParser.RULE=116;VtlParser.END=117;VtlParser.ALTER_DATASET=118;VtlParser.LTRIM=119;VtlParser.RTRIM=120;VtlParser.INSTR=121;VtlParser.REPLACE=122;VtlParser.CEIL=123;VtlParser.FLOOR=124;VtlParser.SQRT=125;VtlParser.ANY=126;VtlParser.SETDIFF=127;VtlParser.STDDEV_POP=128;VtlParser.STDDEV_SAMP=129;VtlParser.VAR_POP=130;VtlParser.VAR_SAMP=131;VtlParser.GROUP=132;VtlParser.EXCEPT=133;VtlParser.HAVING=134;VtlParser.FIRST_VALUE=135;VtlParser.LAST_VALUE=136;VtlParser.LAG=137;VtlParser.LEAD=138;VtlParser.RATIO_TO_REPORT=139;VtlParser.OVER=140;VtlParser.PRECEDING=141;VtlParser.FOLLOWING=142;VtlParser.UNBOUNDED=143;VtlParser.PARTITION=144;VtlParser.ROWS=145;VtlParser.RANGE=146;VtlParser.CURRENT=147;VtlParser.VALID=148;VtlParser.FILL_TIME_SERIES=149;VtlParser.FLOW_TO_STOCK=150;VtlParser.STOCK_TO_FLOW=151;VtlParser.TIMESHIFT=152;VtlParser.MEASURES=153;VtlParser.NO_MEASURES=154;VtlParser.CONDITION=155;VtlParser.BOOLEAN=156;VtlParser.DATE=157;VtlParser.TIME_PERIOD=158;VtlParser.NUMBER=159;VtlParser.STRING=160;VtlParser.INTEGER=161;VtlParser.FLOAT=162;VtlParser.LIST=163;VtlParser.RECORD=164;VtlParser.RESTRICT=165;VtlParser.YYYY=166;VtlParser.MM=167;VtlParser.DD=168;VtlParser.MAX_LENGTH=169;VtlParser.REGEXP=170;VtlParser.IS=171;VtlParser.WHEN=172;VtlParser.FROM=173;VtlParser.AGGREGATES=174;VtlParser.POINTS=175;VtlParser.POINT=176;VtlParser.TOTAL=177;VtlParser.PARTIAL=178;VtlParser.ALWAYS=179;VtlParser.INNER_JOIN=180;VtlParser.LEFT_JOIN=181;VtlParser.CROSS_JOIN=182;VtlParser.FULL_JOIN=183;VtlParser.MAPS_FROM=184;VtlParser.MAPS_TO=185;VtlParser.MAP_TO=186;VtlParser.MAP_FROM=187;VtlParser.RETURNS=188;VtlParser.PIVOT=189;VtlParser.UNPIVOT=190;VtlParser.SUBSPACE=191;VtlParser.APPLY=192;VtlParser.CONDITIONED=193;VtlParser.PERIOD_INDICATOR=194;VtlParser.SINGLE=195;VtlParser.DURATION=196;VtlParser.TIME_AGG=197;VtlParser.UNIT=198;VtlParser.VALUE=199;VtlParser.VALUEDOMAINS=200;VtlParser.VARIABLES=201;VtlParser.INPUT=202;VtlParser.OUTPUT=203;VtlParser.CAST=204;VtlParser.RULE_PRIORITY=205;VtlParser.DATASET_PRIORITY=206;VtlParser.DEFAULT=207;VtlParser.CHECK_DATAPOINT=208;VtlParser.CHECK_HIERARCHY=209;VtlParser.COMPUTED=210;VtlParser.NON_NULL=211;VtlParser.NON_ZERO=212;VtlParser.PARTIAL_NULL=213;VtlParser.PARTIAL_ZERO=214;VtlParser.ALWAYS_NULL=215;VtlParser.ALWAYS_ZERO=216;VtlParser.COMPONENTS=217;VtlParser.ALL_MEASURES=218;VtlParser.SCALAR=219;VtlParser.COMPONENT=220;VtlParser.DATAPOINT_ON_VD=221;VtlParser.DATAPOINT_ON_VAR=222;VtlParser.HIERARCHICAL_ON_VD=223;VtlParser.HIERARCHICAL_ON_VAR=224;VtlParser.SET=225;VtlParser.LANGUAGE=226;VtlParser.INTEGER_CONSTANT=227;VtlParser.POSITIVE_CONSTANT=228;VtlParser.NEGATIVE_CONSTANT=229;VtlParser.FLOAT_CONSTANT=230;VtlParser.BOOLEAN_CONSTANT=231;VtlParser.NULL_CONSTANT=232;VtlParser.STRING_CONSTANT=233;VtlParser.IDENTIFIER=234;VtlParser.DIGITS0_9=235;VtlParser.MONTH=236;VtlParser.DAY=237;VtlParser.YEAR=238;VtlParser.WEEK=239;VtlParser.HOURS=240;VtlParser.MINUTES=241;VtlParser.SECONDS=242;VtlParser.DATE_FORMAT=243;VtlParser.TIME_FORMAT=244;VtlParser.TIME_UNIT=245;VtlParser.TIME=246;VtlParser.WS=247;VtlParser.EOL=248;VtlParser.ML_COMMENT=249;VtlParser.SL_COMMENT=250;VtlParser.COMPARISON_OP=251;VtlParser.FREQUENCY=252;VtlParser.RULE_start=0;VtlParser.RULE_statement=1;VtlParser.RULE_expr=2;VtlParser.RULE_functions=3;VtlParser.RULE_datasetClause=4;VtlParser.RULE_renameClause=5;VtlParser.RULE_aggrClause=6;VtlParser.RULE_filterClause=7;VtlParser.RULE_calcClause=8;VtlParser.RULE_keepClause=9;VtlParser.RULE_dropClause=10;VtlParser.RULE_pivotClause=11;VtlParser.RULE_customPivotClause=12;VtlParser.RULE_unipivotClause=13;VtlParser.RULE_subspaceClause=14;VtlParser.RULE_joinOperators=15;VtlParser.RULE_defOperators=16;VtlParser.RULE_genericOperators=17;VtlParser.RULE_parameter=18;VtlParser.RULE_stringOperators=19;VtlParser.RULE_numericOperators=20;VtlParser.RULE_comparisonOperators=21;VtlParser.RULE_timeOperators=22;VtlParser.RULE_setOperators=23;VtlParser.RULE_hierarchyOperators=24;VtlParser.RULE_validationOperators=25;VtlParser.RULE_conditionalOperators=26;VtlParser.RULE_aggrOperators=27;VtlParser.RULE_aggrOperatorsGrouping=28;VtlParser.RULE_anFunction=29;VtlParser.RULE_renameClauseItem=30;VtlParser.RULE_componentClause=31;VtlParser.RULE_aggregateClause=32;VtlParser.RULE_aggrFunctionClause=33;VtlParser.RULE_calcClauseItem=34;VtlParser.RULE_subspaceClauseItem=35;VtlParser.RULE_joinClauseWithoutUsing=36;VtlParser.RULE_joinClause=37;VtlParser.RULE_joinClauseItem=38;VtlParser.RULE_joinBody=39;VtlParser.RULE_joinApplyClause=40;VtlParser.RULE_partitionByClause=41;VtlParser.RULE_orderByClause=42;VtlParser.RULE_orderByItem=43;VtlParser.RULE_windowingClause=44;VtlParser.RULE_limitClauseItem=45;VtlParser.RULE_groupingClause=46;VtlParser.RULE_havingClause=47;VtlParser.RULE_parameterItem=48;VtlParser.RULE_outputParameterType=49;VtlParser.RULE_inputParameterType=50;VtlParser.RULE_rulesetType=51;VtlParser.RULE_scalarType=52;VtlParser.RULE_componentType=53;VtlParser.RULE_datasetType=54;VtlParser.RULE_scalarSetType=55;VtlParser.RULE_dpRuleset=56;VtlParser.RULE_hrRuleset=57;VtlParser.RULE_valueDomainName=58;VtlParser.RULE_rulesetID=59;VtlParser.RULE_rulesetSignature=60;VtlParser.RULE_signature=61;VtlParser.RULE_ruleClauseDatapoint=62;VtlParser.RULE_ruleItemDatapoint=63;VtlParser.RULE_ruleClauseHierarchical=64;VtlParser.RULE_ruleItemHierarchical=65;VtlParser.RULE_hierRuleSignature=66;VtlParser.RULE_valueDomainSignature=67;VtlParser.RULE_codeItemRelation=68;VtlParser.RULE_codeItemRelationClause=69;VtlParser.RULE_scalarTypeConstraint=70;VtlParser.RULE_compConstraint=71;VtlParser.RULE_multModifier=72;VtlParser.RULE_validationOutput=73;VtlParser.RULE_validationMode=74;VtlParser.RULE_conditionClause=75;VtlParser.RULE_inputMode=76;VtlParser.RULE_imbalanceExpr=77;VtlParser.RULE_inputModeHierarchy=78;VtlParser.RULE_outputModeHierarchy=79;VtlParser.RULE_alias=80;VtlParser.RULE_varID=81;VtlParser.RULE_componentID=82;VtlParser.RULE_lists=83;VtlParser.RULE_erCode=84;VtlParser.RULE_erLevel=85;VtlParser.RULE_comparisonOperand=86;VtlParser.RULE_optionalExpr=87;VtlParser.RULE_componentRole=88;VtlParser.RULE_viralAttribute=89;VtlParser.RULE_valueDomainID=90;VtlParser.RULE_operatorID=91;VtlParser.RULE_routineName=92;VtlParser.RULE_groupKeyword=93;VtlParser.RULE_constant=94;VtlParser.RULE_basicScalarType=95;VtlParser.RULE_retainType=96;function StartContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_start;return this;}StartContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StartContext.prototype.constructor=StartContext;StartContext.prototype.EOF=function(){return this.getToken(VtlParser.EOF,0);};StartContext.prototype.statement=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(StatementContext);}else{return this.getTypedRuleContext(StatementContext,i);}};StartContext.prototype.EOL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.EOL);}else{return this.getToken(VtlParser.EOL,i);}};StartContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStart(this);}};StartContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStart(this);}};StartContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStart(this);}else{return visitor.visitChildren(this);}};VtlParser.StartContext=StartContext;VtlParser.prototype.start=function(){var localctx=new StartContext(this,this._ctx,this.state);this.enterRule(localctx,0,VtlParser.RULE_start);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=199;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.DEFINE||_la===VtlParser.IDENTIFIER){this.state=194;this.statement();this.state=195;this.match(VtlParser.EOL);this.state=201;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=202;this.match(VtlParser.EOF);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StatementContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_statement;return this;}StatementContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StatementContext.prototype.constructor=StatementContext;StatementContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function DefineExpressionContext(parser,ctx){StatementContext.call(this,parser);StatementContext.prototype.copyFrom.call(this,ctx);return this;}DefineExpressionContext.prototype=Object.create(StatementContext.prototype);DefineExpressionContext.prototype.constructor=DefineExpressionContext;VtlParser.DefineExpressionContext=DefineExpressionContext;DefineExpressionContext.prototype.defOperators=function(){return this.getTypedRuleContext(DefOperatorsContext,0);};DefineExpressionContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDefineExpression(this);}};DefineExpressionContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDefineExpression(this);}};DefineExpressionContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDefineExpression(this);}else{return visitor.visitChildren(this);}};function TemporaryAssignmentContext(parser,ctx){StatementContext.call(this,parser);StatementContext.prototype.copyFrom.call(this,ctx);return this;}TemporaryAssignmentContext.prototype=Object.create(StatementContext.prototype);TemporaryAssignmentContext.prototype.constructor=TemporaryAssignmentContext;VtlParser.TemporaryAssignmentContext=TemporaryAssignmentContext;TemporaryAssignmentContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};TemporaryAssignmentContext.prototype.ASSIGN=function(){return this.getToken(VtlParser.ASSIGN,0);};TemporaryAssignmentContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};TemporaryAssignmentContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterTemporaryAssignment(this);}};TemporaryAssignmentContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitTemporaryAssignment(this);}};TemporaryAssignmentContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitTemporaryAssignment(this);}else{return visitor.visitChildren(this);}};function PersistAssignmentContext(parser,ctx){StatementContext.call(this,parser);StatementContext.prototype.copyFrom.call(this,ctx);return this;}PersistAssignmentContext.prototype=Object.create(StatementContext.prototype);PersistAssignmentContext.prototype.constructor=PersistAssignmentContext;VtlParser.PersistAssignmentContext=PersistAssignmentContext;PersistAssignmentContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};PersistAssignmentContext.prototype.PUT_SYMBOL=function(){return this.getToken(VtlParser.PUT_SYMBOL,0);};PersistAssignmentContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};PersistAssignmentContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterPersistAssignment(this);}};PersistAssignmentContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitPersistAssignment(this);}};PersistAssignmentContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitPersistAssignment(this);}else{return visitor.visitChildren(this);}};VtlParser.StatementContext=StatementContext;VtlParser.prototype.statement=function(){var localctx=new StatementContext(this,this._ctx,this.state);this.enterRule(localctx,2,VtlParser.RULE_statement);try{this.state=213;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,1,this._ctx);switch(la_){case 1:localctx=new TemporaryAssignmentContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=204;this.varID();this.state=205;this.match(VtlParser.ASSIGN);this.state=206;this.expr(0);break;case 2:localctx=new PersistAssignmentContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=208;this.varID();this.state=209;this.match(VtlParser.PUT_SYMBOL);this.state=210;this.expr(0);break;case 3:localctx=new DefineExpressionContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=212;this.defOperators();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ExprContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_expr;return this;}ExprContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ExprContext.prototype.constructor=ExprContext;ExprContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function VarIdExprContext(parser,ctx){ExprContext.call(this,parser);ExprContext.prototype.copyFrom.call(this,ctx);return this;}VarIdExprContext.prototype=Object.create(ExprContext.prototype);VarIdExprContext.prototype.constructor=VarIdExprContext;VtlParser.VarIdExprContext=VarIdExprContext;VarIdExprContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};VarIdExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarIdExpr(this);}};VarIdExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarIdExpr(this);}};VarIdExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarIdExpr(this);}else{return visitor.visitChildren(this);}};function MembershipExprContext(parser,ctx){ExprContext.call(this,parser);ExprContext.prototype.copyFrom.call(this,ctx);return this;}MembershipExprContext.prototype=Object.create(ExprContext.prototype);MembershipExprContext.prototype.constructor=MembershipExprContext;VtlParser.MembershipExprContext=MembershipExprContext;MembershipExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MembershipExprContext.prototype.MEMBERSHIP=function(){return this.getToken(VtlParser.MEMBERSHIP,0);};MembershipExprContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};MembershipExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMembershipExpr(this);}};MembershipExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMembershipExpr(this);}};MembershipExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMembershipExpr(this);}else{return visitor.visitChildren(this);}};function InNotInExprContext(parser,ctx){ExprContext.call(this,parser);this.left=null;// ExprContext;\nthis.op=null;// Token;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}InNotInExprContext.prototype=Object.create(ExprContext.prototype);InNotInExprContext.prototype.constructor=InNotInExprContext;VtlParser.InNotInExprContext=InNotInExprContext;InNotInExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};InNotInExprContext.prototype.IN=function(){return this.getToken(VtlParser.IN,0);};InNotInExprContext.prototype.NOT_IN=function(){return this.getToken(VtlParser.NOT_IN,0);};InNotInExprContext.prototype.lists=function(){return this.getTypedRuleContext(ListsContext,0);};InNotInExprContext.prototype.valueDomainID=function(){return this.getTypedRuleContext(ValueDomainIDContext,0);};InNotInExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterInNotInExpr(this);}};InNotInExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitInNotInExpr(this);}};InNotInExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitInNotInExpr(this);}else{return visitor.visitChildren(this);}};function BooleanExprContext(parser,ctx){ExprContext.call(this,parser);this.left=null;// ExprContext;\nthis.op=null;// Token;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}BooleanExprContext.prototype=Object.create(ExprContext.prototype);BooleanExprContext.prototype.constructor=BooleanExprContext;VtlParser.BooleanExprContext=BooleanExprContext;BooleanExprContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};BooleanExprContext.prototype.AND=function(){return this.getToken(VtlParser.AND,0);};BooleanExprContext.prototype.OR=function(){return this.getToken(VtlParser.OR,0);};BooleanExprContext.prototype.XOR=function(){return this.getToken(VtlParser.XOR,0);};BooleanExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterBooleanExpr(this);}};BooleanExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitBooleanExpr(this);}};BooleanExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitBooleanExpr(this);}else{return visitor.visitChildren(this);}};function ComparisonExprContext(parser,ctx){ExprContext.call(this,parser);this.left=null;// ExprContext;\nthis.op=null;// ComparisonOperandContext;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}ComparisonExprContext.prototype=Object.create(ExprContext.prototype);ComparisonExprContext.prototype.constructor=ComparisonExprContext;VtlParser.ComparisonExprContext=ComparisonExprContext;ComparisonExprContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ComparisonExprContext.prototype.comparisonOperand=function(){return this.getTypedRuleContext(ComparisonOperandContext,0);};ComparisonExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComparisonExpr(this);}};ComparisonExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComparisonExpr(this);}};ComparisonExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComparisonExpr(this);}else{return visitor.visitChildren(this);}};function ConcatExprContext(parser,ctx){ExprContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}ConcatExprContext.prototype=Object.create(ExprContext.prototype);ConcatExprContext.prototype.constructor=ConcatExprContext;VtlParser.ConcatExprContext=ConcatExprContext;ConcatExprContext.prototype.CONCAT=function(){return this.getToken(VtlParser.CONCAT,0);};ConcatExprContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ConcatExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConcatExpr(this);}};ConcatExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConcatExpr(this);}};ConcatExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConcatExpr(this);}else{return visitor.visitChildren(this);}};function UnaryExprContext(parser,ctx){ExprContext.call(this,parser);this.op=null;// Token;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}UnaryExprContext.prototype=Object.create(ExprContext.prototype);UnaryExprContext.prototype.constructor=UnaryExprContext;VtlParser.UnaryExprContext=UnaryExprContext;UnaryExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};UnaryExprContext.prototype.PLUS=function(){return this.getToken(VtlParser.PLUS,0);};UnaryExprContext.prototype.MINUS=function(){return this.getToken(VtlParser.MINUS,0);};UnaryExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterUnaryExpr(this);}};UnaryExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitUnaryExpr(this);}};UnaryExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitUnaryExpr(this);}else{return visitor.visitChildren(this);}};function NotExprContext(parser,ctx){ExprContext.call(this,parser);this.op=null;// Token;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}NotExprContext.prototype=Object.create(ExprContext.prototype);NotExprContext.prototype.constructor=NotExprContext;VtlParser.NotExprContext=NotExprContext;NotExprContext.prototype.NOT=function(){return this.getToken(VtlParser.NOT,0);};NotExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};NotExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterNotExpr(this);}};NotExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitNotExpr(this);}};NotExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitNotExpr(this);}else{return visitor.visitChildren(this);}};function FunctionsExpressionContext(parser,ctx){ExprContext.call(this,parser);ExprContext.prototype.copyFrom.call(this,ctx);return this;}FunctionsExpressionContext.prototype=Object.create(ExprContext.prototype);FunctionsExpressionContext.prototype.constructor=FunctionsExpressionContext;VtlParser.FunctionsExpressionContext=FunctionsExpressionContext;FunctionsExpressionContext.prototype.functions=function(){return this.getTypedRuleContext(FunctionsContext,0);};FunctionsExpressionContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFunctionsExpression(this);}};FunctionsExpressionContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFunctionsExpression(this);}};FunctionsExpressionContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFunctionsExpression(this);}else{return visitor.visitChildren(this);}};function IfExprContext(parser,ctx){ExprContext.call(this,parser);this.conditionalExpr=null;// ExprContext;\nthis.thenExpr=null;// ExprContext;\nthis.elseExpr=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}IfExprContext.prototype=Object.create(ExprContext.prototype);IfExprContext.prototype.constructor=IfExprContext;VtlParser.IfExprContext=IfExprContext;IfExprContext.prototype.IF=function(){return this.getToken(VtlParser.IF,0);};IfExprContext.prototype.THEN=function(){return this.getToken(VtlParser.THEN,0);};IfExprContext.prototype.ELSE=function(){return this.getToken(VtlParser.ELSE,0);};IfExprContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};IfExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterIfExpr(this);}};IfExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitIfExpr(this);}};IfExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitIfExpr(this);}else{return visitor.visitChildren(this);}};function ClauseExprContext(parser,ctx){ExprContext.call(this,parser);this.dataset=null;// ExprContext;\nthis.clause=null;// DatasetClauseContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}ClauseExprContext.prototype=Object.create(ExprContext.prototype);ClauseExprContext.prototype.constructor=ClauseExprContext;VtlParser.ClauseExprContext=ClauseExprContext;ClauseExprContext.prototype.QLPAREN=function(){return this.getToken(VtlParser.QLPAREN,0);};ClauseExprContext.prototype.QRPAREN=function(){return this.getToken(VtlParser.QRPAREN,0);};ClauseExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ClauseExprContext.prototype.datasetClause=function(){return this.getTypedRuleContext(DatasetClauseContext,0);};ClauseExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterClauseExpr(this);}};ClauseExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitClauseExpr(this);}};ClauseExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitClauseExpr(this);}else{return visitor.visitChildren(this);}};function ArithmeticExprContext(parser,ctx){ExprContext.call(this,parser);this.left=null;// ExprContext;\nthis.op=null;// Token;\nthis.right=null;// ExprContext;\nExprContext.prototype.copyFrom.call(this,ctx);return this;}ArithmeticExprContext.prototype=Object.create(ExprContext.prototype);ArithmeticExprContext.prototype.constructor=ArithmeticExprContext;VtlParser.ArithmeticExprContext=ArithmeticExprContext;ArithmeticExprContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ArithmeticExprContext.prototype.MUL=function(){return this.getToken(VtlParser.MUL,0);};ArithmeticExprContext.prototype.DIV=function(){return this.getToken(VtlParser.DIV,0);};ArithmeticExprContext.prototype.MINUS=function(){return this.getToken(VtlParser.MINUS,0);};ArithmeticExprContext.prototype.PLUS=function(){return this.getToken(VtlParser.PLUS,0);};ArithmeticExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterArithmeticExpr(this);}};ArithmeticExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitArithmeticExpr(this);}};ArithmeticExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitArithmeticExpr(this);}else{return visitor.visitChildren(this);}};function ParenthesisExprContext(parser,ctx){ExprContext.call(this,parser);ExprContext.prototype.copyFrom.call(this,ctx);return this;}ParenthesisExprContext.prototype=Object.create(ExprContext.prototype);ParenthesisExprContext.prototype.constructor=ParenthesisExprContext;VtlParser.ParenthesisExprContext=ParenthesisExprContext;ParenthesisExprContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ParenthesisExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ParenthesisExprContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ParenthesisExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterParenthesisExpr(this);}};ParenthesisExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitParenthesisExpr(this);}};ParenthesisExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitParenthesisExpr(this);}else{return visitor.visitChildren(this);}};function ConstantExprContext(parser,ctx){ExprContext.call(this,parser);ExprContext.prototype.copyFrom.call(this,ctx);return this;}ConstantExprContext.prototype=Object.create(ExprContext.prototype);ConstantExprContext.prototype.constructor=ConstantExprContext;VtlParser.ConstantExprContext=ConstantExprContext;ConstantExprContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};ConstantExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConstantExpr(this);}};ConstantExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConstantExpr(this);}};ConstantExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConstantExpr(this);}else{return visitor.visitChildren(this);}};VtlParser.prototype.expr=function(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new ExprContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=4;this.enterRecursionRule(localctx,4,VtlParser.RULE_expr,_p);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=234;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,2,this._ctx);switch(la_){case 1:localctx=new ParenthesisExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=216;this.match(VtlParser.LPAREN);this.state=217;this.expr(0);this.state=218;this.match(VtlParser.RPAREN);break;case 2:localctx=new FunctionsExpressionContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=220;this.functions();break;case 3:localctx=new UnaryExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=221;localctx.op=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.PLUS||_la===VtlParser.MINUS)){localctx.op=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=222;localctx.right=this.expr(12);break;case 4:localctx=new NotExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=223;localctx.op=this.match(VtlParser.NOT);this.state=224;localctx.right=this.expr(11);break;case 5:localctx=new IfExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=225;this.match(VtlParser.IF);this.state=226;localctx.conditionalExpr=this.expr(0);this.state=227;this.match(VtlParser.THEN);this.state=228;localctx.thenExpr=this.expr(0);this.state=229;this.match(VtlParser.ELSE);this.state=230;localctx.elseExpr=this.expr(3);break;case 6:localctx=new VarIdExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=232;this.varID();break;case 7:localctx=new ConstantExprContext(this,localctx);this._ctx=localctx;_prevctx=localctx;this.state=233;this.constant();break;}this._ctx.stop=this._input.LT(-1);this.state=271;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,5,this._ctx);while(_alt!=2&&_alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;this.state=269;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,4,this._ctx);switch(la_){case 1:localctx=new ArithmeticExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=236;if(!this.precpred(this._ctx,10)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 10)\");}this.state=237;localctx.op=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.MUL||_la===VtlParser.DIV)){localctx.op=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=238;localctx.right=this.expr(11);break;case 2:localctx=new ArithmeticExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=239;if(!this.precpred(this._ctx,9)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 9)\");}this.state=240;localctx.op=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.PLUS||_la===VtlParser.MINUS)){localctx.op=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=241;localctx.right=this.expr(10);break;case 3:localctx=new ConcatExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=242;if(!this.precpred(this._ctx,8)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 8)\");}this.state=243;this.match(VtlParser.CONCAT);this.state=244;localctx.right=this.expr(9);break;case 4:localctx=new ComparisonExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=245;if(!this.precpred(this._ctx,7)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 7)\");}this.state=246;localctx.op=this.comparisonOperand();this.state=247;localctx.right=this.expr(8);break;case 5:localctx=new BooleanExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=249;if(!this.precpred(this._ctx,5)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 5)\");}this.state=250;localctx.op=this.match(VtlParser.AND);this.state=251;localctx.right=this.expr(6);break;case 6:localctx=new BooleanExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=252;if(!this.precpred(this._ctx,4)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 4)\");}this.state=253;localctx.op=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.OR||_la===VtlParser.XOR)){localctx.op=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=254;localctx.right=this.expr(5);break;case 7:localctx=new MembershipExprContext(this,new ExprContext(this,_parentctx,_parentState));this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=255;if(!this.precpred(this._ctx,15)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 15)\");}this.state=256;this.match(VtlParser.MEMBERSHIP);this.state=257;this.componentID();break;case 8:localctx=new ClauseExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.dataset=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=258;if(!this.precpred(this._ctx,14)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 14)\");}this.state=259;this.match(VtlParser.QLPAREN);this.state=260;localctx.clause=this.datasetClause();this.state=261;this.match(VtlParser.QRPAREN);break;case 9:localctx=new InNotInExprContext(this,new ExprContext(this,_parentctx,_parentState));localctx.left=_prevctx;this.pushNewRecursionContext(localctx,_startState,VtlParser.RULE_expr);this.state=263;if(!this.precpred(this._ctx,6)){throw new antlr4.error.FailedPredicateException(this,\"this.precpred(this._ctx, 6)\");}this.state=264;localctx.op=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.IN||_la===VtlParser.NOT_IN)){localctx.op=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=267;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.GLPAREN:this.state=265;this.lists();break;case VtlParser.IDENTIFIER:this.state=266;this.valueDomainID();break;default:throw new antlr4.error.NoViableAltException(this);}break;}}this.state=273;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,5,this._ctx);}}catch(error){if(error instanceof antlr4.error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;};function FunctionsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_functions;return this;}FunctionsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FunctionsContext.prototype.constructor=FunctionsContext;FunctionsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function HierarchyFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}HierarchyFunctionsContext.prototype=Object.create(FunctionsContext.prototype);HierarchyFunctionsContext.prototype.constructor=HierarchyFunctionsContext;VtlParser.HierarchyFunctionsContext=HierarchyFunctionsContext;HierarchyFunctionsContext.prototype.hierarchyOperators=function(){return this.getTypedRuleContext(HierarchyOperatorsContext,0);};HierarchyFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHierarchyFunctions(this);}};HierarchyFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHierarchyFunctions(this);}};HierarchyFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHierarchyFunctions(this);}else{return visitor.visitChildren(this);}};function StringFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}StringFunctionsContext.prototype=Object.create(FunctionsContext.prototype);StringFunctionsContext.prototype.constructor=StringFunctionsContext;VtlParser.StringFunctionsContext=StringFunctionsContext;StringFunctionsContext.prototype.stringOperators=function(){return this.getTypedRuleContext(StringOperatorsContext,0);};StringFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStringFunctions(this);}};StringFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStringFunctions(this);}};StringFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStringFunctions(this);}else{return visitor.visitChildren(this);}};function ValidationFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}ValidationFunctionsContext.prototype=Object.create(FunctionsContext.prototype);ValidationFunctionsContext.prototype.constructor=ValidationFunctionsContext;VtlParser.ValidationFunctionsContext=ValidationFunctionsContext;ValidationFunctionsContext.prototype.validationOperators=function(){return this.getTypedRuleContext(ValidationOperatorsContext,0);};ValidationFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidationFunctions(this);}};ValidationFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidationFunctions(this);}};ValidationFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidationFunctions(this);}else{return visitor.visitChildren(this);}};function GenericFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}GenericFunctionsContext.prototype=Object.create(FunctionsContext.prototype);GenericFunctionsContext.prototype.constructor=GenericFunctionsContext;VtlParser.GenericFunctionsContext=GenericFunctionsContext;GenericFunctionsContext.prototype.genericOperators=function(){return this.getTypedRuleContext(GenericOperatorsContext,0);};GenericFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterGenericFunctions(this);}};GenericFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitGenericFunctions(this);}};GenericFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitGenericFunctions(this);}else{return visitor.visitChildren(this);}};function ConditionalFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}ConditionalFunctionsContext.prototype=Object.create(FunctionsContext.prototype);ConditionalFunctionsContext.prototype.constructor=ConditionalFunctionsContext;VtlParser.ConditionalFunctionsContext=ConditionalFunctionsContext;ConditionalFunctionsContext.prototype.conditionalOperators=function(){return this.getTypedRuleContext(ConditionalOperatorsContext,0);};ConditionalFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConditionalFunctions(this);}};ConditionalFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConditionalFunctions(this);}};ConditionalFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConditionalFunctions(this);}else{return visitor.visitChildren(this);}};function AggregateFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}AggregateFunctionsContext.prototype=Object.create(FunctionsContext.prototype);AggregateFunctionsContext.prototype.constructor=AggregateFunctionsContext;VtlParser.AggregateFunctionsContext=AggregateFunctionsContext;AggregateFunctionsContext.prototype.aggrOperatorsGrouping=function(){return this.getTypedRuleContext(AggrOperatorsGroupingContext,0);};AggregateFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAggregateFunctions(this);}};AggregateFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAggregateFunctions(this);}};AggregateFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAggregateFunctions(this);}else{return visitor.visitChildren(this);}};function JoinFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}JoinFunctionsContext.prototype=Object.create(FunctionsContext.prototype);JoinFunctionsContext.prototype.constructor=JoinFunctionsContext;VtlParser.JoinFunctionsContext=JoinFunctionsContext;JoinFunctionsContext.prototype.joinOperators=function(){return this.getTypedRuleContext(JoinOperatorsContext,0);};JoinFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinFunctions(this);}};JoinFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinFunctions(this);}};JoinFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinFunctions(this);}else{return visitor.visitChildren(this);}};function ComparisonFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}ComparisonFunctionsContext.prototype=Object.create(FunctionsContext.prototype);ComparisonFunctionsContext.prototype.constructor=ComparisonFunctionsContext;VtlParser.ComparisonFunctionsContext=ComparisonFunctionsContext;ComparisonFunctionsContext.prototype.comparisonOperators=function(){return this.getTypedRuleContext(ComparisonOperatorsContext,0);};ComparisonFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComparisonFunctions(this);}};ComparisonFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComparisonFunctions(this);}};ComparisonFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComparisonFunctions(this);}else{return visitor.visitChildren(this);}};function NumericFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}NumericFunctionsContext.prototype=Object.create(FunctionsContext.prototype);NumericFunctionsContext.prototype.constructor=NumericFunctionsContext;VtlParser.NumericFunctionsContext=NumericFunctionsContext;NumericFunctionsContext.prototype.numericOperators=function(){return this.getTypedRuleContext(NumericOperatorsContext,0);};NumericFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterNumericFunctions(this);}};NumericFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitNumericFunctions(this);}};NumericFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitNumericFunctions(this);}else{return visitor.visitChildren(this);}};function TimeFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}TimeFunctionsContext.prototype=Object.create(FunctionsContext.prototype);TimeFunctionsContext.prototype.constructor=TimeFunctionsContext;VtlParser.TimeFunctionsContext=TimeFunctionsContext;TimeFunctionsContext.prototype.timeOperators=function(){return this.getTypedRuleContext(TimeOperatorsContext,0);};TimeFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterTimeFunctions(this);}};TimeFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitTimeFunctions(this);}};TimeFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitTimeFunctions(this);}else{return visitor.visitChildren(this);}};function SetFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}SetFunctionsContext.prototype=Object.create(FunctionsContext.prototype);SetFunctionsContext.prototype.constructor=SetFunctionsContext;VtlParser.SetFunctionsContext=SetFunctionsContext;SetFunctionsContext.prototype.setOperators=function(){return this.getTypedRuleContext(SetOperatorsContext,0);};SetFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSetFunctions(this);}};SetFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSetFunctions(this);}};SetFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSetFunctions(this);}else{return visitor.visitChildren(this);}};function AnalyticFunctionsContext(parser,ctx){FunctionsContext.call(this,parser);FunctionsContext.prototype.copyFrom.call(this,ctx);return this;}AnalyticFunctionsContext.prototype=Object.create(FunctionsContext.prototype);AnalyticFunctionsContext.prototype.constructor=AnalyticFunctionsContext;VtlParser.AnalyticFunctionsContext=AnalyticFunctionsContext;AnalyticFunctionsContext.prototype.anFunction=function(){return this.getTypedRuleContext(AnFunctionContext,0);};AnalyticFunctionsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAnalyticFunctions(this);}};AnalyticFunctionsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAnalyticFunctions(this);}};AnalyticFunctionsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAnalyticFunctions(this);}else{return visitor.visitChildren(this);}};VtlParser.FunctionsContext=FunctionsContext;VtlParser.prototype.functions=function(){var localctx=new FunctionsContext(this,this._ctx,this.state);this.enterRule(localctx,6,VtlParser.RULE_functions);try{this.state=286;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,6,this._ctx);switch(la_){case 1:localctx=new JoinFunctionsContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=274;this.joinOperators();break;case 2:localctx=new GenericFunctionsContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=275;this.genericOperators();break;case 3:localctx=new StringFunctionsContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=276;this.stringOperators();break;case 4:localctx=new NumericFunctionsContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=277;this.numericOperators();break;case 5:localctx=new ComparisonFunctionsContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=278;this.comparisonOperators();break;case 6:localctx=new TimeFunctionsContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=279;this.timeOperators();break;case 7:localctx=new SetFunctionsContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=280;this.setOperators();break;case 8:localctx=new HierarchyFunctionsContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=281;this.hierarchyOperators();break;case 9:localctx=new ValidationFunctionsContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=282;this.validationOperators();break;case 10:localctx=new ConditionalFunctionsContext(this,localctx);this.enterOuterAlt(localctx,10);this.state=283;this.conditionalOperators();break;case 11:localctx=new AggregateFunctionsContext(this,localctx);this.enterOuterAlt(localctx,11);this.state=284;this.aggrOperatorsGrouping();break;case 12:localctx=new AnalyticFunctionsContext(this,localctx);this.enterOuterAlt(localctx,12);this.state=285;this.anFunction();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DatasetClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_datasetClause;return this;}DatasetClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DatasetClauseContext.prototype.constructor=DatasetClauseContext;DatasetClauseContext.prototype.renameClause=function(){return this.getTypedRuleContext(RenameClauseContext,0);};DatasetClauseContext.prototype.aggrClause=function(){return this.getTypedRuleContext(AggrClauseContext,0);};DatasetClauseContext.prototype.filterClause=function(){return this.getTypedRuleContext(FilterClauseContext,0);};DatasetClauseContext.prototype.calcClause=function(){return this.getTypedRuleContext(CalcClauseContext,0);};DatasetClauseContext.prototype.keepClause=function(){return this.getTypedRuleContext(KeepClauseContext,0);};DatasetClauseContext.prototype.dropClause=function(){return this.getTypedRuleContext(DropClauseContext,0);};DatasetClauseContext.prototype.pivotClause=function(){return this.getTypedRuleContext(PivotClauseContext,0);};DatasetClauseContext.prototype.customPivotClause=function(){return this.getTypedRuleContext(CustomPivotClauseContext,0);};DatasetClauseContext.prototype.unipivotClause=function(){return this.getTypedRuleContext(UnipivotClauseContext,0);};DatasetClauseContext.prototype.subspaceClause=function(){return this.getTypedRuleContext(SubspaceClauseContext,0);};DatasetClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDatasetClause(this);}};DatasetClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDatasetClause(this);}};DatasetClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDatasetClause(this);}else{return visitor.visitChildren(this);}};VtlParser.DatasetClauseContext=DatasetClauseContext;VtlParser.prototype.datasetClause=function(){var localctx=new DatasetClauseContext(this,this._ctx,this.state);this.enterRule(localctx,8,VtlParser.RULE_datasetClause);try{this.state=298;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.RENAME:this.enterOuterAlt(localctx,1);this.state=288;this.renameClause();break;case VtlParser.AGGREGATE:this.enterOuterAlt(localctx,2);this.state=289;this.aggrClause();break;case VtlParser.FILTER:this.enterOuterAlt(localctx,3);this.state=290;this.filterClause();break;case VtlParser.CALC:this.enterOuterAlt(localctx,4);this.state=291;this.calcClause();break;case VtlParser.KEEP:this.enterOuterAlt(localctx,5);this.state=292;this.keepClause();break;case VtlParser.DROP:this.enterOuterAlt(localctx,6);this.state=293;this.dropClause();break;case VtlParser.PIVOT:this.enterOuterAlt(localctx,7);this.state=294;this.pivotClause();break;case VtlParser.CUSTOMPIVOT:this.enterOuterAlt(localctx,8);this.state=295;this.customPivotClause();break;case VtlParser.UNPIVOT:this.enterOuterAlt(localctx,9);this.state=296;this.unipivotClause();break;case VtlParser.SUBSPACE:this.enterOuterAlt(localctx,10);this.state=297;this.subspaceClause();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RenameClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_renameClause;return this;}RenameClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RenameClauseContext.prototype.constructor=RenameClauseContext;RenameClauseContext.prototype.RENAME=function(){return this.getToken(VtlParser.RENAME,0);};RenameClauseContext.prototype.renameClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RenameClauseItemContext);}else{return this.getTypedRuleContext(RenameClauseItemContext,i);}};RenameClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};RenameClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRenameClause(this);}};RenameClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRenameClause(this);}};RenameClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRenameClause(this);}else{return visitor.visitChildren(this);}};VtlParser.RenameClauseContext=RenameClauseContext;VtlParser.prototype.renameClause=function(){var localctx=new RenameClauseContext(this,this._ctx,this.state);this.enterRule(localctx,10,VtlParser.RULE_renameClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=300;this.match(VtlParser.RENAME);this.state=301;this.renameClauseItem();this.state=306;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=302;this.match(VtlParser.COMMA);this.state=303;this.renameClauseItem();this.state=308;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AggrClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_aggrClause;return this;}AggrClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AggrClauseContext.prototype.constructor=AggrClauseContext;AggrClauseContext.prototype.AGGREGATE=function(){return this.getToken(VtlParser.AGGREGATE,0);};AggrClauseContext.prototype.aggregateClause=function(){return this.getTypedRuleContext(AggregateClauseContext,0);};AggrClauseContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};AggrClauseContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};AggrClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAggrClause(this);}};AggrClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAggrClause(this);}};AggrClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAggrClause(this);}else{return visitor.visitChildren(this);}};VtlParser.AggrClauseContext=AggrClauseContext;VtlParser.prototype.aggrClause=function(){var localctx=new AggrClauseContext(this,this._ctx,this.state);this.enterRule(localctx,12,VtlParser.RULE_aggrClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=309;this.match(VtlParser.AGGREGATE);this.state=310;this.aggregateClause();this.state=315;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=311;this.groupingClause();this.state=313;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=312;this.havingClause();}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function FilterClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_filterClause;return this;}FilterClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);FilterClauseContext.prototype.constructor=FilterClauseContext;FilterClauseContext.prototype.FILTER=function(){return this.getToken(VtlParser.FILTER,0);};FilterClauseContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};FilterClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFilterClause(this);}};FilterClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFilterClause(this);}};FilterClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFilterClause(this);}else{return visitor.visitChildren(this);}};VtlParser.FilterClauseContext=FilterClauseContext;VtlParser.prototype.filterClause=function(){var localctx=new FilterClauseContext(this,this._ctx,this.state);this.enterRule(localctx,14,VtlParser.RULE_filterClause);try{this.enterOuterAlt(localctx,1);this.state=317;this.match(VtlParser.FILTER);this.state=318;this.expr(0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CalcClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_calcClause;return this;}CalcClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CalcClauseContext.prototype.constructor=CalcClauseContext;CalcClauseContext.prototype.CALC=function(){return this.getToken(VtlParser.CALC,0);};CalcClauseContext.prototype.calcClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CalcClauseItemContext);}else{return this.getTypedRuleContext(CalcClauseItemContext,i);}};CalcClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};CalcClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCalcClause(this);}};CalcClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCalcClause(this);}};CalcClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCalcClause(this);}else{return visitor.visitChildren(this);}};VtlParser.CalcClauseContext=CalcClauseContext;VtlParser.prototype.calcClause=function(){var localctx=new CalcClauseContext(this,this._ctx,this.state);this.enterRule(localctx,16,VtlParser.RULE_calcClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=320;this.match(VtlParser.CALC);this.state=321;this.calcClauseItem();this.state=326;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=322;this.match(VtlParser.COMMA);this.state=323;this.calcClauseItem();this.state=328;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function KeepClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_keepClause;return this;}KeepClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);KeepClauseContext.prototype.constructor=KeepClauseContext;KeepClauseContext.prototype.KEEP=function(){return this.getToken(VtlParser.KEEP,0);};KeepClauseContext.prototype.componentClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentClauseContext);}else{return this.getTypedRuleContext(ComponentClauseContext,i);}};KeepClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};KeepClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterKeepClause(this);}};KeepClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitKeepClause(this);}};KeepClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitKeepClause(this);}else{return visitor.visitChildren(this);}};VtlParser.KeepClauseContext=KeepClauseContext;VtlParser.prototype.keepClause=function(){var localctx=new KeepClauseContext(this,this._ctx,this.state);this.enterRule(localctx,18,VtlParser.RULE_keepClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=329;this.match(VtlParser.KEEP);this.state=330;this.componentClause();this.state=335;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=331;this.match(VtlParser.COMMA);this.state=332;this.componentClause();this.state=337;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DropClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_dropClause;return this;}DropClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DropClauseContext.prototype.constructor=DropClauseContext;DropClauseContext.prototype.DROP=function(){return this.getToken(VtlParser.DROP,0);};DropClauseContext.prototype.componentClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentClauseContext);}else{return this.getTypedRuleContext(ComponentClauseContext,i);}};DropClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};DropClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDropClause(this);}};DropClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDropClause(this);}};DropClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDropClause(this);}else{return visitor.visitChildren(this);}};VtlParser.DropClauseContext=DropClauseContext;VtlParser.prototype.dropClause=function(){var localctx=new DropClauseContext(this,this._ctx,this.state);this.enterRule(localctx,20,VtlParser.RULE_dropClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=338;this.match(VtlParser.DROP);this.state=339;this.componentClause();this.state=344;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=340;this.match(VtlParser.COMMA);this.state=341;this.componentClause();this.state=346;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PivotClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_pivotClause;this.id=null;// ComponentIDContext\nthis.mea=null;// ComponentIDContext\nreturn this;}PivotClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PivotClauseContext.prototype.constructor=PivotClauseContext;PivotClauseContext.prototype.PIVOT=function(){return this.getToken(VtlParser.PIVOT,0);};PivotClauseContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};PivotClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};PivotClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterPivotClause(this);}};PivotClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitPivotClause(this);}};PivotClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitPivotClause(this);}else{return visitor.visitChildren(this);}};VtlParser.PivotClauseContext=PivotClauseContext;VtlParser.prototype.pivotClause=function(){var localctx=new PivotClauseContext(this,this._ctx,this.state);this.enterRule(localctx,22,VtlParser.RULE_pivotClause);try{this.enterOuterAlt(localctx,1);this.state=347;this.match(VtlParser.PIVOT);this.state=348;localctx.id=this.componentID();this.state=349;this.match(VtlParser.COMMA);this.state=350;localctx.mea=this.componentID();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CustomPivotClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_customPivotClause;this.id=null;// ComponentIDContext\nthis.mea=null;// ComponentIDContext\nreturn this;}CustomPivotClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CustomPivotClauseContext.prototype.constructor=CustomPivotClauseContext;CustomPivotClauseContext.prototype.CUSTOMPIVOT=function(){return this.getToken(VtlParser.CUSTOMPIVOT,0);};CustomPivotClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};CustomPivotClauseContext.prototype.IN=function(){return this.getToken(VtlParser.IN,0);};CustomPivotClauseContext.prototype.constant=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConstantContext);}else{return this.getTypedRuleContext(ConstantContext,i);}};CustomPivotClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};CustomPivotClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCustomPivotClause(this);}};CustomPivotClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCustomPivotClause(this);}};CustomPivotClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCustomPivotClause(this);}else{return visitor.visitChildren(this);}};VtlParser.CustomPivotClauseContext=CustomPivotClauseContext;VtlParser.prototype.customPivotClause=function(){var localctx=new CustomPivotClauseContext(this,this._ctx,this.state);this.enterRule(localctx,24,VtlParser.RULE_customPivotClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=352;this.match(VtlParser.CUSTOMPIVOT);this.state=353;localctx.id=this.componentID();this.state=354;this.match(VtlParser.COMMA);this.state=355;localctx.mea=this.componentID();this.state=356;this.match(VtlParser.IN);this.state=357;this.constant();this.state=362;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=358;this.match(VtlParser.COMMA);this.state=359;this.constant();this.state=364;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function UnipivotClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_unipivotClause;this.id=null;// ComponentIDContext\nthis.mea=null;// ComponentIDContext\nreturn this;}UnipivotClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);UnipivotClauseContext.prototype.constructor=UnipivotClauseContext;UnipivotClauseContext.prototype.UNPIVOT=function(){return this.getToken(VtlParser.UNPIVOT,0);};UnipivotClauseContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};UnipivotClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};UnipivotClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterUnipivotClause(this);}};UnipivotClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitUnipivotClause(this);}};UnipivotClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitUnipivotClause(this);}else{return visitor.visitChildren(this);}};VtlParser.UnipivotClauseContext=UnipivotClauseContext;VtlParser.prototype.unipivotClause=function(){var localctx=new UnipivotClauseContext(this,this._ctx,this.state);this.enterRule(localctx,26,VtlParser.RULE_unipivotClause);try{this.enterOuterAlt(localctx,1);this.state=365;this.match(VtlParser.UNPIVOT);this.state=366;localctx.id=this.componentID();this.state=367;this.match(VtlParser.COMMA);this.state=368;localctx.mea=this.componentID();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SubspaceClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_subspaceClause;return this;}SubspaceClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SubspaceClauseContext.prototype.constructor=SubspaceClauseContext;SubspaceClauseContext.prototype.SUBSPACE=function(){return this.getToken(VtlParser.SUBSPACE,0);};SubspaceClauseContext.prototype.subspaceClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SubspaceClauseItemContext);}else{return this.getTypedRuleContext(SubspaceClauseItemContext,i);}};SubspaceClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};SubspaceClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSubspaceClause(this);}};SubspaceClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSubspaceClause(this);}};SubspaceClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSubspaceClause(this);}else{return visitor.visitChildren(this);}};VtlParser.SubspaceClauseContext=SubspaceClauseContext;VtlParser.prototype.subspaceClause=function(){var localctx=new SubspaceClauseContext(this,this._ctx,this.state);this.enterRule(localctx,28,VtlParser.RULE_subspaceClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=370;this.match(VtlParser.SUBSPACE);this.state=371;this.subspaceClauseItem();this.state=376;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=372;this.match(VtlParser.COMMA);this.state=373;this.subspaceClauseItem();this.state=378;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinOperators;return this;}JoinOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinOperatorsContext.prototype.constructor=JoinOperatorsContext;JoinOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function JoinExprContext(parser,ctx){JoinOperatorsContext.call(this,parser);this.joinKeyword=null;// Token;\nJoinOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}JoinExprContext.prototype=Object.create(JoinOperatorsContext.prototype);JoinExprContext.prototype.constructor=JoinExprContext;VtlParser.JoinExprContext=JoinExprContext;JoinExprContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};JoinExprContext.prototype.joinClause=function(){return this.getTypedRuleContext(JoinClauseContext,0);};JoinExprContext.prototype.joinBody=function(){return this.getTypedRuleContext(JoinBodyContext,0);};JoinExprContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};JoinExprContext.prototype.INNER_JOIN=function(){return this.getToken(VtlParser.INNER_JOIN,0);};JoinExprContext.prototype.LEFT_JOIN=function(){return this.getToken(VtlParser.LEFT_JOIN,0);};JoinExprContext.prototype.joinClauseWithoutUsing=function(){return this.getTypedRuleContext(JoinClauseWithoutUsingContext,0);};JoinExprContext.prototype.FULL_JOIN=function(){return this.getToken(VtlParser.FULL_JOIN,0);};JoinExprContext.prototype.CROSS_JOIN=function(){return this.getToken(VtlParser.CROSS_JOIN,0);};JoinExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinExpr(this);}};JoinExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinExpr(this);}};JoinExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinExpr(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinOperatorsContext=JoinOperatorsContext;VtlParser.prototype.joinOperators=function(){var localctx=new JoinOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,30,VtlParser.RULE_joinOperators);var _la=0;// Token type\ntry{this.state=391;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.INNER_JOIN:case VtlParser.LEFT_JOIN:localctx=new JoinExprContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=379;localctx.joinKeyword=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.INNER_JOIN||_la===VtlParser.LEFT_JOIN)){localctx.joinKeyword=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=380;this.match(VtlParser.LPAREN);this.state=381;this.joinClause();this.state=382;this.joinBody();this.state=383;this.match(VtlParser.RPAREN);break;case VtlParser.CROSS_JOIN:case VtlParser.FULL_JOIN:localctx=new JoinExprContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=385;localctx.joinKeyword=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.CROSS_JOIN||_la===VtlParser.FULL_JOIN)){localctx.joinKeyword=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=386;this.match(VtlParser.LPAREN);this.state=387;this.joinClauseWithoutUsing();this.state=388;this.joinBody();this.state=389;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DefOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_defOperators;return this;}DefOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DefOperatorsContext.prototype.constructor=DefOperatorsContext;DefOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function DefOperatorContext(parser,ctx){DefOperatorsContext.call(this,parser);DefOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}DefOperatorContext.prototype=Object.create(DefOperatorsContext.prototype);DefOperatorContext.prototype.constructor=DefOperatorContext;VtlParser.DefOperatorContext=DefOperatorContext;DefOperatorContext.prototype.DEFINE=function(){return this.getToken(VtlParser.DEFINE,0);};DefOperatorContext.prototype.OPERATOR=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.OPERATOR);}else{return this.getToken(VtlParser.OPERATOR,i);}};DefOperatorContext.prototype.operatorID=function(){return this.getTypedRuleContext(OperatorIDContext,0);};DefOperatorContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};DefOperatorContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};DefOperatorContext.prototype.IS=function(){return this.getToken(VtlParser.IS,0);};DefOperatorContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};DefOperatorContext.prototype.END=function(){return this.getToken(VtlParser.END,0);};DefOperatorContext.prototype.parameterItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ParameterItemContext);}else{return this.getTypedRuleContext(ParameterItemContext,i);}};DefOperatorContext.prototype.RETURNS=function(){return this.getToken(VtlParser.RETURNS,0);};DefOperatorContext.prototype.outputParameterType=function(){return this.getTypedRuleContext(OutputParameterTypeContext,0);};DefOperatorContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};DefOperatorContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDefOperator(this);}};DefOperatorContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDefOperator(this);}};DefOperatorContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDefOperator(this);}else{return visitor.visitChildren(this);}};function DefHierarchicalContext(parser,ctx){DefOperatorsContext.call(this,parser);DefOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}DefHierarchicalContext.prototype=Object.create(DefOperatorsContext.prototype);DefHierarchicalContext.prototype.constructor=DefHierarchicalContext;VtlParser.DefHierarchicalContext=DefHierarchicalContext;DefHierarchicalContext.prototype.DEFINE=function(){return this.getToken(VtlParser.DEFINE,0);};DefHierarchicalContext.prototype.HIERARCHICAL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.HIERARCHICAL);}else{return this.getToken(VtlParser.HIERARCHICAL,i);}};DefHierarchicalContext.prototype.RULESET=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RULESET);}else{return this.getToken(VtlParser.RULESET,i);}};DefHierarchicalContext.prototype.rulesetID=function(){return this.getTypedRuleContext(RulesetIDContext,0);};DefHierarchicalContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};DefHierarchicalContext.prototype.hierRuleSignature=function(){return this.getTypedRuleContext(HierRuleSignatureContext,0);};DefHierarchicalContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};DefHierarchicalContext.prototype.IS=function(){return this.getToken(VtlParser.IS,0);};DefHierarchicalContext.prototype.ruleClauseHierarchical=function(){return this.getTypedRuleContext(RuleClauseHierarchicalContext,0);};DefHierarchicalContext.prototype.END=function(){return this.getToken(VtlParser.END,0);};DefHierarchicalContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDefHierarchical(this);}};DefHierarchicalContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDefHierarchical(this);}};DefHierarchicalContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDefHierarchical(this);}else{return visitor.visitChildren(this);}};function DefDatapointRulesetContext(parser,ctx){DefOperatorsContext.call(this,parser);DefOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}DefDatapointRulesetContext.prototype=Object.create(DefOperatorsContext.prototype);DefDatapointRulesetContext.prototype.constructor=DefDatapointRulesetContext;VtlParser.DefDatapointRulesetContext=DefDatapointRulesetContext;DefDatapointRulesetContext.prototype.DEFINE=function(){return this.getToken(VtlParser.DEFINE,0);};DefDatapointRulesetContext.prototype.DATAPOINT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.DATAPOINT);}else{return this.getToken(VtlParser.DATAPOINT,i);}};DefDatapointRulesetContext.prototype.RULESET=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RULESET);}else{return this.getToken(VtlParser.RULESET,i);}};DefDatapointRulesetContext.prototype.rulesetID=function(){return this.getTypedRuleContext(RulesetIDContext,0);};DefDatapointRulesetContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};DefDatapointRulesetContext.prototype.rulesetSignature=function(){return this.getTypedRuleContext(RulesetSignatureContext,0);};DefDatapointRulesetContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};DefDatapointRulesetContext.prototype.IS=function(){return this.getToken(VtlParser.IS,0);};DefDatapointRulesetContext.prototype.ruleClauseDatapoint=function(){return this.getTypedRuleContext(RuleClauseDatapointContext,0);};DefDatapointRulesetContext.prototype.END=function(){return this.getToken(VtlParser.END,0);};DefDatapointRulesetContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDefDatapointRuleset(this);}};DefDatapointRulesetContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDefDatapointRuleset(this);}};DefDatapointRulesetContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDefDatapointRuleset(this);}else{return visitor.visitChildren(this);}};VtlParser.DefOperatorsContext=DefOperatorsContext;VtlParser.prototype.defOperators=function(){var localctx=new DefOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,32,VtlParser.RULE_defOperators);var _la=0;// Token type\ntry{this.state=443;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,20,this._ctx);switch(la_){case 1:localctx=new DefOperatorContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=393;this.match(VtlParser.DEFINE);this.state=394;this.match(VtlParser.OPERATOR);this.state=395;this.operatorID();this.state=396;this.match(VtlParser.LPAREN);this.state=405;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.IDENTIFIER){this.state=397;this.parameterItem();this.state=402;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=398;this.match(VtlParser.COMMA);this.state=399;this.parameterItem();this.state=404;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=407;this.match(VtlParser.RPAREN);this.state=410;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.RETURNS){this.state=408;this.match(VtlParser.RETURNS);this.state=409;this.outputParameterType();}this.state=412;this.match(VtlParser.IS);this.state=413;this.expr(0);this.state=414;this.match(VtlParser.END);this.state=415;this.match(VtlParser.OPERATOR);break;case 2:localctx=new DefDatapointRulesetContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=417;this.match(VtlParser.DEFINE);this.state=418;this.match(VtlParser.DATAPOINT);this.state=419;this.match(VtlParser.RULESET);this.state=420;this.rulesetID();this.state=421;this.match(VtlParser.LPAREN);this.state=422;this.rulesetSignature();this.state=423;this.match(VtlParser.RPAREN);this.state=424;this.match(VtlParser.IS);this.state=425;this.ruleClauseDatapoint();this.state=426;this.match(VtlParser.END);this.state=427;this.match(VtlParser.DATAPOINT);this.state=428;this.match(VtlParser.RULESET);break;case 3:localctx=new DefHierarchicalContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=430;this.match(VtlParser.DEFINE);this.state=431;this.match(VtlParser.HIERARCHICAL);this.state=432;this.match(VtlParser.RULESET);this.state=433;this.rulesetID();this.state=434;this.match(VtlParser.LPAREN);this.state=435;this.hierRuleSignature();this.state=436;this.match(VtlParser.RPAREN);this.state=437;this.match(VtlParser.IS);this.state=438;this.ruleClauseHierarchical();this.state=439;this.match(VtlParser.END);this.state=440;this.match(VtlParser.HIERARCHICAL);this.state=441;this.match(VtlParser.RULESET);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function GenericOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_genericOperators;return this;}GenericOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);GenericOperatorsContext.prototype.constructor=GenericOperatorsContext;GenericOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function EvalAtomContext(parser,ctx){GenericOperatorsContext.call(this,parser);GenericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}EvalAtomContext.prototype=Object.create(GenericOperatorsContext.prototype);EvalAtomContext.prototype.constructor=EvalAtomContext;VtlParser.EvalAtomContext=EvalAtomContext;EvalAtomContext.prototype.EVAL=function(){return this.getToken(VtlParser.EVAL,0);};EvalAtomContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};EvalAtomContext.prototype.routineName=function(){return this.getTypedRuleContext(RoutineNameContext,0);};EvalAtomContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};EvalAtomContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};EvalAtomContext.prototype.constant=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConstantContext);}else{return this.getTypedRuleContext(ConstantContext,i);}};EvalAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};EvalAtomContext.prototype.LANGUAGE=function(){return this.getToken(VtlParser.LANGUAGE,0);};EvalAtomContext.prototype.STRING_CONSTANT=function(){return this.getToken(VtlParser.STRING_CONSTANT,0);};EvalAtomContext.prototype.RETURNS=function(){return this.getToken(VtlParser.RETURNS,0);};EvalAtomContext.prototype.outputParameterType=function(){return this.getTypedRuleContext(OutputParameterTypeContext,0);};EvalAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterEvalAtom(this);}};EvalAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitEvalAtom(this);}};EvalAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitEvalAtom(this);}else{return visitor.visitChildren(this);}};function CastExprContext(parser,ctx){GenericOperatorsContext.call(this,parser);GenericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CastExprContext.prototype=Object.create(GenericOperatorsContext.prototype);CastExprContext.prototype.constructor=CastExprContext;VtlParser.CastExprContext=CastExprContext;CastExprContext.prototype.CAST=function(){return this.getToken(VtlParser.CAST,0);};CastExprContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CastExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CastExprContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};CastExprContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CastExprContext.prototype.basicScalarType=function(){return this.getTypedRuleContext(BasicScalarTypeContext,0);};CastExprContext.prototype.valueDomainName=function(){return this.getTypedRuleContext(ValueDomainNameContext,0);};CastExprContext.prototype.STRING_CONSTANT=function(){return this.getToken(VtlParser.STRING_CONSTANT,0);};CastExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCastExpr(this);}};CastExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCastExpr(this);}};CastExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCastExpr(this);}else{return visitor.visitChildren(this);}};function CallFunctionAtomContext(parser,ctx){GenericOperatorsContext.call(this,parser);GenericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CallFunctionAtomContext.prototype=Object.create(GenericOperatorsContext.prototype);CallFunctionAtomContext.prototype.constructor=CallFunctionAtomContext;VtlParser.CallFunctionAtomContext=CallFunctionAtomContext;CallFunctionAtomContext.prototype.operatorID=function(){return this.getTypedRuleContext(OperatorIDContext,0);};CallFunctionAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CallFunctionAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CallFunctionAtomContext.prototype.parameter=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ParameterContext);}else{return this.getTypedRuleContext(ParameterContext,i);}};CallFunctionAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};CallFunctionAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCallFunctionAtom(this);}};CallFunctionAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCallFunctionAtom(this);}};CallFunctionAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCallFunctionAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.GenericOperatorsContext=GenericOperatorsContext;VtlParser.prototype.genericOperators=function(){var localctx=new GenericOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,34,VtlParser.RULE_genericOperators);var _la=0;// Token type\ntry{this.state=502;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.IDENTIFIER:localctx=new CallFunctionAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=445;this.operatorID();this.state=446;this.match(VtlParser.LPAREN);this.state=455;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.OPTIONAL||(_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227|1<<VtlParser.IDENTIFIER-227))!==0){this.state=447;this.parameter();this.state=452;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=448;this.match(VtlParser.COMMA);this.state=449;this.parameter();this.state=454;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=457;this.match(VtlParser.RPAREN);break;case VtlParser.EVAL:localctx=new EvalAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=459;this.match(VtlParser.EVAL);this.state=460;this.match(VtlParser.LPAREN);this.state=461;this.routineName();this.state=462;this.match(VtlParser.LPAREN);this.state=465;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.IDENTIFIER:this.state=463;this.componentID();break;case VtlParser.INTEGER_CONSTANT:case VtlParser.FLOAT_CONSTANT:case VtlParser.BOOLEAN_CONSTANT:case VtlParser.NULL_CONSTANT:case VtlParser.STRING_CONSTANT:this.state=464;this.constant();break;case VtlParser.RPAREN:case VtlParser.COMMA:break;default:break;}this.state=474;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=467;this.match(VtlParser.COMMA);this.state=470;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.IDENTIFIER:this.state=468;this.componentID();break;case VtlParser.INTEGER_CONSTANT:case VtlParser.FLOAT_CONSTANT:case VtlParser.BOOLEAN_CONSTANT:case VtlParser.NULL_CONSTANT:case VtlParser.STRING_CONSTANT:this.state=469;this.constant();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=476;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=477;this.match(VtlParser.RPAREN);this.state=480;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.LANGUAGE){this.state=478;this.match(VtlParser.LANGUAGE);this.state=479;this.match(VtlParser.STRING_CONSTANT);}this.state=484;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.RETURNS){this.state=482;this.match(VtlParser.RETURNS);this.state=483;this.outputParameterType();}this.state=486;this.match(VtlParser.RPAREN);break;case VtlParser.CAST:localctx=new CastExprContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=488;this.match(VtlParser.CAST);this.state=489;this.match(VtlParser.LPAREN);this.state=490;this.expr(0);this.state=491;this.match(VtlParser.COMMA);this.state=494;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.BOOLEAN:case VtlParser.DATE:case VtlParser.TIME_PERIOD:case VtlParser.NUMBER:case VtlParser.STRING:case VtlParser.INTEGER:case VtlParser.DURATION:case VtlParser.SCALAR:case VtlParser.TIME:this.state=492;this.basicScalarType();break;case VtlParser.IDENTIFIER:this.state=493;this.valueDomainName();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=498;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=496;this.match(VtlParser.COMMA);this.state=497;this.match(VtlParser.STRING_CONSTANT);}this.state=500;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_parameter;return this;}ParameterContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterContext.prototype.constructor=ParameterContext;ParameterContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};ParameterContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};ParameterContext.prototype.OPTIONAL=function(){return this.getToken(VtlParser.OPTIONAL,0);};ParameterContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterParameter(this);}};ParameterContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitParameter(this);}};ParameterContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitParameter(this);}else{return visitor.visitChildren(this);}};VtlParser.ParameterContext=ParameterContext;VtlParser.prototype.parameter=function(){var localctx=new ParameterContext(this,this._ctx,this.state);this.enterRule(localctx,36,VtlParser.RULE_parameter);try{this.state=507;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=504;this.varID();break;case VtlParser.INTEGER_CONSTANT:case VtlParser.FLOAT_CONSTANT:case VtlParser.BOOLEAN_CONSTANT:case VtlParser.NULL_CONSTANT:case VtlParser.STRING_CONSTANT:this.enterOuterAlt(localctx,2);this.state=505;this.constant();break;case VtlParser.OPTIONAL:this.enterOuterAlt(localctx,3);this.state=506;this.match(VtlParser.OPTIONAL);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function StringOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_stringOperators;return this;}StringOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);StringOperatorsContext.prototype.constructor=StringOperatorsContext;StringOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function RtrimAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}RtrimAtomContext.prototype=Object.create(StringOperatorsContext.prototype);RtrimAtomContext.prototype.constructor=RtrimAtomContext;VtlParser.RtrimAtomContext=RtrimAtomContext;RtrimAtomContext.prototype.RTRIM=function(){return this.getToken(VtlParser.RTRIM,0);};RtrimAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};RtrimAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};RtrimAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};RtrimAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRtrimAtom(this);}};RtrimAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRtrimAtom(this);}};RtrimAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRtrimAtom(this);}else{return visitor.visitChildren(this);}};function LenAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}LenAtomContext.prototype=Object.create(StringOperatorsContext.prototype);LenAtomContext.prototype.constructor=LenAtomContext;VtlParser.LenAtomContext=LenAtomContext;LenAtomContext.prototype.LEN=function(){return this.getToken(VtlParser.LEN,0);};LenAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};LenAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LenAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};LenAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLenAtom(this);}};LenAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLenAtom(this);}};LenAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLenAtom(this);}else{return visitor.visitChildren(this);}};function UcaseAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}UcaseAtomContext.prototype=Object.create(StringOperatorsContext.prototype);UcaseAtomContext.prototype.constructor=UcaseAtomContext;VtlParser.UcaseAtomContext=UcaseAtomContext;UcaseAtomContext.prototype.UCASE=function(){return this.getToken(VtlParser.UCASE,0);};UcaseAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};UcaseAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};UcaseAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};UcaseAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterUcaseAtom(this);}};UcaseAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitUcaseAtom(this);}};UcaseAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitUcaseAtom(this);}else{return visitor.visitChildren(this);}};function LtrimAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}LtrimAtomContext.prototype=Object.create(StringOperatorsContext.prototype);LtrimAtomContext.prototype.constructor=LtrimAtomContext;VtlParser.LtrimAtomContext=LtrimAtomContext;LtrimAtomContext.prototype.LTRIM=function(){return this.getToken(VtlParser.LTRIM,0);};LtrimAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};LtrimAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LtrimAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};LtrimAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLtrimAtom(this);}};LtrimAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLtrimAtom(this);}};LtrimAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLtrimAtom(this);}else{return visitor.visitChildren(this);}};function LcaseAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}LcaseAtomContext.prototype=Object.create(StringOperatorsContext.prototype);LcaseAtomContext.prototype.constructor=LcaseAtomContext;VtlParser.LcaseAtomContext=LcaseAtomContext;LcaseAtomContext.prototype.LCASE=function(){return this.getToken(VtlParser.LCASE,0);};LcaseAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};LcaseAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LcaseAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};LcaseAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLcaseAtom(this);}};LcaseAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLcaseAtom(this);}};LcaseAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLcaseAtom(this);}else{return visitor.visitChildren(this);}};function TrimAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}TrimAtomContext.prototype=Object.create(StringOperatorsContext.prototype);TrimAtomContext.prototype.constructor=TrimAtomContext;VtlParser.TrimAtomContext=TrimAtomContext;TrimAtomContext.prototype.TRIM=function(){return this.getToken(VtlParser.TRIM,0);};TrimAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};TrimAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};TrimAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};TrimAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterTrimAtom(this);}};TrimAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitTrimAtom(this);}};TrimAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitTrimAtom(this);}else{return visitor.visitChildren(this);}};function InstrAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);this.param=null;// ExprContext;\nStringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}InstrAtomContext.prototype=Object.create(StringOperatorsContext.prototype);InstrAtomContext.prototype.constructor=InstrAtomContext;VtlParser.InstrAtomContext=InstrAtomContext;InstrAtomContext.prototype.INSTR=function(){return this.getToken(VtlParser.INSTR,0);};InstrAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};InstrAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};InstrAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};InstrAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};InstrAtomContext.prototype.optionalExpr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(OptionalExprContext);}else{return this.getTypedRuleContext(OptionalExprContext,i);}};InstrAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterInstrAtom(this);}};InstrAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitInstrAtom(this);}};InstrAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitInstrAtom(this);}else{return visitor.visitChildren(this);}};function SubstrAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);StringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}SubstrAtomContext.prototype=Object.create(StringOperatorsContext.prototype);SubstrAtomContext.prototype.constructor=SubstrAtomContext;VtlParser.SubstrAtomContext=SubstrAtomContext;SubstrAtomContext.prototype.SUBSTR=function(){return this.getToken(VtlParser.SUBSTR,0);};SubstrAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SubstrAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};SubstrAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SubstrAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};SubstrAtomContext.prototype.optionalExpr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(OptionalExprContext);}else{return this.getTypedRuleContext(OptionalExprContext,i);}};SubstrAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSubstrAtom(this);}};SubstrAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSubstrAtom(this);}};SubstrAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSubstrAtom(this);}else{return visitor.visitChildren(this);}};function ReplaceAtomContext(parser,ctx){StringOperatorsContext.call(this,parser);this.param=null;// ExprContext;\nStringOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ReplaceAtomContext.prototype=Object.create(StringOperatorsContext.prototype);ReplaceAtomContext.prototype.constructor=ReplaceAtomContext;VtlParser.ReplaceAtomContext=ReplaceAtomContext;ReplaceAtomContext.prototype.REPLACE=function(){return this.getToken(VtlParser.REPLACE,0);};ReplaceAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ReplaceAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ReplaceAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ReplaceAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ReplaceAtomContext.prototype.optionalExpr=function(){return this.getTypedRuleContext(OptionalExprContext,0);};ReplaceAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterReplaceAtom(this);}};ReplaceAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitReplaceAtom(this);}};ReplaceAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitReplaceAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.StringOperatorsContext=StringOperatorsContext;VtlParser.prototype.stringOperators=function(){var localctx=new StringOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,38,VtlParser.RULE_stringOperators);var _la=0;// Token type\ntry{this.state=577;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.TRIM:localctx=new TrimAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=509;this.match(VtlParser.TRIM);this.state=510;this.match(VtlParser.LPAREN);this.state=511;this.expr(0);this.state=512;this.match(VtlParser.RPAREN);break;case VtlParser.LTRIM:localctx=new LtrimAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=514;this.match(VtlParser.LTRIM);this.state=515;this.match(VtlParser.LPAREN);this.state=516;this.expr(0);this.state=517;this.match(VtlParser.RPAREN);break;case VtlParser.RTRIM:localctx=new RtrimAtomContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=519;this.match(VtlParser.RTRIM);this.state=520;this.match(VtlParser.LPAREN);this.state=521;this.expr(0);this.state=522;this.match(VtlParser.RPAREN);break;case VtlParser.UCASE:localctx=new UcaseAtomContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=524;this.match(VtlParser.UCASE);this.state=525;this.match(VtlParser.LPAREN);this.state=526;this.expr(0);this.state=527;this.match(VtlParser.RPAREN);break;case VtlParser.LCASE:localctx=new LcaseAtomContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=529;this.match(VtlParser.LCASE);this.state=530;this.match(VtlParser.LPAREN);this.state=531;this.expr(0);this.state=532;this.match(VtlParser.RPAREN);break;case VtlParser.SUBSTR:localctx=new SubstrAtomContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=534;this.match(VtlParser.SUBSTR);this.state=535;this.match(VtlParser.LPAREN);this.state=536;this.expr(0);this.state=541;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=537;this.match(VtlParser.COMMA);this.state=538;this.optionalExpr();this.state=543;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=544;this.match(VtlParser.RPAREN);break;case VtlParser.REPLACE:localctx=new ReplaceAtomContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=546;this.match(VtlParser.REPLACE);this.state=547;this.match(VtlParser.LPAREN);this.state=548;this.expr(0);this.state=549;this.match(VtlParser.COMMA);this.state=550;localctx.param=this.expr(0);this.state=553;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=551;this.match(VtlParser.COMMA);this.state=552;this.optionalExpr();}this.state=555;this.match(VtlParser.RPAREN);break;case VtlParser.INSTR:localctx=new InstrAtomContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=557;this.match(VtlParser.INSTR);this.state=558;this.match(VtlParser.LPAREN);this.state=559;this.expr(0);this.state=560;this.match(VtlParser.COMMA);this.state=561;localctx.param=this.expr(0);this.state=564;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,34,this._ctx);if(la_===1){this.state=562;this.match(VtlParser.COMMA);this.state=563;this.optionalExpr();}this.state=568;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=566;this.match(VtlParser.COMMA);this.state=567;this.optionalExpr();}this.state=570;this.match(VtlParser.RPAREN);break;case VtlParser.LEN:localctx=new LenAtomContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=572;this.match(VtlParser.LEN);this.state=573;this.match(VtlParser.LPAREN);this.state=574;this.expr(0);this.state=575;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function NumericOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_numericOperators;return this;}NumericOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);NumericOperatorsContext.prototype.constructor=NumericOperatorsContext;NumericOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function LogAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nNumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}LogAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);LogAtomContext.prototype.constructor=LogAtomContext;VtlParser.LogAtomContext=LogAtomContext;LogAtomContext.prototype.LOG=function(){return this.getToken(VtlParser.LOG,0);};LogAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};LogAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};LogAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};LogAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};LogAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLogAtom(this);}};LogAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLogAtom(this);}};LogAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLogAtom(this);}else{return visitor.visitChildren(this);}};function SqrtAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}SqrtAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);SqrtAtomContext.prototype.constructor=SqrtAtomContext;VtlParser.SqrtAtomContext=SqrtAtomContext;SqrtAtomContext.prototype.SQRT=function(){return this.getToken(VtlParser.SQRT,0);};SqrtAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SqrtAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};SqrtAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SqrtAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSqrtAtom(this);}};SqrtAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSqrtAtom(this);}};SqrtAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSqrtAtom(this);}else{return visitor.visitChildren(this);}};function CeilAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CeilAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);CeilAtomContext.prototype.constructor=CeilAtomContext;VtlParser.CeilAtomContext=CeilAtomContext;CeilAtomContext.prototype.CEIL=function(){return this.getToken(VtlParser.CEIL,0);};CeilAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CeilAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CeilAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CeilAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCeilAtom(this);}};CeilAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCeilAtom(this);}};CeilAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCeilAtom(this);}else{return visitor.visitChildren(this);}};function PowerAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nNumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}PowerAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);PowerAtomContext.prototype.constructor=PowerAtomContext;VtlParser.PowerAtomContext=PowerAtomContext;PowerAtomContext.prototype.POWER=function(){return this.getToken(VtlParser.POWER,0);};PowerAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};PowerAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};PowerAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};PowerAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};PowerAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterPowerAtom(this);}};PowerAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitPowerAtom(this);}};PowerAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitPowerAtom(this);}else{return visitor.visitChildren(this);}};function ModAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nNumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ModAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);ModAtomContext.prototype.constructor=ModAtomContext;VtlParser.ModAtomContext=ModAtomContext;ModAtomContext.prototype.MOD=function(){return this.getToken(VtlParser.MOD,0);};ModAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ModAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};ModAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ModAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ModAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterModAtom(this);}};ModAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitModAtom(this);}};ModAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitModAtom(this);}else{return visitor.visitChildren(this);}};function MinAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}MinAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);MinAtomContext.prototype.constructor=MinAtomContext;VtlParser.MinAtomContext=MinAtomContext;MinAtomContext.prototype.ABS=function(){return this.getToken(VtlParser.ABS,0);};MinAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MinAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MinAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MinAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMinAtom(this);}};MinAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMinAtom(this);}};MinAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMinAtom(this);}else{return visitor.visitChildren(this);}};function RoundAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}RoundAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);RoundAtomContext.prototype.constructor=RoundAtomContext;VtlParser.RoundAtomContext=RoundAtomContext;RoundAtomContext.prototype.ROUND=function(){return this.getToken(VtlParser.ROUND,0);};RoundAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};RoundAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};RoundAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};RoundAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};RoundAtomContext.prototype.optionalExpr=function(){return this.getTypedRuleContext(OptionalExprContext,0);};RoundAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRoundAtom(this);}};RoundAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRoundAtom(this);}};RoundAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRoundAtom(this);}else{return visitor.visitChildren(this);}};function ExpAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ExpAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);ExpAtomContext.prototype.constructor=ExpAtomContext;VtlParser.ExpAtomContext=ExpAtomContext;ExpAtomContext.prototype.EXP=function(){return this.getToken(VtlParser.EXP,0);};ExpAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ExpAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ExpAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ExpAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterExpAtom(this);}};ExpAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitExpAtom(this);}};ExpAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitExpAtom(this);}else{return visitor.visitChildren(this);}};function LnAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}LnAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);LnAtomContext.prototype.constructor=LnAtomContext;VtlParser.LnAtomContext=LnAtomContext;LnAtomContext.prototype.TRUNC=function(){return this.getToken(VtlParser.TRUNC,0);};LnAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};LnAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LnAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};LnAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};LnAtomContext.prototype.optionalExpr=function(){return this.getTypedRuleContext(OptionalExprContext,0);};LnAtomContext.prototype.LN=function(){return this.getToken(VtlParser.LN,0);};LnAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLnAtom(this);}};LnAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLnAtom(this);}};LnAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLnAtom(this);}else{return visitor.visitChildren(this);}};function FloorAtomContext(parser,ctx){NumericOperatorsContext.call(this,parser);NumericOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}FloorAtomContext.prototype=Object.create(NumericOperatorsContext.prototype);FloorAtomContext.prototype.constructor=FloorAtomContext;VtlParser.FloorAtomContext=FloorAtomContext;FloorAtomContext.prototype.FLOOR=function(){return this.getToken(VtlParser.FLOOR,0);};FloorAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};FloorAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};FloorAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};FloorAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFloorAtom(this);}};FloorAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFloorAtom(this);}};FloorAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFloorAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.NumericOperatorsContext=NumericOperatorsContext;VtlParser.prototype.numericOperators=function(){var localctx=new NumericOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,40,VtlParser.RULE_numericOperators);var _la=0;// Token type\ntry{this.state=648;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.MOD:localctx=new ModAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=579;this.match(VtlParser.MOD);this.state=580;this.match(VtlParser.LPAREN);this.state=581;localctx.left=this.expr(0);this.state=582;this.match(VtlParser.COMMA);this.state=583;localctx.right=this.expr(0);this.state=584;this.match(VtlParser.RPAREN);break;case VtlParser.ROUND:localctx=new RoundAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=586;this.match(VtlParser.ROUND);this.state=587;this.match(VtlParser.LPAREN);this.state=588;this.expr(0);this.state=591;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=589;this.match(VtlParser.COMMA);this.state=590;this.optionalExpr();}this.state=593;this.match(VtlParser.RPAREN);break;case VtlParser.TRUNC:localctx=new LnAtomContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=595;this.match(VtlParser.TRUNC);this.state=596;this.match(VtlParser.LPAREN);this.state=597;this.expr(0);this.state=600;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=598;this.match(VtlParser.COMMA);this.state=599;this.optionalExpr();}this.state=602;this.match(VtlParser.RPAREN);break;case VtlParser.CEIL:localctx=new CeilAtomContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=604;this.match(VtlParser.CEIL);this.state=605;this.match(VtlParser.LPAREN);this.state=606;this.expr(0);this.state=607;this.match(VtlParser.RPAREN);break;case VtlParser.FLOOR:localctx=new FloorAtomContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=609;this.match(VtlParser.FLOOR);this.state=610;this.match(VtlParser.LPAREN);this.state=611;this.expr(0);this.state=612;this.match(VtlParser.RPAREN);break;case VtlParser.ABS:localctx=new MinAtomContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=614;this.match(VtlParser.ABS);this.state=615;this.match(VtlParser.LPAREN);this.state=616;this.expr(0);this.state=617;this.match(VtlParser.RPAREN);break;case VtlParser.EXP:localctx=new ExpAtomContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=619;this.match(VtlParser.EXP);this.state=620;this.match(VtlParser.LPAREN);this.state=621;this.expr(0);this.state=622;this.match(VtlParser.RPAREN);break;case VtlParser.LN:localctx=new LnAtomContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=624;this.match(VtlParser.LN);this.state=625;this.match(VtlParser.LPAREN);this.state=626;this.expr(0);this.state=627;this.match(VtlParser.RPAREN);break;case VtlParser.POWER:localctx=new PowerAtomContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=629;this.match(VtlParser.POWER);this.state=630;this.match(VtlParser.LPAREN);this.state=631;localctx.left=this.expr(0);this.state=632;this.match(VtlParser.COMMA);this.state=633;localctx.right=this.expr(0);this.state=634;this.match(VtlParser.RPAREN);break;case VtlParser.LOG:localctx=new LogAtomContext(this,localctx);this.enterOuterAlt(localctx,10);this.state=636;this.match(VtlParser.LOG);this.state=637;this.match(VtlParser.LPAREN);this.state=638;localctx.left=this.expr(0);this.state=639;this.match(VtlParser.COMMA);this.state=640;localctx.right=this.expr(0);this.state=641;this.match(VtlParser.RPAREN);break;case VtlParser.SQRT:localctx=new SqrtAtomContext(this,localctx);this.enterOuterAlt(localctx,11);this.state=643;this.match(VtlParser.SQRT);this.state=644;this.match(VtlParser.LPAREN);this.state=645;this.expr(0);this.state=646;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComparisonOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_comparisonOperators;return this;}ComparisonOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComparisonOperatorsContext.prototype.constructor=ComparisonOperatorsContext;ComparisonOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function BetweenAtomContext(parser,ctx){ComparisonOperatorsContext.call(this,parser);this.element=null;// ExprContext;\nthis.from=null;// ExprContext;\nthis.to=null;// ExprContext;\nComparisonOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}BetweenAtomContext.prototype=Object.create(ComparisonOperatorsContext.prototype);BetweenAtomContext.prototype.constructor=BetweenAtomContext;VtlParser.BetweenAtomContext=BetweenAtomContext;BetweenAtomContext.prototype.BETWEEN=function(){return this.getToken(VtlParser.BETWEEN,0);};BetweenAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};BetweenAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};BetweenAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};BetweenAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};BetweenAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterBetweenAtom(this);}};BetweenAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitBetweenAtom(this);}};BetweenAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitBetweenAtom(this);}else{return visitor.visitChildren(this);}};function CharsetMatchAtomContext(parser,ctx){ComparisonOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nComparisonOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CharsetMatchAtomContext.prototype=Object.create(ComparisonOperatorsContext.prototype);CharsetMatchAtomContext.prototype.constructor=CharsetMatchAtomContext;VtlParser.CharsetMatchAtomContext=CharsetMatchAtomContext;CharsetMatchAtomContext.prototype.CHARSET_MATCH=function(){return this.getToken(VtlParser.CHARSET_MATCH,0);};CharsetMatchAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CharsetMatchAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};CharsetMatchAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CharsetMatchAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};CharsetMatchAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCharsetMatchAtom(this);}};CharsetMatchAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCharsetMatchAtom(this);}};CharsetMatchAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCharsetMatchAtom(this);}else{return visitor.visitChildren(this);}};function IsNullAtomContext(parser,ctx){ComparisonOperatorsContext.call(this,parser);ComparisonOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}IsNullAtomContext.prototype=Object.create(ComparisonOperatorsContext.prototype);IsNullAtomContext.prototype.constructor=IsNullAtomContext;VtlParser.IsNullAtomContext=IsNullAtomContext;IsNullAtomContext.prototype.ISNULL=function(){return this.getToken(VtlParser.ISNULL,0);};IsNullAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};IsNullAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};IsNullAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};IsNullAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterIsNullAtom(this);}};IsNullAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitIsNullAtom(this);}};IsNullAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitIsNullAtom(this);}else{return visitor.visitChildren(this);}};function ExistInAtomContext(parser,ctx){ComparisonOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nComparisonOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ExistInAtomContext.prototype=Object.create(ComparisonOperatorsContext.prototype);ExistInAtomContext.prototype.constructor=ExistInAtomContext;VtlParser.ExistInAtomContext=ExistInAtomContext;ExistInAtomContext.prototype.EXISTS_IN=function(){return this.getToken(VtlParser.EXISTS_IN,0);};ExistInAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ExistInAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ExistInAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ExistInAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};ExistInAtomContext.prototype.retainType=function(){return this.getTypedRuleContext(RetainTypeContext,0);};ExistInAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterExistInAtom(this);}};ExistInAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitExistInAtom(this);}};ExistInAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitExistInAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.ComparisonOperatorsContext=ComparisonOperatorsContext;VtlParser.prototype.comparisonOperators=function(){var localctx=new ComparisonOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,42,VtlParser.RULE_comparisonOperators);var _la=0;// Token type\ntry{this.state=682;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.BETWEEN:localctx=new BetweenAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=650;this.match(VtlParser.BETWEEN);this.state=651;this.match(VtlParser.LPAREN);this.state=652;localctx.element=this.expr(0);this.state=653;this.match(VtlParser.COMMA);this.state=654;localctx.from=this.expr(0);this.state=655;this.match(VtlParser.COMMA);this.state=656;localctx.to=this.expr(0);this.state=657;this.match(VtlParser.RPAREN);break;case VtlParser.CHARSET_MATCH:localctx=new CharsetMatchAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=659;this.match(VtlParser.CHARSET_MATCH);this.state=660;this.match(VtlParser.LPAREN);this.state=661;localctx.left=this.expr(0);this.state=662;this.match(VtlParser.COMMA);this.state=663;localctx.right=this.expr(0);this.state=664;this.match(VtlParser.RPAREN);break;case VtlParser.ISNULL:localctx=new IsNullAtomContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=666;this.match(VtlParser.ISNULL);this.state=667;this.match(VtlParser.LPAREN);this.state=668;this.expr(0);this.state=669;this.match(VtlParser.RPAREN);break;case VtlParser.EXISTS_IN:localctx=new ExistInAtomContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=671;this.match(VtlParser.EXISTS_IN);this.state=672;this.match(VtlParser.LPAREN);this.state=673;localctx.left=this.expr(0);this.state=674;this.match(VtlParser.COMMA);this.state=675;localctx.right=this.expr(0);this.state=678;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=676;this.match(VtlParser.COMMA);this.state=677;this.retainType();}this.state=680;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function TimeOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_timeOperators;return this;}TimeOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);TimeOperatorsContext.prototype.constructor=TimeOperatorsContext;TimeOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function StockToFlowAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}StockToFlowAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);StockToFlowAtomContext.prototype.constructor=StockToFlowAtomContext;VtlParser.StockToFlowAtomContext=StockToFlowAtomContext;StockToFlowAtomContext.prototype.STOCK_TO_FLOW=function(){return this.getToken(VtlParser.STOCK_TO_FLOW,0);};StockToFlowAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};StockToFlowAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StockToFlowAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};StockToFlowAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStockToFlowAtom(this);}};StockToFlowAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStockToFlowAtom(this);}};StockToFlowAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStockToFlowAtom(this);}else{return visitor.visitChildren(this);}};function TimeShiftAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}TimeShiftAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);TimeShiftAtomContext.prototype.constructor=TimeShiftAtomContext;VtlParser.TimeShiftAtomContext=TimeShiftAtomContext;TimeShiftAtomContext.prototype.TIMESHIFT=function(){return this.getToken(VtlParser.TIMESHIFT,0);};TimeShiftAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};TimeShiftAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};TimeShiftAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};TimeShiftAtomContext.prototype.INTEGER_CONSTANT=function(){return this.getToken(VtlParser.INTEGER_CONSTANT,0);};TimeShiftAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};TimeShiftAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterTimeShiftAtom(this);}};TimeShiftAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitTimeShiftAtom(this);}};TimeShiftAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitTimeShiftAtom(this);}else{return visitor.visitChildren(this);}};function TimeAggAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}TimeAggAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);TimeAggAtomContext.prototype.constructor=TimeAggAtomContext;VtlParser.TimeAggAtomContext=TimeAggAtomContext;TimeAggAtomContext.prototype.TIME_AGG=function(){return this.getToken(VtlParser.TIME_AGG,0);};TimeAggAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};TimeAggAtomContext.prototype.STRING_CONSTANT=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.STRING_CONSTANT);}else{return this.getToken(VtlParser.STRING_CONSTANT,i);}};TimeAggAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};TimeAggAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};TimeAggAtomContext.prototype.OPTIONAL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.OPTIONAL);}else{return this.getToken(VtlParser.OPTIONAL,i);}};TimeAggAtomContext.prototype.FIRST=function(){return this.getToken(VtlParser.FIRST,0);};TimeAggAtomContext.prototype.LAST=function(){return this.getToken(VtlParser.LAST,0);};TimeAggAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};TimeAggAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterTimeAggAtom(this);}};TimeAggAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitTimeAggAtom(this);}};TimeAggAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitTimeAggAtom(this);}else{return visitor.visitChildren(this);}};function FlowToStockAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}FlowToStockAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);FlowToStockAtomContext.prototype.constructor=FlowToStockAtomContext;VtlParser.FlowToStockAtomContext=FlowToStockAtomContext;FlowToStockAtomContext.prototype.FLOW_TO_STOCK=function(){return this.getToken(VtlParser.FLOW_TO_STOCK,0);};FlowToStockAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};FlowToStockAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};FlowToStockAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};FlowToStockAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFlowToStockAtom(this);}};FlowToStockAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFlowToStockAtom(this);}};FlowToStockAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFlowToStockAtom(this);}else{return visitor.visitChildren(this);}};function CurrentDateAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CurrentDateAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);CurrentDateAtomContext.prototype.constructor=CurrentDateAtomContext;VtlParser.CurrentDateAtomContext=CurrentDateAtomContext;CurrentDateAtomContext.prototype.CURRENT_DATE=function(){return this.getToken(VtlParser.CURRENT_DATE,0);};CurrentDateAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CurrentDateAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CurrentDateAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCurrentDateAtom(this);}};CurrentDateAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCurrentDateAtom(this);}};CurrentDateAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCurrentDateAtom(this);}else{return visitor.visitChildren(this);}};function PeriodAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}PeriodAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);PeriodAtomContext.prototype.constructor=PeriodAtomContext;VtlParser.PeriodAtomContext=PeriodAtomContext;PeriodAtomContext.prototype.PERIOD_INDICATOR=function(){return this.getToken(VtlParser.PERIOD_INDICATOR,0);};PeriodAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};PeriodAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};PeriodAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};PeriodAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterPeriodAtom(this);}};PeriodAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitPeriodAtom(this);}};PeriodAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitPeriodAtom(this);}else{return visitor.visitChildren(this);}};function FillTimeAtomContext(parser,ctx){TimeOperatorsContext.call(this,parser);TimeOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}FillTimeAtomContext.prototype=Object.create(TimeOperatorsContext.prototype);FillTimeAtomContext.prototype.constructor=FillTimeAtomContext;VtlParser.FillTimeAtomContext=FillTimeAtomContext;FillTimeAtomContext.prototype.FILL_TIME_SERIES=function(){return this.getToken(VtlParser.FILL_TIME_SERIES,0);};FillTimeAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};FillTimeAtomContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};FillTimeAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};FillTimeAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};FillTimeAtomContext.prototype.SINGLE=function(){return this.getToken(VtlParser.SINGLE,0);};FillTimeAtomContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};FillTimeAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFillTimeAtom(this);}};FillTimeAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFillTimeAtom(this);}};FillTimeAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFillTimeAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.TimeOperatorsContext=TimeOperatorsContext;VtlParser.prototype.timeOperators=function(){var localctx=new TimeOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,44,VtlParser.RULE_timeOperators);var _la=0;// Token type\ntry{this.state=738;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.PERIOD_INDICATOR:localctx=new PeriodAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=684;this.match(VtlParser.PERIOD_INDICATOR);this.state=685;this.match(VtlParser.LPAREN);this.state=687;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.LPAREN|1<<VtlParser.PLUS|1<<VtlParser.MINUS|1<<VtlParser.EVAL|1<<VtlParser.IF|1<<VtlParser.CURRENT_DATE))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<VtlParser.NOT-39|1<<VtlParser.BETWEEN-39|1<<VtlParser.ISNULL-39|1<<VtlParser.UNION-39|1<<VtlParser.SYMDIFF-39|1<<VtlParser.INTERSECT-39|1<<VtlParser.CHECK-39|1<<VtlParser.EXISTS_IN-39|1<<VtlParser.RANK-39|1<<VtlParser.MIN-39|1<<VtlParser.MAX-39))!==0||(_la-73&~0x1f)==0&&(1<<_la-73&(1<<VtlParser.ABS-73|1<<VtlParser.LN-73|1<<VtlParser.LOG-73|1<<VtlParser.TRUNC-73|1<<VtlParser.ROUND-73|1<<VtlParser.POWER-73|1<<VtlParser.MOD-73|1<<VtlParser.LEN-73|1<<VtlParser.TRIM-73|1<<VtlParser.UCASE-73|1<<VtlParser.LCASE-73|1<<VtlParser.SUBSTR-73|1<<VtlParser.SUM-73|1<<VtlParser.AVG-73|1<<VtlParser.MEDIAN-73|1<<VtlParser.COUNT-73|1<<VtlParser.EXP-73|1<<VtlParser.CHARSET_MATCH-73|1<<VtlParser.NVL-73|1<<VtlParser.HIERARCHY-73))!==0||(_la-119&~0x1f)==0&&(1<<_la-119&(1<<VtlParser.LTRIM-119|1<<VtlParser.RTRIM-119|1<<VtlParser.INSTR-119|1<<VtlParser.REPLACE-119|1<<VtlParser.CEIL-119|1<<VtlParser.FLOOR-119|1<<VtlParser.SQRT-119|1<<VtlParser.SETDIFF-119|1<<VtlParser.STDDEV_POP-119|1<<VtlParser.STDDEV_SAMP-119|1<<VtlParser.VAR_POP-119|1<<VtlParser.VAR_SAMP-119|1<<VtlParser.FIRST_VALUE-119|1<<VtlParser.LAST_VALUE-119|1<<VtlParser.LAG-119|1<<VtlParser.LEAD-119|1<<VtlParser.RATIO_TO_REPORT-119|1<<VtlParser.FILL_TIME_SERIES-119|1<<VtlParser.FLOW_TO_STOCK-119))!==0||(_la-151&~0x1f)==0&&(1<<_la-151&(1<<VtlParser.STOCK_TO_FLOW-151|1<<VtlParser.TIMESHIFT-151|1<<VtlParser.INNER_JOIN-151|1<<VtlParser.LEFT_JOIN-151|1<<VtlParser.CROSS_JOIN-151))!==0||(_la-183&~0x1f)==0&&(1<<_la-183&(1<<VtlParser.FULL_JOIN-183|1<<VtlParser.PERIOD_INDICATOR-183|1<<VtlParser.TIME_AGG-183|1<<VtlParser.CAST-183|1<<VtlParser.CHECK_DATAPOINT-183|1<<VtlParser.CHECK_HIERARCHY-183))!==0||(_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227|1<<VtlParser.IDENTIFIER-227))!==0){this.state=686;this.expr(0);}this.state=689;this.match(VtlParser.RPAREN);break;case VtlParser.FILL_TIME_SERIES:localctx=new FillTimeAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=690;this.match(VtlParser.FILL_TIME_SERIES);this.state=691;this.match(VtlParser.LPAREN);this.state=692;this.expr(0);this.state=695;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=693;this.match(VtlParser.COMMA);this.state=694;_la=this._input.LA(1);if(!(_la===VtlParser.ALL||_la===VtlParser.SINGLE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=697;this.match(VtlParser.RPAREN);break;case VtlParser.FLOW_TO_STOCK:localctx=new FlowToStockAtomContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=699;this.match(VtlParser.FLOW_TO_STOCK);this.state=700;this.match(VtlParser.LPAREN);this.state=701;this.expr(0);this.state=702;this.match(VtlParser.RPAREN);break;case VtlParser.STOCK_TO_FLOW:localctx=new StockToFlowAtomContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=704;this.match(VtlParser.STOCK_TO_FLOW);this.state=705;this.match(VtlParser.LPAREN);this.state=706;this.expr(0);this.state=707;this.match(VtlParser.RPAREN);break;case VtlParser.TIMESHIFT:localctx=new TimeShiftAtomContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=709;this.match(VtlParser.TIMESHIFT);this.state=710;this.match(VtlParser.LPAREN);this.state=711;this.expr(0);this.state=712;this.match(VtlParser.COMMA);this.state=713;this.match(VtlParser.INTEGER_CONSTANT);this.state=714;this.match(VtlParser.RPAREN);break;case VtlParser.TIME_AGG:localctx=new TimeAggAtomContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=716;this.match(VtlParser.TIME_AGG);this.state=717;this.match(VtlParser.LPAREN);this.state=718;this.match(VtlParser.STRING_CONSTANT);this.state=721;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,44,this._ctx);if(la_===1){this.state=719;this.match(VtlParser.COMMA);this.state=720;_la=this._input.LA(1);if(!(_la===VtlParser.OPTIONAL||_la===VtlParser.STRING_CONSTANT)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=728;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,46,this._ctx);if(la_===1){this.state=723;this.match(VtlParser.COMMA);this.state=726;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.LPAREN:case VtlParser.PLUS:case VtlParser.MINUS:case VtlParser.EVAL:case VtlParser.IF:case VtlParser.CURRENT_DATE:case VtlParser.NOT:case VtlParser.BETWEEN:case VtlParser.ISNULL:case VtlParser.UNION:case VtlParser.SYMDIFF:case VtlParser.INTERSECT:case VtlParser.CHECK:case VtlParser.EXISTS_IN:case VtlParser.RANK:case VtlParser.MIN:case VtlParser.MAX:case VtlParser.ABS:case VtlParser.LN:case VtlParser.LOG:case VtlParser.TRUNC:case VtlParser.ROUND:case VtlParser.POWER:case VtlParser.MOD:case VtlParser.LEN:case VtlParser.TRIM:case VtlParser.UCASE:case VtlParser.LCASE:case VtlParser.SUBSTR:case VtlParser.SUM:case VtlParser.AVG:case VtlParser.MEDIAN:case VtlParser.COUNT:case VtlParser.EXP:case VtlParser.CHARSET_MATCH:case VtlParser.NVL:case VtlParser.HIERARCHY:case VtlParser.LTRIM:case VtlParser.RTRIM:case VtlParser.INSTR:case VtlParser.REPLACE:case VtlParser.CEIL:case VtlParser.FLOOR:case VtlParser.SQRT:case VtlParser.SETDIFF:case VtlParser.STDDEV_POP:case VtlParser.STDDEV_SAMP:case VtlParser.VAR_POP:case VtlParser.VAR_SAMP:case VtlParser.FIRST_VALUE:case VtlParser.LAST_VALUE:case VtlParser.LAG:case VtlParser.LEAD:case VtlParser.RATIO_TO_REPORT:case VtlParser.FILL_TIME_SERIES:case VtlParser.FLOW_TO_STOCK:case VtlParser.STOCK_TO_FLOW:case VtlParser.TIMESHIFT:case VtlParser.INNER_JOIN:case VtlParser.LEFT_JOIN:case VtlParser.CROSS_JOIN:case VtlParser.FULL_JOIN:case VtlParser.PERIOD_INDICATOR:case VtlParser.TIME_AGG:case VtlParser.CAST:case VtlParser.CHECK_DATAPOINT:case VtlParser.CHECK_HIERARCHY:case VtlParser.INTEGER_CONSTANT:case VtlParser.FLOAT_CONSTANT:case VtlParser.BOOLEAN_CONSTANT:case VtlParser.NULL_CONSTANT:case VtlParser.STRING_CONSTANT:case VtlParser.IDENTIFIER:this.state=724;this.expr(0);break;case VtlParser.OPTIONAL:this.state=725;this.match(VtlParser.OPTIONAL);break;default:throw new antlr4.error.NoViableAltException(this);}}this.state=732;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=730;this.match(VtlParser.COMMA);this.state=731;_la=this._input.LA(1);if(!(_la===VtlParser.FIRST||_la===VtlParser.LAST)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=734;this.match(VtlParser.RPAREN);break;case VtlParser.CURRENT_DATE:localctx=new CurrentDateAtomContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=735;this.match(VtlParser.CURRENT_DATE);this.state=736;this.match(VtlParser.LPAREN);this.state=737;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SetOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_setOperators;return this;}SetOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SetOperatorsContext.prototype.constructor=SetOperatorsContext;SetOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function SymDiffAtomContext(parser,ctx){SetOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nSetOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}SymDiffAtomContext.prototype=Object.create(SetOperatorsContext.prototype);SymDiffAtomContext.prototype.constructor=SymDiffAtomContext;VtlParser.SymDiffAtomContext=SymDiffAtomContext;SymDiffAtomContext.prototype.SYMDIFF=function(){return this.getToken(VtlParser.SYMDIFF,0);};SymDiffAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SymDiffAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};SymDiffAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SymDiffAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};SymDiffAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSymDiffAtom(this);}};SymDiffAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSymDiffAtom(this);}};SymDiffAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSymDiffAtom(this);}else{return visitor.visitChildren(this);}};function IntersectAtomContext(parser,ctx){SetOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nSetOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}IntersectAtomContext.prototype=Object.create(SetOperatorsContext.prototype);IntersectAtomContext.prototype.constructor=IntersectAtomContext;VtlParser.IntersectAtomContext=IntersectAtomContext;IntersectAtomContext.prototype.INTERSECT=function(){return this.getToken(VtlParser.INTERSECT,0);};IntersectAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};IntersectAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};IntersectAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};IntersectAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};IntersectAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterIntersectAtom(this);}};IntersectAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitIntersectAtom(this);}};IntersectAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitIntersectAtom(this);}else{return visitor.visitChildren(this);}};function SetDiffAtomContext(parser,ctx){SetOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nSetOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}SetDiffAtomContext.prototype=Object.create(SetOperatorsContext.prototype);SetDiffAtomContext.prototype.constructor=SetDiffAtomContext;VtlParser.SetDiffAtomContext=SetDiffAtomContext;SetDiffAtomContext.prototype.SETDIFF=function(){return this.getToken(VtlParser.SETDIFF,0);};SetDiffAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SetDiffAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};SetDiffAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SetDiffAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};SetDiffAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSetDiffAtom(this);}};SetDiffAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSetDiffAtom(this);}};SetDiffAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSetDiffAtom(this);}else{return visitor.visitChildren(this);}};function UnionAtomContext(parser,ctx){SetOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nSetOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}UnionAtomContext.prototype=Object.create(SetOperatorsContext.prototype);UnionAtomContext.prototype.constructor=UnionAtomContext;VtlParser.UnionAtomContext=UnionAtomContext;UnionAtomContext.prototype.UNION=function(){return this.getToken(VtlParser.UNION,0);};UnionAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};UnionAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};UnionAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};UnionAtomContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};UnionAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterUnionAtom(this);}};UnionAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitUnionAtom(this);}};UnionAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitUnionAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.SetOperatorsContext=SetOperatorsContext;VtlParser.prototype.setOperators=function(){var localctx=new SetOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,46,VtlParser.RULE_setOperators);var _la=0;// Token type\ntry{this.state=776;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.UNION:localctx=new UnionAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=740;this.match(VtlParser.UNION);this.state=741;this.match(VtlParser.LPAREN);this.state=742;localctx.left=this.expr(0);this.state=745;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=743;this.match(VtlParser.COMMA);this.state=744;this.expr(0);this.state=747;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===VtlParser.COMMA);this.state=749;this.match(VtlParser.RPAREN);break;case VtlParser.INTERSECT:localctx=new IntersectAtomContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=751;this.match(VtlParser.INTERSECT);this.state=752;this.match(VtlParser.LPAREN);this.state=753;localctx.left=this.expr(0);this.state=756;this._errHandler.sync(this);_la=this._input.LA(1);do{this.state=754;this.match(VtlParser.COMMA);this.state=755;this.expr(0);this.state=758;this._errHandler.sync(this);_la=this._input.LA(1);}while(_la===VtlParser.COMMA);this.state=760;this.match(VtlParser.RPAREN);break;case VtlParser.SETDIFF:localctx=new SetDiffAtomContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=762;this.match(VtlParser.SETDIFF);this.state=763;this.match(VtlParser.LPAREN);this.state=764;localctx.left=this.expr(0);this.state=765;this.match(VtlParser.COMMA);this.state=766;localctx.right=this.expr(0);this.state=767;this.match(VtlParser.RPAREN);break;case VtlParser.SYMDIFF:localctx=new SymDiffAtomContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=769;this.match(VtlParser.SYMDIFF);this.state=770;this.match(VtlParser.LPAREN);this.state=771;localctx.left=this.expr(0);this.state=772;this.match(VtlParser.COMMA);this.state=773;localctx.right=this.expr(0);this.state=774;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HierarchyOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_hierarchyOperators;this.op=null;// ExprContext\nthis.hrName=null;// Token\nthis.ruleComponent=null;// ComponentIDContext\nreturn this;}HierarchyOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HierarchyOperatorsContext.prototype.constructor=HierarchyOperatorsContext;HierarchyOperatorsContext.prototype.HIERARCHY=function(){return this.getToken(VtlParser.HIERARCHY,0);};HierarchyOperatorsContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};HierarchyOperatorsContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};HierarchyOperatorsContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};HierarchyOperatorsContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};HierarchyOperatorsContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};HierarchyOperatorsContext.prototype.conditionClause=function(){return this.getTypedRuleContext(ConditionClauseContext,0);};HierarchyOperatorsContext.prototype.RULE=function(){return this.getToken(VtlParser.RULE,0);};HierarchyOperatorsContext.prototype.validationMode=function(){return this.getTypedRuleContext(ValidationModeContext,0);};HierarchyOperatorsContext.prototype.inputModeHierarchy=function(){return this.getTypedRuleContext(InputModeHierarchyContext,0);};HierarchyOperatorsContext.prototype.outputModeHierarchy=function(){return this.getTypedRuleContext(OutputModeHierarchyContext,0);};HierarchyOperatorsContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};HierarchyOperatorsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHierarchyOperators(this);}};HierarchyOperatorsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHierarchyOperators(this);}};HierarchyOperatorsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHierarchyOperators(this);}else{return visitor.visitChildren(this);}};VtlParser.HierarchyOperatorsContext=HierarchyOperatorsContext;VtlParser.prototype.hierarchyOperators=function(){var localctx=new HierarchyOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,48,VtlParser.RULE_hierarchyOperators);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=778;this.match(VtlParser.HIERARCHY);this.state=779;this.match(VtlParser.LPAREN);this.state=780;localctx.op=this.expr(0);this.state=781;this.match(VtlParser.COMMA);this.state=782;localctx.hrName=this.match(VtlParser.IDENTIFIER);this.state=784;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.CONDITION){this.state=783;this.conditionClause();}this.state=788;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,53,this._ctx);if(la_===1){this.state=786;this.match(VtlParser.RULE);this.state=787;localctx.ruleComponent=this.componentID();}this.state=791;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-211&~0x1f)==0&&(1<<_la-211&(1<<VtlParser.NON_NULL-211|1<<VtlParser.NON_ZERO-211|1<<VtlParser.PARTIAL_NULL-211|1<<VtlParser.PARTIAL_ZERO-211|1<<VtlParser.ALWAYS_NULL-211|1<<VtlParser.ALWAYS_ZERO-211))!==0){this.state=790;this.validationMode();}this.state=794;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATASET||_la===VtlParser.RULE||_la===VtlParser.RULE_PRIORITY){this.state=793;this.inputModeHierarchy();}this.state=797;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ALL||_la===VtlParser.COMPUTED){this.state=796;this.outputModeHierarchy();}this.state=799;this.match(VtlParser.RPAREN);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValidationOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_validationOperators;return this;}ValidationOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValidationOperatorsContext.prototype.constructor=ValidationOperatorsContext;ValidationOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function ValidateHRrulesetContext(parser,ctx){ValidationOperatorsContext.call(this,parser);this.op=null;// ExprContext;\nthis.hrName=null;// Token;\nValidationOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ValidateHRrulesetContext.prototype=Object.create(ValidationOperatorsContext.prototype);ValidateHRrulesetContext.prototype.constructor=ValidateHRrulesetContext;VtlParser.ValidateHRrulesetContext=ValidateHRrulesetContext;ValidateHRrulesetContext.prototype.CHECK_HIERARCHY=function(){return this.getToken(VtlParser.CHECK_HIERARCHY,0);};ValidateHRrulesetContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ValidateHRrulesetContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};ValidateHRrulesetContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ValidateHRrulesetContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ValidateHRrulesetContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};ValidateHRrulesetContext.prototype.conditionClause=function(){return this.getTypedRuleContext(ConditionClauseContext,0);};ValidateHRrulesetContext.prototype.RULE=function(){return this.getToken(VtlParser.RULE,0);};ValidateHRrulesetContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};ValidateHRrulesetContext.prototype.validationMode=function(){return this.getTypedRuleContext(ValidationModeContext,0);};ValidateHRrulesetContext.prototype.inputMode=function(){return this.getTypedRuleContext(InputModeContext,0);};ValidateHRrulesetContext.prototype.validationOutput=function(){return this.getTypedRuleContext(ValidationOutputContext,0);};ValidateHRrulesetContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidateHRruleset(this);}};ValidateHRrulesetContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidateHRruleset(this);}};ValidateHRrulesetContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidateHRruleset(this);}else{return visitor.visitChildren(this);}};function ValidateDPrulesetContext(parser,ctx){ValidationOperatorsContext.call(this,parser);this.op=null;// ExprContext;\nthis.dpName=null;// Token;\nValidationOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ValidateDPrulesetContext.prototype=Object.create(ValidationOperatorsContext.prototype);ValidateDPrulesetContext.prototype.constructor=ValidateDPrulesetContext;VtlParser.ValidateDPrulesetContext=ValidateDPrulesetContext;ValidateDPrulesetContext.prototype.CHECK_DATAPOINT=function(){return this.getToken(VtlParser.CHECK_DATAPOINT,0);};ValidateDPrulesetContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ValidateDPrulesetContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ValidateDPrulesetContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ValidateDPrulesetContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ValidateDPrulesetContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};ValidateDPrulesetContext.prototype.COMPONENTS=function(){return this.getToken(VtlParser.COMPONENTS,0);};ValidateDPrulesetContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};ValidateDPrulesetContext.prototype.validationOutput=function(){return this.getTypedRuleContext(ValidationOutputContext,0);};ValidateDPrulesetContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidateDPruleset(this);}};ValidateDPrulesetContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidateDPruleset(this);}};ValidateDPrulesetContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidateDPruleset(this);}else{return visitor.visitChildren(this);}};function ValidationSimpleContext(parser,ctx){ValidationOperatorsContext.call(this,parser);this.op=null;// ExprContext;\nthis.codeErr=null;// ErCodeContext;\nthis.levelCode=null;// ErLevelContext;\nthis.output=null;// Token;\nValidationOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}ValidationSimpleContext.prototype=Object.create(ValidationOperatorsContext.prototype);ValidationSimpleContext.prototype.constructor=ValidationSimpleContext;VtlParser.ValidationSimpleContext=ValidationSimpleContext;ValidationSimpleContext.prototype.CHECK=function(){return this.getToken(VtlParser.CHECK,0);};ValidationSimpleContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};ValidationSimpleContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};ValidationSimpleContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ValidationSimpleContext.prototype.imbalanceExpr=function(){return this.getTypedRuleContext(ImbalanceExprContext,0);};ValidationSimpleContext.prototype.erCode=function(){return this.getTypedRuleContext(ErCodeContext,0);};ValidationSimpleContext.prototype.erLevel=function(){return this.getTypedRuleContext(ErLevelContext,0);};ValidationSimpleContext.prototype.INVALID=function(){return this.getToken(VtlParser.INVALID,0);};ValidationSimpleContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};ValidationSimpleContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidationSimple(this);}};ValidationSimpleContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidationSimple(this);}};ValidationSimpleContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidationSimple(this);}else{return visitor.visitChildren(this);}};VtlParser.ValidationOperatorsContext=ValidationOperatorsContext;VtlParser.prototype.validationOperators=function(){var localctx=new ValidationOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,50,VtlParser.RULE_validationOperators);var _la=0;// Token type\ntry{this.state=862;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.CHECK_DATAPOINT:localctx=new ValidateDPrulesetContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=801;this.match(VtlParser.CHECK_DATAPOINT);this.state=802;this.match(VtlParser.LPAREN);this.state=803;localctx.op=this.expr(0);this.state=804;this.match(VtlParser.COMMA);this.state=805;localctx.dpName=this.match(VtlParser.IDENTIFIER);this.state=815;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMPONENTS){this.state=806;this.match(VtlParser.COMPONENTS);this.state=807;this.componentID();this.state=812;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=808;this.match(VtlParser.COMMA);this.state=809;this.componentID();this.state=814;this._errHandler.sync(this);_la=this._input.LA(1);}}this.state=818;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ALL||_la===VtlParser.INVALID||_la===VtlParser.ALL_MEASURES){this.state=817;this.validationOutput();}this.state=820;this.match(VtlParser.RPAREN);break;case VtlParser.CHECK_HIERARCHY:localctx=new ValidateHRrulesetContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=822;this.match(VtlParser.CHECK_HIERARCHY);this.state=823;this.match(VtlParser.LPAREN);this.state=824;localctx.op=this.expr(0);this.state=825;this.match(VtlParser.COMMA);this.state=826;localctx.hrName=this.match(VtlParser.IDENTIFIER);this.state=828;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.CONDITION){this.state=827;this.conditionClause();}this.state=832;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.RULE){this.state=830;this.match(VtlParser.RULE);this.state=831;this.componentID();}this.state=835;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-211&~0x1f)==0&&(1<<_la-211&(1<<VtlParser.NON_NULL-211|1<<VtlParser.NON_ZERO-211|1<<VtlParser.PARTIAL_NULL-211|1<<VtlParser.PARTIAL_ZERO-211|1<<VtlParser.ALWAYS_NULL-211|1<<VtlParser.ALWAYS_ZERO-211))!==0){this.state=834;this.validationMode();}this.state=838;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATASET||_la===VtlParser.DATASET_PRIORITY){this.state=837;this.inputMode();}this.state=841;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ALL||_la===VtlParser.INVALID||_la===VtlParser.ALL_MEASURES){this.state=840;this.validationOutput();}this.state=843;this.match(VtlParser.RPAREN);break;case VtlParser.CHECK:localctx=new ValidationSimpleContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=845;this.match(VtlParser.CHECK);this.state=846;this.match(VtlParser.LPAREN);this.state=847;localctx.op=this.expr(0);this.state=849;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORCODE){this.state=848;localctx.codeErr=this.erCode();}this.state=852;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORLEVEL){this.state=851;localctx.levelCode=this.erLevel();}this.state=855;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.IMBALANCE){this.state=854;this.imbalanceExpr();}this.state=858;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ALL||_la===VtlParser.INVALID){this.state=857;localctx.output=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.ALL||_la===VtlParser.INVALID)){localctx.output=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=860;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ConditionalOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_conditionalOperators;return this;}ConditionalOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ConditionalOperatorsContext.prototype.constructor=ConditionalOperatorsContext;ConditionalOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function NvlAtomContext(parser,ctx){ConditionalOperatorsContext.call(this,parser);this.left=null;// ExprContext;\nthis.right=null;// ExprContext;\nConditionalOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}NvlAtomContext.prototype=Object.create(ConditionalOperatorsContext.prototype);NvlAtomContext.prototype.constructor=NvlAtomContext;VtlParser.NvlAtomContext=NvlAtomContext;NvlAtomContext.prototype.NVL=function(){return this.getToken(VtlParser.NVL,0);};NvlAtomContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};NvlAtomContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};NvlAtomContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};NvlAtomContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};NvlAtomContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterNvlAtom(this);}};NvlAtomContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitNvlAtom(this);}};NvlAtomContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitNvlAtom(this);}else{return visitor.visitChildren(this);}};VtlParser.ConditionalOperatorsContext=ConditionalOperatorsContext;VtlParser.prototype.conditionalOperators=function(){var localctx=new ConditionalOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,52,VtlParser.RULE_conditionalOperators);try{localctx=new NvlAtomContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=864;this.match(VtlParser.NVL);this.state=865;this.match(VtlParser.LPAREN);this.state=866;localctx.left=this.expr(0);this.state=867;this.match(VtlParser.COMMA);this.state=868;localctx.right=this.expr(0);this.state=869;this.match(VtlParser.RPAREN);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AggrOperatorsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_aggrOperators;return this;}AggrOperatorsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AggrOperatorsContext.prototype.constructor=AggrOperatorsContext;AggrOperatorsContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function AvgAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}AvgAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);AvgAggrCompContext.prototype.constructor=AvgAggrCompContext;VtlParser.AvgAggrCompContext=AvgAggrCompContext;AvgAggrCompContext.prototype.AVG=function(){return this.getToken(VtlParser.AVG,0);};AvgAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};AvgAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};AvgAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};AvgAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAvgAggrComp(this);}};AvgAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAvgAggrComp(this);}};AvgAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAvgAggrComp(this);}else{return visitor.visitChildren(this);}};function SumAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}SumAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);SumAggrCompContext.prototype.constructor=SumAggrCompContext;VtlParser.SumAggrCompContext=SumAggrCompContext;SumAggrCompContext.prototype.SUM=function(){return this.getToken(VtlParser.SUM,0);};SumAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SumAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};SumAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SumAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSumAggrComp(this);}};SumAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSumAggrComp(this);}};SumAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSumAggrComp(this);}else{return visitor.visitChildren(this);}};function StddevPopAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}StddevPopAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);StddevPopAggrCompContext.prototype.constructor=StddevPopAggrCompContext;VtlParser.StddevPopAggrCompContext=StddevPopAggrCompContext;StddevPopAggrCompContext.prototype.STDDEV_POP=function(){return this.getToken(VtlParser.STDDEV_POP,0);};StddevPopAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};StddevPopAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevPopAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};StddevPopAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevPopAggrComp(this);}};StddevPopAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevPopAggrComp(this);}};StddevPopAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevPopAggrComp(this);}else{return visitor.visitChildren(this);}};function StddevSampAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}StddevSampAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);StddevSampAggrCompContext.prototype.constructor=StddevSampAggrCompContext;VtlParser.StddevSampAggrCompContext=StddevSampAggrCompContext;StddevSampAggrCompContext.prototype.STDDEV_SAMP=function(){return this.getToken(VtlParser.STDDEV_SAMP,0);};StddevSampAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};StddevSampAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevSampAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};StddevSampAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevSampAggrComp(this);}};StddevSampAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevSampAggrComp(this);}};StddevSampAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevSampAggrComp(this);}else{return visitor.visitChildren(this);}};function MaxAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}MaxAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);MaxAggrCompContext.prototype.constructor=MaxAggrCompContext;VtlParser.MaxAggrCompContext=MaxAggrCompContext;MaxAggrCompContext.prototype.MAX=function(){return this.getToken(VtlParser.MAX,0);};MaxAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MaxAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MaxAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MaxAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMaxAggrComp(this);}};MaxAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMaxAggrComp(this);}};MaxAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMaxAggrComp(this);}else{return visitor.visitChildren(this);}};function VarSampAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}VarSampAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);VarSampAggrCompContext.prototype.constructor=VarSampAggrCompContext;VtlParser.VarSampAggrCompContext=VarSampAggrCompContext;VarSampAggrCompContext.prototype.VAR_SAMP=function(){return this.getToken(VtlParser.VAR_SAMP,0);};VarSampAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};VarSampAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarSampAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};VarSampAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarSampAggrComp(this);}};VarSampAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarSampAggrComp(this);}};VarSampAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarSampAggrComp(this);}else{return visitor.visitChildren(this);}};function MinAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}MinAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);MinAggrCompContext.prototype.constructor=MinAggrCompContext;VtlParser.MinAggrCompContext=MinAggrCompContext;MinAggrCompContext.prototype.MIN=function(){return this.getToken(VtlParser.MIN,0);};MinAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MinAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MinAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MinAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMinAggrComp(this);}};MinAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMinAggrComp(this);}};MinAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMinAggrComp(this);}else{return visitor.visitChildren(this);}};function VarPopAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}VarPopAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);VarPopAggrCompContext.prototype.constructor=VarPopAggrCompContext;VtlParser.VarPopAggrCompContext=VarPopAggrCompContext;VarPopAggrCompContext.prototype.VAR_POP=function(){return this.getToken(VtlParser.VAR_POP,0);};VarPopAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};VarPopAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarPopAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};VarPopAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarPopAggrComp(this);}};VarPopAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarPopAggrComp(this);}};VarPopAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarPopAggrComp(this);}else{return visitor.visitChildren(this);}};function CountAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}CountAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);CountAggrCompContext.prototype.constructor=CountAggrCompContext;VtlParser.CountAggrCompContext=CountAggrCompContext;CountAggrCompContext.prototype.COUNT=function(){return this.getToken(VtlParser.COUNT,0);};CountAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CountAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CountAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CountAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCountAggrComp(this);}};CountAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCountAggrComp(this);}};CountAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCountAggrComp(this);}else{return visitor.visitChildren(this);}};function MedianAggrCompContext(parser,ctx){AggrOperatorsContext.call(this,parser);AggrOperatorsContext.prototype.copyFrom.call(this,ctx);return this;}MedianAggrCompContext.prototype=Object.create(AggrOperatorsContext.prototype);MedianAggrCompContext.prototype.constructor=MedianAggrCompContext;VtlParser.MedianAggrCompContext=MedianAggrCompContext;MedianAggrCompContext.prototype.MEDIAN=function(){return this.getToken(VtlParser.MEDIAN,0);};MedianAggrCompContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MedianAggrCompContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MedianAggrCompContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MedianAggrCompContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMedianAggrComp(this);}};MedianAggrCompContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMedianAggrComp(this);}};MedianAggrCompContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMedianAggrComp(this);}else{return visitor.visitChildren(this);}};VtlParser.AggrOperatorsContext=AggrOperatorsContext;VtlParser.prototype.aggrOperators=function(){var localctx=new AggrOperatorsContext(this,this._ctx,this.state);this.enterRule(localctx,54,VtlParser.RULE_aggrOperators);var _la=0;// Token type\ntry{this.state=922;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.SUM:localctx=new SumAggrCompContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=871;this.match(VtlParser.SUM);this.state=872;this.match(VtlParser.LPAREN);this.state=873;this.expr(0);this.state=874;this.match(VtlParser.RPAREN);break;case VtlParser.AVG:localctx=new AvgAggrCompContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=876;this.match(VtlParser.AVG);this.state=877;this.match(VtlParser.LPAREN);this.state=878;this.expr(0);this.state=879;this.match(VtlParser.RPAREN);break;case VtlParser.COUNT:localctx=new CountAggrCompContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=881;this.match(VtlParser.COUNT);this.state=882;this.match(VtlParser.LPAREN);this.state=884;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.LPAREN|1<<VtlParser.PLUS|1<<VtlParser.MINUS|1<<VtlParser.EVAL|1<<VtlParser.IF|1<<VtlParser.CURRENT_DATE))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<VtlParser.NOT-39|1<<VtlParser.BETWEEN-39|1<<VtlParser.ISNULL-39|1<<VtlParser.UNION-39|1<<VtlParser.SYMDIFF-39|1<<VtlParser.INTERSECT-39|1<<VtlParser.CHECK-39|1<<VtlParser.EXISTS_IN-39|1<<VtlParser.RANK-39|1<<VtlParser.MIN-39|1<<VtlParser.MAX-39))!==0||(_la-73&~0x1f)==0&&(1<<_la-73&(1<<VtlParser.ABS-73|1<<VtlParser.LN-73|1<<VtlParser.LOG-73|1<<VtlParser.TRUNC-73|1<<VtlParser.ROUND-73|1<<VtlParser.POWER-73|1<<VtlParser.MOD-73|1<<VtlParser.LEN-73|1<<VtlParser.TRIM-73|1<<VtlParser.UCASE-73|1<<VtlParser.LCASE-73|1<<VtlParser.SUBSTR-73|1<<VtlParser.SUM-73|1<<VtlParser.AVG-73|1<<VtlParser.MEDIAN-73|1<<VtlParser.COUNT-73|1<<VtlParser.EXP-73|1<<VtlParser.CHARSET_MATCH-73|1<<VtlParser.NVL-73|1<<VtlParser.HIERARCHY-73))!==0||(_la-119&~0x1f)==0&&(1<<_la-119&(1<<VtlParser.LTRIM-119|1<<VtlParser.RTRIM-119|1<<VtlParser.INSTR-119|1<<VtlParser.REPLACE-119|1<<VtlParser.CEIL-119|1<<VtlParser.FLOOR-119|1<<VtlParser.SQRT-119|1<<VtlParser.SETDIFF-119|1<<VtlParser.STDDEV_POP-119|1<<VtlParser.STDDEV_SAMP-119|1<<VtlParser.VAR_POP-119|1<<VtlParser.VAR_SAMP-119|1<<VtlParser.FIRST_VALUE-119|1<<VtlParser.LAST_VALUE-119|1<<VtlParser.LAG-119|1<<VtlParser.LEAD-119|1<<VtlParser.RATIO_TO_REPORT-119|1<<VtlParser.FILL_TIME_SERIES-119|1<<VtlParser.FLOW_TO_STOCK-119))!==0||(_la-151&~0x1f)==0&&(1<<_la-151&(1<<VtlParser.STOCK_TO_FLOW-151|1<<VtlParser.TIMESHIFT-151|1<<VtlParser.INNER_JOIN-151|1<<VtlParser.LEFT_JOIN-151|1<<VtlParser.CROSS_JOIN-151))!==0||(_la-183&~0x1f)==0&&(1<<_la-183&(1<<VtlParser.FULL_JOIN-183|1<<VtlParser.PERIOD_INDICATOR-183|1<<VtlParser.TIME_AGG-183|1<<VtlParser.CAST-183|1<<VtlParser.CHECK_DATAPOINT-183|1<<VtlParser.CHECK_HIERARCHY-183))!==0||(_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227|1<<VtlParser.IDENTIFIER-227))!==0){this.state=883;this.expr(0);}this.state=886;this.match(VtlParser.RPAREN);break;case VtlParser.MEDIAN:localctx=new MedianAggrCompContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=887;this.match(VtlParser.MEDIAN);this.state=888;this.match(VtlParser.LPAREN);this.state=889;this.expr(0);this.state=890;this.match(VtlParser.RPAREN);break;case VtlParser.MIN:localctx=new MinAggrCompContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=892;this.match(VtlParser.MIN);this.state=893;this.match(VtlParser.LPAREN);this.state=894;this.expr(0);this.state=895;this.match(VtlParser.RPAREN);break;case VtlParser.MAX:localctx=new MaxAggrCompContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=897;this.match(VtlParser.MAX);this.state=898;this.match(VtlParser.LPAREN);this.state=899;this.expr(0);this.state=900;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_POP:localctx=new StddevPopAggrCompContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=902;this.match(VtlParser.STDDEV_POP);this.state=903;this.match(VtlParser.LPAREN);this.state=904;this.expr(0);this.state=905;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_SAMP:localctx=new StddevSampAggrCompContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=907;this.match(VtlParser.STDDEV_SAMP);this.state=908;this.match(VtlParser.LPAREN);this.state=909;this.expr(0);this.state=910;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_POP:localctx=new VarPopAggrCompContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=912;this.match(VtlParser.VAR_POP);this.state=913;this.match(VtlParser.LPAREN);this.state=914;this.expr(0);this.state=915;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_SAMP:localctx=new VarSampAggrCompContext(this,localctx);this.enterOuterAlt(localctx,10);this.state=917;this.match(VtlParser.VAR_SAMP);this.state=918;this.match(VtlParser.LPAREN);this.state=919;this.expr(0);this.state=920;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AggrOperatorsGroupingContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_aggrOperatorsGrouping;return this;}AggrOperatorsGroupingContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AggrOperatorsGroupingContext.prototype.constructor=AggrOperatorsGroupingContext;AggrOperatorsGroupingContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function AvgAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}AvgAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);AvgAggrContext.prototype.constructor=AvgAggrContext;VtlParser.AvgAggrContext=AvgAggrContext;AvgAggrContext.prototype.AVG=function(){return this.getToken(VtlParser.AVG,0);};AvgAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};AvgAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};AvgAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};AvgAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};AvgAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};AvgAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAvgAggr(this);}};AvgAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAvgAggr(this);}};AvgAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAvgAggr(this);}else{return visitor.visitChildren(this);}};function StddevPopAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}StddevPopAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);StddevPopAggrContext.prototype.constructor=StddevPopAggrContext;VtlParser.StddevPopAggrContext=StddevPopAggrContext;StddevPopAggrContext.prototype.STDDEV_POP=function(){return this.getToken(VtlParser.STDDEV_POP,0);};StddevPopAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};StddevPopAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevPopAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};StddevPopAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};StddevPopAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};StddevPopAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevPopAggr(this);}};StddevPopAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevPopAggr(this);}};StddevPopAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevPopAggr(this);}else{return visitor.visitChildren(this);}};function MinAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}MinAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);MinAggrContext.prototype.constructor=MinAggrContext;VtlParser.MinAggrContext=MinAggrContext;MinAggrContext.prototype.MIN=function(){return this.getToken(VtlParser.MIN,0);};MinAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MinAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MinAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MinAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};MinAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};MinAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMinAggr(this);}};MinAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMinAggr(this);}};MinAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMinAggr(this);}else{return visitor.visitChildren(this);}};function MaxAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}MaxAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);MaxAggrContext.prototype.constructor=MaxAggrContext;VtlParser.MaxAggrContext=MaxAggrContext;MaxAggrContext.prototype.MAX=function(){return this.getToken(VtlParser.MAX,0);};MaxAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MaxAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MaxAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MaxAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};MaxAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};MaxAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMaxAggr(this);}};MaxAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMaxAggr(this);}};MaxAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMaxAggr(this);}else{return visitor.visitChildren(this);}};function StddevSampAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}StddevSampAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);StddevSampAggrContext.prototype.constructor=StddevSampAggrContext;VtlParser.StddevSampAggrContext=StddevSampAggrContext;StddevSampAggrContext.prototype.STDDEV_SAMP=function(){return this.getToken(VtlParser.STDDEV_SAMP,0);};StddevSampAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};StddevSampAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevSampAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};StddevSampAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};StddevSampAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};StddevSampAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevSampAggr(this);}};StddevSampAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevSampAggr(this);}};StddevSampAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevSampAggr(this);}else{return visitor.visitChildren(this);}};function VarSampAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}VarSampAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);VarSampAggrContext.prototype.constructor=VarSampAggrContext;VtlParser.VarSampAggrContext=VarSampAggrContext;VarSampAggrContext.prototype.VAR_SAMP=function(){return this.getToken(VtlParser.VAR_SAMP,0);};VarSampAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};VarSampAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarSampAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};VarSampAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};VarSampAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};VarSampAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarSampAggr(this);}};VarSampAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarSampAggr(this);}};VarSampAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarSampAggr(this);}else{return visitor.visitChildren(this);}};function MedianAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}MedianAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);MedianAggrContext.prototype.constructor=MedianAggrContext;VtlParser.MedianAggrContext=MedianAggrContext;MedianAggrContext.prototype.MEDIAN=function(){return this.getToken(VtlParser.MEDIAN,0);};MedianAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};MedianAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MedianAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};MedianAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};MedianAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};MedianAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMedianAggr(this);}};MedianAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMedianAggr(this);}};MedianAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMedianAggr(this);}else{return visitor.visitChildren(this);}};function CountAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}CountAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);CountAggrContext.prototype.constructor=CountAggrContext;VtlParser.CountAggrContext=CountAggrContext;CountAggrContext.prototype.COUNT=function(){return this.getToken(VtlParser.COUNT,0);};CountAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};CountAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};CountAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CountAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};CountAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};CountAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCountAggr(this);}};CountAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCountAggr(this);}};CountAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCountAggr(this);}else{return visitor.visitChildren(this);}};function SumAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}SumAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);SumAggrContext.prototype.constructor=SumAggrContext;VtlParser.SumAggrContext=SumAggrContext;SumAggrContext.prototype.SUM=function(){return this.getToken(VtlParser.SUM,0);};SumAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};SumAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};SumAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};SumAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};SumAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};SumAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSumAggr(this);}};SumAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSumAggr(this);}};SumAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSumAggr(this);}else{return visitor.visitChildren(this);}};function VarPopAggrContext(parser,ctx){AggrOperatorsGroupingContext.call(this,parser);AggrOperatorsGroupingContext.prototype.copyFrom.call(this,ctx);return this;}VarPopAggrContext.prototype=Object.create(AggrOperatorsGroupingContext.prototype);VarPopAggrContext.prototype.constructor=VarPopAggrContext;VtlParser.VarPopAggrContext=VarPopAggrContext;VarPopAggrContext.prototype.VAR_POP=function(){return this.getToken(VtlParser.VAR_POP,0);};VarPopAggrContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};VarPopAggrContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarPopAggrContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};VarPopAggrContext.prototype.groupingClause=function(){return this.getTypedRuleContext(GroupingClauseContext,0);};VarPopAggrContext.prototype.havingClause=function(){return this.getTypedRuleContext(HavingClauseContext,0);};VarPopAggrContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarPopAggr(this);}};VarPopAggrContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarPopAggr(this);}};VarPopAggrContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarPopAggr(this);}else{return visitor.visitChildren(this);}};VtlParser.AggrOperatorsGroupingContext=AggrOperatorsGroupingContext;VtlParser.prototype.aggrOperatorsGrouping=function(){var localctx=new AggrOperatorsGroupingContext(this,this._ctx,this.state);this.enterRule(localctx,56,VtlParser.RULE_aggrOperatorsGrouping);var _la=0;// Token type\ntry{this.state=1035;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.SUM:localctx=new SumAggrContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=924;this.match(VtlParser.SUM);this.state=925;this.match(VtlParser.LPAREN);this.state=926;this.expr(0);this.state=931;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=927;this.groupingClause();this.state=929;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=928;this.havingClause();}}this.state=933;this.match(VtlParser.RPAREN);break;case VtlParser.AVG:localctx=new AvgAggrContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=935;this.match(VtlParser.AVG);this.state=936;this.match(VtlParser.LPAREN);this.state=937;this.expr(0);this.state=942;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=938;this.groupingClause();this.state=940;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=939;this.havingClause();}}this.state=944;this.match(VtlParser.RPAREN);break;case VtlParser.COUNT:localctx=new CountAggrContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=946;this.match(VtlParser.COUNT);this.state=947;this.match(VtlParser.LPAREN);this.state=955;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.LPAREN|1<<VtlParser.PLUS|1<<VtlParser.MINUS|1<<VtlParser.EVAL|1<<VtlParser.IF|1<<VtlParser.CURRENT_DATE))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<VtlParser.NOT-39|1<<VtlParser.BETWEEN-39|1<<VtlParser.ISNULL-39|1<<VtlParser.UNION-39|1<<VtlParser.SYMDIFF-39|1<<VtlParser.INTERSECT-39|1<<VtlParser.CHECK-39|1<<VtlParser.EXISTS_IN-39|1<<VtlParser.RANK-39|1<<VtlParser.MIN-39|1<<VtlParser.MAX-39))!==0||(_la-73&~0x1f)==0&&(1<<_la-73&(1<<VtlParser.ABS-73|1<<VtlParser.LN-73|1<<VtlParser.LOG-73|1<<VtlParser.TRUNC-73|1<<VtlParser.ROUND-73|1<<VtlParser.POWER-73|1<<VtlParser.MOD-73|1<<VtlParser.LEN-73|1<<VtlParser.TRIM-73|1<<VtlParser.UCASE-73|1<<VtlParser.LCASE-73|1<<VtlParser.SUBSTR-73|1<<VtlParser.SUM-73|1<<VtlParser.AVG-73|1<<VtlParser.MEDIAN-73|1<<VtlParser.COUNT-73|1<<VtlParser.EXP-73|1<<VtlParser.CHARSET_MATCH-73|1<<VtlParser.NVL-73|1<<VtlParser.HIERARCHY-73))!==0||(_la-119&~0x1f)==0&&(1<<_la-119&(1<<VtlParser.LTRIM-119|1<<VtlParser.RTRIM-119|1<<VtlParser.INSTR-119|1<<VtlParser.REPLACE-119|1<<VtlParser.CEIL-119|1<<VtlParser.FLOOR-119|1<<VtlParser.SQRT-119|1<<VtlParser.SETDIFF-119|1<<VtlParser.STDDEV_POP-119|1<<VtlParser.STDDEV_SAMP-119|1<<VtlParser.VAR_POP-119|1<<VtlParser.VAR_SAMP-119|1<<VtlParser.FIRST_VALUE-119|1<<VtlParser.LAST_VALUE-119|1<<VtlParser.LAG-119|1<<VtlParser.LEAD-119|1<<VtlParser.RATIO_TO_REPORT-119|1<<VtlParser.FILL_TIME_SERIES-119|1<<VtlParser.FLOW_TO_STOCK-119))!==0||(_la-151&~0x1f)==0&&(1<<_la-151&(1<<VtlParser.STOCK_TO_FLOW-151|1<<VtlParser.TIMESHIFT-151|1<<VtlParser.INNER_JOIN-151|1<<VtlParser.LEFT_JOIN-151|1<<VtlParser.CROSS_JOIN-151))!==0||(_la-183&~0x1f)==0&&(1<<_la-183&(1<<VtlParser.FULL_JOIN-183|1<<VtlParser.PERIOD_INDICATOR-183|1<<VtlParser.TIME_AGG-183|1<<VtlParser.CAST-183|1<<VtlParser.CHECK_DATAPOINT-183|1<<VtlParser.CHECK_HIERARCHY-183))!==0||(_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227|1<<VtlParser.IDENTIFIER-227))!==0){this.state=948;this.expr(0);this.state=953;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=949;this.groupingClause();this.state=951;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=950;this.havingClause();}}}this.state=957;this.match(VtlParser.RPAREN);break;case VtlParser.MEDIAN:localctx=new MedianAggrContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=958;this.match(VtlParser.MEDIAN);this.state=959;this.match(VtlParser.LPAREN);this.state=960;this.expr(0);this.state=965;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=961;this.groupingClause();this.state=963;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=962;this.havingClause();}}this.state=967;this.match(VtlParser.RPAREN);break;case VtlParser.MIN:localctx=new MinAggrContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=969;this.match(VtlParser.MIN);this.state=970;this.match(VtlParser.LPAREN);this.state=971;this.expr(0);this.state=976;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=972;this.groupingClause();this.state=974;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=973;this.havingClause();}}this.state=978;this.match(VtlParser.RPAREN);break;case VtlParser.MAX:localctx=new MaxAggrContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=980;this.match(VtlParser.MAX);this.state=981;this.match(VtlParser.LPAREN);this.state=982;this.expr(0);this.state=987;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=983;this.groupingClause();this.state=985;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=984;this.havingClause();}}this.state=989;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_POP:localctx=new StddevPopAggrContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=991;this.match(VtlParser.STDDEV_POP);this.state=992;this.match(VtlParser.LPAREN);this.state=993;this.expr(0);this.state=998;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=994;this.groupingClause();this.state=996;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=995;this.havingClause();}}this.state=1000;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_SAMP:localctx=new StddevSampAggrContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=1002;this.match(VtlParser.STDDEV_SAMP);this.state=1003;this.match(VtlParser.LPAREN);this.state=1004;this.expr(0);this.state=1009;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=1005;this.groupingClause();this.state=1007;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=1006;this.havingClause();}}this.state=1011;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_POP:localctx=new VarPopAggrContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=1013;this.match(VtlParser.VAR_POP);this.state=1014;this.match(VtlParser.LPAREN);this.state=1015;this.expr(0);this.state=1020;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=1016;this.groupingClause();this.state=1018;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=1017;this.havingClause();}}this.state=1022;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_SAMP:localctx=new VarSampAggrContext(this,localctx);this.enterOuterAlt(localctx,10);this.state=1024;this.match(VtlParser.VAR_SAMP);this.state=1025;this.match(VtlParser.LPAREN);this.state=1026;this.expr(0);this.state=1031;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GROUP){this.state=1027;this.groupingClause();this.state=1029;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.HAVING){this.state=1028;this.havingClause();}}this.state=1033;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AnFunctionContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_anFunction;return this;}AnFunctionContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AnFunctionContext.prototype.constructor=AnFunctionContext;AnFunctionContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function LagAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.offet=null;// Token;\nthis.defaultValue=null;// ConstantContext;\nthis.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}LagAnContext.prototype=Object.create(AnFunctionContext.prototype);LagAnContext.prototype.constructor=LagAnContext;VtlParser.LagAnContext=LagAnContext;LagAnContext.prototype.LAG=function(){return this.getToken(VtlParser.LAG,0);};LagAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};LagAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LagAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};LagAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};LagAnContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};LagAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};LagAnContext.prototype.INTEGER_CONSTANT=function(){return this.getToken(VtlParser.INTEGER_CONSTANT,0);};LagAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};LagAnContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};LagAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLagAn(this);}};LagAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLagAn(this);}};LagAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLagAn(this);}else{return visitor.visitChildren(this);}};function LeadAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.offet=null;// Token;\nthis.defaultValue=null;// ConstantContext;\nthis.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}LeadAnContext.prototype=Object.create(AnFunctionContext.prototype);LeadAnContext.prototype.constructor=LeadAnContext;VtlParser.LeadAnContext=LeadAnContext;LeadAnContext.prototype.LEAD=function(){return this.getToken(VtlParser.LEAD,0);};LeadAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};LeadAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LeadAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};LeadAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};LeadAnContext.prototype.COMMA=function(){return this.getToken(VtlParser.COMMA,0);};LeadAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};LeadAnContext.prototype.INTEGER_CONSTANT=function(){return this.getToken(VtlParser.INTEGER_CONSTANT,0);};LeadAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};LeadAnContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};LeadAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLeadAn(this);}};LeadAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLeadAn(this);}};LeadAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLeadAn(this);}else{return visitor.visitChildren(this);}};function RatioToReportAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}RatioToReportAnContext.prototype=Object.create(AnFunctionContext.prototype);RatioToReportAnContext.prototype.constructor=RatioToReportAnContext;VtlParser.RatioToReportAnContext=RatioToReportAnContext;RatioToReportAnContext.prototype.RATIO_TO_REPORT=function(){return this.getToken(VtlParser.RATIO_TO_REPORT,0);};RatioToReportAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};RatioToReportAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};RatioToReportAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};RatioToReportAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};RatioToReportAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};RatioToReportAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRatioToReportAn(this);}};RatioToReportAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRatioToReportAn(this);}};RatioToReportAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRatioToReportAn(this);}else{return visitor.visitChildren(this);}};function VarSampAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}VarSampAnContext.prototype=Object.create(AnFunctionContext.prototype);VarSampAnContext.prototype.constructor=VarSampAnContext;VtlParser.VarSampAnContext=VarSampAnContext;VarSampAnContext.prototype.VAR_SAMP=function(){return this.getToken(VtlParser.VAR_SAMP,0);};VarSampAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};VarSampAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarSampAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};VarSampAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};VarSampAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};VarSampAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};VarSampAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};VarSampAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarSampAn(this);}};VarSampAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarSampAn(this);}};VarSampAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarSampAn(this);}else{return visitor.visitChildren(this);}};function CountAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}CountAnContext.prototype=Object.create(AnFunctionContext.prototype);CountAnContext.prototype.constructor=CountAnContext;VtlParser.CountAnContext=CountAnContext;CountAnContext.prototype.COUNT=function(){return this.getToken(VtlParser.COUNT,0);};CountAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};CountAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};CountAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};CountAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CountAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};CountAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};CountAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};CountAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCountAn(this);}};CountAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCountAn(this);}};CountAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCountAn(this);}else{return visitor.visitChildren(this);}};function RankAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}RankAnContext.prototype=Object.create(AnFunctionContext.prototype);RankAnContext.prototype.constructor=RankAnContext;VtlParser.RankAnContext=RankAnContext;RankAnContext.prototype.RANK=function(){return this.getToken(VtlParser.RANK,0);};RankAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};RankAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};RankAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};RankAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};RankAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};RankAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRankAn(this);}};RankAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRankAn(this);}};RankAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRankAn(this);}else{return visitor.visitChildren(this);}};function StddevSampAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}StddevSampAnContext.prototype=Object.create(AnFunctionContext.prototype);StddevSampAnContext.prototype.constructor=StddevSampAnContext;VtlParser.StddevSampAnContext=StddevSampAnContext;StddevSampAnContext.prototype.STDDEV_SAMP=function(){return this.getToken(VtlParser.STDDEV_SAMP,0);};StddevSampAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};StddevSampAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevSampAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};StddevSampAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};StddevSampAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};StddevSampAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};StddevSampAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};StddevSampAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevSampAn(this);}};StddevSampAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevSampAn(this);}};StddevSampAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevSampAn(this);}else{return visitor.visitChildren(this);}};function StddevPopAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}StddevPopAnContext.prototype=Object.create(AnFunctionContext.prototype);StddevPopAnContext.prototype.constructor=StddevPopAnContext;VtlParser.StddevPopAnContext=StddevPopAnContext;StddevPopAnContext.prototype.STDDEV_POP=function(){return this.getToken(VtlParser.STDDEV_POP,0);};StddevPopAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};StddevPopAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};StddevPopAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};StddevPopAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};StddevPopAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};StddevPopAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};StddevPopAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};StddevPopAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterStddevPopAn(this);}};StddevPopAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitStddevPopAn(this);}};StddevPopAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitStddevPopAn(this);}else{return visitor.visitChildren(this);}};function MinAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}MinAnContext.prototype=Object.create(AnFunctionContext.prototype);MinAnContext.prototype.constructor=MinAnContext;VtlParser.MinAnContext=MinAnContext;MinAnContext.prototype.MIN=function(){return this.getToken(VtlParser.MIN,0);};MinAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};MinAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MinAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};MinAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};MinAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};MinAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};MinAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};MinAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMinAn(this);}};MinAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMinAn(this);}};MinAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMinAn(this);}else{return visitor.visitChildren(this);}};function AvgAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}AvgAnContext.prototype=Object.create(AnFunctionContext.prototype);AvgAnContext.prototype.constructor=AvgAnContext;VtlParser.AvgAnContext=AvgAnContext;AvgAnContext.prototype.AVG=function(){return this.getToken(VtlParser.AVG,0);};AvgAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};AvgAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};AvgAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};AvgAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};AvgAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};AvgAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};AvgAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};AvgAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAvgAn(this);}};AvgAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAvgAn(this);}};AvgAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAvgAn(this);}else{return visitor.visitChildren(this);}};function SumAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}SumAnContext.prototype=Object.create(AnFunctionContext.prototype);SumAnContext.prototype.constructor=SumAnContext;VtlParser.SumAnContext=SumAnContext;SumAnContext.prototype.SUM=function(){return this.getToken(VtlParser.SUM,0);};SumAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};SumAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};SumAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};SumAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};SumAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};SumAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};SumAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};SumAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSumAn(this);}};SumAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSumAn(this);}};SumAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSumAn(this);}else{return visitor.visitChildren(this);}};function LastValueAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}LastValueAnContext.prototype=Object.create(AnFunctionContext.prototype);LastValueAnContext.prototype.constructor=LastValueAnContext;VtlParser.LastValueAnContext=LastValueAnContext;LastValueAnContext.prototype.LAST_VALUE=function(){return this.getToken(VtlParser.LAST_VALUE,0);};LastValueAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};LastValueAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};LastValueAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};LastValueAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};LastValueAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};LastValueAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};LastValueAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};LastValueAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLastValueAn(this);}};LastValueAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLastValueAn(this);}};LastValueAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLastValueAn(this);}else{return visitor.visitChildren(this);}};function MedianAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}MedianAnContext.prototype=Object.create(AnFunctionContext.prototype);MedianAnContext.prototype.constructor=MedianAnContext;VtlParser.MedianAnContext=MedianAnContext;MedianAnContext.prototype.MEDIAN=function(){return this.getToken(VtlParser.MEDIAN,0);};MedianAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};MedianAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MedianAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};MedianAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};MedianAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};MedianAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};MedianAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};MedianAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMedianAn(this);}};MedianAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMedianAn(this);}};MedianAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMedianAn(this);}else{return visitor.visitChildren(this);}};function FirstValueAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}FirstValueAnContext.prototype=Object.create(AnFunctionContext.prototype);FirstValueAnContext.prototype.constructor=FirstValueAnContext;VtlParser.FirstValueAnContext=FirstValueAnContext;FirstValueAnContext.prototype.FIRST_VALUE=function(){return this.getToken(VtlParser.FIRST_VALUE,0);};FirstValueAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};FirstValueAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};FirstValueAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};FirstValueAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};FirstValueAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};FirstValueAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};FirstValueAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};FirstValueAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterFirstValueAn(this);}};FirstValueAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitFirstValueAn(this);}};FirstValueAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitFirstValueAn(this);}else{return visitor.visitChildren(this);}};function MaxAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}MaxAnContext.prototype=Object.create(AnFunctionContext.prototype);MaxAnContext.prototype.constructor=MaxAnContext;VtlParser.MaxAnContext=MaxAnContext;MaxAnContext.prototype.MAX=function(){return this.getToken(VtlParser.MAX,0);};MaxAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};MaxAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};MaxAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};MaxAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};MaxAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};MaxAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};MaxAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};MaxAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMaxAn(this);}};MaxAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMaxAn(this);}};MaxAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMaxAn(this);}else{return visitor.visitChildren(this);}};function VarPopAnContext(parser,ctx){AnFunctionContext.call(this,parser);this.partiton=null;// PartitionByClauseContext;\nthis.orderBy=null;// OrderByClauseContext;\nthis.windowing=null;// WindowingClauseContext;\nAnFunctionContext.prototype.copyFrom.call(this,ctx);return this;}VarPopAnContext.prototype=Object.create(AnFunctionContext.prototype);VarPopAnContext.prototype.constructor=VarPopAnContext;VtlParser.VarPopAnContext=VarPopAnContext;VarPopAnContext.prototype.VAR_POP=function(){return this.getToken(VtlParser.VAR_POP,0);};VarPopAnContext.prototype.LPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.LPAREN);}else{return this.getToken(VtlParser.LPAREN,i);}};VarPopAnContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};VarPopAnContext.prototype.OVER=function(){return this.getToken(VtlParser.OVER,0);};VarPopAnContext.prototype.RPAREN=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.RPAREN);}else{return this.getToken(VtlParser.RPAREN,i);}};VarPopAnContext.prototype.partitionByClause=function(){return this.getTypedRuleContext(PartitionByClauseContext,0);};VarPopAnContext.prototype.orderByClause=function(){return this.getTypedRuleContext(OrderByClauseContext,0);};VarPopAnContext.prototype.windowingClause=function(){return this.getTypedRuleContext(WindowingClauseContext,0);};VarPopAnContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarPopAn(this);}};VarPopAnContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarPopAn(this);}};VarPopAnContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarPopAn(this);}else{return visitor.visitChildren(this);}};VtlParser.AnFunctionContext=AnFunctionContext;VtlParser.prototype.anFunction=function(){var localctx=new AnFunctionContext(this,this._ctx,this.state);this.enterRule(localctx,58,VtlParser.RULE_anFunction);var _la=0;// Token type\ntry{this.state=1303;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.SUM:localctx=new SumAnContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1037;this.match(VtlParser.SUM);this.state=1038;this.match(VtlParser.LPAREN);this.state=1039;this.expr(0);this.state=1040;this.match(VtlParser.OVER);this.state=1041;this.match(VtlParser.LPAREN);this.state=1043;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1042;localctx.partiton=this.partitionByClause();}this.state=1046;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1045;localctx.orderBy=this.orderByClause();}this.state=1049;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1048;localctx.windowing=this.windowingClause();}this.state=1051;this.match(VtlParser.RPAREN);this.state=1052;this.match(VtlParser.RPAREN);break;case VtlParser.AVG:localctx=new AvgAnContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1054;this.match(VtlParser.AVG);this.state=1055;this.match(VtlParser.LPAREN);this.state=1056;this.expr(0);this.state=1057;this.match(VtlParser.OVER);this.state=1058;this.match(VtlParser.LPAREN);this.state=1060;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1059;localctx.partiton=this.partitionByClause();}this.state=1063;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1062;localctx.orderBy=this.orderByClause();}this.state=1066;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1065;localctx.windowing=this.windowingClause();}this.state=1068;this.match(VtlParser.RPAREN);this.state=1069;this.match(VtlParser.RPAREN);break;case VtlParser.COUNT:localctx=new CountAnContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=1071;this.match(VtlParser.COUNT);this.state=1072;this.match(VtlParser.LPAREN);this.state=1074;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.LPAREN|1<<VtlParser.PLUS|1<<VtlParser.MINUS|1<<VtlParser.EVAL|1<<VtlParser.IF|1<<VtlParser.CURRENT_DATE))!==0||(_la-39&~0x1f)==0&&(1<<_la-39&(1<<VtlParser.NOT-39|1<<VtlParser.BETWEEN-39|1<<VtlParser.ISNULL-39|1<<VtlParser.UNION-39|1<<VtlParser.SYMDIFF-39|1<<VtlParser.INTERSECT-39|1<<VtlParser.CHECK-39|1<<VtlParser.EXISTS_IN-39|1<<VtlParser.RANK-39|1<<VtlParser.MIN-39|1<<VtlParser.MAX-39))!==0||(_la-73&~0x1f)==0&&(1<<_la-73&(1<<VtlParser.ABS-73|1<<VtlParser.LN-73|1<<VtlParser.LOG-73|1<<VtlParser.TRUNC-73|1<<VtlParser.ROUND-73|1<<VtlParser.POWER-73|1<<VtlParser.MOD-73|1<<VtlParser.LEN-73|1<<VtlParser.TRIM-73|1<<VtlParser.UCASE-73|1<<VtlParser.LCASE-73|1<<VtlParser.SUBSTR-73|1<<VtlParser.SUM-73|1<<VtlParser.AVG-73|1<<VtlParser.MEDIAN-73|1<<VtlParser.COUNT-73|1<<VtlParser.EXP-73|1<<VtlParser.CHARSET_MATCH-73|1<<VtlParser.NVL-73|1<<VtlParser.HIERARCHY-73))!==0||(_la-119&~0x1f)==0&&(1<<_la-119&(1<<VtlParser.LTRIM-119|1<<VtlParser.RTRIM-119|1<<VtlParser.INSTR-119|1<<VtlParser.REPLACE-119|1<<VtlParser.CEIL-119|1<<VtlParser.FLOOR-119|1<<VtlParser.SQRT-119|1<<VtlParser.SETDIFF-119|1<<VtlParser.STDDEV_POP-119|1<<VtlParser.STDDEV_SAMP-119|1<<VtlParser.VAR_POP-119|1<<VtlParser.VAR_SAMP-119|1<<VtlParser.FIRST_VALUE-119|1<<VtlParser.LAST_VALUE-119|1<<VtlParser.LAG-119|1<<VtlParser.LEAD-119|1<<VtlParser.RATIO_TO_REPORT-119|1<<VtlParser.FILL_TIME_SERIES-119|1<<VtlParser.FLOW_TO_STOCK-119))!==0||(_la-151&~0x1f)==0&&(1<<_la-151&(1<<VtlParser.STOCK_TO_FLOW-151|1<<VtlParser.TIMESHIFT-151|1<<VtlParser.INNER_JOIN-151|1<<VtlParser.LEFT_JOIN-151|1<<VtlParser.CROSS_JOIN-151))!==0||(_la-183&~0x1f)==0&&(1<<_la-183&(1<<VtlParser.FULL_JOIN-183|1<<VtlParser.PERIOD_INDICATOR-183|1<<VtlParser.TIME_AGG-183|1<<VtlParser.CAST-183|1<<VtlParser.CHECK_DATAPOINT-183|1<<VtlParser.CHECK_HIERARCHY-183))!==0||(_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227|1<<VtlParser.IDENTIFIER-227))!==0){this.state=1073;this.expr(0);}this.state=1076;this.match(VtlParser.OVER);this.state=1077;this.match(VtlParser.LPAREN);this.state=1079;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1078;localctx.partiton=this.partitionByClause();}this.state=1082;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1081;localctx.orderBy=this.orderByClause();}this.state=1085;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1084;localctx.windowing=this.windowingClause();}this.state=1087;this.match(VtlParser.RPAREN);this.state=1088;this.match(VtlParser.RPAREN);break;case VtlParser.MEDIAN:localctx=new MedianAnContext(this,localctx);this.enterOuterAlt(localctx,4);this.state=1089;this.match(VtlParser.MEDIAN);this.state=1090;this.match(VtlParser.LPAREN);this.state=1091;this.expr(0);this.state=1092;this.match(VtlParser.OVER);this.state=1093;this.match(VtlParser.LPAREN);this.state=1095;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1094;localctx.partiton=this.partitionByClause();}this.state=1098;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1097;localctx.orderBy=this.orderByClause();}this.state=1101;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1100;localctx.windowing=this.windowingClause();}this.state=1103;this.match(VtlParser.RPAREN);this.state=1104;this.match(VtlParser.RPAREN);break;case VtlParser.MIN:localctx=new MinAnContext(this,localctx);this.enterOuterAlt(localctx,5);this.state=1106;this.match(VtlParser.MIN);this.state=1107;this.match(VtlParser.LPAREN);this.state=1108;this.expr(0);this.state=1109;this.match(VtlParser.OVER);this.state=1110;this.match(VtlParser.LPAREN);this.state=1112;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1111;localctx.partiton=this.partitionByClause();}this.state=1115;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1114;localctx.orderBy=this.orderByClause();}this.state=1118;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1117;localctx.windowing=this.windowingClause();}this.state=1120;this.match(VtlParser.RPAREN);this.state=1121;this.match(VtlParser.RPAREN);break;case VtlParser.MAX:localctx=new MaxAnContext(this,localctx);this.enterOuterAlt(localctx,6);this.state=1123;this.match(VtlParser.MAX);this.state=1124;this.match(VtlParser.LPAREN);this.state=1125;this.expr(0);this.state=1126;this.match(VtlParser.OVER);this.state=1127;this.match(VtlParser.LPAREN);this.state=1129;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1128;localctx.partiton=this.partitionByClause();}this.state=1132;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1131;localctx.orderBy=this.orderByClause();}this.state=1135;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1134;localctx.windowing=this.windowingClause();}this.state=1137;this.match(VtlParser.RPAREN);this.state=1138;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_POP:localctx=new StddevPopAnContext(this,localctx);this.enterOuterAlt(localctx,7);this.state=1140;this.match(VtlParser.STDDEV_POP);this.state=1141;this.match(VtlParser.LPAREN);this.state=1142;this.expr(0);this.state=1143;this.match(VtlParser.OVER);this.state=1144;this.match(VtlParser.LPAREN);this.state=1146;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1145;localctx.partiton=this.partitionByClause();}this.state=1149;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1148;localctx.orderBy=this.orderByClause();}this.state=1152;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1151;localctx.windowing=this.windowingClause();}this.state=1154;this.match(VtlParser.RPAREN);this.state=1155;this.match(VtlParser.RPAREN);break;case VtlParser.STDDEV_SAMP:localctx=new StddevSampAnContext(this,localctx);this.enterOuterAlt(localctx,8);this.state=1157;this.match(VtlParser.STDDEV_SAMP);this.state=1158;this.match(VtlParser.LPAREN);this.state=1159;this.expr(0);this.state=1160;this.match(VtlParser.OVER);this.state=1161;this.match(VtlParser.LPAREN);this.state=1163;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1162;localctx.partiton=this.partitionByClause();}this.state=1166;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1165;localctx.orderBy=this.orderByClause();}this.state=1169;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1168;localctx.windowing=this.windowingClause();}this.state=1171;this.match(VtlParser.RPAREN);this.state=1172;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_POP:localctx=new VarPopAnContext(this,localctx);this.enterOuterAlt(localctx,9);this.state=1174;this.match(VtlParser.VAR_POP);this.state=1175;this.match(VtlParser.LPAREN);this.state=1176;this.expr(0);this.state=1177;this.match(VtlParser.OVER);this.state=1178;this.match(VtlParser.LPAREN);this.state=1180;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1179;localctx.partiton=this.partitionByClause();}this.state=1183;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1182;localctx.orderBy=this.orderByClause();}this.state=1186;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1185;localctx.windowing=this.windowingClause();}this.state=1188;this.match(VtlParser.RPAREN);this.state=1189;this.match(VtlParser.RPAREN);break;case VtlParser.VAR_SAMP:localctx=new VarSampAnContext(this,localctx);this.enterOuterAlt(localctx,10);this.state=1191;this.match(VtlParser.VAR_SAMP);this.state=1192;this.match(VtlParser.LPAREN);this.state=1193;this.expr(0);this.state=1194;this.match(VtlParser.OVER);this.state=1195;this.match(VtlParser.LPAREN);this.state=1197;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1196;localctx.partiton=this.partitionByClause();}this.state=1200;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1199;localctx.orderBy=this.orderByClause();}this.state=1203;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1202;localctx.windowing=this.windowingClause();}this.state=1205;this.match(VtlParser.RPAREN);this.state=1206;this.match(VtlParser.RPAREN);break;case VtlParser.FIRST_VALUE:localctx=new FirstValueAnContext(this,localctx);this.enterOuterAlt(localctx,11);this.state=1208;this.match(VtlParser.FIRST_VALUE);this.state=1209;this.match(VtlParser.LPAREN);this.state=1210;this.expr(0);this.state=1211;this.match(VtlParser.OVER);this.state=1212;this.match(VtlParser.LPAREN);this.state=1214;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1213;localctx.partiton=this.partitionByClause();}this.state=1217;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1216;localctx.orderBy=this.orderByClause();}this.state=1220;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1219;localctx.windowing=this.windowingClause();}this.state=1222;this.match(VtlParser.RPAREN);this.state=1223;this.match(VtlParser.RPAREN);break;case VtlParser.LAST_VALUE:localctx=new LastValueAnContext(this,localctx);this.enterOuterAlt(localctx,12);this.state=1225;this.match(VtlParser.LAST_VALUE);this.state=1226;this.match(VtlParser.LPAREN);this.state=1227;this.expr(0);this.state=1228;this.match(VtlParser.OVER);this.state=1229;this.match(VtlParser.LPAREN);this.state=1231;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1230;localctx.partiton=this.partitionByClause();}this.state=1234;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ORDER){this.state=1233;localctx.orderBy=this.orderByClause();}this.state=1237;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DATA||_la===VtlParser.RANGE){this.state=1236;localctx.windowing=this.windowingClause();}this.state=1239;this.match(VtlParser.RPAREN);this.state=1240;this.match(VtlParser.RPAREN);break;case VtlParser.LAG:localctx=new LagAnContext(this,localctx);this.enterOuterAlt(localctx,13);this.state=1242;this.match(VtlParser.LAG);this.state=1243;this.match(VtlParser.LPAREN);this.state=1244;this.expr(0);this.state=1250;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=1245;this.match(VtlParser.COMMA);this.state=1246;localctx.offet=this.match(VtlParser.INTEGER_CONSTANT);this.state=1248;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227))!==0){this.state=1247;localctx.defaultValue=this.constant();}}this.state=1252;this.match(VtlParser.OVER);this.state=1253;this.match(VtlParser.LPAREN);this.state=1255;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1254;localctx.partiton=this.partitionByClause();}this.state=1257;localctx.orderBy=this.orderByClause();this.state=1259;this.match(VtlParser.RPAREN);this.state=1260;this.match(VtlParser.RPAREN);break;case VtlParser.LEAD:localctx=new LeadAnContext(this,localctx);this.enterOuterAlt(localctx,14);this.state=1262;this.match(VtlParser.LEAD);this.state=1263;this.match(VtlParser.LPAREN);this.state=1264;this.expr(0);this.state=1270;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.COMMA){this.state=1265;this.match(VtlParser.COMMA);this.state=1266;localctx.offet=this.match(VtlParser.INTEGER_CONSTANT);this.state=1268;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227))!==0){this.state=1267;localctx.defaultValue=this.constant();}}this.state=1272;this.match(VtlParser.OVER);this.state=1273;this.match(VtlParser.LPAREN);this.state=1275;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1274;localctx.partiton=this.partitionByClause();}this.state=1277;localctx.orderBy=this.orderByClause();this.state=1279;this.match(VtlParser.RPAREN);this.state=1280;this.match(VtlParser.RPAREN);break;case VtlParser.RANK:localctx=new RankAnContext(this,localctx);this.enterOuterAlt(localctx,15);this.state=1282;this.match(VtlParser.RANK);this.state=1283;this.match(VtlParser.LPAREN);this.state=1284;this.match(VtlParser.OVER);this.state=1285;this.match(VtlParser.LPAREN);this.state=1287;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PARTITION){this.state=1286;localctx.partiton=this.partitionByClause();}this.state=1289;localctx.orderBy=this.orderByClause();this.state=1291;this.match(VtlParser.RPAREN);this.state=1292;this.match(VtlParser.RPAREN);break;case VtlParser.RATIO_TO_REPORT:localctx=new RatioToReportAnContext(this,localctx);this.enterOuterAlt(localctx,16);this.state=1294;this.match(VtlParser.RATIO_TO_REPORT);this.state=1295;this.match(VtlParser.LPAREN);this.state=1296;this.expr(0);this.state=1297;this.match(VtlParser.OVER);this.state=1298;this.match(VtlParser.LPAREN);this.state=1299;localctx.partiton=this.partitionByClause();this.state=1300;this.match(VtlParser.RPAREN);this.state=1301;this.match(VtlParser.RPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RenameClauseItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_renameClauseItem;this.fromName=null;// ComponentClauseContext\nthis.toName=null;// ComponentClauseContext\nreturn this;}RenameClauseItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RenameClauseItemContext.prototype.constructor=RenameClauseItemContext;RenameClauseItemContext.prototype.TO=function(){return this.getToken(VtlParser.TO,0);};RenameClauseItemContext.prototype.componentClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentClauseContext);}else{return this.getTypedRuleContext(ComponentClauseContext,i);}};RenameClauseItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRenameClauseItem(this);}};RenameClauseItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRenameClauseItem(this);}};RenameClauseItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRenameClauseItem(this);}else{return visitor.visitChildren(this);}};VtlParser.RenameClauseItemContext=RenameClauseItemContext;VtlParser.prototype.renameClauseItem=function(){var localctx=new RenameClauseItemContext(this,this._ctx,this.state);this.enterRule(localctx,60,VtlParser.RULE_renameClauseItem);try{this.enterOuterAlt(localctx,1);this.state=1305;localctx.fromName=this.componentClause();this.state=1306;this.match(VtlParser.TO);this.state=1307;localctx.toName=this.componentClause();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComponentClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_componentClause;return this;}ComponentClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComponentClauseContext.prototype.constructor=ComponentClauseContext;ComponentClauseContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function ComponentContext(parser,ctx){ComponentClauseContext.call(this,parser);ComponentClauseContext.prototype.copyFrom.call(this,ctx);return this;}ComponentContext.prototype=Object.create(ComponentClauseContext.prototype);ComponentContext.prototype.constructor=ComponentContext;VtlParser.ComponentContext=ComponentContext;ComponentContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};ComponentContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComponent(this);}};ComponentContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComponent(this);}};ComponentContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComponent(this);}else{return visitor.visitChildren(this);}};function ComponentMembershipContext(parser,ctx){ComponentClauseContext.call(this,parser);ComponentClauseContext.prototype.copyFrom.call(this,ctx);return this;}ComponentMembershipContext.prototype=Object.create(ComponentClauseContext.prototype);ComponentMembershipContext.prototype.constructor=ComponentMembershipContext;VtlParser.ComponentMembershipContext=ComponentMembershipContext;ComponentMembershipContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};ComponentMembershipContext.prototype.MEMBERSHIP=function(){return this.getToken(VtlParser.MEMBERSHIP,0);};ComponentMembershipContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};ComponentMembershipContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComponentMembership(this);}};ComponentMembershipContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComponentMembership(this);}};ComponentMembershipContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComponentMembership(this);}else{return visitor.visitChildren(this);}};VtlParser.ComponentClauseContext=ComponentClauseContext;VtlParser.prototype.componentClause=function(){var localctx=new ComponentClauseContext(this,this._ctx,this.state);this.enterRule(localctx,62,VtlParser.RULE_componentClause);try{this.state=1314;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,139,this._ctx);switch(la_){case 1:localctx=new ComponentMembershipContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1309;this.varID();this.state=1310;this.match(VtlParser.MEMBERSHIP);this.state=1311;this.componentID();break;case 2:localctx=new ComponentContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1313;this.componentID();break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AggregateClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_aggregateClause;return this;}AggregateClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AggregateClauseContext.prototype.constructor=AggregateClauseContext;AggregateClauseContext.prototype.aggrFunctionClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(AggrFunctionClauseContext);}else{return this.getTypedRuleContext(AggrFunctionClauseContext,i);}};AggregateClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};AggregateClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAggregateClause(this);}};AggregateClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAggregateClause(this);}};AggregateClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAggregateClause(this);}else{return visitor.visitChildren(this);}};VtlParser.AggregateClauseContext=AggregateClauseContext;VtlParser.prototype.aggregateClause=function(){var localctx=new AggregateClauseContext(this,this._ctx,this.state);this.enterRule(localctx,64,VtlParser.RULE_aggregateClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1316;this.aggrFunctionClause();this.state=1321;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1317;this.match(VtlParser.COMMA);this.state=1318;this.aggrFunctionClause();this.state=1323;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AggrFunctionClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_aggrFunctionClause;return this;}AggrFunctionClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AggrFunctionClauseContext.prototype.constructor=AggrFunctionClauseContext;AggrFunctionClauseContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};AggrFunctionClauseContext.prototype.ASSIGN=function(){return this.getToken(VtlParser.ASSIGN,0);};AggrFunctionClauseContext.prototype.aggrOperators=function(){return this.getTypedRuleContext(AggrOperatorsContext,0);};AggrFunctionClauseContext.prototype.componentRole=function(){return this.getTypedRuleContext(ComponentRoleContext,0);};AggrFunctionClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAggrFunctionClause(this);}};AggrFunctionClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAggrFunctionClause(this);}};AggrFunctionClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAggrFunctionClause(this);}else{return visitor.visitChildren(this);}};VtlParser.AggrFunctionClauseContext=AggrFunctionClauseContext;VtlParser.prototype.aggrFunctionClause=function(){var localctx=new AggrFunctionClauseContext(this,this._ctx,this.state);this.enterRule(localctx,66,VtlParser.RULE_aggrFunctionClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1325;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-91&~0x1f)==0&&(1<<_la-91&(1<<VtlParser.DIMENSION-91|1<<VtlParser.MEASURE-91|1<<VtlParser.ATTRIBUTE-91|1<<VtlParser.VIRAL-91))!==0||_la===VtlParser.COMPONENT){this.state=1324;this.componentRole();}this.state=1327;this.componentID();this.state=1328;this.match(VtlParser.ASSIGN);this.state=1329;this.aggrOperators();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CalcClauseItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_calcClauseItem;return this;}CalcClauseItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CalcClauseItemContext.prototype.constructor=CalcClauseItemContext;CalcClauseItemContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};CalcClauseItemContext.prototype.ASSIGN=function(){return this.getToken(VtlParser.ASSIGN,0);};CalcClauseItemContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CalcClauseItemContext.prototype.componentRole=function(){return this.getTypedRuleContext(ComponentRoleContext,0);};CalcClauseItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCalcClauseItem(this);}};CalcClauseItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCalcClauseItem(this);}};CalcClauseItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCalcClauseItem(this);}else{return visitor.visitChildren(this);}};VtlParser.CalcClauseItemContext=CalcClauseItemContext;VtlParser.prototype.calcClauseItem=function(){var localctx=new CalcClauseItemContext(this,this._ctx,this.state);this.enterRule(localctx,68,VtlParser.RULE_calcClauseItem);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1332;this._errHandler.sync(this);_la=this._input.LA(1);if((_la-91&~0x1f)==0&&(1<<_la-91&(1<<VtlParser.DIMENSION-91|1<<VtlParser.MEASURE-91|1<<VtlParser.ATTRIBUTE-91|1<<VtlParser.VIRAL-91))!==0||_la===VtlParser.COMPONENT){this.state=1331;this.componentRole();}this.state=1334;this.componentID();this.state=1335;this.match(VtlParser.ASSIGN);this.state=1336;this.expr(0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SubspaceClauseItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_subspaceClauseItem;return this;}SubspaceClauseItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SubspaceClauseItemContext.prototype.constructor=SubspaceClauseItemContext;SubspaceClauseItemContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};SubspaceClauseItemContext.prototype.EQ=function(){return this.getToken(VtlParser.EQ,0);};SubspaceClauseItemContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};SubspaceClauseItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSubspaceClauseItem(this);}};SubspaceClauseItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSubspaceClauseItem(this);}};SubspaceClauseItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSubspaceClauseItem(this);}else{return visitor.visitChildren(this);}};VtlParser.SubspaceClauseItemContext=SubspaceClauseItemContext;VtlParser.prototype.subspaceClauseItem=function(){var localctx=new SubspaceClauseItemContext(this,this._ctx,this.state);this.enterRule(localctx,70,VtlParser.RULE_subspaceClauseItem);try{this.enterOuterAlt(localctx,1);this.state=1338;this.componentID();this.state=1339;this.match(VtlParser.EQ);this.state=1340;this.constant();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinClauseWithoutUsingContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinClauseWithoutUsing;return this;}JoinClauseWithoutUsingContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinClauseWithoutUsingContext.prototype.constructor=JoinClauseWithoutUsingContext;JoinClauseWithoutUsingContext.prototype.joinClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(JoinClauseItemContext);}else{return this.getTypedRuleContext(JoinClauseItemContext,i);}};JoinClauseWithoutUsingContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};JoinClauseWithoutUsingContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinClauseWithoutUsing(this);}};JoinClauseWithoutUsingContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinClauseWithoutUsing(this);}};JoinClauseWithoutUsingContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinClauseWithoutUsing(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinClauseWithoutUsingContext=JoinClauseWithoutUsingContext;VtlParser.prototype.joinClauseWithoutUsing=function(){var localctx=new JoinClauseWithoutUsingContext(this,this._ctx,this.state);this.enterRule(localctx,72,VtlParser.RULE_joinClauseWithoutUsing);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1342;this.joinClauseItem();this.state=1347;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1343;this.match(VtlParser.COMMA);this.state=1344;this.joinClauseItem();this.state=1349;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinClause;return this;}JoinClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinClauseContext.prototype.constructor=JoinClauseContext;JoinClauseContext.prototype.joinClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(JoinClauseItemContext);}else{return this.getTypedRuleContext(JoinClauseItemContext,i);}};JoinClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};JoinClauseContext.prototype.USING=function(){return this.getToken(VtlParser.USING,0);};JoinClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};JoinClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinClause(this);}};JoinClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinClause(this);}};JoinClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinClause(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinClauseContext=JoinClauseContext;VtlParser.prototype.joinClause=function(){var localctx=new JoinClauseContext(this,this._ctx,this.state);this.enterRule(localctx,74,VtlParser.RULE_joinClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1350;this.joinClauseItem();this.state=1355;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1351;this.match(VtlParser.COMMA);this.state=1352;this.joinClauseItem();this.state=1357;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1367;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.USING){this.state=1358;this.match(VtlParser.USING);this.state=1359;this.componentID();this.state=1364;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1360;this.match(VtlParser.COMMA);this.state=1361;this.componentID();this.state=1366;this._errHandler.sync(this);_la=this._input.LA(1);}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinClauseItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinClauseItem;return this;}JoinClauseItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinClauseItemContext.prototype.constructor=JoinClauseItemContext;JoinClauseItemContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};JoinClauseItemContext.prototype.AS=function(){return this.getToken(VtlParser.AS,0);};JoinClauseItemContext.prototype.alias=function(){return this.getTypedRuleContext(AliasContext,0);};JoinClauseItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinClauseItem(this);}};JoinClauseItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinClauseItem(this);}};JoinClauseItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinClauseItem(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinClauseItemContext=JoinClauseItemContext;VtlParser.prototype.joinClauseItem=function(){var localctx=new JoinClauseItemContext(this,this._ctx,this.state);this.enterRule(localctx,76,VtlParser.RULE_joinClauseItem);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1369;this.expr(0);this.state=1372;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.AS){this.state=1370;this.match(VtlParser.AS);this.state=1371;this.alias();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinBodyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinBody;return this;}JoinBodyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinBodyContext.prototype.constructor=JoinBodyContext;JoinBodyContext.prototype.filterClause=function(){return this.getTypedRuleContext(FilterClauseContext,0);};JoinBodyContext.prototype.calcClause=function(){return this.getTypedRuleContext(CalcClauseContext,0);};JoinBodyContext.prototype.joinApplyClause=function(){return this.getTypedRuleContext(JoinApplyClauseContext,0);};JoinBodyContext.prototype.aggrClause=function(){return this.getTypedRuleContext(AggrClauseContext,0);};JoinBodyContext.prototype.keepClause=function(){return this.getTypedRuleContext(KeepClauseContext,0);};JoinBodyContext.prototype.dropClause=function(){return this.getTypedRuleContext(DropClauseContext,0);};JoinBodyContext.prototype.renameClause=function(){return this.getTypedRuleContext(RenameClauseContext,0);};JoinBodyContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinBody(this);}};JoinBodyContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinBody(this);}};JoinBodyContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinBody(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinBodyContext=JoinBodyContext;VtlParser.prototype.joinBody=function(){var localctx=new JoinBodyContext(this,this._ctx,this.state);this.enterRule(localctx,78,VtlParser.RULE_joinBody);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1375;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.FILTER){this.state=1374;this.filterClause();}this.state=1380;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.CALC:this.state=1377;this.calcClause();break;case VtlParser.APPLY:this.state=1378;this.joinApplyClause();break;case VtlParser.AGGREGATE:this.state=1379;this.aggrClause();break;case VtlParser.RPAREN:case VtlParser.DROP:case VtlParser.KEEP:case VtlParser.RENAME:break;default:break;}this.state=1384;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.KEEP:this.state=1382;this.keepClause();break;case VtlParser.DROP:this.state=1383;this.dropClause();break;case VtlParser.RPAREN:case VtlParser.RENAME:break;default:break;}this.state=1387;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.RENAME){this.state=1386;this.renameClause();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function JoinApplyClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_joinApplyClause;return this;}JoinApplyClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);JoinApplyClauseContext.prototype.constructor=JoinApplyClauseContext;JoinApplyClauseContext.prototype.APPLY=function(){return this.getToken(VtlParser.APPLY,0);};JoinApplyClauseContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};JoinApplyClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterJoinApplyClause(this);}};JoinApplyClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitJoinApplyClause(this);}};JoinApplyClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitJoinApplyClause(this);}else{return visitor.visitChildren(this);}};VtlParser.JoinApplyClauseContext=JoinApplyClauseContext;VtlParser.prototype.joinApplyClause=function(){var localctx=new JoinApplyClauseContext(this,this._ctx,this.state);this.enterRule(localctx,80,VtlParser.RULE_joinApplyClause);try{this.enterOuterAlt(localctx,1);this.state=1389;this.match(VtlParser.APPLY);this.state=1390;this.expr(0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function PartitionByClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_partitionByClause;return this;}PartitionByClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);PartitionByClauseContext.prototype.constructor=PartitionByClauseContext;PartitionByClauseContext.prototype.PARTITION=function(){return this.getToken(VtlParser.PARTITION,0);};PartitionByClauseContext.prototype.BY=function(){return this.getToken(VtlParser.BY,0);};PartitionByClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};PartitionByClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};PartitionByClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterPartitionByClause(this);}};PartitionByClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitPartitionByClause(this);}};PartitionByClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitPartitionByClause(this);}else{return visitor.visitChildren(this);}};VtlParser.PartitionByClauseContext=PartitionByClauseContext;VtlParser.prototype.partitionByClause=function(){var localctx=new PartitionByClauseContext(this,this._ctx,this.state);this.enterRule(localctx,82,VtlParser.RULE_partitionByClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1392;this.match(VtlParser.PARTITION);this.state=1393;this.match(VtlParser.BY);this.state=1394;this.componentID();this.state=1399;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1395;this.match(VtlParser.COMMA);this.state=1396;this.componentID();this.state=1401;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrderByClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_orderByClause;return this;}OrderByClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrderByClauseContext.prototype.constructor=OrderByClauseContext;OrderByClauseContext.prototype.ORDER=function(){return this.getToken(VtlParser.ORDER,0);};OrderByClauseContext.prototype.BY=function(){return this.getToken(VtlParser.BY,0);};OrderByClauseContext.prototype.orderByItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(OrderByItemContext);}else{return this.getTypedRuleContext(OrderByItemContext,i);}};OrderByClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};OrderByClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOrderByClause(this);}};OrderByClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOrderByClause(this);}};OrderByClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOrderByClause(this);}else{return visitor.visitChildren(this);}};VtlParser.OrderByClauseContext=OrderByClauseContext;VtlParser.prototype.orderByClause=function(){var localctx=new OrderByClauseContext(this,this._ctx,this.state);this.enterRule(localctx,84,VtlParser.RULE_orderByClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1402;this.match(VtlParser.ORDER);this.state=1403;this.match(VtlParser.BY);this.state=1404;this.orderByItem();this.state=1409;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1405;this.match(VtlParser.COMMA);this.state=1406;this.orderByItem();this.state=1411;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OrderByItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_orderByItem;return this;}OrderByItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OrderByItemContext.prototype.constructor=OrderByItemContext;OrderByItemContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};OrderByItemContext.prototype.ASC=function(){return this.getToken(VtlParser.ASC,0);};OrderByItemContext.prototype.DESC=function(){return this.getToken(VtlParser.DESC,0);};OrderByItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOrderByItem(this);}};OrderByItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOrderByItem(this);}};OrderByItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOrderByItem(this);}else{return visitor.visitChildren(this);}};VtlParser.OrderByItemContext=OrderByItemContext;VtlParser.prototype.orderByItem=function(){var localctx=new OrderByItemContext(this,this._ctx,this.state);this.enterRule(localctx,86,VtlParser.RULE_orderByItem);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1412;this.componentID();this.state=1414;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ASC||_la===VtlParser.DESC){this.state=1413;_la=this._input.LA(1);if(!(_la===VtlParser.ASC||_la===VtlParser.DESC)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function WindowingClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_windowingClause;this.from=null;// LimitClauseItemContext\nthis.to=null;// LimitClauseItemContext\nreturn this;}WindowingClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);WindowingClauseContext.prototype.constructor=WindowingClauseContext;WindowingClauseContext.prototype.BETWEEN=function(){return this.getToken(VtlParser.BETWEEN,0);};WindowingClauseContext.prototype.AND=function(){return this.getToken(VtlParser.AND,0);};WindowingClauseContext.prototype.limitClauseItem=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(LimitClauseItemContext);}else{return this.getTypedRuleContext(LimitClauseItemContext,i);}};WindowingClauseContext.prototype.RANGE=function(){return this.getToken(VtlParser.RANGE,0);};WindowingClauseContext.prototype.DATA=function(){return this.getToken(VtlParser.DATA,0);};WindowingClauseContext.prototype.POINTS=function(){return this.getToken(VtlParser.POINTS,0);};WindowingClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterWindowingClause(this);}};WindowingClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitWindowingClause(this);}};WindowingClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitWindowingClause(this);}else{return visitor.visitChildren(this);}};VtlParser.WindowingClauseContext=WindowingClauseContext;VtlParser.prototype.windowingClause=function(){var localctx=new WindowingClauseContext(this,this._ctx,this.state);this.enterRule(localctx,88,VtlParser.RULE_windowingClause);try{this.enterOuterAlt(localctx,1);this.state=1419;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.DATA:this.state=1416;this.match(VtlParser.DATA);this.state=1417;this.match(VtlParser.POINTS);break;case VtlParser.RANGE:this.state=1418;this.match(VtlParser.RANGE);break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1421;this.match(VtlParser.BETWEEN);this.state=1422;localctx.from=this.limitClauseItem();this.state=1423;this.match(VtlParser.AND);this.state=1424;localctx.to=this.limitClauseItem();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function LimitClauseItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_limitClauseItem;return this;}LimitClauseItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);LimitClauseItemContext.prototype.constructor=LimitClauseItemContext;LimitClauseItemContext.prototype.INTEGER_CONSTANT=function(){return this.getToken(VtlParser.INTEGER_CONSTANT,0);};LimitClauseItemContext.prototype.PRECEDING=function(){return this.getToken(VtlParser.PRECEDING,0);};LimitClauseItemContext.prototype.FOLLOWING=function(){return this.getToken(VtlParser.FOLLOWING,0);};LimitClauseItemContext.prototype.CURRENT=function(){return this.getToken(VtlParser.CURRENT,0);};LimitClauseItemContext.prototype.DATA=function(){return this.getToken(VtlParser.DATA,0);};LimitClauseItemContext.prototype.POINT=function(){return this.getToken(VtlParser.POINT,0);};LimitClauseItemContext.prototype.UNBOUNDED=function(){return this.getToken(VtlParser.UNBOUNDED,0);};LimitClauseItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLimitClauseItem(this);}};LimitClauseItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLimitClauseItem(this);}};LimitClauseItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLimitClauseItem(this);}else{return visitor.visitChildren(this);}};VtlParser.LimitClauseItemContext=LimitClauseItemContext;VtlParser.prototype.limitClauseItem=function(){var localctx=new LimitClauseItemContext(this,this._ctx,this.state);this.enterRule(localctx,90,VtlParser.RULE_limitClauseItem);try{this.state=1437;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,156,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1426;this.match(VtlParser.INTEGER_CONSTANT);this.state=1427;this.match(VtlParser.PRECEDING);break;case 2:this.enterOuterAlt(localctx,2);this.state=1428;this.match(VtlParser.INTEGER_CONSTANT);this.state=1429;this.match(VtlParser.FOLLOWING);break;case 3:this.enterOuterAlt(localctx,3);this.state=1430;this.match(VtlParser.CURRENT);this.state=1431;this.match(VtlParser.DATA);this.state=1432;this.match(VtlParser.POINT);break;case 4:this.enterOuterAlt(localctx,4);this.state=1433;this.match(VtlParser.UNBOUNDED);this.state=1434;this.match(VtlParser.PRECEDING);break;case 5:this.enterOuterAlt(localctx,5);this.state=1435;this.match(VtlParser.UNBOUNDED);this.state=1436;this.match(VtlParser.FOLLOWING);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function GroupingClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_groupingClause;return this;}GroupingClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);GroupingClauseContext.prototype.constructor=GroupingClauseContext;GroupingClauseContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function GroupAllContext(parser,ctx){GroupingClauseContext.call(this,parser);GroupingClauseContext.prototype.copyFrom.call(this,ctx);return this;}GroupAllContext.prototype=Object.create(GroupingClauseContext.prototype);GroupAllContext.prototype.constructor=GroupAllContext;VtlParser.GroupAllContext=GroupAllContext;GroupAllContext.prototype.GROUP=function(){return this.getToken(VtlParser.GROUP,0);};GroupAllContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};GroupAllContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};GroupAllContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterGroupAll(this);}};GroupAllContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitGroupAll(this);}};GroupAllContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitGroupAll(this);}else{return visitor.visitChildren(this);}};function GroupByOrExceptContext(parser,ctx){GroupingClauseContext.call(this,parser);GroupingClauseContext.prototype.copyFrom.call(this,ctx);return this;}GroupByOrExceptContext.prototype=Object.create(GroupingClauseContext.prototype);GroupByOrExceptContext.prototype.constructor=GroupByOrExceptContext;VtlParser.GroupByOrExceptContext=GroupByOrExceptContext;GroupByOrExceptContext.prototype.groupKeyword=function(){return this.getTypedRuleContext(GroupKeywordContext,0);};GroupByOrExceptContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};GroupByOrExceptContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};GroupByOrExceptContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterGroupByOrExcept(this);}};GroupByOrExceptContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitGroupByOrExcept(this);}};GroupByOrExceptContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitGroupByOrExcept(this);}else{return visitor.visitChildren(this);}};VtlParser.GroupingClauseContext=GroupingClauseContext;VtlParser.prototype.groupingClause=function(){var localctx=new GroupingClauseContext(this,this._ctx,this.state);this.enterRule(localctx,92,VtlParser.RULE_groupingClause);var _la=0;// Token type\ntry{this.state=1451;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,158,this._ctx);switch(la_){case 1:localctx=new GroupByOrExceptContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1439;this.groupKeyword();this.state=1440;this.componentID();this.state=1445;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1441;this.match(VtlParser.COMMA);this.state=1442;this.componentID();this.state=1447;this._errHandler.sync(this);_la=this._input.LA(1);}break;case 2:localctx=new GroupAllContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1448;this.match(VtlParser.GROUP);this.state=1449;this.match(VtlParser.ALL);this.state=1450;this.expr(0);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HavingClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_havingClause;return this;}HavingClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HavingClauseContext.prototype.constructor=HavingClauseContext;HavingClauseContext.prototype.HAVING=function(){return this.getToken(VtlParser.HAVING,0);};HavingClauseContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};HavingClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHavingClause(this);}};HavingClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHavingClause(this);}};HavingClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHavingClause(this);}else{return visitor.visitChildren(this);}};VtlParser.HavingClauseContext=HavingClauseContext;VtlParser.prototype.havingClause=function(){var localctx=new HavingClauseContext(this,this._ctx,this.state);this.enterRule(localctx,94,VtlParser.RULE_havingClause);try{this.enterOuterAlt(localctx,1);this.state=1453;this.match(VtlParser.HAVING);this.state=1454;this.expr(0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ParameterItemContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_parameterItem;return this;}ParameterItemContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ParameterItemContext.prototype.constructor=ParameterItemContext;ParameterItemContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};ParameterItemContext.prototype.inputParameterType=function(){return this.getTypedRuleContext(InputParameterTypeContext,0);};ParameterItemContext.prototype.DEFAULT=function(){return this.getToken(VtlParser.DEFAULT,0);};ParameterItemContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};ParameterItemContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterParameterItem(this);}};ParameterItemContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitParameterItem(this);}};ParameterItemContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitParameterItem(this);}else{return visitor.visitChildren(this);}};VtlParser.ParameterItemContext=ParameterItemContext;VtlParser.prototype.parameterItem=function(){var localctx=new ParameterItemContext(this,this._ctx,this.state);this.enterRule(localctx,96,VtlParser.RULE_parameterItem);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1456;this.varID();this.state=1457;this.inputParameterType();this.state=1460;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.DEFAULT){this.state=1458;this.match(VtlParser.DEFAULT);this.state=1459;this.constant();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OutputParameterTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_outputParameterType;return this;}OutputParameterTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OutputParameterTypeContext.prototype.constructor=OutputParameterTypeContext;OutputParameterTypeContext.prototype.scalarType=function(){return this.getTypedRuleContext(ScalarTypeContext,0);};OutputParameterTypeContext.prototype.datasetType=function(){return this.getTypedRuleContext(DatasetTypeContext,0);};OutputParameterTypeContext.prototype.componentType=function(){return this.getTypedRuleContext(ComponentTypeContext,0);};OutputParameterTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOutputParameterType(this);}};OutputParameterTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOutputParameterType(this);}};OutputParameterTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOutputParameterType(this);}else{return visitor.visitChildren(this);}};VtlParser.OutputParameterTypeContext=OutputParameterTypeContext;VtlParser.prototype.outputParameterType=function(){var localctx=new OutputParameterTypeContext(this,this._ctx,this.state);this.enterRule(localctx,98,VtlParser.RULE_outputParameterType);try{this.state=1465;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.BOOLEAN:case VtlParser.DATE:case VtlParser.TIME_PERIOD:case VtlParser.NUMBER:case VtlParser.STRING:case VtlParser.INTEGER:case VtlParser.DURATION:case VtlParser.SCALAR:case VtlParser.IDENTIFIER:case VtlParser.TIME:this.enterOuterAlt(localctx,1);this.state=1462;this.scalarType();break;case VtlParser.DATASET:this.enterOuterAlt(localctx,2);this.state=1463;this.datasetType();break;case VtlParser.DIMENSION:case VtlParser.MEASURE:case VtlParser.ATTRIBUTE:case VtlParser.VIRAL:case VtlParser.COMPONENT:this.enterOuterAlt(localctx,3);this.state=1464;this.componentType();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function InputParameterTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_inputParameterType;return this;}InputParameterTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);InputParameterTypeContext.prototype.constructor=InputParameterTypeContext;InputParameterTypeContext.prototype.scalarType=function(){return this.getTypedRuleContext(ScalarTypeContext,0);};InputParameterTypeContext.prototype.datasetType=function(){return this.getTypedRuleContext(DatasetTypeContext,0);};InputParameterTypeContext.prototype.scalarSetType=function(){return this.getTypedRuleContext(ScalarSetTypeContext,0);};InputParameterTypeContext.prototype.rulesetType=function(){return this.getTypedRuleContext(RulesetTypeContext,0);};InputParameterTypeContext.prototype.componentType=function(){return this.getTypedRuleContext(ComponentTypeContext,0);};InputParameterTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterInputParameterType(this);}};InputParameterTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitInputParameterType(this);}};InputParameterTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitInputParameterType(this);}else{return visitor.visitChildren(this);}};VtlParser.InputParameterTypeContext=InputParameterTypeContext;VtlParser.prototype.inputParameterType=function(){var localctx=new InputParameterTypeContext(this,this._ctx,this.state);this.enterRule(localctx,100,VtlParser.RULE_inputParameterType);try{this.state=1472;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.BOOLEAN:case VtlParser.DATE:case VtlParser.TIME_PERIOD:case VtlParser.NUMBER:case VtlParser.STRING:case VtlParser.INTEGER:case VtlParser.DURATION:case VtlParser.SCALAR:case VtlParser.IDENTIFIER:case VtlParser.TIME:this.enterOuterAlt(localctx,1);this.state=1467;this.scalarType();break;case VtlParser.DATASET:this.enterOuterAlt(localctx,2);this.state=1468;this.datasetType();break;case VtlParser.SET:this.enterOuterAlt(localctx,3);this.state=1469;this.scalarSetType();break;case VtlParser.DATAPOINT:case VtlParser.HIERARCHICAL:case VtlParser.RULESET:case VtlParser.DATAPOINT_ON_VD:case VtlParser.DATAPOINT_ON_VAR:case VtlParser.HIERARCHICAL_ON_VD:case VtlParser.HIERARCHICAL_ON_VAR:this.enterOuterAlt(localctx,4);this.state=1470;this.rulesetType();break;case VtlParser.DIMENSION:case VtlParser.MEASURE:case VtlParser.ATTRIBUTE:case VtlParser.VIRAL:case VtlParser.COMPONENT:this.enterOuterAlt(localctx,5);this.state=1471;this.componentType();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RulesetTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_rulesetType;return this;}RulesetTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RulesetTypeContext.prototype.constructor=RulesetTypeContext;RulesetTypeContext.prototype.RULESET=function(){return this.getToken(VtlParser.RULESET,0);};RulesetTypeContext.prototype.dpRuleset=function(){return this.getTypedRuleContext(DpRulesetContext,0);};RulesetTypeContext.prototype.hrRuleset=function(){return this.getTypedRuleContext(HrRulesetContext,0);};RulesetTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRulesetType(this);}};RulesetTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRulesetType(this);}};RulesetTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRulesetType(this);}else{return visitor.visitChildren(this);}};VtlParser.RulesetTypeContext=RulesetTypeContext;VtlParser.prototype.rulesetType=function(){var localctx=new RulesetTypeContext(this,this._ctx,this.state);this.enterRule(localctx,102,VtlParser.RULE_rulesetType);try{this.state=1477;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.RULESET:this.enterOuterAlt(localctx,1);this.state=1474;this.match(VtlParser.RULESET);break;case VtlParser.DATAPOINT:case VtlParser.DATAPOINT_ON_VD:case VtlParser.DATAPOINT_ON_VAR:this.enterOuterAlt(localctx,2);this.state=1475;this.dpRuleset();break;case VtlParser.HIERARCHICAL:case VtlParser.HIERARCHICAL_ON_VD:case VtlParser.HIERARCHICAL_ON_VAR:this.enterOuterAlt(localctx,3);this.state=1476;this.hrRuleset();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ScalarTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_scalarType;return this;}ScalarTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ScalarTypeContext.prototype.constructor=ScalarTypeContext;ScalarTypeContext.prototype.basicScalarType=function(){return this.getTypedRuleContext(BasicScalarTypeContext,0);};ScalarTypeContext.prototype.valueDomainName=function(){return this.getTypedRuleContext(ValueDomainNameContext,0);};ScalarTypeContext.prototype.scalarTypeConstraint=function(){return this.getTypedRuleContext(ScalarTypeConstraintContext,0);};ScalarTypeContext.prototype.NULL_CONSTANT=function(){return this.getToken(VtlParser.NULL_CONSTANT,0);};ScalarTypeContext.prototype.NOT=function(){return this.getToken(VtlParser.NOT,0);};ScalarTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterScalarType(this);}};ScalarTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitScalarType(this);}};ScalarTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitScalarType(this);}else{return visitor.visitChildren(this);}};VtlParser.ScalarTypeContext=ScalarTypeContext;VtlParser.prototype.scalarType=function(){var localctx=new ScalarTypeContext(this,this._ctx,this.state);this.enterRule(localctx,104,VtlParser.RULE_scalarType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1481;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.BOOLEAN:case VtlParser.DATE:case VtlParser.TIME_PERIOD:case VtlParser.NUMBER:case VtlParser.STRING:case VtlParser.INTEGER:case VtlParser.DURATION:case VtlParser.SCALAR:case VtlParser.TIME:this.state=1479;this.basicScalarType();break;case VtlParser.IDENTIFIER:this.state=1480;this.valueDomainName();break;default:throw new antlr4.error.NoViableAltException(this);}this.state=1484;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN||_la===VtlParser.QLPAREN){this.state=1483;this.scalarTypeConstraint();}this.state=1490;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.NOT||_la===VtlParser.NULL_CONSTANT){this.state=1487;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.NOT){this.state=1486;this.match(VtlParser.NOT);}this.state=1489;this.match(VtlParser.NULL_CONSTANT);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComponentTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_componentType;return this;}ComponentTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComponentTypeContext.prototype.constructor=ComponentTypeContext;ComponentTypeContext.prototype.componentRole=function(){return this.getTypedRuleContext(ComponentRoleContext,0);};ComponentTypeContext.prototype.LT=function(){return this.getToken(VtlParser.LT,0);};ComponentTypeContext.prototype.scalarType=function(){return this.getTypedRuleContext(ScalarTypeContext,0);};ComponentTypeContext.prototype.MT=function(){return this.getToken(VtlParser.MT,0);};ComponentTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComponentType(this);}};ComponentTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComponentType(this);}};ComponentTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComponentType(this);}else{return visitor.visitChildren(this);}};VtlParser.ComponentTypeContext=ComponentTypeContext;VtlParser.prototype.componentType=function(){var localctx=new ComponentTypeContext(this,this._ctx,this.state);this.enterRule(localctx,106,VtlParser.RULE_componentType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1492;this.componentRole();this.state=1497;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.LT){this.state=1493;this.match(VtlParser.LT);this.state=1494;this.scalarType();this.state=1495;this.match(VtlParser.MT);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DatasetTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_datasetType;return this;}DatasetTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DatasetTypeContext.prototype.constructor=DatasetTypeContext;DatasetTypeContext.prototype.DATASET=function(){return this.getToken(VtlParser.DATASET,0);};DatasetTypeContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};DatasetTypeContext.prototype.compConstraint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CompConstraintContext);}else{return this.getTypedRuleContext(CompConstraintContext,i);}};DatasetTypeContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};DatasetTypeContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};DatasetTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDatasetType(this);}};DatasetTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDatasetType(this);}};DatasetTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDatasetType(this);}else{return visitor.visitChildren(this);}};VtlParser.DatasetTypeContext=DatasetTypeContext;VtlParser.prototype.datasetType=function(){var localctx=new DatasetTypeContext(this,this._ctx,this.state);this.enterRule(localctx,108,VtlParser.RULE_datasetType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1499;this.match(VtlParser.DATASET);this.state=1511;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN){this.state=1500;this.match(VtlParser.GLPAREN);this.state=1501;this.compConstraint();this.state=1506;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1502;this.match(VtlParser.COMMA);this.state=1503;this.compConstraint();this.state=1508;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1509;this.match(VtlParser.GRPAREN);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ScalarSetTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_scalarSetType;return this;}ScalarSetTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ScalarSetTypeContext.prototype.constructor=ScalarSetTypeContext;ScalarSetTypeContext.prototype.SET=function(){return this.getToken(VtlParser.SET,0);};ScalarSetTypeContext.prototype.LT=function(){return this.getToken(VtlParser.LT,0);};ScalarSetTypeContext.prototype.scalarType=function(){return this.getTypedRuleContext(ScalarTypeContext,0);};ScalarSetTypeContext.prototype.MT=function(){return this.getToken(VtlParser.MT,0);};ScalarSetTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterScalarSetType(this);}};ScalarSetTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitScalarSetType(this);}};ScalarSetTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitScalarSetType(this);}else{return visitor.visitChildren(this);}};VtlParser.ScalarSetTypeContext=ScalarSetTypeContext;VtlParser.prototype.scalarSetType=function(){var localctx=new ScalarSetTypeContext(this,this._ctx,this.state);this.enterRule(localctx,110,VtlParser.RULE_scalarSetType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1513;this.match(VtlParser.SET);this.state=1518;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.LT){this.state=1514;this.match(VtlParser.LT);this.state=1515;this.scalarType();this.state=1516;this.match(VtlParser.MT);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function DpRulesetContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_dpRuleset;return this;}DpRulesetContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);DpRulesetContext.prototype.constructor=DpRulesetContext;DpRulesetContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function DataPointVdContext(parser,ctx){DpRulesetContext.call(this,parser);DpRulesetContext.prototype.copyFrom.call(this,ctx);return this;}DataPointVdContext.prototype=Object.create(DpRulesetContext.prototype);DataPointVdContext.prototype.constructor=DataPointVdContext;VtlParser.DataPointVdContext=DataPointVdContext;DataPointVdContext.prototype.DATAPOINT_ON_VD=function(){return this.getToken(VtlParser.DATAPOINT_ON_VD,0);};DataPointVdContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};DataPointVdContext.prototype.valueDomainName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ValueDomainNameContext);}else{return this.getTypedRuleContext(ValueDomainNameContext,i);}};DataPointVdContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};DataPointVdContext.prototype.MUL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.MUL);}else{return this.getToken(VtlParser.MUL,i);}};DataPointVdContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDataPointVd(this);}};DataPointVdContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDataPointVd(this);}};DataPointVdContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDataPointVd(this);}else{return visitor.visitChildren(this);}};function DataPointVarContext(parser,ctx){DpRulesetContext.call(this,parser);DpRulesetContext.prototype.copyFrom.call(this,ctx);return this;}DataPointVarContext.prototype=Object.create(DpRulesetContext.prototype);DataPointVarContext.prototype.constructor=DataPointVarContext;VtlParser.DataPointVarContext=DataPointVarContext;DataPointVarContext.prototype.DATAPOINT_ON_VAR=function(){return this.getToken(VtlParser.DATAPOINT_ON_VAR,0);};DataPointVarContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};DataPointVarContext.prototype.varID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VarIDContext);}else{return this.getTypedRuleContext(VarIDContext,i);}};DataPointVarContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};DataPointVarContext.prototype.MUL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.MUL);}else{return this.getToken(VtlParser.MUL,i);}};DataPointVarContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDataPointVar(this);}};DataPointVarContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDataPointVar(this);}};DataPointVarContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDataPointVar(this);}else{return visitor.visitChildren(this);}};function DataPointContext(parser,ctx){DpRulesetContext.call(this,parser);DpRulesetContext.prototype.copyFrom.call(this,ctx);return this;}DataPointContext.prototype=Object.create(DpRulesetContext.prototype);DataPointContext.prototype.constructor=DataPointContext;VtlParser.DataPointContext=DataPointContext;DataPointContext.prototype.DATAPOINT=function(){return this.getToken(VtlParser.DATAPOINT,0);};DataPointContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterDataPoint(this);}};DataPointContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitDataPoint(this);}};DataPointContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitDataPoint(this);}else{return visitor.visitChildren(this);}};VtlParser.DpRulesetContext=DpRulesetContext;VtlParser.prototype.dpRuleset=function(){var localctx=new DpRulesetContext(this,this._ctx,this.state);this.enterRule(localctx,112,VtlParser.RULE_dpRuleset);var _la=0;// Token type\ntry{this.state=1549;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.DATAPOINT:localctx=new DataPointContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1520;this.match(VtlParser.DATAPOINT);break;case VtlParser.DATAPOINT_ON_VD:localctx=new DataPointVdContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1521;this.match(VtlParser.DATAPOINT_ON_VD);this.state=1533;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN){this.state=1522;this.match(VtlParser.GLPAREN);this.state=1523;this.valueDomainName();this.state=1528;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.MUL){this.state=1524;this.match(VtlParser.MUL);this.state=1525;this.valueDomainName();this.state=1530;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1531;this.match(VtlParser.GRPAREN);}break;case VtlParser.DATAPOINT_ON_VAR:localctx=new DataPointVarContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=1535;this.match(VtlParser.DATAPOINT_ON_VAR);this.state=1547;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN){this.state=1536;this.match(VtlParser.GLPAREN);this.state=1537;this.varID();this.state=1542;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.MUL){this.state=1538;this.match(VtlParser.MUL);this.state=1539;this.varID();this.state=1544;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1545;this.match(VtlParser.GRPAREN);}break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HrRulesetContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_hrRuleset;return this;}HrRulesetContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HrRulesetContext.prototype.constructor=HrRulesetContext;HrRulesetContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function HrRulesetVdTypeContext(parser,ctx){HrRulesetContext.call(this,parser);this.vdName=null;// Token;\nHrRulesetContext.prototype.copyFrom.call(this,ctx);return this;}HrRulesetVdTypeContext.prototype=Object.create(HrRulesetContext.prototype);HrRulesetVdTypeContext.prototype.constructor=HrRulesetVdTypeContext;VtlParser.HrRulesetVdTypeContext=HrRulesetVdTypeContext;HrRulesetVdTypeContext.prototype.HIERARCHICAL_ON_VD=function(){return this.getToken(VtlParser.HIERARCHICAL_ON_VD,0);};HrRulesetVdTypeContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};HrRulesetVdTypeContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};HrRulesetVdTypeContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};HrRulesetVdTypeContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};HrRulesetVdTypeContext.prototype.valueDomainName=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ValueDomainNameContext);}else{return this.getTypedRuleContext(ValueDomainNameContext,i);}};HrRulesetVdTypeContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};HrRulesetVdTypeContext.prototype.MUL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.MUL);}else{return this.getToken(VtlParser.MUL,i);}};HrRulesetVdTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHrRulesetVdType(this);}};HrRulesetVdTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHrRulesetVdType(this);}};HrRulesetVdTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHrRulesetVdType(this);}else{return visitor.visitChildren(this);}};function HrRulesetVarTypeContext(parser,ctx){HrRulesetContext.call(this,parser);this.varName=null;// VarIDContext;\nHrRulesetContext.prototype.copyFrom.call(this,ctx);return this;}HrRulesetVarTypeContext.prototype=Object.create(HrRulesetContext.prototype);HrRulesetVarTypeContext.prototype.constructor=HrRulesetVarTypeContext;VtlParser.HrRulesetVarTypeContext=HrRulesetVarTypeContext;HrRulesetVarTypeContext.prototype.HIERARCHICAL_ON_VAR=function(){return this.getToken(VtlParser.HIERARCHICAL_ON_VAR,0);};HrRulesetVarTypeContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};HrRulesetVarTypeContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};HrRulesetVarTypeContext.prototype.varID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VarIDContext);}else{return this.getTypedRuleContext(VarIDContext,i);}};HrRulesetVarTypeContext.prototype.LPAREN=function(){return this.getToken(VtlParser.LPAREN,0);};HrRulesetVarTypeContext.prototype.RPAREN=function(){return this.getToken(VtlParser.RPAREN,0);};HrRulesetVarTypeContext.prototype.MUL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.MUL);}else{return this.getToken(VtlParser.MUL,i);}};HrRulesetVarTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHrRulesetVarType(this);}};HrRulesetVarTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHrRulesetVarType(this);}};HrRulesetVarTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHrRulesetVarType(this);}else{return visitor.visitChildren(this);}};function HrRulesetTypeContext(parser,ctx){HrRulesetContext.call(this,parser);HrRulesetContext.prototype.copyFrom.call(this,ctx);return this;}HrRulesetTypeContext.prototype=Object.create(HrRulesetContext.prototype);HrRulesetTypeContext.prototype.constructor=HrRulesetTypeContext;VtlParser.HrRulesetTypeContext=HrRulesetTypeContext;HrRulesetTypeContext.prototype.HIERARCHICAL=function(){return this.getToken(VtlParser.HIERARCHICAL,0);};HrRulesetTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHrRulesetType(this);}};HrRulesetTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHrRulesetType(this);}};HrRulesetTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHrRulesetType(this);}else{return visitor.visitChildren(this);}};VtlParser.HrRulesetContext=HrRulesetContext;VtlParser.prototype.hrRuleset=function(){var localctx=new HrRulesetContext(this,this._ctx,this.state);this.enterRule(localctx,114,VtlParser.RULE_hrRuleset);var _la=0;// Token type\ntry{this.state=1591;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.HIERARCHICAL:localctx=new HrRulesetTypeContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1551;this.match(VtlParser.HIERARCHICAL);break;case VtlParser.HIERARCHICAL_ON_VD:localctx=new HrRulesetVdTypeContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1552;this.match(VtlParser.HIERARCHICAL_ON_VD);this.state=1569;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN){this.state=1553;this.match(VtlParser.GLPAREN);this.state=1554;localctx.vdName=this.match(VtlParser.IDENTIFIER);this.state=1566;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.LPAREN){this.state=1555;this.match(VtlParser.LPAREN);this.state=1556;this.valueDomainName();this.state=1561;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.MUL){this.state=1557;this.match(VtlParser.MUL);this.state=1558;this.valueDomainName();this.state=1563;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1564;this.match(VtlParser.RPAREN);}this.state=1568;this.match(VtlParser.GRPAREN);}break;case VtlParser.HIERARCHICAL_ON_VAR:localctx=new HrRulesetVarTypeContext(this,localctx);this.enterOuterAlt(localctx,3);this.state=1571;this.match(VtlParser.HIERARCHICAL_ON_VAR);this.state=1589;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.GLPAREN){this.state=1572;this.match(VtlParser.GLPAREN);this.state=1573;localctx.varName=this.varID();this.state=1585;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.LPAREN){this.state=1574;this.match(VtlParser.LPAREN);this.state=1575;this.varID();this.state=1580;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.MUL){this.state=1576;this.match(VtlParser.MUL);this.state=1577;this.varID();this.state=1582;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1583;this.match(VtlParser.RPAREN);}this.state=1587;this.match(VtlParser.GRPAREN);}break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValueDomainNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_valueDomainName;return this;}ValueDomainNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValueDomainNameContext.prototype.constructor=ValueDomainNameContext;ValueDomainNameContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};ValueDomainNameContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValueDomainName(this);}};ValueDomainNameContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValueDomainName(this);}};ValueDomainNameContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValueDomainName(this);}else{return visitor.visitChildren(this);}};VtlParser.ValueDomainNameContext=ValueDomainNameContext;VtlParser.prototype.valueDomainName=function(){var localctx=new ValueDomainNameContext(this,this._ctx,this.state);this.enterRule(localctx,116,VtlParser.RULE_valueDomainName);try{this.enterOuterAlt(localctx,1);this.state=1593;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RulesetIDContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_rulesetID;return this;}RulesetIDContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RulesetIDContext.prototype.constructor=RulesetIDContext;RulesetIDContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};RulesetIDContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRulesetID(this);}};RulesetIDContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRulesetID(this);}};RulesetIDContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRulesetID(this);}else{return visitor.visitChildren(this);}};VtlParser.RulesetIDContext=RulesetIDContext;VtlParser.prototype.rulesetID=function(){var localctx=new RulesetIDContext(this,this._ctx,this.state);this.enterRule(localctx,118,VtlParser.RULE_rulesetID);try{this.enterOuterAlt(localctx,1);this.state=1595;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RulesetSignatureContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_rulesetSignature;return this;}RulesetSignatureContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RulesetSignatureContext.prototype.constructor=RulesetSignatureContext;RulesetSignatureContext.prototype.signature=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SignatureContext);}else{return this.getTypedRuleContext(SignatureContext,i);}};RulesetSignatureContext.prototype.VALUE_DOMAIN=function(){return this.getToken(VtlParser.VALUE_DOMAIN,0);};RulesetSignatureContext.prototype.VARIABLE=function(){return this.getToken(VtlParser.VARIABLE,0);};RulesetSignatureContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};RulesetSignatureContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRulesetSignature(this);}};RulesetSignatureContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRulesetSignature(this);}};RulesetSignatureContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRulesetSignature(this);}else{return visitor.visitChildren(this);}};VtlParser.RulesetSignatureContext=RulesetSignatureContext;VtlParser.prototype.rulesetSignature=function(){var localctx=new RulesetSignatureContext(this,this._ctx,this.state);this.enterRule(localctx,120,VtlParser.RULE_rulesetSignature);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1597;_la=this._input.LA(1);if(!(_la===VtlParser.VALUE_DOMAIN||_la===VtlParser.VARIABLE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1598;this.signature();this.state=1603;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1599;this.match(VtlParser.COMMA);this.state=1600;this.signature();this.state=1605;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function SignatureContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_signature;return this;}SignatureContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);SignatureContext.prototype.constructor=SignatureContext;SignatureContext.prototype.varID=function(){return this.getTypedRuleContext(VarIDContext,0);};SignatureContext.prototype.AS=function(){return this.getToken(VtlParser.AS,0);};SignatureContext.prototype.alias=function(){return this.getTypedRuleContext(AliasContext,0);};SignatureContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterSignature(this);}};SignatureContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitSignature(this);}};SignatureContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitSignature(this);}else{return visitor.visitChildren(this);}};VtlParser.SignatureContext=SignatureContext;VtlParser.prototype.signature=function(){var localctx=new SignatureContext(this,this._ctx,this.state);this.enterRule(localctx,122,VtlParser.RULE_signature);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1606;this.varID();this.state=1609;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.AS){this.state=1607;this.match(VtlParser.AS);this.state=1608;this.alias();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RuleClauseDatapointContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_ruleClauseDatapoint;return this;}RuleClauseDatapointContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RuleClauseDatapointContext.prototype.constructor=RuleClauseDatapointContext;RuleClauseDatapointContext.prototype.ruleItemDatapoint=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RuleItemDatapointContext);}else{return this.getTypedRuleContext(RuleItemDatapointContext,i);}};RuleClauseDatapointContext.prototype.EOL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.EOL);}else{return this.getToken(VtlParser.EOL,i);}};RuleClauseDatapointContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRuleClauseDatapoint(this);}};RuleClauseDatapointContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRuleClauseDatapoint(this);}};RuleClauseDatapointContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRuleClauseDatapoint(this);}else{return visitor.visitChildren(this);}};VtlParser.RuleClauseDatapointContext=RuleClauseDatapointContext;VtlParser.prototype.ruleClauseDatapoint=function(){var localctx=new RuleClauseDatapointContext(this,this._ctx,this.state);this.enterRule(localctx,124,VtlParser.RULE_ruleClauseDatapoint);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1611;this.ruleItemDatapoint();this.state=1616;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.EOL){this.state=1612;this.match(VtlParser.EOL);this.state=1613;this.ruleItemDatapoint();this.state=1618;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RuleItemDatapointContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_ruleItemDatapoint;this.ruleName=null;// Token\nthis.antecedentContiditon=null;// ExprContext\nthis.consequentCondition=null;// ExprContext\nreturn this;}RuleItemDatapointContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RuleItemDatapointContext.prototype.constructor=RuleItemDatapointContext;RuleItemDatapointContext.prototype.expr=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ExprContext);}else{return this.getTypedRuleContext(ExprContext,i);}};RuleItemDatapointContext.prototype.WHEN=function(){return this.getToken(VtlParser.WHEN,0);};RuleItemDatapointContext.prototype.THEN=function(){return this.getToken(VtlParser.THEN,0);};RuleItemDatapointContext.prototype.erCode=function(){return this.getTypedRuleContext(ErCodeContext,0);};RuleItemDatapointContext.prototype.erLevel=function(){return this.getTypedRuleContext(ErLevelContext,0);};RuleItemDatapointContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};RuleItemDatapointContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRuleItemDatapoint(this);}};RuleItemDatapointContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRuleItemDatapoint(this);}};RuleItemDatapointContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRuleItemDatapoint(this);}else{return visitor.visitChildren(this);}};VtlParser.RuleItemDatapointContext=RuleItemDatapointContext;VtlParser.prototype.ruleItemDatapoint=function(){var localctx=new RuleItemDatapointContext(this,this._ctx,this.state);this.enterRule(localctx,126,VtlParser.RULE_ruleItemDatapoint);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1621;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,186,this._ctx);if(la_===1){this.state=1619;localctx.ruleName=this.match(VtlParser.IDENTIFIER);this.state=1620;this.match(VtlParser.T__0);}this.state=1627;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.WHEN){this.state=1623;this.match(VtlParser.WHEN);this.state=1624;localctx.antecedentContiditon=this.expr(0);this.state=1625;this.match(VtlParser.THEN);}this.state=1629;localctx.consequentCondition=this.expr(0);this.state=1631;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORCODE){this.state=1630;this.erCode();}this.state=1634;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORLEVEL){this.state=1633;this.erLevel();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RuleClauseHierarchicalContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_ruleClauseHierarchical;return this;}RuleClauseHierarchicalContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RuleClauseHierarchicalContext.prototype.constructor=RuleClauseHierarchicalContext;RuleClauseHierarchicalContext.prototype.ruleItemHierarchical=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(RuleItemHierarchicalContext);}else{return this.getTypedRuleContext(RuleItemHierarchicalContext,i);}};RuleClauseHierarchicalContext.prototype.EOL=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.EOL);}else{return this.getToken(VtlParser.EOL,i);}};RuleClauseHierarchicalContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRuleClauseHierarchical(this);}};RuleClauseHierarchicalContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRuleClauseHierarchical(this);}};RuleClauseHierarchicalContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRuleClauseHierarchical(this);}else{return visitor.visitChildren(this);}};VtlParser.RuleClauseHierarchicalContext=RuleClauseHierarchicalContext;VtlParser.prototype.ruleClauseHierarchical=function(){var localctx=new RuleClauseHierarchicalContext(this,this._ctx,this.state);this.enterRule(localctx,128,VtlParser.RULE_ruleClauseHierarchical);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1636;this.ruleItemHierarchical();this.state=1641;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.EOL){this.state=1637;this.match(VtlParser.EOL);this.state=1638;this.ruleItemHierarchical();this.state=1643;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RuleItemHierarchicalContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_ruleItemHierarchical;this.ruleName=null;// Token\nreturn this;}RuleItemHierarchicalContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RuleItemHierarchicalContext.prototype.constructor=RuleItemHierarchicalContext;RuleItemHierarchicalContext.prototype.codeItemRelation=function(){return this.getTypedRuleContext(CodeItemRelationContext,0);};RuleItemHierarchicalContext.prototype.erCode=function(){return this.getTypedRuleContext(ErCodeContext,0);};RuleItemHierarchicalContext.prototype.erLevel=function(){return this.getTypedRuleContext(ErLevelContext,0);};RuleItemHierarchicalContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};RuleItemHierarchicalContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRuleItemHierarchical(this);}};RuleItemHierarchicalContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRuleItemHierarchical(this);}};RuleItemHierarchicalContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRuleItemHierarchical(this);}else{return visitor.visitChildren(this);}};VtlParser.RuleItemHierarchicalContext=RuleItemHierarchicalContext;VtlParser.prototype.ruleItemHierarchical=function(){var localctx=new RuleItemHierarchicalContext(this,this._ctx,this.state);this.enterRule(localctx,130,VtlParser.RULE_ruleItemHierarchical);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1646;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,191,this._ctx);if(la_===1){this.state=1644;localctx.ruleName=this.match(VtlParser.IDENTIFIER);this.state=1645;this.match(VtlParser.T__0);}this.state=1648;this.codeItemRelation();this.state=1650;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORCODE){this.state=1649;this.erCode();}this.state=1653;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.ERRORLEVEL){this.state=1652;this.erLevel();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function HierRuleSignatureContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_hierRuleSignature;return this;}HierRuleSignatureContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);HierRuleSignatureContext.prototype.constructor=HierRuleSignatureContext;HierRuleSignatureContext.prototype.RULE=function(){return this.getToken(VtlParser.RULE,0);};HierRuleSignatureContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};HierRuleSignatureContext.prototype.VALUE_DOMAIN=function(){return this.getToken(VtlParser.VALUE_DOMAIN,0);};HierRuleSignatureContext.prototype.VARIABLE=function(){return this.getToken(VtlParser.VARIABLE,0);};HierRuleSignatureContext.prototype.CONDITION=function(){return this.getToken(VtlParser.CONDITION,0);};HierRuleSignatureContext.prototype.valueDomainSignature=function(){return this.getTypedRuleContext(ValueDomainSignatureContext,0);};HierRuleSignatureContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterHierRuleSignature(this);}};HierRuleSignatureContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitHierRuleSignature(this);}};HierRuleSignatureContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitHierRuleSignature(this);}else{return visitor.visitChildren(this);}};VtlParser.HierRuleSignatureContext=HierRuleSignatureContext;VtlParser.prototype.hierRuleSignature=function(){var localctx=new HierRuleSignatureContext(this,this._ctx,this.state);this.enterRule(localctx,132,VtlParser.RULE_hierRuleSignature);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1655;_la=this._input.LA(1);if(!(_la===VtlParser.VALUE_DOMAIN||_la===VtlParser.VARIABLE)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}this.state=1658;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.CONDITION){this.state=1656;this.match(VtlParser.CONDITION);this.state=1657;this.valueDomainSignature();}this.state=1660;this.match(VtlParser.RULE);this.state=1661;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValueDomainSignatureContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_valueDomainSignature;return this;}ValueDomainSignatureContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValueDomainSignatureContext.prototype.constructor=ValueDomainSignatureContext;ValueDomainSignatureContext.prototype.signature=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SignatureContext);}else{return this.getTypedRuleContext(SignatureContext,i);}};ValueDomainSignatureContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ValueDomainSignatureContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValueDomainSignature(this);}};ValueDomainSignatureContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValueDomainSignature(this);}};ValueDomainSignatureContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValueDomainSignature(this);}else{return visitor.visitChildren(this);}};VtlParser.ValueDomainSignatureContext=ValueDomainSignatureContext;VtlParser.prototype.valueDomainSignature=function(){var localctx=new ValueDomainSignatureContext(this,this._ctx,this.state);this.enterRule(localctx,134,VtlParser.RULE_valueDomainSignature);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1663;this.signature();this.state=1668;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1664;this.match(VtlParser.COMMA);this.state=1665;this.signature();this.state=1670;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CodeItemRelationContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_codeItemRelation;this.codeItemRef=null;// Token\nreturn this;}CodeItemRelationContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CodeItemRelationContext.prototype.constructor=CodeItemRelationContext;CodeItemRelationContext.prototype.codeItemRelationClause=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(CodeItemRelationClauseContext);}else{return this.getTypedRuleContext(CodeItemRelationClauseContext,i);}};CodeItemRelationContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};CodeItemRelationContext.prototype.WHEN=function(){return this.getToken(VtlParser.WHEN,0);};CodeItemRelationContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CodeItemRelationContext.prototype.THEN=function(){return this.getToken(VtlParser.THEN,0);};CodeItemRelationContext.prototype.comparisonOperand=function(){return this.getTypedRuleContext(ComparisonOperandContext,0);};CodeItemRelationContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCodeItemRelation(this);}};CodeItemRelationContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCodeItemRelation(this);}};CodeItemRelationContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCodeItemRelation(this);}else{return visitor.visitChildren(this);}};VtlParser.CodeItemRelationContext=CodeItemRelationContext;VtlParser.prototype.codeItemRelation=function(){var localctx=new CodeItemRelationContext(this,this._ctx,this.state);this.enterRule(localctx,136,VtlParser.RULE_codeItemRelation);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1675;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.WHEN){this.state=1671;this.match(VtlParser.WHEN);this.state=1672;this.expr(0);this.state=1673;this.match(VtlParser.THEN);}this.state=1677;localctx.codeItemRef=this.match(VtlParser.IDENTIFIER);this.state=1679;this._errHandler.sync(this);_la=this._input.LA(1);if((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.EQ|1<<VtlParser.NEQ|1<<VtlParser.LT|1<<VtlParser.MT|1<<VtlParser.LE|1<<VtlParser.ME))!==0){this.state=1678;this.comparisonOperand();}this.state=1681;this.codeItemRelationClause();this.state=1685;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.PLUS||_la===VtlParser.MINUS||_la===VtlParser.IDENTIFIER){this.state=1682;this.codeItemRelationClause();this.state=1687;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CodeItemRelationClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_codeItemRelationClause;this.opAdd=null;// Token\nthis.rightCodeItem=null;// Token\nthis.rightCondition=null;// ExprContext\nreturn this;}CodeItemRelationClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CodeItemRelationClauseContext.prototype.constructor=CodeItemRelationClauseContext;CodeItemRelationClauseContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};CodeItemRelationClauseContext.prototype.QLPAREN=function(){return this.getToken(VtlParser.QLPAREN,0);};CodeItemRelationClauseContext.prototype.QRPAREN=function(){return this.getToken(VtlParser.QRPAREN,0);};CodeItemRelationClauseContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};CodeItemRelationClauseContext.prototype.PLUS=function(){return this.getToken(VtlParser.PLUS,0);};CodeItemRelationClauseContext.prototype.MINUS=function(){return this.getToken(VtlParser.MINUS,0);};CodeItemRelationClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCodeItemRelationClause(this);}};CodeItemRelationClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCodeItemRelationClause(this);}};CodeItemRelationClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCodeItemRelationClause(this);}else{return visitor.visitChildren(this);}};VtlParser.CodeItemRelationClauseContext=CodeItemRelationClauseContext;VtlParser.prototype.codeItemRelationClause=function(){var localctx=new CodeItemRelationClauseContext(this,this._ctx,this.state);this.enterRule(localctx,138,VtlParser.RULE_codeItemRelationClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1689;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PLUS||_la===VtlParser.MINUS){this.state=1688;localctx.opAdd=this._input.LT(1);_la=this._input.LA(1);if(!(_la===VtlParser.PLUS||_la===VtlParser.MINUS)){localctx.opAdd=this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}this.state=1691;localctx.rightCodeItem=this.match(VtlParser.IDENTIFIER);this.state=1696;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.QLPAREN){this.state=1692;this.match(VtlParser.QLPAREN);this.state=1693;localctx.rightCondition=this.expr(0);this.state=1694;this.match(VtlParser.QRPAREN);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ScalarTypeConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_scalarTypeConstraint;return this;}ScalarTypeConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ScalarTypeConstraintContext.prototype.constructor=ScalarTypeConstraintContext;ScalarTypeConstraintContext.prototype.copyFrom=function(ctx){antlr4.ParserRuleContext.prototype.copyFrom.call(this,ctx);};function RangeConstraintContext(parser,ctx){ScalarTypeConstraintContext.call(this,parser);ScalarTypeConstraintContext.prototype.copyFrom.call(this,ctx);return this;}RangeConstraintContext.prototype=Object.create(ScalarTypeConstraintContext.prototype);RangeConstraintContext.prototype.constructor=RangeConstraintContext;VtlParser.RangeConstraintContext=RangeConstraintContext;RangeConstraintContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};RangeConstraintContext.prototype.constant=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConstantContext);}else{return this.getTypedRuleContext(ConstantContext,i);}};RangeConstraintContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};RangeConstraintContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};RangeConstraintContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRangeConstraint(this);}};RangeConstraintContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRangeConstraint(this);}};RangeConstraintContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRangeConstraint(this);}else{return visitor.visitChildren(this);}};function ConditionConstraintContext(parser,ctx){ScalarTypeConstraintContext.call(this,parser);ScalarTypeConstraintContext.prototype.copyFrom.call(this,ctx);return this;}ConditionConstraintContext.prototype=Object.create(ScalarTypeConstraintContext.prototype);ConditionConstraintContext.prototype.constructor=ConditionConstraintContext;VtlParser.ConditionConstraintContext=ConditionConstraintContext;ConditionConstraintContext.prototype.QLPAREN=function(){return this.getToken(VtlParser.QLPAREN,0);};ConditionConstraintContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ConditionConstraintContext.prototype.QRPAREN=function(){return this.getToken(VtlParser.QRPAREN,0);};ConditionConstraintContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConditionConstraint(this);}};ConditionConstraintContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConditionConstraint(this);}};ConditionConstraintContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConditionConstraint(this);}else{return visitor.visitChildren(this);}};VtlParser.ScalarTypeConstraintContext=ScalarTypeConstraintContext;VtlParser.prototype.scalarTypeConstraint=function(){var localctx=new ScalarTypeConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,140,VtlParser.RULE_scalarTypeConstraint);var _la=0;// Token type\ntry{this.state=1713;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.QLPAREN:localctx=new ConditionConstraintContext(this,localctx);this.enterOuterAlt(localctx,1);this.state=1698;this.match(VtlParser.QLPAREN);this.state=1699;this.expr(0);this.state=1700;this.match(VtlParser.QRPAREN);break;case VtlParser.GLPAREN:localctx=new RangeConstraintContext(this,localctx);this.enterOuterAlt(localctx,2);this.state=1702;this.match(VtlParser.GLPAREN);this.state=1703;this.constant();this.state=1708;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1704;this.match(VtlParser.COMMA);this.state=1705;this.constant();this.state=1710;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1711;this.match(VtlParser.GRPAREN);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function CompConstraintContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_compConstraint;return this;}CompConstraintContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);CompConstraintContext.prototype.constructor=CompConstraintContext;CompConstraintContext.prototype.componentType=function(){return this.getTypedRuleContext(ComponentTypeContext,0);};CompConstraintContext.prototype.componentID=function(){return this.getTypedRuleContext(ComponentIDContext,0);};CompConstraintContext.prototype.multModifier=function(){return this.getTypedRuleContext(MultModifierContext,0);};CompConstraintContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterCompConstraint(this);}};CompConstraintContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitCompConstraint(this);}};CompConstraintContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitCompConstraint(this);}else{return visitor.visitChildren(this);}};VtlParser.CompConstraintContext=CompConstraintContext;VtlParser.prototype.compConstraint=function(){var localctx=new CompConstraintContext(this,this._ctx,this.state);this.enterRule(localctx,142,VtlParser.RULE_compConstraint);try{this.enterOuterAlt(localctx,1);this.state=1715;this.componentType();this.state=1718;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.IDENTIFIER:this.state=1716;this.componentID();break;case VtlParser.OPTIONAL:this.state=1717;this.multModifier();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function MultModifierContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_multModifier;return this;}MultModifierContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);MultModifierContext.prototype.constructor=MultModifierContext;MultModifierContext.prototype.OPTIONAL=function(){return this.getToken(VtlParser.OPTIONAL,0);};MultModifierContext.prototype.PLUS=function(){return this.getToken(VtlParser.PLUS,0);};MultModifierContext.prototype.MUL=function(){return this.getToken(VtlParser.MUL,0);};MultModifierContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterMultModifier(this);}};MultModifierContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitMultModifier(this);}};MultModifierContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitMultModifier(this);}else{return visitor.visitChildren(this);}};VtlParser.MultModifierContext=MultModifierContext;VtlParser.prototype.multModifier=function(){var localctx=new MultModifierContext(this,this._ctx,this.state);this.enterRule(localctx,144,VtlParser.RULE_multModifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1720;this.match(VtlParser.OPTIONAL);this.state=1722;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===VtlParser.PLUS||_la===VtlParser.MUL){this.state=1721;_la=this._input.LA(1);if(!(_la===VtlParser.PLUS||_la===VtlParser.MUL)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValidationOutputContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_validationOutput;return this;}ValidationOutputContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValidationOutputContext.prototype.constructor=ValidationOutputContext;ValidationOutputContext.prototype.INVALID=function(){return this.getToken(VtlParser.INVALID,0);};ValidationOutputContext.prototype.ALL_MEASURES=function(){return this.getToken(VtlParser.ALL_MEASURES,0);};ValidationOutputContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};ValidationOutputContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidationOutput(this);}};ValidationOutputContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidationOutput(this);}};ValidationOutputContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidationOutput(this);}else{return visitor.visitChildren(this);}};VtlParser.ValidationOutputContext=ValidationOutputContext;VtlParser.prototype.validationOutput=function(){var localctx=new ValidationOutputContext(this,this._ctx,this.state);this.enterRule(localctx,146,VtlParser.RULE_validationOutput);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1724;_la=this._input.LA(1);if(!(_la===VtlParser.ALL||_la===VtlParser.INVALID||_la===VtlParser.ALL_MEASURES)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValidationModeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_validationMode;return this;}ValidationModeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValidationModeContext.prototype.constructor=ValidationModeContext;ValidationModeContext.prototype.NON_NULL=function(){return this.getToken(VtlParser.NON_NULL,0);};ValidationModeContext.prototype.NON_ZERO=function(){return this.getToken(VtlParser.NON_ZERO,0);};ValidationModeContext.prototype.PARTIAL_NULL=function(){return this.getToken(VtlParser.PARTIAL_NULL,0);};ValidationModeContext.prototype.PARTIAL_ZERO=function(){return this.getToken(VtlParser.PARTIAL_ZERO,0);};ValidationModeContext.prototype.ALWAYS_NULL=function(){return this.getToken(VtlParser.ALWAYS_NULL,0);};ValidationModeContext.prototype.ALWAYS_ZERO=function(){return this.getToken(VtlParser.ALWAYS_ZERO,0);};ValidationModeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValidationMode(this);}};ValidationModeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValidationMode(this);}};ValidationModeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValidationMode(this);}else{return visitor.visitChildren(this);}};VtlParser.ValidationModeContext=ValidationModeContext;VtlParser.prototype.validationMode=function(){var localctx=new ValidationModeContext(this,this._ctx,this.state);this.enterRule(localctx,148,VtlParser.RULE_validationMode);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1726;_la=this._input.LA(1);if(!((_la-211&~0x1f)==0&&(1<<_la-211&(1<<VtlParser.NON_NULL-211|1<<VtlParser.NON_ZERO-211|1<<VtlParser.PARTIAL_NULL-211|1<<VtlParser.PARTIAL_ZERO-211|1<<VtlParser.ALWAYS_NULL-211|1<<VtlParser.ALWAYS_ZERO-211))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ConditionClauseContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_conditionClause;return this;}ConditionClauseContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ConditionClauseContext.prototype.constructor=ConditionClauseContext;ConditionClauseContext.prototype.CONDITION=function(){return this.getToken(VtlParser.CONDITION,0);};ConditionClauseContext.prototype.componentID=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ComponentIDContext);}else{return this.getTypedRuleContext(ComponentIDContext,i);}};ConditionClauseContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ConditionClauseContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConditionClause(this);}};ConditionClauseContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConditionClause(this);}};ConditionClauseContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConditionClause(this);}else{return visitor.visitChildren(this);}};VtlParser.ConditionClauseContext=ConditionClauseContext;VtlParser.prototype.conditionClause=function(){var localctx=new ConditionClauseContext(this,this._ctx,this.state);this.enterRule(localctx,150,VtlParser.RULE_conditionClause);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1728;this.match(VtlParser.CONDITION);this.state=1729;this.componentID();this.state=1734;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1730;this.match(VtlParser.COMMA);this.state=1731;this.componentID();this.state=1736;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function InputModeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_inputMode;return this;}InputModeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);InputModeContext.prototype.constructor=InputModeContext;InputModeContext.prototype.DATASET=function(){return this.getToken(VtlParser.DATASET,0);};InputModeContext.prototype.DATASET_PRIORITY=function(){return this.getToken(VtlParser.DATASET_PRIORITY,0);};InputModeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterInputMode(this);}};InputModeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitInputMode(this);}};InputModeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitInputMode(this);}else{return visitor.visitChildren(this);}};VtlParser.InputModeContext=InputModeContext;VtlParser.prototype.inputMode=function(){var localctx=new InputModeContext(this,this._ctx,this.state);this.enterRule(localctx,152,VtlParser.RULE_inputMode);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1737;_la=this._input.LA(1);if(!(_la===VtlParser.DATASET||_la===VtlParser.DATASET_PRIORITY)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ImbalanceExprContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_imbalanceExpr;return this;}ImbalanceExprContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ImbalanceExprContext.prototype.constructor=ImbalanceExprContext;ImbalanceExprContext.prototype.IMBALANCE=function(){return this.getToken(VtlParser.IMBALANCE,0);};ImbalanceExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};ImbalanceExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterImbalanceExpr(this);}};ImbalanceExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitImbalanceExpr(this);}};ImbalanceExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitImbalanceExpr(this);}else{return visitor.visitChildren(this);}};VtlParser.ImbalanceExprContext=ImbalanceExprContext;VtlParser.prototype.imbalanceExpr=function(){var localctx=new ImbalanceExprContext(this,this._ctx,this.state);this.enterRule(localctx,154,VtlParser.RULE_imbalanceExpr);try{this.enterOuterAlt(localctx,1);this.state=1739;this.match(VtlParser.IMBALANCE);this.state=1740;this.expr(0);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function InputModeHierarchyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_inputModeHierarchy;return this;}InputModeHierarchyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);InputModeHierarchyContext.prototype.constructor=InputModeHierarchyContext;InputModeHierarchyContext.prototype.RULE=function(){return this.getToken(VtlParser.RULE,0);};InputModeHierarchyContext.prototype.DATASET=function(){return this.getToken(VtlParser.DATASET,0);};InputModeHierarchyContext.prototype.RULE_PRIORITY=function(){return this.getToken(VtlParser.RULE_PRIORITY,0);};InputModeHierarchyContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterInputModeHierarchy(this);}};InputModeHierarchyContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitInputModeHierarchy(this);}};InputModeHierarchyContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitInputModeHierarchy(this);}else{return visitor.visitChildren(this);}};VtlParser.InputModeHierarchyContext=InputModeHierarchyContext;VtlParser.prototype.inputModeHierarchy=function(){var localctx=new InputModeHierarchyContext(this,this._ctx,this.state);this.enterRule(localctx,156,VtlParser.RULE_inputModeHierarchy);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1742;_la=this._input.LA(1);if(!(_la===VtlParser.DATASET||_la===VtlParser.RULE||_la===VtlParser.RULE_PRIORITY)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OutputModeHierarchyContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_outputModeHierarchy;return this;}OutputModeHierarchyContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OutputModeHierarchyContext.prototype.constructor=OutputModeHierarchyContext;OutputModeHierarchyContext.prototype.COMPUTED=function(){return this.getToken(VtlParser.COMPUTED,0);};OutputModeHierarchyContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};OutputModeHierarchyContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOutputModeHierarchy(this);}};OutputModeHierarchyContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOutputModeHierarchy(this);}};OutputModeHierarchyContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOutputModeHierarchy(this);}else{return visitor.visitChildren(this);}};VtlParser.OutputModeHierarchyContext=OutputModeHierarchyContext;VtlParser.prototype.outputModeHierarchy=function(){var localctx=new OutputModeHierarchyContext(this,this._ctx,this.state);this.enterRule(localctx,158,VtlParser.RULE_outputModeHierarchy);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1744;_la=this._input.LA(1);if(!(_la===VtlParser.ALL||_la===VtlParser.COMPUTED)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function AliasContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_alias;return this;}AliasContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);AliasContext.prototype.constructor=AliasContext;AliasContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};AliasContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterAlias(this);}};AliasContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitAlias(this);}};AliasContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitAlias(this);}else{return visitor.visitChildren(this);}};VtlParser.AliasContext=AliasContext;VtlParser.prototype.alias=function(){var localctx=new AliasContext(this,this._ctx,this.state);this.enterRule(localctx,160,VtlParser.RULE_alias);try{this.enterOuterAlt(localctx,1);this.state=1746;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function VarIDContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_varID;return this;}VarIDContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);VarIDContext.prototype.constructor=VarIDContext;VarIDContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};VarIDContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterVarID(this);}};VarIDContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitVarID(this);}};VarIDContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitVarID(this);}else{return visitor.visitChildren(this);}};VtlParser.VarIDContext=VarIDContext;VtlParser.prototype.varID=function(){var localctx=new VarIDContext(this,this._ctx,this.state);this.enterRule(localctx,162,VtlParser.RULE_varID);try{this.enterOuterAlt(localctx,1);this.state=1748;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComponentIDContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_componentID;return this;}ComponentIDContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComponentIDContext.prototype.constructor=ComponentIDContext;ComponentIDContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};ComponentIDContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComponentID(this);}};ComponentIDContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComponentID(this);}};ComponentIDContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComponentID(this);}else{return visitor.visitChildren(this);}};VtlParser.ComponentIDContext=ComponentIDContext;VtlParser.prototype.componentID=function(){var localctx=new ComponentIDContext(this,this._ctx,this.state);this.enterRule(localctx,164,VtlParser.RULE_componentID);try{this.enterOuterAlt(localctx,1);this.state=1750;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ListsContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_lists;return this;}ListsContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ListsContext.prototype.constructor=ListsContext;ListsContext.prototype.GLPAREN=function(){return this.getToken(VtlParser.GLPAREN,0);};ListsContext.prototype.constant=function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(ConstantContext);}else{return this.getTypedRuleContext(ConstantContext,i);}};ListsContext.prototype.GRPAREN=function(){return this.getToken(VtlParser.GRPAREN,0);};ListsContext.prototype.COMMA=function(i){if(i===undefined){i=null;}if(i===null){return this.getTokens(VtlParser.COMMA);}else{return this.getToken(VtlParser.COMMA,i);}};ListsContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterLists(this);}};ListsContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitLists(this);}};ListsContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitLists(this);}else{return visitor.visitChildren(this);}};VtlParser.ListsContext=ListsContext;VtlParser.prototype.lists=function(){var localctx=new ListsContext(this,this._ctx,this.state);this.enterRule(localctx,166,VtlParser.RULE_lists);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1752;this.match(VtlParser.GLPAREN);this.state=1753;this.constant();this.state=1758;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===VtlParser.COMMA){this.state=1754;this.match(VtlParser.COMMA);this.state=1755;this.constant();this.state=1760;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=1761;this.match(VtlParser.GRPAREN);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ErCodeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_erCode;return this;}ErCodeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ErCodeContext.prototype.constructor=ErCodeContext;ErCodeContext.prototype.ERRORCODE=function(){return this.getToken(VtlParser.ERRORCODE,0);};ErCodeContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};ErCodeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterErCode(this);}};ErCodeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitErCode(this);}};ErCodeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitErCode(this);}else{return visitor.visitChildren(this);}};VtlParser.ErCodeContext=ErCodeContext;VtlParser.prototype.erCode=function(){var localctx=new ErCodeContext(this,this._ctx,this.state);this.enterRule(localctx,168,VtlParser.RULE_erCode);try{this.enterOuterAlt(localctx,1);this.state=1763;this.match(VtlParser.ERRORCODE);this.state=1764;this.constant();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ErLevelContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_erLevel;return this;}ErLevelContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ErLevelContext.prototype.constructor=ErLevelContext;ErLevelContext.prototype.ERRORLEVEL=function(){return this.getToken(VtlParser.ERRORLEVEL,0);};ErLevelContext.prototype.constant=function(){return this.getTypedRuleContext(ConstantContext,0);};ErLevelContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterErLevel(this);}};ErLevelContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitErLevel(this);}};ErLevelContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitErLevel(this);}else{return visitor.visitChildren(this);}};VtlParser.ErLevelContext=ErLevelContext;VtlParser.prototype.erLevel=function(){var localctx=new ErLevelContext(this,this._ctx,this.state);this.enterRule(localctx,170,VtlParser.RULE_erLevel);try{this.enterOuterAlt(localctx,1);this.state=1766;this.match(VtlParser.ERRORLEVEL);this.state=1767;this.constant();}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComparisonOperandContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_comparisonOperand;return this;}ComparisonOperandContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComparisonOperandContext.prototype.constructor=ComparisonOperandContext;ComparisonOperandContext.prototype.MT=function(){return this.getToken(VtlParser.MT,0);};ComparisonOperandContext.prototype.ME=function(){return this.getToken(VtlParser.ME,0);};ComparisonOperandContext.prototype.LE=function(){return this.getToken(VtlParser.LE,0);};ComparisonOperandContext.prototype.LT=function(){return this.getToken(VtlParser.LT,0);};ComparisonOperandContext.prototype.EQ=function(){return this.getToken(VtlParser.EQ,0);};ComparisonOperandContext.prototype.NEQ=function(){return this.getToken(VtlParser.NEQ,0);};ComparisonOperandContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComparisonOperand(this);}};ComparisonOperandContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComparisonOperand(this);}};ComparisonOperandContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComparisonOperand(this);}else{return visitor.visitChildren(this);}};VtlParser.ComparisonOperandContext=ComparisonOperandContext;VtlParser.prototype.comparisonOperand=function(){var localctx=new ComparisonOperandContext(this,this._ctx,this.state);this.enterRule(localctx,172,VtlParser.RULE_comparisonOperand);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1769;_la=this._input.LA(1);if(!((_la&~0x1f)==0&&(1<<_la&(1<<VtlParser.EQ|1<<VtlParser.NEQ|1<<VtlParser.LT|1<<VtlParser.MT|1<<VtlParser.LE|1<<VtlParser.ME))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OptionalExprContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_optionalExpr;return this;}OptionalExprContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OptionalExprContext.prototype.constructor=OptionalExprContext;OptionalExprContext.prototype.expr=function(){return this.getTypedRuleContext(ExprContext,0);};OptionalExprContext.prototype.OPTIONAL=function(){return this.getToken(VtlParser.OPTIONAL,0);};OptionalExprContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOptionalExpr(this);}};OptionalExprContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOptionalExpr(this);}};OptionalExprContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOptionalExpr(this);}else{return visitor.visitChildren(this);}};VtlParser.OptionalExprContext=OptionalExprContext;VtlParser.prototype.optionalExpr=function(){var localctx=new OptionalExprContext(this,this._ctx,this.state);this.enterRule(localctx,174,VtlParser.RULE_optionalExpr);try{this.state=1773;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.LPAREN:case VtlParser.PLUS:case VtlParser.MINUS:case VtlParser.EVAL:case VtlParser.IF:case VtlParser.CURRENT_DATE:case VtlParser.NOT:case VtlParser.BETWEEN:case VtlParser.ISNULL:case VtlParser.UNION:case VtlParser.SYMDIFF:case VtlParser.INTERSECT:case VtlParser.CHECK:case VtlParser.EXISTS_IN:case VtlParser.RANK:case VtlParser.MIN:case VtlParser.MAX:case VtlParser.ABS:case VtlParser.LN:case VtlParser.LOG:case VtlParser.TRUNC:case VtlParser.ROUND:case VtlParser.POWER:case VtlParser.MOD:case VtlParser.LEN:case VtlParser.TRIM:case VtlParser.UCASE:case VtlParser.LCASE:case VtlParser.SUBSTR:case VtlParser.SUM:case VtlParser.AVG:case VtlParser.MEDIAN:case VtlParser.COUNT:case VtlParser.EXP:case VtlParser.CHARSET_MATCH:case VtlParser.NVL:case VtlParser.HIERARCHY:case VtlParser.LTRIM:case VtlParser.RTRIM:case VtlParser.INSTR:case VtlParser.REPLACE:case VtlParser.CEIL:case VtlParser.FLOOR:case VtlParser.SQRT:case VtlParser.SETDIFF:case VtlParser.STDDEV_POP:case VtlParser.STDDEV_SAMP:case VtlParser.VAR_POP:case VtlParser.VAR_SAMP:case VtlParser.FIRST_VALUE:case VtlParser.LAST_VALUE:case VtlParser.LAG:case VtlParser.LEAD:case VtlParser.RATIO_TO_REPORT:case VtlParser.FILL_TIME_SERIES:case VtlParser.FLOW_TO_STOCK:case VtlParser.STOCK_TO_FLOW:case VtlParser.TIMESHIFT:case VtlParser.INNER_JOIN:case VtlParser.LEFT_JOIN:case VtlParser.CROSS_JOIN:case VtlParser.FULL_JOIN:case VtlParser.PERIOD_INDICATOR:case VtlParser.TIME_AGG:case VtlParser.CAST:case VtlParser.CHECK_DATAPOINT:case VtlParser.CHECK_HIERARCHY:case VtlParser.INTEGER_CONSTANT:case VtlParser.FLOAT_CONSTANT:case VtlParser.BOOLEAN_CONSTANT:case VtlParser.NULL_CONSTANT:case VtlParser.STRING_CONSTANT:case VtlParser.IDENTIFIER:this.enterOuterAlt(localctx,1);this.state=1771;this.expr(0);break;case VtlParser.OPTIONAL:this.enterOuterAlt(localctx,2);this.state=1772;this.match(VtlParser.OPTIONAL);break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ComponentRoleContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_componentRole;return this;}ComponentRoleContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ComponentRoleContext.prototype.constructor=ComponentRoleContext;ComponentRoleContext.prototype.MEASURE=function(){return this.getToken(VtlParser.MEASURE,0);};ComponentRoleContext.prototype.COMPONENT=function(){return this.getToken(VtlParser.COMPONENT,0);};ComponentRoleContext.prototype.DIMENSION=function(){return this.getToken(VtlParser.DIMENSION,0);};ComponentRoleContext.prototype.ATTRIBUTE=function(){return this.getToken(VtlParser.ATTRIBUTE,0);};ComponentRoleContext.prototype.viralAttribute=function(){return this.getTypedRuleContext(ViralAttributeContext,0);};ComponentRoleContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterComponentRole(this);}};ComponentRoleContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitComponentRole(this);}};ComponentRoleContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitComponentRole(this);}else{return visitor.visitChildren(this);}};VtlParser.ComponentRoleContext=ComponentRoleContext;VtlParser.prototype.componentRole=function(){var localctx=new ComponentRoleContext(this,this._ctx,this.state);this.enterRule(localctx,176,VtlParser.RULE_componentRole);try{this.state=1780;this._errHandler.sync(this);switch(this._input.LA(1)){case VtlParser.MEASURE:this.enterOuterAlt(localctx,1);this.state=1775;this.match(VtlParser.MEASURE);break;case VtlParser.COMPONENT:this.enterOuterAlt(localctx,2);this.state=1776;this.match(VtlParser.COMPONENT);break;case VtlParser.DIMENSION:this.enterOuterAlt(localctx,3);this.state=1777;this.match(VtlParser.DIMENSION);break;case VtlParser.ATTRIBUTE:this.enterOuterAlt(localctx,4);this.state=1778;this.match(VtlParser.ATTRIBUTE);break;case VtlParser.VIRAL:this.enterOuterAlt(localctx,5);this.state=1779;this.viralAttribute();break;default:throw new antlr4.error.NoViableAltException(this);}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ViralAttributeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_viralAttribute;return this;}ViralAttributeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ViralAttributeContext.prototype.constructor=ViralAttributeContext;ViralAttributeContext.prototype.VIRAL=function(){return this.getToken(VtlParser.VIRAL,0);};ViralAttributeContext.prototype.ATTRIBUTE=function(){return this.getToken(VtlParser.ATTRIBUTE,0);};ViralAttributeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterViralAttribute(this);}};ViralAttributeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitViralAttribute(this);}};ViralAttributeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitViralAttribute(this);}else{return visitor.visitChildren(this);}};VtlParser.ViralAttributeContext=ViralAttributeContext;VtlParser.prototype.viralAttribute=function(){var localctx=new ViralAttributeContext(this,this._ctx,this.state);this.enterRule(localctx,178,VtlParser.RULE_viralAttribute);try{this.enterOuterAlt(localctx,1);this.state=1782;this.match(VtlParser.VIRAL);this.state=1783;this.match(VtlParser.ATTRIBUTE);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ValueDomainIDContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_valueDomainID;return this;}ValueDomainIDContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ValueDomainIDContext.prototype.constructor=ValueDomainIDContext;ValueDomainIDContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};ValueDomainIDContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterValueDomainID(this);}};ValueDomainIDContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitValueDomainID(this);}};ValueDomainIDContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitValueDomainID(this);}else{return visitor.visitChildren(this);}};VtlParser.ValueDomainIDContext=ValueDomainIDContext;VtlParser.prototype.valueDomainID=function(){var localctx=new ValueDomainIDContext(this,this._ctx,this.state);this.enterRule(localctx,180,VtlParser.RULE_valueDomainID);try{this.enterOuterAlt(localctx,1);this.state=1785;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function OperatorIDContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_operatorID;return this;}OperatorIDContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);OperatorIDContext.prototype.constructor=OperatorIDContext;OperatorIDContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};OperatorIDContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterOperatorID(this);}};OperatorIDContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitOperatorID(this);}};OperatorIDContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitOperatorID(this);}else{return visitor.visitChildren(this);}};VtlParser.OperatorIDContext=OperatorIDContext;VtlParser.prototype.operatorID=function(){var localctx=new OperatorIDContext(this,this._ctx,this.state);this.enterRule(localctx,182,VtlParser.RULE_operatorID);try{this.enterOuterAlt(localctx,1);this.state=1787;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RoutineNameContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_routineName;return this;}RoutineNameContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RoutineNameContext.prototype.constructor=RoutineNameContext;RoutineNameContext.prototype.IDENTIFIER=function(){return this.getToken(VtlParser.IDENTIFIER,0);};RoutineNameContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRoutineName(this);}};RoutineNameContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRoutineName(this);}};RoutineNameContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRoutineName(this);}else{return visitor.visitChildren(this);}};VtlParser.RoutineNameContext=RoutineNameContext;VtlParser.prototype.routineName=function(){var localctx=new RoutineNameContext(this,this._ctx,this.state);this.enterRule(localctx,184,VtlParser.RULE_routineName);try{this.enterOuterAlt(localctx,1);this.state=1789;this.match(VtlParser.IDENTIFIER);}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function GroupKeywordContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_groupKeyword;return this;}GroupKeywordContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);GroupKeywordContext.prototype.constructor=GroupKeywordContext;GroupKeywordContext.prototype.GROUP=function(){return this.getToken(VtlParser.GROUP,0);};GroupKeywordContext.prototype.BY=function(){return this.getToken(VtlParser.BY,0);};GroupKeywordContext.prototype.EXCEPT=function(){return this.getToken(VtlParser.EXCEPT,0);};GroupKeywordContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterGroupKeyword(this);}};GroupKeywordContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitGroupKeyword(this);}};GroupKeywordContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitGroupKeyword(this);}else{return visitor.visitChildren(this);}};VtlParser.GroupKeywordContext=GroupKeywordContext;VtlParser.prototype.groupKeyword=function(){var localctx=new GroupKeywordContext(this,this._ctx,this.state);this.enterRule(localctx,186,VtlParser.RULE_groupKeyword);try{this.state=1795;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,209,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1791;this.match(VtlParser.GROUP);this.state=1792;this.match(VtlParser.BY);break;case 2:this.enterOuterAlt(localctx,2);this.state=1793;this.match(VtlParser.GROUP);this.state=1794;this.match(VtlParser.EXCEPT);break;}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function ConstantContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_constant;return this;}ConstantContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);ConstantContext.prototype.constructor=ConstantContext;ConstantContext.prototype.INTEGER_CONSTANT=function(){return this.getToken(VtlParser.INTEGER_CONSTANT,0);};ConstantContext.prototype.FLOAT_CONSTANT=function(){return this.getToken(VtlParser.FLOAT_CONSTANT,0);};ConstantContext.prototype.BOOLEAN_CONSTANT=function(){return this.getToken(VtlParser.BOOLEAN_CONSTANT,0);};ConstantContext.prototype.STRING_CONSTANT=function(){return this.getToken(VtlParser.STRING_CONSTANT,0);};ConstantContext.prototype.NULL_CONSTANT=function(){return this.getToken(VtlParser.NULL_CONSTANT,0);};ConstantContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterConstant(this);}};ConstantContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitConstant(this);}};ConstantContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitConstant(this);}else{return visitor.visitChildren(this);}};VtlParser.ConstantContext=ConstantContext;VtlParser.prototype.constant=function(){var localctx=new ConstantContext(this,this._ctx,this.state);this.enterRule(localctx,188,VtlParser.RULE_constant);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1797;_la=this._input.LA(1);if(!((_la-227&~0x1f)==0&&(1<<_la-227&(1<<VtlParser.INTEGER_CONSTANT-227|1<<VtlParser.FLOAT_CONSTANT-227|1<<VtlParser.BOOLEAN_CONSTANT-227|1<<VtlParser.NULL_CONSTANT-227|1<<VtlParser.STRING_CONSTANT-227))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function BasicScalarTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_basicScalarType;return this;}BasicScalarTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);BasicScalarTypeContext.prototype.constructor=BasicScalarTypeContext;BasicScalarTypeContext.prototype.STRING=function(){return this.getToken(VtlParser.STRING,0);};BasicScalarTypeContext.prototype.INTEGER=function(){return this.getToken(VtlParser.INTEGER,0);};BasicScalarTypeContext.prototype.NUMBER=function(){return this.getToken(VtlParser.NUMBER,0);};BasicScalarTypeContext.prototype.BOOLEAN=function(){return this.getToken(VtlParser.BOOLEAN,0);};BasicScalarTypeContext.prototype.DATE=function(){return this.getToken(VtlParser.DATE,0);};BasicScalarTypeContext.prototype.TIME_PERIOD=function(){return this.getToken(VtlParser.TIME_PERIOD,0);};BasicScalarTypeContext.prototype.DURATION=function(){return this.getToken(VtlParser.DURATION,0);};BasicScalarTypeContext.prototype.SCALAR=function(){return this.getToken(VtlParser.SCALAR,0);};BasicScalarTypeContext.prototype.TIME=function(){return this.getToken(VtlParser.TIME,0);};BasicScalarTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterBasicScalarType(this);}};BasicScalarTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitBasicScalarType(this);}};BasicScalarTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitBasicScalarType(this);}else{return visitor.visitChildren(this);}};VtlParser.BasicScalarTypeContext=BasicScalarTypeContext;VtlParser.prototype.basicScalarType=function(){var localctx=new BasicScalarTypeContext(this,this._ctx,this.state);this.enterRule(localctx,190,VtlParser.RULE_basicScalarType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1799;_la=this._input.LA(1);if(!((_la-156&~0x1f)==0&&(1<<_la-156&(1<<VtlParser.BOOLEAN-156|1<<VtlParser.DATE-156|1<<VtlParser.TIME_PERIOD-156|1<<VtlParser.NUMBER-156|1<<VtlParser.STRING-156|1<<VtlParser.INTEGER-156))!==0||_la===VtlParser.DURATION||_la===VtlParser.SCALAR||_la===VtlParser.TIME)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};function RetainTypeContext(parser,parent,invokingState){if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}antlr4.ParserRuleContext.call(this,parent,invokingState);this.parser=parser;this.ruleIndex=VtlParser.RULE_retainType;return this;}RetainTypeContext.prototype=Object.create(antlr4.ParserRuleContext.prototype);RetainTypeContext.prototype.constructor=RetainTypeContext;RetainTypeContext.prototype.BOOLEAN_CONSTANT=function(){return this.getToken(VtlParser.BOOLEAN_CONSTANT,0);};RetainTypeContext.prototype.ALL=function(){return this.getToken(VtlParser.ALL,0);};RetainTypeContext.prototype.enterRule=function(listener){if(listener instanceof VtlListener){listener.enterRetainType(this);}};RetainTypeContext.prototype.exitRule=function(listener){if(listener instanceof VtlListener){listener.exitRetainType(this);}};RetainTypeContext.prototype.accept=function(visitor){if(visitor instanceof VtlVisitor){return visitor.visitRetainType(this);}else{return visitor.visitChildren(this);}};VtlParser.RetainTypeContext=RetainTypeContext;VtlParser.prototype.retainType=function(){var localctx=new RetainTypeContext(this,this._ctx,this.state);this.enterRule(localctx,192,VtlParser.RULE_retainType);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1801;_la=this._input.LA(1);if(!(_la===VtlParser.ALL||_la===VtlParser.BOOLEAN_CONSTANT)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof antlr4.error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;};VtlParser.prototype.sempred=function(localctx,ruleIndex,predIndex){switch(ruleIndex){case 2:return this.expr_sempred(localctx,predIndex);default:throw\"No predicate with index:\"+ruleIndex;}};VtlParser.prototype.expr_sempred=function(localctx,predIndex){switch(predIndex){case 0:return this.precpred(this._ctx,10);case 1:return this.precpred(this._ctx,9);case 2:return this.precpred(this._ctx,8);case 3:return this.precpred(this._ctx,7);case 4:return this.precpred(this._ctx,5);case 5:return this.precpred(this._ctx,4);case 6:return this.precpred(this._ctx,15);case 7:return this.precpred(this._ctx,14);case 8:return this.precpred(this._ctx,6);default:throw\"No predicate with index:\"+predIndex;}};exports.VtlParser=VtlParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlParser.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlVisitor.js":
/*!****************************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlVisitor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Generated from vtl-sources/Vtl-2.0-Insee/Vtl.g4 by ANTLR 4.7.2\n// jshint ignore: start\nvar antlr4 = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/index.js\"); // This class defines a complete generic visitor for a parse tree produced by VtlParser.\n\n\nfunction VtlVisitor() {\n  antlr4.tree.ParseTreeVisitor.call(this);\n  return this;\n}\n\nVtlVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);\nVtlVisitor.prototype.constructor = VtlVisitor; // Visit a parse tree produced by VtlParser#start.\n\nVtlVisitor.prototype.visitStart = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#temporaryAssignment.\n\n\nVtlVisitor.prototype.visitTemporaryAssignment = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#persistAssignment.\n\n\nVtlVisitor.prototype.visitPersistAssignment = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#defineExpression.\n\n\nVtlVisitor.prototype.visitDefineExpression = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varIdExpr.\n\n\nVtlVisitor.prototype.visitVarIdExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#membershipExpr.\n\n\nVtlVisitor.prototype.visitMembershipExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#inNotInExpr.\n\n\nVtlVisitor.prototype.visitInNotInExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#booleanExpr.\n\n\nVtlVisitor.prototype.visitBooleanExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#comparisonExpr.\n\n\nVtlVisitor.prototype.visitComparisonExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#concatExpr.\n\n\nVtlVisitor.prototype.visitConcatExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#unaryExpr.\n\n\nVtlVisitor.prototype.visitUnaryExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#notExpr.\n\n\nVtlVisitor.prototype.visitNotExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#functionsExpression.\n\n\nVtlVisitor.prototype.visitFunctionsExpression = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ifExpr.\n\n\nVtlVisitor.prototype.visitIfExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#clauseExpr.\n\n\nVtlVisitor.prototype.visitClauseExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#arithmeticExpr.\n\n\nVtlVisitor.prototype.visitArithmeticExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#parenthesisExpr.\n\n\nVtlVisitor.prototype.visitParenthesisExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#constantExpr.\n\n\nVtlVisitor.prototype.visitConstantExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinFunctions.\n\n\nVtlVisitor.prototype.visitJoinFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#genericFunctions.\n\n\nVtlVisitor.prototype.visitGenericFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stringFunctions.\n\n\nVtlVisitor.prototype.visitStringFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#numericFunctions.\n\n\nVtlVisitor.prototype.visitNumericFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#comparisonFunctions.\n\n\nVtlVisitor.prototype.visitComparisonFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#timeFunctions.\n\n\nVtlVisitor.prototype.visitTimeFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#setFunctions.\n\n\nVtlVisitor.prototype.visitSetFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hierarchyFunctions.\n\n\nVtlVisitor.prototype.visitHierarchyFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validationFunctions.\n\n\nVtlVisitor.prototype.visitValidationFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#conditionalFunctions.\n\n\nVtlVisitor.prototype.visitConditionalFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#aggregateFunctions.\n\n\nVtlVisitor.prototype.visitAggregateFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#analyticFunctions.\n\n\nVtlVisitor.prototype.visitAnalyticFunctions = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#datasetClause.\n\n\nVtlVisitor.prototype.visitDatasetClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#renameClause.\n\n\nVtlVisitor.prototype.visitRenameClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#aggrClause.\n\n\nVtlVisitor.prototype.visitAggrClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#filterClause.\n\n\nVtlVisitor.prototype.visitFilterClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#calcClause.\n\n\nVtlVisitor.prototype.visitCalcClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#keepClause.\n\n\nVtlVisitor.prototype.visitKeepClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#dropClause.\n\n\nVtlVisitor.prototype.visitDropClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#pivotClause.\n\n\nVtlVisitor.prototype.visitPivotClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#customPivotClause.\n\n\nVtlVisitor.prototype.visitCustomPivotClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#unipivotClause.\n\n\nVtlVisitor.prototype.visitUnipivotClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#subspaceClause.\n\n\nVtlVisitor.prototype.visitSubspaceClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinExpr.\n\n\nVtlVisitor.prototype.visitJoinExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#defOperator.\n\n\nVtlVisitor.prototype.visitDefOperator = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#defDatapointRuleset.\n\n\nVtlVisitor.prototype.visitDefDatapointRuleset = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#defHierarchical.\n\n\nVtlVisitor.prototype.visitDefHierarchical = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#callFunctionAtom.\n\n\nVtlVisitor.prototype.visitCallFunctionAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#evalAtom.\n\n\nVtlVisitor.prototype.visitEvalAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#castExpr.\n\n\nVtlVisitor.prototype.visitCastExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#parameter.\n\n\nVtlVisitor.prototype.visitParameter = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#trimAtom.\n\n\nVtlVisitor.prototype.visitTrimAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ltrimAtom.\n\n\nVtlVisitor.prototype.visitLtrimAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rtrimAtom.\n\n\nVtlVisitor.prototype.visitRtrimAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ucaseAtom.\n\n\nVtlVisitor.prototype.visitUcaseAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lcaseAtom.\n\n\nVtlVisitor.prototype.visitLcaseAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#substrAtom.\n\n\nVtlVisitor.prototype.visitSubstrAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#replaceAtom.\n\n\nVtlVisitor.prototype.visitReplaceAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#instrAtom.\n\n\nVtlVisitor.prototype.visitInstrAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lenAtom.\n\n\nVtlVisitor.prototype.visitLenAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#modAtom.\n\n\nVtlVisitor.prototype.visitModAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#roundAtom.\n\n\nVtlVisitor.prototype.visitRoundAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lnAtom.\n\n\nVtlVisitor.prototype.visitLnAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ceilAtom.\n\n\nVtlVisitor.prototype.visitCeilAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#floorAtom.\n\n\nVtlVisitor.prototype.visitFloorAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#minAtom.\n\n\nVtlVisitor.prototype.visitMinAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#expAtom.\n\n\nVtlVisitor.prototype.visitExpAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#powerAtom.\n\n\nVtlVisitor.prototype.visitPowerAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#logAtom.\n\n\nVtlVisitor.prototype.visitLogAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#sqrtAtom.\n\n\nVtlVisitor.prototype.visitSqrtAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#betweenAtom.\n\n\nVtlVisitor.prototype.visitBetweenAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#charsetMatchAtom.\n\n\nVtlVisitor.prototype.visitCharsetMatchAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#isNullAtom.\n\n\nVtlVisitor.prototype.visitIsNullAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#existInAtom.\n\n\nVtlVisitor.prototype.visitExistInAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#periodAtom.\n\n\nVtlVisitor.prototype.visitPeriodAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#fillTimeAtom.\n\n\nVtlVisitor.prototype.visitFillTimeAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#flowToStockAtom.\n\n\nVtlVisitor.prototype.visitFlowToStockAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stockToFlowAtom.\n\n\nVtlVisitor.prototype.visitStockToFlowAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#timeShiftAtom.\n\n\nVtlVisitor.prototype.visitTimeShiftAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#timeAggAtom.\n\n\nVtlVisitor.prototype.visitTimeAggAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#currentDateAtom.\n\n\nVtlVisitor.prototype.visitCurrentDateAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#unionAtom.\n\n\nVtlVisitor.prototype.visitUnionAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#intersectAtom.\n\n\nVtlVisitor.prototype.visitIntersectAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#setDiffAtom.\n\n\nVtlVisitor.prototype.visitSetDiffAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#symDiffAtom.\n\n\nVtlVisitor.prototype.visitSymDiffAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hierarchyOperators.\n\n\nVtlVisitor.prototype.visitHierarchyOperators = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validateDPruleset.\n\n\nVtlVisitor.prototype.visitValidateDPruleset = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validateHRruleset.\n\n\nVtlVisitor.prototype.visitValidateHRruleset = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validationSimple.\n\n\nVtlVisitor.prototype.visitValidationSimple = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#nvlAtom.\n\n\nVtlVisitor.prototype.visitNvlAtom = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#sumAggrComp.\n\n\nVtlVisitor.prototype.visitSumAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#avgAggrComp.\n\n\nVtlVisitor.prototype.visitAvgAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#countAggrComp.\n\n\nVtlVisitor.prototype.visitCountAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#medianAggrComp.\n\n\nVtlVisitor.prototype.visitMedianAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#minAggrComp.\n\n\nVtlVisitor.prototype.visitMinAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#maxAggrComp.\n\n\nVtlVisitor.prototype.visitMaxAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevPopAggrComp.\n\n\nVtlVisitor.prototype.visitStddevPopAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevSampAggrComp.\n\n\nVtlVisitor.prototype.visitStddevSampAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varPopAggrComp.\n\n\nVtlVisitor.prototype.visitVarPopAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varSampAggrComp.\n\n\nVtlVisitor.prototype.visitVarSampAggrComp = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#sumAggr.\n\n\nVtlVisitor.prototype.visitSumAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#avgAggr.\n\n\nVtlVisitor.prototype.visitAvgAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#countAggr.\n\n\nVtlVisitor.prototype.visitCountAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#medianAggr.\n\n\nVtlVisitor.prototype.visitMedianAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#minAggr.\n\n\nVtlVisitor.prototype.visitMinAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#maxAggr.\n\n\nVtlVisitor.prototype.visitMaxAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevPopAggr.\n\n\nVtlVisitor.prototype.visitStddevPopAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevSampAggr.\n\n\nVtlVisitor.prototype.visitStddevSampAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varPopAggr.\n\n\nVtlVisitor.prototype.visitVarPopAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varSampAggr.\n\n\nVtlVisitor.prototype.visitVarSampAggr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#sumAn.\n\n\nVtlVisitor.prototype.visitSumAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#avgAn.\n\n\nVtlVisitor.prototype.visitAvgAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#countAn.\n\n\nVtlVisitor.prototype.visitCountAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#medianAn.\n\n\nVtlVisitor.prototype.visitMedianAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#minAn.\n\n\nVtlVisitor.prototype.visitMinAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#maxAn.\n\n\nVtlVisitor.prototype.visitMaxAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevPopAn.\n\n\nVtlVisitor.prototype.visitStddevPopAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#stddevSampAn.\n\n\nVtlVisitor.prototype.visitStddevSampAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varPopAn.\n\n\nVtlVisitor.prototype.visitVarPopAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varSampAn.\n\n\nVtlVisitor.prototype.visitVarSampAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#firstValueAn.\n\n\nVtlVisitor.prototype.visitFirstValueAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lastValueAn.\n\n\nVtlVisitor.prototype.visitLastValueAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lagAn.\n\n\nVtlVisitor.prototype.visitLagAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#leadAn.\n\n\nVtlVisitor.prototype.visitLeadAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rankAn.\n\n\nVtlVisitor.prototype.visitRankAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ratioToReportAn.\n\n\nVtlVisitor.prototype.visitRatioToReportAn = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#renameClauseItem.\n\n\nVtlVisitor.prototype.visitRenameClauseItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#componentMembership.\n\n\nVtlVisitor.prototype.visitComponentMembership = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#component.\n\n\nVtlVisitor.prototype.visitComponent = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#aggregateClause.\n\n\nVtlVisitor.prototype.visitAggregateClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#aggrFunctionClause.\n\n\nVtlVisitor.prototype.visitAggrFunctionClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#calcClauseItem.\n\n\nVtlVisitor.prototype.visitCalcClauseItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#subspaceClauseItem.\n\n\nVtlVisitor.prototype.visitSubspaceClauseItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinClauseWithoutUsing.\n\n\nVtlVisitor.prototype.visitJoinClauseWithoutUsing = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinClause.\n\n\nVtlVisitor.prototype.visitJoinClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinClauseItem.\n\n\nVtlVisitor.prototype.visitJoinClauseItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinBody.\n\n\nVtlVisitor.prototype.visitJoinBody = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#joinApplyClause.\n\n\nVtlVisitor.prototype.visitJoinApplyClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#partitionByClause.\n\n\nVtlVisitor.prototype.visitPartitionByClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#orderByClause.\n\n\nVtlVisitor.prototype.visitOrderByClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#orderByItem.\n\n\nVtlVisitor.prototype.visitOrderByItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#windowingClause.\n\n\nVtlVisitor.prototype.visitWindowingClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#limitClauseItem.\n\n\nVtlVisitor.prototype.visitLimitClauseItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#groupByOrExcept.\n\n\nVtlVisitor.prototype.visitGroupByOrExcept = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#groupAll.\n\n\nVtlVisitor.prototype.visitGroupAll = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#havingClause.\n\n\nVtlVisitor.prototype.visitHavingClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#parameterItem.\n\n\nVtlVisitor.prototype.visitParameterItem = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#outputParameterType.\n\n\nVtlVisitor.prototype.visitOutputParameterType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#inputParameterType.\n\n\nVtlVisitor.prototype.visitInputParameterType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rulesetType.\n\n\nVtlVisitor.prototype.visitRulesetType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#scalarType.\n\n\nVtlVisitor.prototype.visitScalarType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#componentType.\n\n\nVtlVisitor.prototype.visitComponentType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#datasetType.\n\n\nVtlVisitor.prototype.visitDatasetType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#scalarSetType.\n\n\nVtlVisitor.prototype.visitScalarSetType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#dataPoint.\n\n\nVtlVisitor.prototype.visitDataPoint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#dataPointVd.\n\n\nVtlVisitor.prototype.visitDataPointVd = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#dataPointVar.\n\n\nVtlVisitor.prototype.visitDataPointVar = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hrRulesetType.\n\n\nVtlVisitor.prototype.visitHrRulesetType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hrRulesetVdType.\n\n\nVtlVisitor.prototype.visitHrRulesetVdType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hrRulesetVarType.\n\n\nVtlVisitor.prototype.visitHrRulesetVarType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#valueDomainName.\n\n\nVtlVisitor.prototype.visitValueDomainName = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rulesetID.\n\n\nVtlVisitor.prototype.visitRulesetID = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rulesetSignature.\n\n\nVtlVisitor.prototype.visitRulesetSignature = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#signature.\n\n\nVtlVisitor.prototype.visitSignature = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ruleClauseDatapoint.\n\n\nVtlVisitor.prototype.visitRuleClauseDatapoint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ruleItemDatapoint.\n\n\nVtlVisitor.prototype.visitRuleItemDatapoint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ruleClauseHierarchical.\n\n\nVtlVisitor.prototype.visitRuleClauseHierarchical = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#ruleItemHierarchical.\n\n\nVtlVisitor.prototype.visitRuleItemHierarchical = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#hierRuleSignature.\n\n\nVtlVisitor.prototype.visitHierRuleSignature = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#valueDomainSignature.\n\n\nVtlVisitor.prototype.visitValueDomainSignature = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#codeItemRelation.\n\n\nVtlVisitor.prototype.visitCodeItemRelation = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#codeItemRelationClause.\n\n\nVtlVisitor.prototype.visitCodeItemRelationClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#conditionConstraint.\n\n\nVtlVisitor.prototype.visitConditionConstraint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#rangeConstraint.\n\n\nVtlVisitor.prototype.visitRangeConstraint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#compConstraint.\n\n\nVtlVisitor.prototype.visitCompConstraint = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#multModifier.\n\n\nVtlVisitor.prototype.visitMultModifier = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validationOutput.\n\n\nVtlVisitor.prototype.visitValidationOutput = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#validationMode.\n\n\nVtlVisitor.prototype.visitValidationMode = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#conditionClause.\n\n\nVtlVisitor.prototype.visitConditionClause = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#inputMode.\n\n\nVtlVisitor.prototype.visitInputMode = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#imbalanceExpr.\n\n\nVtlVisitor.prototype.visitImbalanceExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#inputModeHierarchy.\n\n\nVtlVisitor.prototype.visitInputModeHierarchy = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#outputModeHierarchy.\n\n\nVtlVisitor.prototype.visitOutputModeHierarchy = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#alias.\n\n\nVtlVisitor.prototype.visitAlias = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#varID.\n\n\nVtlVisitor.prototype.visitVarID = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#componentID.\n\n\nVtlVisitor.prototype.visitComponentID = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#lists.\n\n\nVtlVisitor.prototype.visitLists = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#erCode.\n\n\nVtlVisitor.prototype.visitErCode = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#erLevel.\n\n\nVtlVisitor.prototype.visitErLevel = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#comparisonOperand.\n\n\nVtlVisitor.prototype.visitComparisonOperand = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#optionalExpr.\n\n\nVtlVisitor.prototype.visitOptionalExpr = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#componentRole.\n\n\nVtlVisitor.prototype.visitComponentRole = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#viralAttribute.\n\n\nVtlVisitor.prototype.visitViralAttribute = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#valueDomainID.\n\n\nVtlVisitor.prototype.visitValueDomainID = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#operatorID.\n\n\nVtlVisitor.prototype.visitOperatorID = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#routineName.\n\n\nVtlVisitor.prototype.visitRoutineName = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#groupKeyword.\n\n\nVtlVisitor.prototype.visitGroupKeyword = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#constant.\n\n\nVtlVisitor.prototype.visitConstant = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#basicScalarType.\n\n\nVtlVisitor.prototype.visitBasicScalarType = function (ctx) {\n  return this.visitChildren(ctx);\n}; // Visit a parse tree produced by VtlParser#retainType.\n\n\nVtlVisitor.prototype.visitRetainType = function (ctx) {\n  return this.visitChildren(ctx);\n};\n\nexports.VtlVisitor = VtlVisitor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlVisitor.js\n");

/***/ }),

/***/ "./src/antlr-tools/vtl-2.0-Insee/parser-vtl/index.js":
/*!***********************************************************!*\
  !*** ./src/antlr-tools/vtl-2.0-Insee/parser-vtl/index.js ***!
  \***********************************************************/
/*! exports provided: VtlLexer, VtlParser, VtlListener, VtlVisitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _VtlLexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./VtlLexer */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlLexer.js\");\n/* harmony import */ var _VtlLexer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_VtlLexer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VtlLexer\", function() { return _VtlLexer__WEBPACK_IMPORTED_MODULE_0__[\"VtlLexer\"]; });\n\n/* harmony import */ var _VtlParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./VtlParser */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlParser.js\");\n/* harmony import */ var _VtlParser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_VtlParser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VtlParser\", function() { return _VtlParser__WEBPACK_IMPORTED_MODULE_1__[\"VtlParser\"]; });\n\n/* harmony import */ var _VtlListener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./VtlListener */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlListener.js\");\n/* harmony import */ var _VtlListener__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_VtlListener__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VtlListener\", function() { return _VtlListener__WEBPACK_IMPORTED_MODULE_2__[\"VtlListener\"]; });\n\n/* harmony import */ var _VtlVisitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VtlVisitor */ \"./src/antlr-tools/vtl-2.0-Insee/parser-vtl/VtlVisitor.js\");\n/* harmony import */ var _VtlVisitor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_VtlVisitor__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VtlVisitor\", function() { return _VtlVisitor__WEBPACK_IMPORTED_MODULE_3__[\"VtlVisitor\"]; });\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYW50bHItdG9vbHMvdnRsLTIuMC1JbnNlZS9wYXJzZXItdnRsL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FudGxyLXRvb2xzL3Z0bC0yLjAtSW5zZWUvcGFyc2VyLXZ0bC9pbmRleC5qcz9mZWRlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IFZ0bExleGVyIH0gZnJvbSAnLi9WdGxMZXhlcic7XHJcbmV4cG9ydCB7IFZ0bFBhcnNlciB9IGZyb20gJy4vVnRsUGFyc2VyJztcclxuZXhwb3J0IHsgVnRsTGlzdGVuZXIgfSBmcm9tICcuL1Z0bExpc3RlbmVyJztcclxuZXhwb3J0IHsgVnRsVmlzaXRvciB9IGZyb20gJy4vVnRsVmlzaXRvcic7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/antlr-tools/vtl-2.0-Insee/parser-vtl/index.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _antlr_tools_vtl_2_0_Insee__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./antlr-tools/vtl-2.0-Insee */ \"./src/antlr-tools/vtl-2.0-Insee/index.js\");\n/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tools */ \"./src/tools.js\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\"use strict\";\n\nvar antlr4 = __webpack_require__(/*! antlr4/index */ \"./node_modules/antlr4/index.js\");\n\n(function () {\n  onmessage = function onmessage(e) {\n    var _e$data = e.data,\n        action = _e$data.action,\n        content = _e$data.content,\n        root = _e$data.root,\n        id = _e$data.id;\n\n    if (action && content) {\n      switch (action) {\n        case \"tokenize\":\n          postMessage({\n            tokens: Object(_tools__WEBPACK_IMPORTED_MODULE_1__[\"fillUnmappedToken\"])(content, _antlr_tools_vtl_2_0_Insee__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTokens(content)),\n            id: id\n          });\n          break;\n\n        case \"parse\":\n          postMessage(_objectSpread({}, _antlr_tools_vtl_2_0_Insee__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(content, root), {\n            id: id\n          }));\n\n        default:\n      }\n    }\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdnRsIGZyb20gXCIuL2FudGxyLXRvb2xzL3Z0bC0yLjAtSW5zZWVcIjtcclxuaW1wb3J0IHsgZmlsbFVubWFwcGVkVG9rZW4gfSBmcm9tIFwiLi90b29sc1wiO1xyXG5cclxuKFwidXNlIHN0cmljdFwiKTtcclxuY29uc3QgYW50bHI0ID0gcmVxdWlyZShcImFudGxyNC9pbmRleFwiKTtcclxuKGZ1bmN0aW9uKCkge1xyXG4gIG9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgIGNvbnN0IHsgYWN0aW9uLCBjb250ZW50LCByb290LCBpZCB9ID0gZS5kYXRhO1xyXG4gICAgaWYgKGFjdGlvbiAmJiBjb250ZW50KSB7XHJcbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBcInRva2VuaXplXCI6XHJcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHRva2VuczogZmlsbFVubWFwcGVkVG9rZW4oY29udGVudCwgdnRsLmdldFRva2Vucyhjb250ZW50KSksXHJcbiAgICAgICAgICAgIGlkXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJwYXJzZVwiOlxyXG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyAuLi52dGwucGFyc2UoY29udGVudCwgcm9vdCksIGlkIH0pO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59KSgpO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFUQTtBQVdBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/tools.js":
/*!**********************!*\
  !*** ./src/tools.js ***!
  \**********************/
/*! exports provided: fillUnmappedToken */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fillUnmappedToken\", function() { return fillUnmappedToken; });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction createUnmappedToken(start, stop, value) {\n  return {\n    start: start,\n    stop: stop,\n    value: value.substr(start, stop - start + 1),\n    className: \"vtl-unmapped\",\n    name: \"UNMAPPED\"\n  };\n}\n/* */\n\n\nfunction fillUnmappedToken() {\n  var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (typeof source === \"string\" || Array.isArray(tokens)) {\n    if (tokens.length === 0 && source.length > 0) {\n      return [createUnmappedToken(0, source.length - 1, source)];\n    }\n\n    var _tokens$reduce = tokens.reduce(function (_ref, t) {\n      var toks = _ref.toks,\n          pos = _ref.pos;\n      var start = t.start,\n          stop = t.stop;\n\n      if (start !== pos) {\n        return {\n          toks: [].concat(_toConsumableArray(toks), [createUnmappedToken(pos, start - 1, source), t]),\n          pos: stop\n        };\n      }\n\n      return {\n        toks: [].concat(_toConsumableArray(toks), [t]),\n        pos: stop + 1\n      };\n    }, {\n      toks: [],\n      pos: 0\n    }),\n        toks = _tokens$reduce.toks;\n\n    return toks;\n  }\n\n  return [];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdG9vbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdG9vbHMuanM/ODNhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjcmVhdGVVbm1hcHBlZFRva2VuKHN0YXJ0LCBzdG9wLCB2YWx1ZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzdGFydCxcclxuICAgIHN0b3AsXHJcbiAgICB2YWx1ZTogdmFsdWUuc3Vic3RyKHN0YXJ0LCBzdG9wIC0gc3RhcnQgKyAxKSxcclxuICAgIGNsYXNzTmFtZTogXCJ2dGwtdW5tYXBwZWRcIixcclxuICAgIG5hbWU6IFwiVU5NQVBQRURcIlxyXG4gIH07XHJcbn1cclxuXHJcbi8qICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxsVW5tYXBwZWRUb2tlbihzb3VyY2UgPSBcIlwiLCB0b2tlbnMgPSBbXSkge1xyXG4gIGlmICh0eXBlb2Ygc291cmNlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkodG9rZW5zKSkge1xyXG4gICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDAgJiYgc291cmNlLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIFtjcmVhdGVVbm1hcHBlZFRva2VuKDAsIHNvdXJjZS5sZW5ndGggLSAxLCBzb3VyY2UpXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHRva3MgfSA9IHRva2Vucy5yZWR1Y2UoXHJcbiAgICAgICh7IHRva3MsIHBvcyB9LCB0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBzdGFydCwgc3RvcCB9ID0gdDtcclxuICAgICAgICBpZiAoc3RhcnQgIT09IHBvcykge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9rczogWy4uLnRva3MsIGNyZWF0ZVVubWFwcGVkVG9rZW4ocG9zLCBzdGFydCAtIDEsIHNvdXJjZSksIHRdLFxyXG4gICAgICAgICAgICBwb3M6IHN0b3BcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyB0b2tzOiBbLi4udG9rcywgdF0sIHBvczogc3RvcCArIDEgfTtcclxuICAgICAgfSxcclxuICAgICAgeyB0b2tzOiBbXSwgcG9zOiAwIH1cclxuICAgICk7XHJcbiAgICByZXR1cm4gdG9rcztcclxuICB9XHJcbiAgcmV0dXJuIFtdO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQURBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQWpCQTtBQUNBO0FBa0JBO0FBQ0E7QUFDQTtBQUFBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/tools.js\n");

/***/ })

/******/ });